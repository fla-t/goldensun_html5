!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=21)}([function(t,e,i){"use strict";i.r(e),i.d(e,"elements",(function(){return a})),i.d(e,"ordered_elements",(function(){return n})),i.d(e,"element_names",(function(){return o})),i.d(e,"directions",(function(){return r})),i.d(e,"directions_count",(function(){return h})),i.d(e,"reverse_directions",(function(){return c})),i.d(e,"base_actions",(function(){return d})),i.d(e,"directions_angles",(function(){return l})),i.d(e,"map_directions",(function(){return p})),i.d(e,"split_direction",(function(){return u})),i.d(e,"join_directions",(function(){return g})),i.d(e,"variation",(function(){return m})),i.d(e,"range_360",(function(){return b})),i.d(e,"is_inside_sector",(function(){return w})),i.d(e,"is_close",(function(){return y})),i.d(e,"transitions",(function(){return f})),i.d(e,"get_opposite_direction",(function(){return x})),i.d(e,"get_transition_directions",(function(){return v})),i.d(e,"get_text_width",(function(){return E})),i.d(e,"get_surroundings",(function(){return k})),i.d(e,"get_directions",(function(){return j})),i.d(e,"capitalize",(function(){return T})),i.d(e,"change_brightness",(function(){return A})),i.d(e,"rgb2hsv",(function(){return S})),i.d(e,"hsv2rgb",(function(){return I})),i.d(e,"mount_collision_polygon",(function(){return O}));var s=i(1);const a={VENUS:"venus",MERCURY:"mercury",MARS:"mars",JUPITER:"jupiter",NO_ELEMENT:"no_element"},n=[a.VENUS,a.MERCURY,a.MARS,a.JUPITER],o={[a.VENUS]:"Earth",[a.MERCURY]:"Water",[a.MARS]:"Fire",[a.JUPITER]:"Wind"},r={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},h=Object.keys(r).length,c={[r.right]:"right",[r.up_right]:"up_right",[r.up]:"up",[r.up_left]:"up_left",[r.left]:"left",[r.down_left]:"down_left",[r.down]:"down",[r.down_right]:"down_right"},d={IDLE:"idle",WALK:"walk",DASH:"dash",PUSH:"push",CLIMB:"climb",CAST:"cast"};function l(t){return t*Math.PI/4}function p(t){return void 0===t?t:(t=Array.isArray(t)?t:[t]).map(t=>r[t])}function u(t){if(t%2==0)return[t];let e=new Array(2);return e[0]=t===r.right?t.up_right:t-1,e[1]=t===r.up_right?r.right:t+1,e}function g(t,e){return e=t===r.up&&e===r.right?h:e,Math.min(t,e)+1}function m(){return _.random(0,4)}function b(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function w(t,e,i,a,n,_,o){const r=e*i*(e*i),h=Math.pow(_-a,2)+Math.pow(o-n,2),c=b(Math.atan2(n-o,_-a)),d=[0,s.degree90,Math.PI,s.degree270,s.degree360];let l=!1;for(let e=0;e<t.length;++e){let i=t[e],s=d[i-1];if(l=d[i]>=c&&c>=s,l)break}return h<=r&&l}function y(t,e,i,a,n,_){switch(t){case r.up:return w([1,2],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.up_right:return w([1],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.right:return w([1,4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down_right:return w([4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down:return w([3,4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down_left:return w([3],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.left:return w([2,3],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.up_left:return w([2],s.HERO_BODY_RADIUS,_,e,i,a,n)}}const f={[r.up]:{[r.up]:r.up,[r.down]:r.down_left,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.up},[r.down]:{[r.up]:r.up_left,[r.down]:r.down,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.right},[r.left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.up},[r.right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.down_left,[r.right]:r.right,[r.down_left]:r.down,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.right},[r.down_left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down_left,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.up},[r.down_right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down,[r.down_right]:r.down_right,[r.up_left]:r.left,[r.up_right]:r.right},[r.up_left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up_left,[r.up_right]:r.up},[r.up_right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.up_right}};function x(t){switch(t){case r.up:return r.down;case r.down:return r.up;case r.left:return r.right;case r.right:return r.left}}function v(t,e){return f[e][t]}function E(t,e,i=!1){const a=i?"gs-italic-bmp-font":"gs-bmp-font";let n=t.add.bitmapText(0,0,a,e,s.FONT_SIZE);const _=n.width;return n.destroy(),_}function k(t,e,i=!1,s=1){let a=[{x:t-s,y:e,diag:!1,direction:r.left},{x:t+s,y:e,diag:!1,direction:r.right},{x:t,y:e-s,diag:!1,direction:r.up},{x:t,y:e+s,diag:!1,direction:r.down}];return i&&(a=a.concat([{x:t-s,y:e-s,diag:!0,direction:r.up_left},{x:t+s,y:e-s,diag:!0,direction:r.up_right},{x:t-s,y:e+s,diag:!0,direction:r.down_left},{x:t+s,y:e+s,diag:!0,direction:r.down_right}])),a}function j(t=!1){let e=[r.up,r.down,r.left,r.right];return t&&e.push(r.up_left,r.up_right,r.down_left,r.down_right),e}function T(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())}function A(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,a,n=parseInt(t.substr(0,2),16),_=parseInt(t.substr(2,2),16),o=parseInt(t.substr(4,2),16);return[i,s,a]=S(n,_,o),a=a*e|0,[n,_,o]=I(i,s,a),t=((1<<24)+(n<<16)+(_<<8)+o).toString(16).slice(1),parseInt(t,16)}function S(t,e,i){let s=Math.max(t,e,i),a=s-Math.min(t,e,i),n=a&&(s===t?(e-i)/a:s===e?2+(i-t)/a:4+(t-e)/a);return[60*(n<0?n+6:n),s&&a/s,s]}function I(t,e,i){let s=(s,a=(s+t/60)%6)=>i-i*e*Math.max(Math.min(a,4-a,1),0);return[s(5),s(3),s(1)]}function O(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";i.r(e),i.d(e,"GAME_WIDTH",(function(){return s})),i.d(e,"GAME_HEIGHT",(function(){return a})),i.d(e,"TARGET_FPS",(function(){return n})),i.d(e,"HERO_BODY_RADIUS",(function(){return _})),i.d(e,"INV_SQRT2",(function(){return o})),i.d(e,"DELTA_TIME_FACTOR",(function(){return r})),i.d(e,"MAP_DAMPING",(function(){return h})),i.d(e,"DEFAULT_WINDOW_COLOR",(function(){return c})),i.d(e,"DEFAULT_FONT_COLOR",(function(){return d})),i.d(e,"YELLOW_FONT_COLOR",(function(){return l})),i.d(e,"RED_FONT_COLOR",(function(){return p})),i.d(e,"BLUE_FONT_COLOR",(function(){return u})),i.d(e,"PURPLE_FONT_COLOR",(function(){return g})),i.d(e,"FONT_SIZE",(function(){return m})),i.d(e,"INSIDE_BORDER_WIDTH",(function(){return b})),i.d(e,"OUTSIDE_BORDER_WIDTH",(function(){return w})),i.d(e,"WINDOW_PADDING_H",(function(){return y})),i.d(e,"WINDOW_PADDING_TOP",(function(){return f})),i.d(e,"WINDOW_PADDING_BOTTOM",(function(){return x})),i.d(e,"SPACE_BETWEEN_LINES",(function(){return v})),i.d(e,"MAX_DIAG_WIN_WIDTH",(function(){return E})),i.d(e,"MAX_LINES_PER_DIAG_WIN",(function(){return k})),i.d(e,"MAX_DIAG_WIN_HEIGHT",(function(){return j})),i.d(e,"PUSH_TIME",(function(){return T})),i.d(e,"ICON_WIDTH",(function(){return A})),i.d(e,"ICON_HEIGHT",(function(){return S})),i.d(e,"degree15",(function(){return I})),i.d(e,"degree30",(function(){return O})),i.d(e,"degree60",(function(){return P})),i.d(e,"degree90",(function(){return N})),i.d(e,"degree180",(function(){return R})),i.d(e,"degree270",(function(){return D})),i.d(e,"degree360",(function(){return M})),i.d(e,"degree540",(function(){return L})),i.d(e,"CAMERA_LERP",(function(){return q})),i.d(e,"ELEM_ATTR_MIN",(function(){return C})),i.d(e,"ELEM_ATTR_MAX",(function(){return H})),i.d(e,"AVATAR_SIZE",(function(){return U}));const s=240,a=160,n=60,_=7,o=1/Math.sqrt(2),r=50/3,h=1,c=24704,d=16316664,l=16316480,p=16252928,u=248,g=14708912,m=8,b=3,w=1,y=4,f=8,x=4,v=5,E=180,k=3,j=m*k+v*(k-1)+f+x,T=850,A=14,S=14,I=15*Math.PI/180,O=30*Math.PI/180,P=60*Math.PI/180,N=Math.PI/2,R=Math.PI,D=3*Math.PI/2,M=2*Math.PI,L=3*Math.PI,q=.15,C=-200,H=200,U=32},function(t,e,i){"use strict";i.d(e,"e",(function(){return a})),i.d(e,"c",(function(){return _})),i.d(e,"d",(function(){return o})),i.d(e,"f",(function(){return r})),i.d(e,"b",(function(){return h})),i.d(e,"a",(function(){return c}));var s=i(0);const a={MAX_HP:"max_hp",MAX_PP:"max_pp",ATTACK:"attack",DEFENSE:"defense",AGILITY:"agility",LUCK:"luck",POWER:"power",RESIST:"resist",CURRENT_HP:"current_hp",CURRENT_PP:"current_pp",HP_RECOVERY:"hp_recovery",PP_RECOVERY:"pp_recovery",CRITICALS:"criticals",COUNTER_STRIKE:"counter_strike",TEMPORARY_STATUS:"temporary_status",PERMANENT_STATUS:"permanent_status",TURNS:"turns",ENCOUNTERS:"encounters",FLEE:"flee",END_THE_ROUND:"end_the_round",ABILITY_POWER:"ability_power",SET_DJINN:"set_djinn",DAMAGE_MODIFIER:"damage_modifier",DAMAGE_INPUT:"damage_input"},n={[a.MAX_HP]:"max_hp",[a.MAX_PP]:"max_pp",[a.ATTACK]:"atk",[a.DEFENSE]:"def",[a.AGILITY]:"agi",[a.LUCK]:"luk",[a.CURRENT_HP]:"current_hp",[a.CURRENT_PP]:"current_pp"},_={[a.MAX_HP]:"HP",[a.MAX_PP]:"PP",[a.ATTACK]:"Attack",[a.DEFENSE]:"Defense",[a.AGILITY]:"Agility",[a.LUCK]:"Luck",[a.POWER]:"Power",[a.RESIST]:"Resist"},o={PLUS:"plus",MINUS:"minus",TIMES:"times",DIVIDE:"divide"},r={NOT_APPLY:"not_apply",ON_USE:"on_use",ON_TAKE:"on_take",BATTLE_ROUND_START:"battle_round_start",BATTLE_ROUND_END:"battle_round_end",PLAYER_TURN_START:"player_turn_start",PLAYER_TURN_END:"player_turn_end"},h={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class c{constructor(t,e,i,a,n,_,o,h,c,d,l,p,u,g,m,b,w,y,f,x){this.type=t,this.quantity=e,this.operator=i,this.effect_owner_instance=a,this.quantity_is_absolute=void 0!==n&&n,this.rate=void 0===_?1:_,this.chance=void 0===o?1:o,this.attribute=void 0===h?s.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=d,this.turns_quantity=l,this.turn_count=l,this.variation_on_final_result=void 0!==p&&p,this.damage_formula_key_name=u,this.usage=void 0===g?r.NOT_APPLY:g,this.on_caster=void 0!==m&&m,this.relative_to_property=b,this.effect_msg=y,this.show_msg=void 0===f||f,this.char=x,this.sub_effect=w,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,e,i){switch(i){case o.PLUS:return t+e;case o.MINUS:return t-e;case o.TIMES:return t*e;case o.DIVIDE:return t/e}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?s.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?r.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let a;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),a=this.quantity;else{let i,n=this.quantity;n*=this.rate,this.variation_on_final_result&&(n+=Object(s.variation)()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const _=0|c.apply_operator(i,n,this.operator);void 0!==t&&(this.char[t]=_),a=_}return{before:i,after:a}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=Object(s.variation)()),this.char[t]=0|c.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,c.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case a.MAX_HP:case a.MAX_PP:case a.ATTACK:case a.DEFENSE:case a.AGILITY:case a.LUCK:return this.apply_general_value(n[this.type]);case a.HP_RECOVERY:return this.apply_general_value("hp_recovery");case a.PP_RECOVERY:return this.apply_general_value("pp_recovery");case a.CURRENT_HP:const e=this.apply_general_value("current_hp");return this.check_caps("current_hp","max_hp",0,e),e;case a.CURRENT_PP:const i=this.apply_general_value("current_pp");return this.check_caps("current_pp","max_pp",0,i),i;case a.POWER:return this.apply_general_value(this.attribute+"_power_current");case a.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case a.TURNS:return this.turn_count=1,this.apply_general_value("turns");case a.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case a.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case a.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case a.DAMAGE_INPUT:let s=this.apply_general_value(void 0,t);const _=n[this.sub_effect.type];switch(s.before=this.char[_],s.after=this.apply_subeffect(_,s.after),this.sub_effect.type){case a.CURRENT_HP:this.check_caps("current_hp","max_hp",0,s);break;case a.CURRENT_PP:this.check_caps("current_pp","max_pp",0,s)}return s}}}},function(t,e,i){"use strict";i.d(e,"c",(function(){return n})),i.d(e,"b",(function(){return o})),i.d(e,"a",(function(){return r}));var s=i(1),a=i(0);const n={SET:"set",STANDBY:"standby",RECOVERY:"recovery"},o={[n.RECOVERY]:s.YELLOW_FONT_COLOR,[n.STANDBY]:s.RED_FONT_COLOR,[n.SET]:s.DEFAULT_FONT_COLOR};class r{constructor(t,e,i,s,a,_,o,r,h,c,d,l){this.key_name=t,this.name=e,this.description=i,this.element=s,this.ability_key_name=a,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=d,this.status=n.SET,this.index=l,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,e){return _.some(e.map(t=>t.djinni).map(e=>e.filter(e=>t[e].status===n.STANDBY).length))}static get_standby_djinni(t,e){let i=_.mapValues(_.groupBy(e.map(t=>t.djinni).flat(),e=>t[e].element),e=>e.filter(e=>t[e].status===n.STANDBY).length);for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];e in i||(i[e]=0)}return i}static set_to_recovery(t,e,i){let s=Object.assign({},i),a=!1;for(let i=0;i<e.length;++i){const o=e[i],r=o.djinni;let h=1;for(let e=0;e<r.length;++e){const i=t[r[e]];if(i.status===n.STANDBY&&(s[i.element]>0&&(i.recovery_turn=h,++h,i.set_status(n.RECOVERY,o),--s[i.element],!_.some(s,Boolean)))){a=!0;break}}if(a)break}}}},function(t,e,i){"use strict";i.r(e),i.d(e,"event_types",(function(){return a})),i.d(e,"TileEvent",(function(){return n}));var s=i(0);const a={CLIMB:"climb",SPEED:"speed",TELEPORT:"teleport",JUMP:"jump",STEP:"step",COLLISION:"collision"};class n{constructor(t,e,i,a,_,o,r,h,c,d){this.game=t,this.data=e,this.type=i,this.x=a,this.y=_,this.location_key=n.get_location_key(this.x,this.y),this.id=n.id_incrementer++,this.activation_collision_layers=Array.isArray(r)?r:[r],void 0===o&&(o=Object(s.get_directions)(!0)),this.activation_directions=Array.isArray(o)?o:[o],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(c),this.origin_interactable_object=void 0===d?null:d,n.events[this.id]=this}is_active(t){const e=Object(s.split_direction)(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return _.find(t,{id:e})}static get_event(t){return n.events[t]}static reset(){n.id_incrementer=0,n.events={}}}n.reset()},function(t,e,i){"use strict";i.d(e,"a",(function(){return n}));var s=i(1),a=i(0);class n{constructor(t,e,i,a,n,_=!0,o=s.DEFAULT_WINDOW_COLOR,r=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=a,this.height=n,this.color=o,this.font_color=r,this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.group.window_object=this,this.need_pos_update=_,this.open=!1,this.lines_sprites=[],this.extra_sprites=[],this.internal_groups={}}get real_x(){return this.group.x}get real_y(){return this.group.y}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,n=!0){const _=a.change_brightness(this.color,1.3),o=a.change_brightness(this.color,.8),r=[a.change_brightness(this.color,.9),o,_];for(let a=0;a<r.length;++a){const _=r[a],o=a-1;this.separators_graphics.lineStyle(1,_),this.separators_graphics.moveTo(t+o*+n,e+o*+!n),this.separators_graphics.lineTo(i+o*+n,s+o*+!n)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.open=!0,this.close_callback=i,this.page_indicator_is_set=!1,e?(this.transition_time=Phaser.Timer.QUARTER/4,this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{void 0!==t&&t()})):(this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,a,n){let _=this.group;if(void 0!==n){const t=this.get_internal_group(n);t&&(_=t)}let o=_.create(t,e,i,a);return void 0!==s&&(o.tint=s),this.extra_sprites.push(o),o}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,a,n=!1,_=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const o=n?-2:0,r=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+o:i;const c=n?"gs-italic-bmp-font":"gs-bmp-font";let d,l,p=[];_&&(d=new Promise(t=>l=t));for(let e=0;e<t.length;++e){let i=t[e],n=this.game.add.bitmapText(r,h,c,_?"":i,s.FONT_SIZE),o=this.game.add.bitmapText(r+1,h+1,c,_?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===a?s.SPACE_BETWEEN_LINES:a),this.remove_smooth(n),n.tint=this.font_color,this.remove_smooth(o),o.tint=0,_){const t=i.split(" ");let e,s=0;const a=()=>{this.game.time.events.repeat(25,t.length,()=>{n.text+=t[s]+" ",o.text+=t[s]+" ",++s,s===t.length&&e()})};p.length?p.pop().then(a):a(),p.push(new Promise(t=>e=t))}this.group.add(o),this.group.add(n),this.lines_sprites.push({text:n,shadow:o})}return Promise.all(p).then(l),d}set_single_line_text(t,e=!1,i=!1){const a=s.WINDOW_PADDING_H+4;let n=s.WINDOW_PADDING_TOP;const _=i?"gs-italic-bmp-font":"gs-bmp-font";let o=this.game.add.bitmapText(a,n,_,t,s.FONT_SIZE),r=this.game.add.bitmapText(a+1,n+1,_,t,s.FONT_SIZE);return e&&(o.x-=o.width,r.x-=r.width),this.remove_smooth(o),o.tint=this.font_color,this.remove_smooth(r),r.tint=0,this.group.add(r),this.group.add(o),{text:o,shadow:r,right_align:e,initial_x:a}}set_text_in_position(t,e,i,a=!1,n=!1,_=this.font_color,o=!1,r,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let d,l=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),p=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);n&&(l.centerX=e,l.centerY=i,p.centerX=e+1,p.centerY=i+1),a&&(l.x-=l.width,p.x-=p.width),o&&(d=this.game.add.graphics(l.x-1,l.y),d.beginFill(this.color,1),d.drawRect(0,0,l.width+3,s.FONT_SIZE),d.endFill(),void 0!==r&&this.add_to_internal_group(r,d)||this.group.add(d)),this.remove_smooth(l),l.tint=_,this.remove_smooth(p),p.tint=0;let u=!1;return void 0!==r&&(u=this.add_to_internal_group(r,p)&&this.add_to_internal_group(r,l)),u||(this.group.add(p),this.group.add(l)),{text:l,shadow:p,right_align:a,initial_x:e,text_bg:d}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator_is_set&&this.unset_page_indicator(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.create_at_group(this.width-3,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}set_page_indicator(t,e){if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=this.width-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(t,e),this.set_page_indicator_arrow(t)}}set_page_indicator_highlight(t,e){this.page_number_bar_highlight.x=this.width-5-8*(t-e)}set_page_indicator_arrow(t){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=this.width-5-8*t-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=this.width-3-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return n})),i.d(e,"f",(function(){return _})),i.d(e,"e",(function(){return o})),i.d(e,"c",(function(){return r})),i.d(e,"d",(function(){return h})),i.d(e,"a",(function(){return c}));var s=i(2),a=i(0);const n={ALLY:1,ENEMY:2},_={DELUSION:"delusion",STUN:"stun",SLEEP:"sleep",SEAL:"seal",DEATH_CURSE:"death_curse"},o={DOWNED:"downed",POISON:"poison",VENOM:"venom",EQUIP_CURSE:"equip_curse",HAUNT:"haunt"},r={[_.DELUSION]:t=>t.name+" is wrapped in delusion!",[_.STUN]:t=>t.name+" has been stunned!",[_.SLEEP]:t=>t.name+" falls asleep!",[_.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[_.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[o.DOWNED]:t=>t.fighter_type===n.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[o.POISON]:t=>t.name+" is infected with poison!",[o.VENOM]:t=>t.name+" is infected with deadly poison!",[o.HAUNT]:t=>`An evil spirit grips ${t.name}!`},h={[_.DELUSION]:t=>t.name+" sees clearly once again!",[_.STUN]:t=>t.name+" is no longer stunned!",[_.SLEEP]:t=>t.name+" wakes from slumber!",[_.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[o.DOWNED]:t=>t.name+"'s has been revived!",[o.POISON]:t=>`The poison is purged from ${t.name}!`,[o.VENOM]:t=>`The venom is purged from ${t.name}!`};class c{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[_.DELUSION]:0,[_.STUN]:0,[_.SLEEP]:0,[_.SEAL]:0,[_.DEATH_CURSE]:0,[s.e.MAX_HP]:0,[s.e.MAX_PP]:0,[s.e.ATTACK]:0,[s.e.DEFENSE]:0,[s.e.AGILITY]:0,[s.e.LUCK]:0,[s.e.POWER]:{},[s.e.RESIST]:{}};for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];this.effect_turns_count[s.e.POWER][e]=0,this.effect_turns_count[s.e.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.e.TEMPORARY_STATUS:return t.status_key_name;case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return t.type;case s.e.POWER:case s.e.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.e.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return this.effect_turns_count[t.type];case s.e.POWER:case s.e.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.e.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.e.POWER:case s.e.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let a,n=new s.a(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(n),i&&(a=n.apply_effect()),{effect:n,changes:a}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(_.SLEEP)||this.temporary_status.has(_.STUN)}is_poisoned(){return this.permanent_status.has(o.POISON)?o.POISON:!!this.permanent_status.has(o.VENOM)&&o.VENOM}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return s})),i.d(e,"c",(function(){return a})),i.d(e,"a",(function(){return n}));const s={WEAPONS:"weapons",ARMOR:"armor",CHEST_PROTECTOR:"chest_protector",HEAD_PROTECTOR:"head_protector",LEG_PROTECTOR:"leg_protector",ABILITY_GRANTOR:"ability_grantor",LUCKY_CHARM:"lucky_charm",RING:"ring",UNDERWEAR:"underwear",GENERAL_ITEM:"general_item",SHIRT:"shirt"},a={MULTIPLE_USES:"multiple_uses",SINGLE_USE:"single_use",BREAKS_WHEN_USE:"breaks_when_use",NO_USE:"no_use"};class n{constructor(t,e,i,a,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y){this.key_name=t,this.name=e,this.type=i,this.description=a,this.use_type=n,this.curses_when_equipped=_,this.cant_be_removed=o,this.rare_item=r,this.imporant_item=h,this.carry_up_to_30=c,this.effects=d,this.attribute=l,this.unleash_ability=p,this.unleash_rate=u,this.use_ability=g,this.equipable_chars=m,this.price=b,this.granted_ability=w,this.icon_path=y,this.broken=!1,this.equipable=this.type!==s.GENERAL_ITEM}}},function(t,e,i){"use strict";i.d(e,"e",(function(){return s})),i.d(e,"c",(function(){return a})),i.d(e,"d",(function(){return n})),i.d(e,"b",(function(){return _})),i.d(e,"f",(function(){return o})),i.d(e,"a",(function(){return r}));const s={HEALING:"healing",EFFECT_ONLY:"effect_only",ADDED_DAMAGE:"added_damage",MULTIPLIER:"multiplier",BASE_DAMAGE:"base_damage",SUMMON:"summon",UTILITY:"utility",DIRECT_DAMAGE:"direct_damage"},a={CAST:"cast",ATTACK:"attack",USE:"use",SUMMON:"summon",UNLEASH:"unleash",DEFEND:"defend",ITEM_UNLEASH:"item_unleash",SET_DJINN:"set_djinn",NO_MSG:"no_msg"},n={NO_TARGET:"no_target",ALLY:"ally",ENEMY:"enemy",USER:"user"},_={PSYNERGY:"psynergy",DJINN:"djinn",SUMMON:"summon",ITEM:"item",WEAPON_UNLEASH:"weapon_unleash",NORMAL:"normal"},o={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};class r{constructor(t,e,i,s,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y,f,x,v,E,k){this.key_name=t,this.name=e,this.description=i,this.type=s,this.element=n,this.battle_target=_,this.range=o,this.pp_cost=r,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=d,this.is_field_psynergy=l,this.effects=p,this.ability_category=u,this.battle_animation_key=g,this.priority_move=m||!1,this.has_critical=b||!1,this.crit_mult_factor=void 0!==w?w:1,this.can_switch_to_unleash=y||!1,this.can_be_evaded=f||!1,this.use_diminishing_ratio=x||!1,this.msg_type=void 0===v?a.CAST:v,this.affects_pp=void 0!==E&&E,this.has_animation_variation=void 0!==k&&k}static get_diminishing_ratios(t,e){if(e)return o.DIMINISH;switch(t){case s.SUMMON:return o.SUMMON;default:return o.STANDARD}}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return n}));const s=Phaser.Timer.QUARTER>>1,a=Phaser.Timer.QUARTER>>1;class n{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g){this.game=t,this.is_right_left=e,this.is_up_down=i,this.max_right_left_getter=s,this.max_up_down_getter=a,this.base_group=n,this.on_right_left_change=void 0===_?()=>{}:_,this.on_up_down_change=void 0===o?()=>{}:o,this.right_left_index_getter=r,this.right_left_index_setter=h,this.up_down_index_getter=c,this.up_down_index_setter=d,this.open_checker=l,this.active_checker=p,this.cursor_base_x_getter=u,this.cursor_base_y_getter=g,this.right_pressed=!1,this.left_pressed=!1,this.up_pressed=!1,this.down_pressed=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.init_cursor(),this.init_cursor_tween(),this.signal_bindings=this.set_control()}set_control(){return[this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.right_pressed&&this.is_right_left&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.left_pressed&&this.is_right_left&&(this.left_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.down_pressed&&(this.down_pressed=!1,this.stop_timers()),this.up_pressed=!0,this.set_change_timers(-1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.up_pressed&&this.is_up_down&&(this.up_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.up_pressed&&(this.up_pressed=!1,this.stop_timers()),this.down_pressed=!0,this.set_change_timers(1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.down_pressed&&this.is_up_down&&(this.down_pressed=!1,this.stop_timers())})]}set_change_timers(t,e){this.change_index(t,e),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(s,this.change_index.bind(this,t,e)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_index(t,e){const i=e?this.right_left_index_getter:this.up_down_index_getter,s=e?this.right_left_index_setter:this.up_down_index_setter,a=e?this.on_right_left_change:this.on_up_down_change,n=e?this.max_right_left_getter:this.max_up_down_getter,_=i();s((i()+t)%n()),i()<0&&s(n()-1),this.set_cursor_position(),a(_,i())}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}init_cursor(){this.cursor_base_x=-5,this.cursor_group=this.game.add.group(),this.cursor=this.cursor_group.create(0,0,"cursor"),this.cursor_group.alpha=0,this.base_group.add(this.cursor_group),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter(),this.cursor_tween=this.game.tweens.create(this.cursor)}init_cursor_tween(){this.cursor_tween.to({x:this.cursor.x-4,y:this.cursor.y+4},a,Phaser.Easing.Linear.None,!1,0,-1,!0)}set_cursor_position(){this.cursor_tween.isRunning&&this.cursor_tween.isPaused?this.cursor_tween.resume():this.cursor_tween.isRunning||(this.cursor_tween.start(),this.cursor_tween.isPaused&&this.cursor_tween.resume()),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter()}activate(){this.up_pressed=!1,this.down_pressed=!1,this.cursor_group.alpha=1,this.set_cursor_position()}deactivate(){this.stop_timers(),this.cursor_group.alpha=0,this.cursor_tween.pause()}destroy(){this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()}),this.cursor_tween.stop(),this.cursor_group.destroy()}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return s}));class s{constructor(t,e){this.key_name=t,this.actions={};for(let t=0;t<e.length;++t)this.actions[e[t]]={};this.animations={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let a=0;a<e.length;++a){const n=s?i[a]:i;this.actions[t].directions[a]=e[a],this.actions[t].frame_counts[a]=n}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let a;a=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=a}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const a=this.actions[s].spritesheet;let n=t.load.atlasJSONHash(this.key_name+"_"+s,a.spritesheet_image_url,a.spritesheet_json_url);e&&(n.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,a,n){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,a,n)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let a=0;a<i.length;++a){const n=i[a],_=this.actions[e].frame_rate[n];t.animations.add(e+"_"+n,this.animations[e][n],_,Array.isArray(s)?s[a]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const a=e[s];this.generateFrameNames(t,a,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return _}));var s=i(4),a=i(1),n=i(0);class _ extends s.TileEvent{constructor(t,e,i,a,n,_,o,r,h){super(t,e,s.event_types.JUMP,i,a,n,_,o,r,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event)return;let t,e,i=30,a={x:this.x,y:this.y},o={x:this.x,y:this.y};if(this.data.hero.current_direction===n.directions.left?(i=-i,t="x",a.x-=2,o.x-=1,e=n.directions.left):this.data.hero.current_direction===n.directions.right?(t="x",a.x+=2,o.x+=1,e=n.directions.right):this.data.hero.current_direction===n.directions.up?(i=-i,t="y",a.y-=2,o.y-=1,e=n.directions.up):this.data.hero.current_direction===n.directions.down&&(t="y",a.y+=2,o.y+=1,e=n.directions.down),void 0===e)return;let r=s.TileEvent.get_location_key(o.x,o.y);if(r in this.data.map.events)for(let t=0;t<this.data.map.events[r].length;++t){const e=this.data.map.events[r][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collider_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(a.x,a.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===a.x&&e.current_y===a.y&&this.data.map.collision_layer===e.base_collider_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const a=this.data.map.events[h][i];if(a.type===s.event_types.JUMP&&a.is_active(Object(n.get_opposite_direction)(e))&&a.is_set&&a.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,a.dynamic){_.set_jump_collision(this.game,this.data);break}this.dynamic&&_.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const d=this.data.map.sprite.tileWidth*(a.x+.5),l=this.data.map.sprite.tileHeight*(a.y+.5);"x"===t?c.y=[l-5,l-8,l-5,l]:c.x=d,this.game.physics.p2.pause(),this.data.hero.play("jump",n.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.data.hero.shadow.x=d,this.data.hero.shadow.y=l,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.sprite.animations.play("jump_"+n.reverse_directions[e],this.data.hero.sprite_info.actions.jump.frame_rate,!1),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=Object(n.get_surroundings)(e.x,e.y,!0),_=!1,o=Object(n.split_direction)(this.data.hero.current_direction);for(let t=0;t<o.length;++t)_=_||this.activation_directions.includes(o[t]);let r=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],d=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let a=0;a<this.data.map.events[e].length;++a){const o=this.data.map.events[e][a];if(o.type===s.event_types.JUMP&&_&&o.is_set&&o.activation_collision_layers.includes(this.data.map.collision_layer)){!o.dynamic&&!this.dynamic||i[t].diag||(d=!0);const s=Object(n.get_surroundings)(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&d){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(.5+(0|e[0]))*this.data.map.sprite.tileWidth,s=(.5+(0|e[1]))*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=a.MAP_DAMPING,n.angularDamping=a.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(n)})}this.dynamic||_||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let n=0;n<e.map.events[i].length;++n){const _=e.map.events[i][n];if(_.type===s.event_types.JUMP&&_.dynamic&&_.is_set&&_.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:_.x-1,y:_.y},{x:_.x+1,y:_.y},{x:_.x,y:_.y-1},{x:_.x,y:_.y+1}];for(let n=0;n<i.length;++n){const _=s.TileEvent.get_location_key(i[n].x,i[n].y);if(_ in e.map.events){let t=!1;for(let i=0;i<e.map.events[_].length;++i){const a=e.map.events[_][i];if(a.dynamic&&a.type===s.event_types.JUMP&&a.is_set&&a.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let o=(i[n].x+.5)*e.map.sprite.tileWidth,r=(i[n].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(o,r,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=a.MAP_DAMPING,h.angularDamping=a.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let a=0;a<e.length;++a){const _=e[a],o=s.TileEvent.get_location_key(_.x,_.y);if(o in t.map.events)for(let e=0;e<t.map.events[o].length;++e){const a=t.map.events[o][e];a.type===s.event_types.JUMP&&a.activation_collision_layers.includes(i)&&!1===a.dynamic&&a.is_set&&a.activate_at(Object(n.get_opposite_direction)(_.direction))}}}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return l})),i.d(e,"a",(function(){return p}));var s=i(10),a=i(15),n=i(3),o=i(2),r=i(7),h=i(6),c=i(0),d=i(1);class l extends s.a{constructor(t,e,i,s,a,n){super(t,e),this.walk_speed=i,this.dash_speed=s,this.climb_speed=a,this.push_speed=n}}class p extends h.a{constructor(t,e,i,s,a,n,o,r,d,l,p,u,g,m,b,w,y,f,x,v,E,k,j,T,A,S,I,O,P,N,R){super(t,s),this.info=e,this.sprite_base=i,this.starting_level=u,this.level=this.starting_level,this.class_table=g,this.battle_scale=m,this.exp_curve=p,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=b,this.mercury_level_base=w,this.mars_level_base=y,this.jupiter_level_base=f,this.venus_power_base=x,this.mercury_power_base=v,this.mars_power_base=E,this.jupiter_power_base=k,this.venus_resist_base=j,this.mercury_resist_base=T,this.mars_resist_base=A,this.jupiter_resist_base=S,this.element_afinity=_.maxBy([{element:c.elements.VENUS,level:this.venus_level_base},{element:c.elements.MERCURY,level:this.mercury_level_base},{element:c.elements.MARS,level:this.mars_level_base},{element:c.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(P),this.update_class(),this.hp_curve=a,this.pp_curve=n,this.atk_curve=o,this.def_curve=r,this.agi_curve=d,this.luk_curve=l,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=N,this.equip_slots={weapon:null,head:null,chest:null,body:null},this.equipped_abilities=[],this.innate_abilities=I,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=O,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=h.b.ALLY,this.battle_animations_variations=Object.assign({},R)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=Object(a.b)(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]}};return this.current_exp+=t,this.level=_.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===r.b.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,a)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(a),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,e=!1){let i=this.items[t];if(i.equipped&&!e)return;const s=this.info.items_list[i.key_name];switch(s.type===r.b.WEAPONS&&null!==this.equip_slots.weapon?this.unequip_item(this.equip_slots.weapon.index):s.type===r.b.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.unequip_item(this.equip_slots.head.index):s.type===r.b.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.unequip_item(this.equip_slots.chest.index):s.type===r.b.ARMOR&&null!==this.equip_slots.body&&this.unequip_item(this.equip_slots.body.index),s.type){case r.b.WEAPONS:this.equip_slots.weapon=i;break;case r.b.HEAD_PROTECTOR:this.equip_slots.head=i;break;case r.b.CHEST_PROTECTOR:this.equip_slots.chest=i;break;case r.b.ARMOR:this.equip_slots.body=i}i.equipped=!0;for(let t=0;t<s.effects.length;++t)this.add_effect(s.effects[t],s);this.update_attributes(),this.update_elemental_attributes(),s.type===r.b.ABILITY_GRANTOR&&(this.equipped_abilities.push(s.granted_ability),this.update_abilities())}unequip_item(t){let e=this.items[t];if(!e.equipped)return;const i=this.info.items_list[e.key_name];i.type===r.b.WEAPONS&&null!==this.equip_slots.weapon?this.equip_slots.weapon=null:i.type===r.b.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.equip_slots.head=null:i.type===r.b.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.equip_slots.chest=null:i.type===r.b.ARMOR&&null!==this.equip_slots.body&&(this.equip_slots.body=null),e.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===i&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),i.type===r.b.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==i.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){let i=this.info.djinni_list[t[e]];switch(i.element){case c.elements.VENUS:this.venus_djinni.push(i.key_name);break;case c.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case c.elements.MARS:this.mars_djinni.push(i.key_name);break;case c.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){let e=this.info.djinni_list[t];switch(e.element){case c.elements.VENUS:this.venus_djinni.push(e.key_name);break;case c.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case c.elements.MARS:this.mars_djinni.push(e.key_name);break;case c.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case c.elements.VENUS:e=this.venus_djinni;break;case c.elements.MERCURY:e=this.mercury_djinni;break;case c.elements.MARS:e=this.mars_djinni;break;case c.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,s){const _=this.class;let o=this.venus_level_current,r=this.mercury_level_current,h=this.mars_level_current,d=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let a;switch(i[t]){case n.c.SET:a=1;break;case n.c.RECOVERY:case"irrelevant":a=0;break;default:a=-1}switch(s.element){case c.elements.VENUS:o+=a;break;case c.elements.MERCURY:r+=a;break;case c.elements.MARS:h+=a;break;case c.elements.JUPITER:d+=a}}this.class=Object(a.b)(this.info.classes_list,this.class_table,this.element_afinity,o,r,h,d);let l={class_name:this.class.name,class_key_name:this.class.key_name};return l.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>"irrelevant"===t?n.c.STANDBY:t),t.forEach(t=>{l[t]=this.preview_stats_by_djinn(t,e,i,s)}),this.class=_,l}preview_stats_by_djinn(t,e,i,s){const a={djinni_key_name:e,djinni_next_status:i,action:s};switch(t){case"max_hp":return this.set_max_stat("hp",!0,a);case"max_pp":return this.set_max_stat("pp",!0,a);case"atk":return this.set_max_stat("atk",!0,a);case"def":return this.set_max_stat("def",!0,a);case"agi":return this.set_max_stat("agi",!0,a);case"luk":return this.set_max_stat("luk",!0,a)}}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i,item_key_name:i};switch(t){case o.e.MAX_HP:return this.set_max_stat("hp",!0,s);case o.e.MAX_PP:return this.set_max_stat("pp",!0,s);case o.e.ATTACK:return this.set_max_stat("atk",!0,s);case o.e.DEFENSE:return this.set_max_stat("def",!0,s);case o.e.AGILITY:return this.set_max_stat("agi",!0,s);case o.e.LUCK:return this.set_max_stat("luk",!0,s)}}set_max_stat(t,e=!1,i={}){const s=["hp","pp"].includes(t)?"max_"+t:t,a="current_"+t,_=t+"_boost",r=t+"_curve",h=t+"_extra",c=this[s];this[s]=this[r][this.level]*this.class[_]+this[h]|0;let d=this.djinni;if(e)if("Trade"===i.action){const t=d.indexOf(i.djinni_key_name[0]);t>=0?d[t]=i.djinni_key_name[1]:d[d.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&d.push(i.djinni_key_name[0]);for(let t=0;t<d.length;++t){let a=d[t],o=this.info.djinni_list[a],r=o.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(a)&&(r=i.djinni_next_status[i.djinni_key_name.indexOf(a)]),r===n.c.SET&&(this[s]+=o[_])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;let a;switch(t){case"hp":a=o.e.MAX_HP;break;case"pp":a=o.e.MAX_PP;break;case"atk":a=o.e.ATTACK;break;case"def":a=o.e.DEFENSE;break;case"agi":a=o.e.AGILITY;break;case"luk":a=o.e.LUCK}s.type===a&&s.apply_effect()}),e){const t=i.effect_obj?o.a.preview_value_applied(i.effect_obj,this[s]):this[s];return this[s]=c,t}void 0===this[a]?this[a]=this[s]:this[a]=Math.round(this[a]*this[s]/c)}update_attributes(){this.set_max_stat("hp"),this.set_max_stat("pp"),this.set_max_stat("atk"),this.set_max_stat("def"),this.set_max_stat("agi"),this.set_max_stat("luk")}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}init_elemental_attributes(){this.venus_level_current=this.venus_level_base,this.mercury_level_current=this.mercury_level_base,this.mars_level_current=this.mars_level_base,this.jupiter_level_current=this.jupiter_level_base,this.venus_power_current=this.venus_power_base,this.mercury_power_current=this.mercury_power_base,this.mars_power_current=this.mars_power_base,this.jupiter_power_current=this.jupiter_power_base,this.venus_resist_current=this.venus_resist_base,this.mercury_resist_current=this.mercury_resist_base,this.mars_resist_current=this.mars_resist_base,this.jupiter_resist_current=this.jupiter_resist_base}update_elemental_attributes(){this.init_elemental_attributes();for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===n.c.SET&&(this[e.element+"_level_current"]+=1,this[e.element+"_power_current"]+=5,this[e.element+"_resist_current"]+=5)}this.effects.forEach(t=>{t.type!==o.e.POWER&&t.type!==o.e.RESIST||t.apply_effect()});for(let t=0;t<c.ordered_elements.length;++t){const e=c.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=_.clamp(this[i],d.ELEM_ATTR_MIN,d.ELEM_ATTR_MAX),this[s]=_.clamp(this[s],d.ELEM_ATTR_MIN,d.ELEM_ATTR_MAX)}}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(h.e.DOWNED))}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return s})),i.d(e,"a",(function(){return a}));const s={BATTLE:"battle"};class a{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=a.id_incrementer++,a.events[this.id]=this}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}a.reset()},function(t,e,i){"use strict";i.d(e,"b",(function(){return it})),i.d(e,"c",(function(){return st})),i.d(e,"d",(function(){return at})),i.d(e,"a",(function(){return nt}));var s=i(10),a=i(13),n=i(0),o=i(20),r=i(6),h=i(1),c=i(8);const d=h.GAME_WIDTH>>1,l=h.GAME_HEIGHT-35,p=.009*Math.PI,u=h.GAME_WIDTH/2-50,g=h.GAME_HEIGHT/50,m=[11,9,7,5,3,1,3,5,7,9,11],b=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class w{constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.esc_propagation_priority=n,this.enter_propagation_priority=_,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=a,this.allies_count=s.length,this.enemies_count=a.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.choosing_targets&&(this.data.enter_input.halt(),this.set_targets())},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.choosing_targets&&(this.data.esc_input.halt(),this.choosing_targets_finished(null))},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.choosing_targets&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.choosing_targets&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.choosing_targets&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.choosing_targets&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}set_targets(){let t,e;switch(this.target_type){case c.d.ALLY:t=this.allies_count,e=this.allies_info;break;case c.d.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case c.d.USER:t=this.ability_caster.fighter_type===r.b.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===r.b.ENEMY?this.allies_info:this.enemies_info}const i=_.zipWith(m.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===c.d.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}set_change_timers(t){this.change_target(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_target.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_target(t,e=!0){this.target_type===c.d.ENEMY&&(t*=-1);const i=this.target_type===c.d.ALLY?this.allies_info:this.enemies_info,s=i.length,a=s%2?s>>1:(s>>1)-1;let n;do{this.range_cursor_position+=t,0===t&&(t=-1);n=a+(this.range_cursor_position-(m.length>>1)),n>=s?(this.range_cursor_position=(m.length>>1)-a,n=0):n<0&&(this.range_cursor_position=(m.length>>1)+a+!(s%2),n=s-1)}while(i[n].instance.has_permanent_status(r.e.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,h.GAME_WIDTH,h.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,h.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,h.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1),this.battle_bg2.scale.setTo(1);const t=(t,e,i,s,a)=>{const n=t.create(0,0,e.sprite_key);n.anchor.setTo(.5,1),n.scale.setTo(e.scale,e.scale),n.ellipses_semi_major=u,n.ellipses_semi_minor=g,n.is_ally=i;return a[e.sprite_key.slice(0,e.sprite_key.lastIndexOf("_"))].setAnimation(n,"battle"),n.animations.play(s),this.sprites.push(n),n};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",_.mapValues(this.data.info.main_char_list,t=>t.sprite_base));e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,h.GAME_WIDTH,h.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,h.GAME_WIDTH,2+(h.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.right_pressed=!1,this.left_pressed=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:h.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:.7551327},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}async set_stage_default_position(){let t;const e=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:.7551327},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),await e}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.is_ally?88:106-40*(this.enemies_count>>1))+40*i,a=e.is_ally?160:98;e.x=s,e.y=a;const n=e.scale.x+.2*Math.sign(e.scale.x),_=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(n,_)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===c.d.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,s=this.range_cursor_position-(m.length>>1);this.cursors.forEach((a,n)=>{let _=n-((this.cursors.length>>1)-i)+s;const o=e[_];if(o&&!o.instance.has_permanent_status(r.e.DOWNED)){const e=o.sprite,i=b[this.range_cursor_position-s-(this.cursors.length>>1)+n];a.scale.setTo(i,i),a.alpha=1,this.cursors_tweens[n]&&this.cursors_tweens[n].stop();const _=e.x,r=e.y-e.height-5;t?this.game.add.tween(a).to({centerX:_,y:r},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[n]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(a.centerX=_,a.y=r,this.cursors_tweens[n]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{a.alpha=0,_=_<0?0:e.length-1;const t=e[_].sprite;a.centerX=t.x,a.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()}),this.stop_timers()}choose_targets(t,e,i,s,a){this.choosing_targets_callback=a,this.range_cursor_position=m.length>>1,this.ability_range="all"===t?m[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===c.d.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===c.d.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1)})}choosing_targets_finished(t){this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===c.d.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.choosing_targets=!1,this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=Object(n.range_360)(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad-=p,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad+=p,this.battle_bg.x+=2.4;else{const t=Object(n.range_360)(this.camera_angle.rad)-Object(n.range_360)(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=w.get_angle(i),a=w.ellipse_position(e,s,!0),n=w.ellipse_position(e,s,!1),_=e.is_ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,o=e.is_ally?t:t-this.allies_count;e.x=a+(35*o-_+17)*Math.sin(i),e.y=n;const r=e.is_ally?this.allies_info[o]:this.enemies_info[o],h=w.get_scale(r.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.signal_bindings.forEach(t=>{t.detach()}),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=h.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=h.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:h.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?u:e)*(i=void 0===i?g:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return d+w.ellipse(e,i,g)*Math.cos(e)}{const i=t.ellipses_semi_minor;return l+w.ellipse(e,u,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((g-u)*Math.tan(t)/(u+g*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}var y=i(2);class f{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",h.FONT_SIZE);return e.tint=h.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}async add_ability(t,e,i,s){switch(e.msg_type){case c.c.ATTACK:await this.add(t.name+" attacks!");break;case c.c.CAST:await this.add(`${t.name} casts ${e.name}!`);break;case c.c.UNLEASH:await this.add(`${t.name} unleashes ${e.name}!`);break;case c.c.SUMMON:await this.add(`${t.name} summons ${e.name}!`);break;case c.c.USE:await this.add(`${t.name} uses ${e.name}!`);break;case c.c.DEFEND:await this.add(t.name+" is defending!");break;case c.c.ITEM_UNLEASH:await this.add(`${t.name}'s ${i}`),await this.add(`lets out a howl! ${e.name}!`);break;case c.c.SET_DJINN:await this.add(`${s} is set to ${t.name}!`)}}async add_recover_effect(t){const e=t.char;switch(t.type){case y.e.MAX_HP:case y.e.MAX_PP:case y.e.ATTACK:case y.e.DEFENSE:case y.e.AGILITY:case y.e.LUCK:await this.add(`${e.name}'s ${y.c[t.type]} returns to normal!`);break;case y.e.POWER:case y.e.RESIST:await this.add(`${e.name}'s ${n.element_names[t.attribute]} ${y.c[t.type]} returns to normal!`);break;case y.e.TEMPORARY_STATUS:case y.e.PERMANENT_STATUS:await this.add(r.d[t.status_key_name](e))}}async add_damage(t,e,i=!1){const s=i?"PP":"HP",a=i?"current_pp":"current_hp",n=i?"max_pp":"max_hp";t>=0?(e[a]-t<0&&(t=e[a]),await this.add(`${e.name} takes ${t.toString()} damage!`)):e[a]>=e[n]?await this.add(`${e.name}'s ${s} is fully restored`):await this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}var x=i(18),v=i(16),E=i(3),k=i(5);class j{constructor(t){this.game=t,this.base_window=new k.a(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}var T=i(9);const A=h.YELLOW_FONT_COLOR,S=h.RED_FONT_COLOR,I=90+h.FONT_SIZE;class O{constructor(t,e,i,s){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,72,72,164,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(48,136,"buttons","psynergy"),this.group.alpha=0,this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_ability.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_ability_index.bind(this),this.set_ability_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.signal_bindings=this.set_control(),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}get_cursor_x(){return this.expanded,66}get_cursor_y(){return(this.expanded,83)+16*this.ability_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_ability_index(){return this.ability_index}set_ability_index(t){this.ability_index=t}get_max_elem_on_page(){return this.abilities.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.enter_input.halt(),this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t,e){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_ability(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(h.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(h.ICON_HEIGHT+2),a=i+(h.ICON_WIDTH>>1),n=s+(h.ICON_HEIGHT>>1),_=10+h.ICON_WIDTH+2;let o=h.DEFAULT_FONT_COLOR;this.psy_sealed?o=h.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(o=h.RED_FONT_COLOR);const r=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,_,s+4,!1,!1,o);this.text_sprites_in_window.push(r);const c=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,o);this.text_sprites_in_window.push(c),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,n,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const d=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,o);this.text_sprites_in_window.push(d),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(A,r),this.base_window.update_text_color(A,d),this.base_window.update_text_color(A,c)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(S,r),this.base_window.update_text_color(S,d),this.base_window.update_text_color(S,c)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,I),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(h.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(A,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(S,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(A,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(S,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72})),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}open(t,e,i,s=!1,a=null,n=null){this.char=t,this.psy_sealed=this.char.has_temporary_status(r.f.SEAL),this.djinni=[a],this.next_djinni_status=[n],this.close_callback=e,this.choosen_ability=null,this.expanded=s,this.page_index=0,this.ability_index=0,this.set_description=i,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.cursor_control.activate(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}const P=["max_hp","max_pp","atk","def","agi","luk"];class N{constructor(t,e){this.game=t,this.data=e,this.base_window=new k.a(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<P.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*h.FONT_SIZE),this.before_stats[P[t]]=this.base_window.set_text_in_position("",78,16+t*h.FONT_SIZE,!0),this.after_stats[P[t]]=this.base_window.set_text_in_position("",126,16+t*h.FONT_SIZE,!0),this.up_arrows[P[t]]=this.base_window.create_at_group(80,15+t*h.FONT_SIZE,"stat_up"),this.down_arrows[P[t]]=this.base_window.create_at_group(80,15+t*h.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-h.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<P.length;++t)this.down_arrows[P[t]].alpha=0,this.up_arrows[P[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(P,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<P.length;++e){const i=P[e],s=this.char[i],a=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(a.toString(),this.after_stats[i]),s>a?this.down_arrows[i].alpha=1:s<a&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}class R{constructor(t,e,i,s,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.base_window=new k.a(this.game,160,72,76,84),this.base_window.init_page_indicator_bar(),this.stats_window=new N(this.game,this.data),this.group=this.game.add.group(),this.button=this.group.create(140,136,"buttons","djinni"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.djinn_names=[],this.stars_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_djinn.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active||this.psynergy_window_open)return;this.data.enter_input.halt();const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==E.c.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.shift_input.halt(),this.cursor_control.deactivate(),this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0)},this,this.shift_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onUp.add(()=>{this.window_open&&this.window_active&&this.psynergy_window_open&&(this.cursor_control.activate(),this.psynergy_window.close(),this.psynergy_window_open=!1)})]}get_cursor_x(){return 154}get_cursor_y(){return 84+16*this.djinn_index}is_open(){return this.window_open}is_active(){return this.window_active&&!this.psynergy_window_open}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_djinn_index(){return this.djinn_index}set_djinn_index(t){this.djinn_index=t}get_max_elem_on_page(){return this.djinni.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case E.c.SET:this.set_description(t.description);break;case E.c.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case E.c.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(t,e){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.cursor_control.set_cursor_position()),this.call_set_description(),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.update_stats()}change_djinn(t,e){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let a;switch(this.stars_sprites.push(s),e.status){case E.c.SET:a=E.b[E.c.SET];break;case E.c.STANDBY:a=E.b[E.c.STANDBY];break;case E.c.RECOVERY:a=E.b[E.c.RECOVERY]}const n=this.base_window.set_text_in_position(e.name,17,i,!1,!1,a);if(this.djinn_names.push(n),e.status===E.c.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,E.b[E.c.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case E.c.SET:t=E.c.STANDBY;break;case E.c.STANDBY:t=E.c.SET;break;case E.c.RECOVERY:t=E.c.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.call_set_description(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.stats_window.open(this.char),this.update_stats(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.cursor_control.destroy()}}var D=i(7);class M{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,120,72,116,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(96,136,"buttons","item"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.item_names=[],this.other_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_item.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_item_index.bind(this),this.set_item_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active)return;this.data.enter_input.halt();const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==D.c.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 116}get_cursor_y(){return 84+16*this.item_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_item_index(){return this.item_index}set_item_index(t){this.item_index=t}get_max_elem_on_page(){return this.items.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_item(t,e){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let a=h.DEFAULT_FONT_COLOR;e.use_type!==D.c.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(a=h.YELLOW_FONT_COLOR);const n=this.base_window.set_text_in_position(e.name,26,i,!1,!1,a);this.item_names.push(n)}}set_page_number(){const t=this.all_items.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.all_items=this.char.items,this.all_items=_.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===D.c.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}class L{constructor(t){this.game=t,this.base_window=new k.a(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}var q=i(12);class C{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,104,88,132,68),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(80,136,"buttons","summon"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.summon_names=[],this.other_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_summon.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_summon_index.bind(this),this.set_summon_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.djinn_numbers_window=new L(t)}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 98}get_cursor_y(){return 100+16*this.summon_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_summon_index(){return this.summon_index}set_summon_index(t){this.summon_index=t}get_max_elem_on_page(){return this.summons.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let a=h.DEFAULT_FONT_COLOR;this.summons[t].available||(a=h.RED_FONT_COLOR);const n=this.base_window.set_text_in_position(e.name,28,i,!1,!1,a);this.summon_names.push(n)}}set_page_number(){const t=this.all_summons.length;this.page_number=parseInt((t-1)/4)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.standby_djinni=E.a.get_standby_djinni(this.data.info.djinni_list,q.a.get_active_players(this.data.info.party_data,B));for(let t in this.standby_djinni)this.standby_djinni[t]-=this.djinni_already_used[t];this.all_summons=_.map(this.data.dbs.summons_db,t=>{const e=_.every(t.requirements,(t,e)=>t<=this.standby_djinni[e]);return Object.assign({},t,{available:e,index:e?-t.index:t.index})}),this.all_summons=_.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.group.alpha=1,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.djinn_numbers_window.open(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy(),this.djinn_numbers_window.destroy()}}class H{constructor(t,e,i,s,a,_){this.game=t,this.data=e,this.on_abilities_choose=a,this.choose_targets=_,this.chars_status_window=new x.a(this.game,this.data,!0,!0),this.start_buttons_keys=["fight","flee","status"],this.shift_propagation_priority=0,this.esc_propagation_priority=s,this.enter_propagation_priority=i,this.start_horizontal_menu=new v.a(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>Object(n.capitalize)(t)),this.start_button_press.bind(this),this.enter_propagation_priority,void 0,void 0,76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.description_window=new j(this.game),this.djinn_window=new R(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1,this.shift_propagation_priority),this.psynergy_window=new O(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.item_window=new M(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.summon_window=new C(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,h.GAME_HEIGHT-h.AVATAR_SIZE),this.avatar_sprite.alpha=0,this.inner_horizontal_menu=new v.a(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>Object(n.capitalize)(t)),this.inner_button_press.bind(this),this.enter_propagation_priority,this.inner_menu_cancel.bind(this),this.esc_propagation_priority,60,!0)}start_button_press(t){switch(this.start_buttons_keys[t]){case"fight":this.start_horizontal_menu.close();let t=[];E.a.has_standby_djinn(this.data.info.djinni_list,q.a.get_active_players(this.data.info.party_data,B))||t.push("summon"),this.current_buttons=this.inner_buttons_keys.filter(e=>!t.includes(e)),this.inner_horizontal_menu.mount_buttons(t),this.abilities={},this.data.info.party_data.members.slice(0,B).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=n.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let e=this.data.info.party_data.members[this.current_char_index];for(;e.is_paralyzed()||e.has_permanent_status(r.e.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,e=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=B||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()}}inner_button_press(t){switch(this.current_buttons[t]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t,type:"attack"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t,type:"defend"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let a;if("djinni"===i&&this.data.info.djinni_list[e].status===E.c.STANDBY)a=e,e="set_djinn";else if("summon"===i){const t=this.data.dbs.summons_db[e].requirements;this.djinni_already_used=_.mapValues(this.djinni_already_used,(e,i)=>e+t[i])}this.description_window.hide(),this.choose_targets(e,i,s=>{s?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:s,type:i,djinn_key_name:a}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.is_open()&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=B||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if("summon"===t.type){const e=this.data.dbs.summons_db[t.key_name].requirements;this.djinni_already_used=_.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(r.e.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}var U=i(19);class G{constructor(t,e){this.game=t,this.data=e,this.base_window=new k.a(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t=this.base_window.set_text_in_position(this.ability_name,this.ability_name_x,8);if(this.texts.push(t),this.element&&this.element!==n.elements.NO_ELEMENT&&"summon"!==this.action){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=_.pickBy(this.data.dbs.summons_db[this.ability_key_name].requirements,t=>t);let e=0;n.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,a=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(a);const n=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(n),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.ability_key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(h.ICON_WIDTH>>1),this.icon_group.y=5+(h.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,a,n){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=a,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=n}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}class F{static roll_action(t,e,i){let s=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(r.e.DOWNED);const a={magnitude:i&&!s?1:null,target:{instance:i&&!s?t:null},type:"attack"};return i&&!s&&(s=!0),a})}}}class W{static player_turn_speed(t,e=!1,i=!1){return(t+(t*_.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const a=s?1e4:0;if(1===e)return t+a;if(2===i)return(t>>1)+a;if(3===i)switch(e){case 2:return 3*t/4+a;case 3:return(t>>1)+a}return(t>>1)+a}static base_damage(t,e){const i=t.current_atk-e.current_def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,s=!0){let a=100,o=100;if(i!==n.elements.NO_ELEMENT){if(o=e[i+"_resist_current"],void 0!==t){a=t[i+"_power_current"]}}return 1+_.clamp(a-o,h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX)/(s?200:400)}static physical_attack(t,e,i,s,a){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,a,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let s=100;if(i!==n.elements.NO_ELEMENT){s=t[i+"_power_current"]}return e*s/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,a,n){const _=a+"_level_current";return 3*(t[_]-e[_]-(e.current_luk>>1))/100+i+(n=void 0===n?0:n)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.current_luk-5*e+100*i)>=_.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case r.e.POISON:i=1;break;case r.e.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=_.clamp(t,0,4))*t+t)}}class K{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y,f,x,v){this.game=t,this.key_name=e,this.sprites_keys=i,this.x_sequence=s,this.y_sequence=a,this.x_ellipse_axis_factor_sequence=n,this.y_ellipse_axis_factor_sequence=_,this.x_scale_sequence=o,this.y_scale_sequence=r,this.x_anchor_sequence=h,this.y_anchor_sequence=c,this.alpha_sequence=d,this.rotation_sequence=l,this.stage_angle_sequence=p,this.hue_angle_sequence=u,this.tint_sequence=g,this.grayscale_sequence=m,this.colorize_sequence=b,this.custom_filter_sequence=w,this.play_sequence=y,this.set_frame_sequence=f,this.blend_mode_sequence=x,this.is_party_animation=v,this.running=!1}initialize(t,e,i,s,a,n,_,o){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=o,this.group_caster=s,this.group_enemy=a,this.super_group=n,this.stage_camera=_,this.trails_objs=[];for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let _;if(i.trails&&(_=this.initialize_trail_textures(i.trail_frame_diff,i.trails_mode)),!i.per_target){const e=i.count?i.count:1;for(let o=0;o<e;++o){const e=this.game.add.sprite(this.x0,this.y0,t);let o,r;n.getChildIndex(s)<n.getChildIndex(a)?(o=s,r=a):(o=a,r=s),"over"===i.position?n.addChild(e):"between"===i.position?n.addChildAt(e,n.getChildIndex(r)):"behind"===i.position&&n.addChildAt(e,n.getChildIndex(o));const h=Phaser.Animation.generateFrameNames(i.key_name+"/",1,e.animations.frameTotal,"",3);e.animations.add(i.key_name,h),e.animations.frameName=h[0],e.battle_index=this.sprites.length,e.trails=i.trails,e.trails_info=_,i.trails&&(e.x_history=new Array(_.frame_diff+1).fill(e.x-this.game.camera.x),e.y_history=new Array(_.frame_diff+1).fill(e.y-this.game.camera.y)),this.sprites.push(e)}}}this.set_filters()}initialize_trail_textures(t,e){switch(e){case"screen":e=PIXI.blendModes.SCREEN;break;case"normal":e=PIXI.blendModes.NORMAL}const i=this.game.add.renderTexture(h.GAME_WIDTH,h.GAME_HEIGHT);let s=this.game.add.sprite(this.game.camera.x,this.game.camera.y,i);s.blendMode=e,s.alpha=.6;const a=this.game.add.renderTexture(h.GAME_WIDTH,h.GAME_HEIGHT);let n=this.game.add.sprite(this.game.camera.x,this.game.camera.y,a);return n.blendMode=e,n.alpha=.4,this.trails_objs=this.trails_objs.concat(i,a,s,n),{texture_1:i,texture_2:a,frame_diff:t}}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy()}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let s={},a={};for(let _=0;_<t.length;++_){const o=t[_];o.sprite_index in a||(a[o.sprite_index]=!0),o.sprite_index in s&&(a[o.sprite_index]=!1);let r=this.get_sprites(o,i),c=!1;r.forEach((t,i)=>{const _=t.key+"_"+t.battle_index;void 0===this.sprites_prev_properties[_]&&(this.sprites_prev_properties[_]={}),void 0===this.sprites_prev_properties[_][e]&&(this.sprites_prev_properties[_][e]=t[e]);const r=Array.isArray(o.to)?o.to[i]:o.to;let d=r;if("target"===r){const t=Array.isArray(o.shift)?o.shift[i]:o.shift;d=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[_][e]=Object(n.range_360)(this.sprites_prev_properties[_][e]),t[e]=this.sprites_prev_properties[_][e],d=K.get_angle_by_direction(this.sprites_prev_properties[_][e],r,o.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[_][e]-d)>h.degree360&&(d-=Math.sign(d)*h.degree360)),d=o.is_absolute?d:this.sprites_prev_properties[_][e]+r,o.yoyo||(this.sprites_prev_properties[_][e]=d),"initial"===o.tween)t[e]=d;else{o.sprite_index in s||(s[o.sprite_index]={[i]:[]}),i in s[o.sprite_index]||(s[o.sprite_index][i]=[]);const _=Array.isArray(o.start_delay)?o.start_delay[i]:o.start_delay;if("instantly"===o.duration){let i;if(!c){let t=new Promise(t=>{i=t});this.promises.push(t),c=!0}this.game.time.events.add(_,()=>{t[e]=d,o.force_stage_update&&this.stage_camera.update(),o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(n.range_360)(t[e])),void 0!==i&&i()})}else{const r=this.game.add.tween(t).to({[e]:d},Array.isArray(o.duration)?o.duration[i]:o.duration,o.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),a[o.sprite_index],_,0,void 0!==o.yoyo&&o.yoyo);if(!c){let i,s=new Promise(t=>{i=t});this.promises.push(s),r.onStart.addOnce(()=>{o.force_stage_update&&(this.stage_camera.spining=!0)}),r.onComplete.addOnce(()=>{o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(n.range_360)(t[e])),i(),o.force_stage_update&&(this.stage_camera.spining=!1)}),c=!0}s[o.sprite_index][i].length&&s[o.sprite_index][i][s[o.sprite_index][i].length-1].chain(r),s[o.sprite_index][i].push(r)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,a=new Promise(t=>{s=t});this.promises.push(a);const n=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(n,()=>{e.reverse?t.animations.getAnimation(e.animation_key).reversed=!0:t.animations.getAnimation(e.animation_key).reversed=!1,t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,a=new Promise(t=>{s=t});this.promises.push(a);const n=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(n,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const a=t[s];this.get_sprites(a).forEach((t,s)=>{let n,_=new Promise(t=>{n=t});this.promises.push(_);const o=Array.isArray(a.start_delay)?a.start_delay[s]:a.start_delay;this.game.time.events.add(o,()=>{const s=void 0!==a.filter?a.filter:e;t.filters[0][s]=a.value,i.forEach(e=>{t.filters[0][e]=a[e]})}),n()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let s;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?s=.7551327:i.is_absolute?(this.stage_prev_value=Object(n.range_360)(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,s=K.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-s)>h.degree360&&(s-=Math.sign(s)*h.degree360)):s=this.stage_prev_value+i.to,this.stage_prev_value=s,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=s:this.stage_camera.rad+=s;else{const e=this.game.add.tween(this.stage_camera).to({rad:s},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let a,_=new Promise(t=>{a=t});this.promises.push(_),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=Object(n.range_360)(this.stage_camera.rad)),this.stage_camera.spining=!1,a()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}render(){let t=!0;this.sprites.forEach(e=>{e.trails&&(e.x_history.unshift(e.x),e.y_history.unshift(e.y),t&&(e.trails_info.texture_1.clear(),e.trails_info.texture_2.clear(),t=!1),e.trails_info.texture_1.renderXY(e,e.x_history[e.trails_info.frame_diff>>1],e.y_history[e.trails_info.frame_diff>>1]),e.trails_info.texture_2.renderXY(e,e.x_history.pop(),e.y_history.pop()))})}static get_angle_by_direction(t,e,i,s=!1){let a;if(a=s?(e=h.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",a===i)return e;const _=e%h.degree360-t%h.degree360,o=Math.sign(_)*h.degree360-_,r=t%h.degree360-o;if("closest"===i){let i,s;return r>0?(s=r-Object(n.range_360)(t),i=h.degree360-s):(i=e-Object(n.range_360)(t),s=h.degree360-i),Math.abs(i)<Math.abs(s)?e:r}return r}}class Y{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}async load_animation(t){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),a=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let n,_=!0;const o=new Promise(t=>{n=t});let r;s.onFileComplete.addOnce((t,e,i)=>{_=_&&i,n()});const h=new Promise(t=>{r=t});let c;a.onFileComplete.addOnce((t,e,i)=>{_=_&&i,r()});const d=new Promise(t=>c=t);if(this.game.load.onLoadComplete.addOnce(c),this.game.load.start(),await Promise.all([o,h,d]),_){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new K(this.game,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.is_party_animation)}else this.not_available.add(t)}animation_available(t){return t in this.animations}async play(t,e,i,s,a,n){if(!(t in this.animations))return;const _=t+"_battle_animation";let o;this.animations[t].initialize(_,e,i,s,a,n.battle_group,n.camera_angle,[n.battle_bg,n.battle_bg2]);const r=new Promise(t=>{o=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(o),await r,this.render_function=null}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}const B=4,z=0,$=1,X=2,J=3,Z=4,V=5,Q=6;class tt{constructor(t,e,i,s){this.game=t,this.data=e,this.allies_info=this.data.info.party_data.members.slice(0,B).map(t=>(t.init_effect_turns_count(),{sprite_key:t.key_name+"_battle",scale:t.battle_scale,instance:t,entered_in_battle:!0})),this.enemies_party_data=this.data.dbs.enemies_parties_db[s],this.enemies_info=[],this.this_enemies_list={};let a={},n=0;this.enemies_party_data.members.forEach(t=>{const e=_.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle",scale:this.data.info.enemies_list[t.key].battle_scale}),this.enemies_info[n].sprite_key in a?a[this.enemies_info[n].sprite_key]+=1:a[this.enemies_info[n].sprite_key]=1;let e="",i="";a[this.enemies_info[n].sprite_key]>1&&(e="_"+a[this.enemies_info[n].sprite_key].toString(),i=" "+a[this.enemies_info[n].sprite_key].toString()),this.enemies_info[n].instance=Object(U.b)(this.data.info.enemies_list,t.key,i),this.enemies_info[n].battle_key=this.enemies_info[n].sprite_key+e,this.this_enemies_list[this.enemies_info[n].battle_key]=this.enemies_info[n].instance,++n}}),this.enter_propagation_priority=0,this.esc_propagation_priority=0,this.battle_stage=new w(this.game,this.data,i,this.allies_info,this.enemies_info,this.esc_propagation_priority++,this.enter_propagation_priority++),this.battle_log=new f(this.game),this.battle_menu=new H(this.game,this.data,++this.enter_propagation_priority,++this.esc_propagation_priority,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new G(this.game,this.data),this.animation_manager=new Y(this.game,this.data),this.battle_phase=z,this.controls_enabled=!1,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,++this.enter_propagation_priority,++this.esc_propagation_priority,this.battle_finishing=!1,this.signal_bindings=this.set_controls()}set_controls(){return[this.data.enter_input.add(()=>{if(this.data.in_battle&&this.controls_enabled)switch(this.data.enter_input.halt(),this.battle_phase){case $:this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=X,this.check_phases();break;case Z:case V:case Q:this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)}},this,this.enter_propagation_priority)]}start_battle(){this.check_phases()}on_abilities_choose(t){this.player_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=J,this.check_phases()}choose_targets(t,e,i,s,a){const n=this.data.info.abilities_list[t];let _;"psynergy"===e&&(_=[n.pp_cost]),"defend"!==e&&this.target_window.open(e,n.name,n.element,t,_,a),this.battle_stage.choose_targets(n.range,n.battle_target,n.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(r.e.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(r.e.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=Q)}check_phases(){switch(this.check_parties(),this.battle_phase){case z:this.battle_phase_none();break;case $:case X:this.battle_phase_menu();break;case J:this.battle_phase_round_start();break;case Z:this.battle_phase_combat();break;case V:this.battle_phase_round_end();break;case Q:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.battle_phase=$,this.data.in_battle=!0,this.data.battle_instance=this,this.battle_log.add(this.enemies_party_data.name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=_.mapValues(_.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=_.mapValues(_.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.controls_enabled=!0})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}async battle_phase_round_start(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=F.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.player_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.player_abilities[t].length;++i){const s=this.data.info.abilities_list[this.player_abilities[t][i].key_name],a=void 0!==s&&s.priority_move;this.player_abilities[t][i].speed=W.player_turn_speed(e.current_agi,a,i>0),this.player_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],a=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=W.enemy_turn_speed(e.current_agi,i+1,e.turns,a),this.enemies_abilities[t][i].caster=e}}this.turns_actions=_.sortBy(Object.values(this.player_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,await this.animation_manager.load_animation(s)}this.battle_phase=Z,this.controls_enabled=!0,this.check_phases()}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}async check_downed(t){0===t.current_hp&&(t.add_permanent_status(r.e.DOWNED),await this.battle_log.add(r.c[r.e.DOWNED](t)),await this.wait_for_key())}async battle_phase_combat(){if(!this.turns_actions.length)return this.battle_phase=V,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(r.e.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(r.f.SLEEP)?await this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(r.f.STUN)&&await this.battle_log.add(t.caster.name+" is paralyzed and cannot move!"),await this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==r.b.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,F.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let e=this.data.info.abilities_list[t.key_name],i="";if(t.caster.fighter_type===r.b.ALLY&&void 0!==e&&e.can_switch_to_unleash&&t.caster.equip_slots.weapon&&this.data.info.items_list[t.caster.equip_slots.weapon.key_name].unleash_ability){const s=this.data.info.items_list[t.caster.equip_slots.weapon.key_name];Math.random()<s.unleash_rate&&(i=s.name,t.key_name=s.unleash_ability,e=this.data.info.abilities_list[s.unleash_ability])}if(void 0===e)return await this.battle_log.add(t.key_name+" ability key not registered."),await this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(r.f.SEAL)&&e.ability_category===c.b.PSYNERGY)return await this.battle_log.add("But the Psynergy was blocked!"),await this.wait_for_key(),void this.check_phases();if(e.pp_cost>t.caster.current_pp)return await this.battle_log.add("... But doesn't have enough PP!"),await this.wait_for_key(),void this.check_phases();t.caster.current_pp-=e.pp_cost;let s=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(await this.battle_log.add_ability(t.caster,e,i,s),e.ability_category===c.b.DJINN)e.effects.some(t=>t.type===y.e.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(E.c.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(E.c.STANDBY,t.caster);else if(e.ability_category===c.b.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements,s=E.a.get_standby_djinni(this.data.info.djinni_list,q.a.get_active_players(this.data.info.party_data,B));if(!_.every(i,(t,e)=>s[e]>=t))return await this.battle_log.add(`${t.caster.name} summons ${e.name} but`),await this.battle_log.add("doesn't have enough standby Djinn!"),await this.wait_for_key(),void this.check_phases();E.a.set_to_recovery(this.data.info.djinni_list,q.a.get_active_players(this.data.info.party_data,B),i)}if(this.battle_menu.chars_status_window.update_chars_info(),e.type===c.e.UTILITY&&await this.wait_for_key(),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===r.b.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),s=t.caster.fighter_type===r.b.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===r.b.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;await this.animation_manager.play(t.battle_animation_key,e,i,s,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else await this.battle_log.add(`Animation for ${e.name} not available...`),await this.wait_for_key();[c.e.UTILITY,c.e.EFFECT_ONLY].includes(e.type)||await this.apply_damage(t,e);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(!y.f.ON_USE)continue;if(await this.apply_effects(t,e,s))return this.battle_phase=V,void this.check_phases()}if(await this.battle_stage.set_stage_default_position(),e.ability_category===c.b.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements;for(let s=0;s<n.ordered_elements.length;++s){const a=n.ordered_elements[s],_=W.summon_power(i[a]);_>0&&(t.caster.add_effect({type:"power",quantity:_,operator:"plus",attribute:a},e,!0),await this.battle_log.add(`${t.caster.name}'s ${n.element_names[a]} Power rises by ${_.toString()}!`),await this.wait_for_key())}}const a=t.caster.is_poisoned();if(a){let e=W.battle_poison_damage(t.caster,a);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=_.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=a===r.e.POISON?"poison":"venom";await this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(t.caster)}if(t.caster.has_temporary_status(r.f.DEATH_CURSE)){const e=_.find(t.caster.effects,{status_key_name:r.f.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(r.e.DOWNED),await this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),await this.wait_for_key())}this.check_phases()}async apply_damage(t,e){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===y.e.CRITICALS).reduce((t,e)=>y.a.apply_operator(t,e.quantity,e.operator),0));for(let s=0;s<t.targets.length;++s){const a=t.targets[s];if(null===a.magnitude)continue;const o=a.target.instance;if(o.has_permanent_status(r.e.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<1/32||t.caster.temporary_status.has(r.f.DELUSION)&&Math.random()<.66))return await this.battle_log.add(o.name+" nimbly dodges the blow!"),this.wait_for_key();let h=0;if(e.has_critical&&(Math.random()<1/32||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+o.level/5;h=W.physical_attack(t.caster,o,i,s,e.element)}else switch(e.type){case c.e.ADDED_DAMAGE:h=W.physical_attack(t.caster,o,1,e.ability_power,e.element);break;case c.e.MULTIPLIER:h=W.physical_attack(t.caster,o,e.ability_power/10,0,e.element);break;case c.e.BASE_DAMAGE:h=W.psynergy_damage(t.caster,o,e.ability_power,e.element);break;case c.e.HEALING:h=-W.heal_ability(t.caster,e.ability_power,e.element);break;case c.e.SUMMON:const i=_.sum(_.values(this.data.dbs.summons_db[e.key_name].requirements));h=W.summon_damage(o,e.ability_power,i);break;case c.e.DIRECT_DAMAGE:h=e.ability_power}const d=c.a.get_diminishing_ratios(e.type,e.use_diminishing_ratio);h=h*d[a.magnitude]|0,h+=Object(n.variation)(),h>=0&&o.effects.forEach(t=>{t.type===y.e.DAMAGE_MODIFIER&&(h=t.apply_effect(h).after)}),await this.battle_log.add_damage(h,o,e.affects_pp);const l=e.affects_pp?"current_pp":"current_hp",p=e.affects_pp?"max_pp":"max_hp";o.current_hp=_.clamp(o[l]-h,0,o[p]),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(o);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===y.e.DAMAGE_INPUT){const i=s.on_caster?t.caster:o,a=i.add_effect(s,e).effect,n=a.apply_effect(h);if([y.e.CURRENT_HP,y.e.CURRENT_PP].includes(a.sub_effect.type)){const t=n.before-n.after;0!==t&&(a.effect_msg?await this.battle_log.add(y.b[a.effect_msg](o)):await this.battle_log.add_damage(t,i,a.sub_effect.type===y.e.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()),await this.check_downed(i)}i.remove_effect(a)}}}}async apply_effects(t,e,i){let s;for(let a=0;a<t.targets.length;++a){const o=t.targets[a];if(null===o.magnitude)continue;const h=o.target.instance;if(!h.has_permanent_status(r.e.DOWNED))switch(i.type){case y.e.PERMANENT_STATUS:if(i.add_status){if(h.has_permanent_status(i.status_key_name))break;if(i.status_key_name===r.e.POISON&&h.has_permanent_status(r.e.VENOM))break}case y.e.TEMPORARY_STATUS:if(i.add_status){let s=_.find(h.class.vulnerabilities,{status_key_name:i.status_key_name});s=void 0===s?0:s.chance;const a=c.f.STATUS[o.magnitude];if(W.ailment_success(t.caster,h,i.chance,a,e.element,s)){const t=h.add_effect(i,e,!0).effect;if(t.type===y.e.TEMPORARY_STATUS)h.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===r.f.DEATH_CURSE&&h.has_temporary_status(r.f.DEATH_CURSE)?h.set_effect_turns_count(t):h.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===r.e.VENOM&&h.has_permanent_status(r.e.POISON)){const t=_.find(h.effects,{status_key_name:r.e.POISON});h.remove_effect(t,!0)}await this.battle_log.add(r.c[i.status_key_name](h))}else await this.battle_log.add(`But it has no effect on ${h.name}!`);await this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=_.find(h.effects,{status_key_name:i.status_key_name});if(!t)break;h.remove_effect(t,!0),t.status_key_name===r.e.DOWNED&&h.init_effect_turns_count(),t.type===y.e.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),await this.wait_for_key())}break;case y.e.CURRENT_HP:if(s=h.add_effect(i,e,!0),s.effect.show_msg){const t=s.changes.before-s.changes.after;await this.battle_log.add_damage(t,h),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}await this.check_downed(h),void 0!==s.effect.turns_quantity?this.on_going_effects.push(s.effect):h.remove_effect(s.effect);break;case y.e.MAX_HP:case y.e.MAX_PP:case y.e.ATTACK:case y.e.DEFENSE:case y.e.AGILITY:case y.e.LUCK:case y.e.POWER:case y.e.RESIST:if(s=h.add_effect(i,e,!0),this.on_going_effects.push(s.effect),h.set_effect_turns_count(s.effect,s.effect.turn_count,!1),s.effect.show_msg){const t=s.changes.after-s.changes.before,e=t>=0?"rises":"drops";let a="";[y.e.POWER,y.e.RESIST].includes(i.type)&&(a=n.element_names[s.effect.attribute]+" "),await this.battle_log.add(`${h.name}'s ${a}${y.c[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}break;case y.e.END_THE_ROUND:return await this.battle_log.add("Everybody is resting!"),await this.wait_for_key(),!0;case y.e.TURNS:await this.battle_log.add(t.caster.name+" readies for action!"),await this.wait_for_key(),this.on_going_effects.push(h.add_effect(i,e,!0).effect);break;case y.e.DAMAGE_MODIFIER:await this.battle_log.add(y.b[i.effect_msg](h)),await this.wait_for_key(),this.on_going_effects.push(h.add_effect(i,e,!0).effect);break;case y.e.COUNTER_STRIKE:case y.e.FLEE:break;default:this.on_going_effects.push(h.add_effect(i,e,!0).effect)}}return!1}async battle_phase_round_end(){let t=[],e={};for(let i=0;i<this.on_going_effects.length;++i){const s=this.on_going_effects[i];if(s.char.has_permanent_status(r.e.DOWNED)){s.char.remove_effect(s),s.char.update_all(),t.push(i);continue}let a=!1;void 0!==s.turn_count&&(null!==s.char.get_effect_turns_count(s)?(s.char.key_name in e&&s.char.get_effect_turns_key(s)in e[s.char.key_name]||s.char.set_effect_turns_count(s),s.turn_count=s.char.get_effect_turns_count(s),e[s.char.key_name]?e[s.char.key_name][s.char.get_effect_turns_key(s)]=s:e[s.char.key_name]={[s.char.get_effect_turns_key(s)]:s},a=!0):--s.turn_count,0===s.turn_count&&(s.char.remove_effect(s),s.char.update_all(),t.push(i),a||(this.battle_log.add_recover_effect(s),await this.wait_for_key())))}for(let t in e)for(let i in e[t]){const s=e[t][i];0===s.turn_count&&(this.battle_log.add_recover_effect(s),await this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<B;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],a=this.data.info.djinni_list[s];a.status===E.c.RECOVERY&&(0===a.recovery_turn?(a.set_status(E.c.SET,e),await this.battle_log.add(`${a.name} is set to ${e.name}!`),await this.wait_for_key()):--a.recovery_turn)}}this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=X,this.check_phases()}async battle_phase_end(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.char.remove_effect(e),e.char.update_all()}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_data.name+" has been defeated!"),await this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),await this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],s=i.instance;if(!s.has_permanent_status(r.e.DOWNED)){const e=s.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${s.name} is now a level ${s.level} ${s.class.name}!`),await this.wait_for_key();const t=_.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${s.class.name}'s ${i.name}!`),await this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case"max_hp":t="Maximum HP";break;case"max_pp":t="Maximum PP";break;case"atk":t="Attack";break;case"def":t="Defense";break;case"agi":t="Agility";break;case"luk":t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),await this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),await this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?(this.battle_log.add(`You got a ${t.name}.`),await this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),await this.wait_for_key())}}}this.unset_battle()}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.signal_bindings.forEach(t=>{t.detach()}),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}class et extends a.a{constructor(t,e,i,s){super(t,e,a.b.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new tt(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}class it extends s.a{constructor(t,e){super(t,e)}}const st={IDLE:"idle",WALK_AROUND:"walk_around"},at={NORMAL:"normal",INN:"inn",WEAPON_SHOP:"weapon_shop",ARMOR_SHOP:"armor_shop",MEDICINE_SHOP:"medicine_shop"};class nt extends o.a{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g){super(t,e,i,s,a,n,_,o),this.npc_type=r,this.movement_type=h,this.message=c,this.thought_message=d,this.avatar=l,this.base_collider_layer=p,this.talk_range_factor=void 0===u?3:u,this.events=[],this.set_events(g)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case a.b.BATTLE:this.events.push(new et(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===st.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=Object(n.mount_collision_polygon)(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collider_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return a})),i.d(e,"b",(function(){return n}));var s=i(0);class a{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=a,this.required_jupiter_level=n,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=d,this.ability_level_pairs=l,this.class_type=p,this.vulnerabilities=void 0===u?[]:u}}function n(t,e,i,a,n,o,r){let h=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:n}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:o}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:r}]:[]];let c;c=h.every(t=>0===t.level)?i:_.maxBy(h,t=>t.level).element;const d=e[i][c];let l=Object.values(t).filter(t=>t.class_type===d);return l=l.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=n&&t.required_mars_level<=o&&t.required_jupiter_level<=r),_.sortBy(l,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";i.d(e,"a",(function(){return h}));var s=i(0),a=i(1),n=i(5);const o=a.GAME_HEIGHT-24,r=24-a.OUTSIDE_BORDER_WIDTH-a.INSIDE_BORDER_WIDTH;class h{constructor(t,e,i,h,c,d,l,p,u,g=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.buttons_number=i.length,this.enter_propagation_priority=d,this.esc_propagation_priority=p;const m=Object(s.get_text_width)(this.game,_.maxBy(h,t=>t.length));this.title_window_width=void 0!==u?u:m+2*(a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH);const b=24*this.buttons_number+this.title_window_width+2*a.OUTSIDE_BORDER_WIDTH+2;this.dock_right=g,this.x=a.GAME_WIDTH-b,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new n.a(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,r),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.on_choose=void 0===c?()=>{}:c,this.on_cancel=void 0===l?()=>{}:l,this.right_pressed=!1,this.left_pressed=!1,this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+2*a.OUTSIDE_BORDER_WIDTH+2;this.x=a.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=parseInt(24*(t+.5)),this.buttons[t].sprite.centerY=parseInt(12)}set_change_timers(t){this.change_button(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_button.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){this.buttons[this.selected_button_index].sprite.scale.setTo(1.2,1.2),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:1.3,y:1.3},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e,i=!0){let s;this.reset_button(),this.right_pressed=!1,this.left_pressed=!1,this.menu_active=i,this.group.alpha=1,this.selected_button_index=void 0===e?0:e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,n=new Promise(t=>{s=t});this.title_window.show(s);let _=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([n,_]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.stop_timers(),this.reset_button(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let a,n=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([i,n]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.right_pressed=!1,this.left_pressed=!1,this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.stop_timers(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy(),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return o})),i.d(e,"b",(function(){return r}));var s=i(1),a=i(4),n=i(0),_=i(11);function o(t,e,i){!e.hero.trying_to_push||![n.directions.up,n.directions.down,n.directions.left,n.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||h(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null}function r(t,e,i,s,a,n=!0,_){h(t,e,i,a,s,!0,n,_)}function h(t,e,i,a,_,o=!1,r=!0,h){let l;if(!o){let t=e.hero.sprite.x+(-i.interactable_object_sprite.y-i.interactable_object_sprite.x),s=-e.hero.sprite.x+(-i.interactable_object_sprite.y+i.interactable_object_sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?l=n.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?l=n.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?l=n.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(l=n.directions.right)}if(o||l===e.hero.trying_to_push_direction){o||(e.hero.pushing=!0,e.hero.current_action=n.base_actions.PUSH,e.hero.set_action()),t.physics.p2.pause();let l=0,p=0,u=0,g=0;switch(e.hero.trying_to_push_direction){case n.directions.up:g=-1,p=-16;break;case n.directions.down:g=1,p=16;break;case n.directions.left:u=-1,l=-16;break;case n.directions.right:u=1,l=16}c(e,i,u,g);let m=[i.interactable_object_sprite.body];o||m.push(e.hero.shadow,e.hero.sprite.body);const b=i.current_x,w=i.current_y;i.current_x+=u,i.current_y+=g;let y=[];void 0!==_&&_(l,p),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=l,i.custom_data.blocking_stair_block.y+=p);for(let a=0;a<m.length;++a){let _,o=m[a],r=o.x+l,f=o.y+p;o!==e.hero.shadow&&o!==e.hero.sprite.body||(0===l?r=e.map.sprite.tileWidth*(b+u+.5):0===p&&(f=e.map.sprite.tileHeight*(w+g+.5))),y.push(new Promise(t=>{_=t}));const x=t.add.tween(o).to({x:r,y:f},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);h&&x.onUpdateCallback(h),x.onComplete.addOnce(()=>{let s=!1;a===m.length-1&&i.object_drop_tiles.forEach(a=>{if(a.x===i.current_x&&a.y===i.current_y){s=!0;const o=(a.dest_y-i.current_y)*e.map.sprite.tileHeight;return c(e,i,0,a.dest_y-i.current_y),i.current_y=a.dest_y,i.change_collider_layer(e,a.destination_collider_layer),void t.add.tween(i.interactable_object_sprite.body).to({y:i.interactable_object_sprite.body.y+o},a.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{a.dust_animation?(e.hero.current_action=n.base_actions.IDLE,e.hero.play(e.hero.current_action,n.reverse_directions[e.hero.current_direction]),d(t,e,i,_)):_()})}}),s||_()})}Promise.all(y).then(()=>{e.hero.pushing=!1,r&&t.physics.p2.resume(),void 0!==a&&a()})}}function c(t,e,i,s){let o=e.get_events();for(let r=0;r<o.length;++r){let h=o[r];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,d=h.y,l=c+i,p=d+s;const u=a.TileEvent.get_location_key(l,p);h.x=l,h.y=p,h.location_key=u,u in t.map.events||(t.map.events[u]=[]),t.map.events[u].push(h);const g=Object(n.get_surroundings)(l,p,!1,2);_.a.active_jump_surroundings(t,g,e.collider_layer_shift+e.base_collider_layer);const m=Object(n.get_surroundings)(c,d,!1,2);for(let i=0;i<m.length;++i){const s=m[i],_=a.TileEvent.get_location_key(s.x,s.y);if(_ in t.map.events)for(let i=0;i<t.map.events[_].length;++i){const o=t.map.events[_][i];if(o.type===a.event_types.JUMP){const t=e.collider_layer_shift+e.base_collider_layer;o.activation_collision_layers.includes(t)&&!1===o.dynamic&&o.deactivate_at(Object(n.get_opposite_direction)(s.direction))}}}}}function d(t,e,i,a){let n=new Array(7),_=new Array(7);const o=(i.current_x+.5)*e.map.sprite.tileWidth,r=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let a=0;a<7;++a){const c=(Math.PI+s.degree60)*a/6-s.degree30,d=o+18*Math.cos(c),l=r+18*Math.sin(c);let p=e.npc_group.create(o,r,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(p,e.npc_group.getChildIndex(i.interactable_object_sprite)),p.anchor.setTo(.5,.5),t.add.tween(p).to({x:d,y:l},400,Phaser.Easing.Linear.In,!0),_[a]=p,h.setAnimation(p,"dust");const u=h.getAnimationKey("dust","spread");let g;n[a]=new Promise(t=>{g=t}),p.animations.getAnimation(u).onComplete.addOnce(g),p.animations.play(u)}Promise.all(n).then(()=>{_.forEach(t=>{e.npc_group.remove(t,!0)}),a()})}},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));var s=i(5),a=i(0),n=i(1),o=i(3),r=i(12);const h=n.BLUE_FONT_COLOR,c=n.RED_FONT_COLOR,d=[0,16],l=[1,9],p=[20,36],u=[8,16];class g{constructor(t,e,i=!1,o=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=o,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const r=_.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=49*r+4,this.status_win_x=n.GAME_WIDTH-this.status_win_width-n.INSIDE_BORDER_WIDTH-n.OUTSIDE_BORDER_WIDTH,this.status_window=new s.a(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.status_header_width=Object(a.get_text_width)(this.game,"HP "),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(d[i],l[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",p[i],this.name_y+u[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={};const s=t[e],a=49*e+8,_=s.key_name+"_status";i.group=this.status_window.define_internal_group(_),i.name=this.status_window.set_text_in_position(s.name,a,this.name_y,!1,!1,this.status_window.font_color,this.compact,_);let o=this.name_y+n.FONT_SIZE,r=o+n.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(a,r),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,43,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.default_y=r,i.group.add(i.hp_bar_damage_graphics),i.hp_header=this.status_window.set_text_in_position("HP",a,o,!1,!1,this.status_window.font_color,!1,_);const c=a+40;i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),o=this.name_y+2*n.FONT_SIZE,r=o+n.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(a,r),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,43,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.default_y=r,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",a,o,!1,!1,this.status_window.font_color,!1,_),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=o.a.get_standby_djinni(this.data.info.djinni_list,r.a.get_active_players(this.data.info.party_data,4)),t=_.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=7,this.stars_group.y=this.name_y+n.FONT_SIZE;for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+u[+(t>1)])}}else{for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=_.clamp(this.data.info.party_data.members.length,4);this.status_win_width=49*e+4+(t?36:0),this.status_win_x=n.GAME_WIDTH-this.status_win_width-n.INSIDE_BORDER_WIDTH-n.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let a=this.info_sprites[e.key_name];a.group.visible=!0;const n=49*s+8+(t?36:0);this.status_window.update_text(e.name,a.name,n);const _=n+40;this.status_window.update_text(e.current_hp,a.hp,_),this.status_window.update_text(e.current_pp,a.pp,_),this.status_window.update_text_position({x:n},a.hp_header),this.status_window.update_text_position({x:n},a.pp_header),a.hp_bar_graphics.x=n,a.pp_bar_graphics.x=n;const o=parseInt(43*(1-e.current_hp/e.max_hp)),r=n+43-o;a.hp_bar_damage_graphics.clear(),a.hp_bar_damage_graphics.beginFill(c,1),a.hp_bar_damage_graphics.drawRect(r,a.hp_bar_damage_graphics.default_y,o,3),a.hp_bar_damage_graphics.endFill();const h=parseInt(43*(1-e.current_pp/e.max_pp)),d=n+43-h;a.pp_bar_damage_graphics.clear(),a.pp_bar_damage_graphics.beginFill(c,1),a.pp_bar_damage_graphics.drawRect(d,a.pp_bar_damage_graphics.default_y,h,3),a.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(n-4,3,n-4,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(){this.status_window.close()}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return r})),i.d(e,"b",(function(){return h}));var s=i(10),a=i(6),n=i(0);class o extends a.a{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=a.b.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.current_atk=this.atk,this.current_def=this.def,this.current_agi=this.agi,this.current_luk=this.luk,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case effect_types.POWER:case effect_types.RESIST:case effect_types.MAX_HP:case effect_types.MAX_PP:case effect_types.ATTACK:case effect_types.DEFENSE:case effect_types.AGILITY:case effect_types.LUCK:t.apply_effect()}});for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=_.clamp(this[i],ELEM_ATTR_MIN,ELEM_ATTR_MAX),this[s]=_.clamp(this[s],ELEM_ATTR_MIN,ELEM_ATTR_MAX)}}}class r extends s.a{constructor(t,e,i){super(t,["battle"]),this.key_name=t,this.battle_scale=e,this.data=i}}function h(t,e,i){return new o(t[e].data,t[e].data.name+i)}},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));var s=i(1),a=i(0);const n=Phaser.Timer.SECOND<<1,_=Phaser.Timer.QUARTER,o=Phaser.Timer.QUARTER,r=a.base_actions.IDLE,h=a.directions.down,c="none",d="right",l="left";class p{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=r,this.current_direction=h,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collider_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=c,this.can_make_footprint=!0,this.footsteps_type=1,this.footsteps_time_interval=_,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===d?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot(),this.footsteps_type=this.current_action===a.base_actions.IDLE?"double":"single";const i=this.footsteps_sprite_base.getAnimationKey("footprints",this.footsteps_type);let s;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");s=this.group.create(0,0,t),s.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(s,"footprints")}else s=this.dead_steps[--this.dead_index],s.reset(0,0);const n=s.animations.getAnimation(i);n.stop(!0),this.group.base_collider_layer=this.data.map.collision_layer,s.x=this.data.hero.shadow.x,s.y=this.data.hero.shadow.y,this.position_footsteps(s),n.onComplete.addOnce(()=>{this.kill_step(s)}),this.set_expire_timer(s,i),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===a.base_actions.WALK?_:o,this.current_action===a.base_actions.IDLE?this.foot_forward=c:this.foot_forward=this.foot_forward===l?d:l}clean_all(t){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}const u={x:.5,y:.8};class g{constructor(t,e,i,s,a,n,_,o){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.stop_by_colliding=!1,this.force_direction=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=a,this.current_action=n,this.current_direction=_,this.required_direction=0,this.desired_direction=_,this.color_filter=this.game.add.filter("ColorFilters"),this.enable_footsteps=void 0!==o&&o,this.footsteps=new p(this.game,this.data)}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting}set_sprite(t,e,i,s,a,n){a=void 0===a?u.x:a,n=void 0===n?u.y:n,this.sprite_info=e;const _=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,_),this.sprite.centerX=(this.tile_x_pos+1.5)*i.tileWidth|0,this.sprite.centerY=(this.tile_y_pos+1.5)*i.tileHeight|0,this.sprite.base_collider_layer=s,this.sprite.roundPx=!0,this.sprite.anchor.setTo(a,n)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=u[t]:(this.sprite.anchor.x=u.x,this.sprite.anchor.y=u.y)}set_shadow(t,e,i,s,a){t=void 0===t?"shadow":t,s=void 0===s?.45:s,a=void 0===a?.05:a,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(s,a),this.shadow.base_collider_layer=i}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collider_layer(t){this.sprite.base_collider_layer=t,this.shadow.base_collider_layer=t}play(t,e){if(t=void 0===t?this.current_action:t,e=void 0===e?a.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const i=this.sprite_info.getAnimationKey(t,e);return this.sprite.animations.getAnimation(i)||this.sprite_info.setAnimation(this.sprite,t),this.sprite.animations.play(i),this.sprite.animations.getAnimation(i)}update_shadow(){this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y}stop_char(t=!0){this.sprite.body.velocity.y=this.sprite.body.velocity.x=0,t&&(this.current_action=a.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=a.base_actions.IDLE;const s=i?a.base_actions.IDLE:a.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===a.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action);const e=this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT);e&&this.current_action!==a.base_actions.DASH?this.current_action=a.base_actions.DASH:e||this.current_action===a.base_actions.WALK||(this.current_action=a.base_actions.WALK)}}else this.current_action=a.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;this.current_action===a.base_actions.DASH?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.dash_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.dash_speed+this.extra_speed)|0):this.current_action===a.base_actions.WALK?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.walk_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.walk_speed+this.extra_speed)|0):this.current_action===a.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.sprite_info.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.sprite_info.climb_speed|0):this.current_action===a.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[a.base_actions.WALK,a.base_actions.DASH,a.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(a,n){function _(t){try{r(s.next(t))}catch(t){n(t)}}function o(t){try{r(s.throw(t))}catch(t){n(t)}}function r(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const a=i(1),n=i(4),_=i(22),o=i(23),r=i(24),h=i(0),c=i(25),d=i(26),l=i(29),p=i(27),u=i(28);var g=new class{constructor(){this.game=null,this.dbs={},this.info={},this.menu_open=!1,this.shop_open=!1,this.in_battle=!1,this.created=!1,this.force_stop_movement=!1,this.hero=null,this.collision=null,this.cursors=null,this.debug=null,this.menu_screen=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.enter_input=null,this.esc_input=null,this.shift_input=null,this.spacebar_input=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(a.GAME_WIDTH,a.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){o.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){p.load_databases(this.game,this.dbs),this.enter_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER).onDown,this.esc_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ESC).onDown,this.shift_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onDown,this.spacebar_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onDown,this.scale_factor=this.dbs.init_db.initial_scale_factor,this.debug=new _.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),yield u.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index),this.hero=new c.Hero(this.game,this,this.dbs.init_db.hero_key_name,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction]),this.hero.set_sprite(this.npc_group,this.info.main_char_list[this.hero.key_name].sprite_base,this.map.sprite,this.map.collision_layer),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.camera_follow(),this.hero.play(),this.collision=new r.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.initialize_game_main_controls(),this.tile_event_manager=new d.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new l.GameEventManager(this.game,this),this.cursors=this.game.input.keyboard.createCursorKeys(),this.created=!0,this.game.camera.resetFX()}))}initialize_game_main_controls(){this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(a.GAME_WIDTH,a.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.game.input.keyboard.addKey(Phaser.Keyboard.ONE).onDown.add(()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(a.GAME_WIDTH,a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.TWO).onDown.add(()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.THREE).onDown.add(()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.Q).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}),this.game.input.keyboard.addKey(Phaser.Keyboard.W).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}),this.game.input.keyboard.addKey(Phaser.Keyboard.E).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)})}hero_movement_allowed(){return!(this.hero.in_action(!0)||this.menu_open||this.shop_open||this.in_battle||this.tile_event_manager.on_event||this.force_stop_movement)}update(){if(this.created)if(this.hero_movement_allowed()){this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=n.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.hero.stop_char(!1),this.menu_open&&this.menu_screen.horizontal_menu.menu_active?this.menu_screen.update_position():this.in_battle&&this.battle_instance.update();else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}};window.data=g},function(t,e,i){"use strict";i.r(e),i.d(e,"Debug",(function(){return a}));var s=i(0);class a{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1}initialize_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.D).onDown.add(()=>{this.toggle_debug_physics()}),this.game.input.keyboard.addKey(Phaser.Keyboard.G).onDown.add(()=>{this.toggle_grid()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.K).onDown.add(()=>{this.toggle_keys()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.S).onDown.add(()=>{this.toggle_stats()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.F).onDown.add(()=>{this.toggle_fps()},this)}update_debug_physics(t){data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction,document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding)}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,a=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,a,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_");this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,{game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t]),...t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`}}));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level,document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp,document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp,document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp,document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp,document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp,document.querySelector("#stats_debug table .atk").innerHTML=t.current_atk,document.querySelector("#stats_debug table .def").innerHTML=t.current_def,document.querySelector("#stats_debug table .agi").innerHTML=t.current_agi,document.querySelector("#stats_debug table .luk").innerHTML=t.current_luk,document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current,document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current,document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current,document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current,document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current,document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current,document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current,document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current,document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current,document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current,document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current,document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current,document.querySelector("#stats_debug table .turns").innerHTML=t.turns,document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length}}},function(t,e,i){"use strict";function s(t){!function(t){t.load.json("init_db","init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),t.load.script("color_filters","plugins/color_filters.js")}i.r(e),i.d(e,"load_all",(function(){return s}))},function(t,e,i){"use strict";i.r(e),i.d(e,"Collision",(function(){return s}));class s{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collider_layer=t.map.collision_layer,this.hero.sprite.base_collider_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let s=0;s<i.length;++s){let a=i[s],n=a.properties.over.toString().split(",");if(n.length>e)if(n=n.length>e?0|n[e]:0|n[0],0!==n){t.underlayer_group.remove(a.sprite,!1,!0);let e=0;for(e=0;e<t.overlayer_group.children.length;++e){if(t.overlayer_group.children[e].layer_z>a.z){t.overlayer_group.addAt(a.sprite,e,!0);break}}e===t.overlayer_group.children.length&&t.overlayer_group.add(a.sprite,!0)}else{t.overlayer_group.remove(a.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>a.z){t.underlayer_group.addAt(a.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(a.sprite,!0)}}}}},function(t,e,i){"use strict";i.r(e),i.d(e,"Hero",(function(){return d}));var s=i(20),a=i(1),n=i(4),_=i(0),o=i(17);const r=[null,_.directions.right,_.directions.left,null,_.directions.up,_.directions.up_right,_.directions.up_left,null,_.directions.down,_.directions.down_right,_.directions.down_left,null,null,null,null,null],h=[_.directions.right,_.directions.up_right,_.directions.up_right,_.directions.up,_.directions.up_left,_.directions.up_left,_.directions.left,_.directions.down_left,_.directions.down_left,_.directions.down,_.directions.down_right,_.directions.down_right],c={[_.directions.right]:{x:1,y:0},[_.directions.left]:{x:-1,y:0},[_.directions.up]:{x:0,y:-1},[_.directions.up_right]:{x:a.INV_SQRT2,y:-a.INV_SQRT2},[_.directions.up_left]:{x:-a.INV_SQRT2,y:-a.INV_SQRT2},[_.directions.down]:{x:0,y:1},[_.directions.down_right]:{x:a.INV_SQRT2,y:a.INV_SQRT2},[_.directions.down_left]:{x:-a.INV_SQRT2,y:a.INV_SQRT2}};class d extends s.a{constructor(t,e,i,s,a,n,_){super(t,e,i,s,a,n,_,!0),this.arrow_inputs=null,this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null}update_arrow_inputs(){this.arrow_inputs=1*this.data.cursors.right.isDown|2*this.data.cursors.left.isDown|4*this.data.cursors.up.isDown|8*this.data.cursors.down.isDown,this.required_direction=r[this.arrow_inputs]}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=r[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=c[e].x,this.y_speed=c[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=Object(_.get_transition_directions)(this.desired_direction,e))),this.x_speed=c[e].x,this.y_speed=c[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].interactable_object_sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([_.base_actions.WALK,_.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collider_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[n.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===n.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case _.directions.up:i.y-=1;break;case _.directions.down:i.y+=1;break;case _.directions.left:i.x-=1;break;case _.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,o.a.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[_.base_actions.WALK,_.base_actions.DASH,_.base_actions.CLIMB].includes(this.current_action))if(Math.abs(this.sprite.body.velocity.x)<13&&Math.abs(this.sprite.body.velocity.y)<13){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<.1&&(e[0]=0),Math.abs(e[1])<.1&&(e[1]=0),Math.abs(e[0])>.9&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>.9&&(e[1]=Math.sign(e[1])),t[i]=Object(_.range_360)(Math.atan2(e[1],-e[0]))});const i=Object(_.range_360)(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-a.degree15&&t<=i+a.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==_.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=h[Object(_.range_360)(Math.atan2(e[0][1],-e[0][0])+a.degree15)/a.degree30|0],i=r[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1;else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.update_arrow_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=a.HERO_BODY_RADIUS,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}},function(t,e,i){"use strict";i.r(e),i.d(e,"TileEventManager",(function(){return _}));var s=i(0),a=i(4);class n{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case a.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==a.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}class _{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===a.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==a.event_types.CLIMB||this.hero.idle_climbing?[a.event_types.TELEPORT,a.event_types.JUMP].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new n;for(let n=0;n<e.events[t].length;++n){const _=e.events[t][n];if(_.activation_collision_layers.includes(e.collision_layer)&&(_.type===a.event_types.JUMP&&_.jump_near_collision(),_.is_active(this.hero.current_direction)))if(_.type===a.event_types.SPEED)this.hero.extra_speed!==_.speed&&i.add(_,this.hero.current_direction,_.fire.bind(_),!0);else if(_.type!==a.event_types.TELEPORT||_.advance_effect)if([a.event_types.STEP,a.event_types.COLLISION].includes(_.type)&&!this.event_triggered(_))i.add(_,this.hero.current_direction,_.set.bind(_));else{if(_.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[_.id]&&!this.event_timers[_.id].timer.expired)continue;i.add(_,this.hero.current_direction,()=>{this.event_timers[_.id]=this.game.time.events.add(350,this.fire_event.bind(this,_,this.hero.current_direction))})}}else i.add(_,this.hero.current_direction,this.fire_event.bind(this,_,this.hero.current_direction))}i.process_queue()}}},function(t,e,i){"use strict";function s(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.interactable_objects_db=_.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=_.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=_.mapKeys(e.npc_db,t=>t.key_name),e.summons_db=_.mapKeys(e.summons_db,(t,e)=>(t.index=parseInt(e),t.key_name))}i.r(e),i.d(e,"load_databases",(function(){return s}))},function(t,e,i){"use strict";i.r(e),i.d(e,"initialize_game_data",(function(){return Lt}));var s=i(15),a=i(12);var n=i(8),o=i(1),r=i(17),h=i(0);var c=i(10),d=i(4),l=i(11);class p extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r,h,c,l){super(t,e,d.event_types.CLIMB,i,s,a,n,_,o,c),this.change_to_collision_layer=r,this.is_set=void 0===h||h,this.climbing_only=void 0!==l&&l}fire(t){!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action(!0)||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event||(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===h.directions.down){this.data.hero.play(h.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(h.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.play(h.base_actions.CLIMB,h.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=h.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===h.directions.up){this.data.hero.play(h.base_actions.CLIMB,h.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=h.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===h.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collider_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(h.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-15},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-15;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[h.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(250,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=h.base_actions.IDLE,this.data.hero.set_direction(h.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===h.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[h.directions.up]);const t=Phaser.Timer.QUARTER/3;this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y+15},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.shadow.visible=!0,this.data.hero.current_action=h.base_actions.IDLE,this.data.hero.set_direction(h.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.interactable_object_sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));l.a.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=o.MAP_DAMPING,a.angularDamping=o.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(a)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.interactable_object_sprite.send_to_back=!1,l.a.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}const u="once",g="jump",m="jump_around",b="climb";class w extends c.a{constructor(t,e){super(t,e)}}class y{constructor(t,e,i,s,a,n,_,o,r,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=a,this.allowed_tiles=n,this.base_collider_layer=_,this.collider_layer_shift=o,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===r?[]:r,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=a,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.interactable_object_sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.interactable_object_sprite.x/t.sprite.tileWidth|0,y:this.interactable_object_sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.interactable_object_sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collider_layer]),this.interactable_object_sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collider_layer=e,this.interactable_object_sprite.base_collider_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>d.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collider_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes();const n=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;a.setRectangle(n,n,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),a.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),a.damping=o.MAP_DAMPING,a.angularDamping=o.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=a}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.interactable_object_sprite.is_interactable_object=!0,this.interactable_object_sprite.roundPx=!0,this.interactable_object_sprite.base_collider_layer=this.base_collider_layer,this.interactable_object_sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.interactable_object_sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.interactable_object_sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.interactable_object_sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.interactable_object_sprite.centerX=(this.x+1)*t.tileWidth+i;const a=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.interactable_object_sprite.centerY=this.y*t.tileWidth-a+s,this.sprite_info.setAnimation(this.interactable_object_sprite,this.key_name);const n=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.interactable_object_sprite.animations.play(this.key_name+"_"+n)}initialize_related_events(t,e){const i=this.get_current_position(e);let s=i.x,a=i.y;for(let e=0;e<this.data.dbs.interactable_objects_db[this.key_name].events.length;++e){const i=this.data.dbs.interactable_objects_db[this.key_name].events[e];s+=void 0!==i.x_shift?i.x_shift:0,a+=void 0!==i.y_shift?i.y_shift:0;let n=void 0!==i.collider_layer_shift?i.collider_layer_shift:0;n=void 0!==this.collider_layer_shift?this.collider_layer_shift:n,this.collider_layer_shift=n;const _=void 0===i.active||i.active,o=this.base_collider_layer+n;switch(i.type){case g:this.set_jump_type_event(i,s,a,_,o,t);break;case m:this.set_jump_around_event(i,s,a,_,o,t);break;case b:this.set_stair_event(i,s,a,_,o,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,s,a,n){if(this.not_allowed_tile_test(e,i))return;const _=d.TileEvent.get_location_key(e,i);_ in n||(n[_]=[]);const o=new l.a(this.game,this.data,e,i,[h.directions.up,h.directions.down,h.directions.right,h.directions.left],[a],t.dynamic,s,void 0===t.is_set||t.is_set);n[_].push(o),this.insert_event(o.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{o.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,s,a,n){let _=void 0===t.is_set||t.is_set;Object(h.get_surroundings)(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const o=d.TileEvent.get_location_key(e.x,e.y);if(o in n)for(let t=0;t<n[o].length;++t){const e=n[o][t];e.type===d.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(a)&&(_=!1)}else n[o]=[];const r=new l.a(this.game,this.data,e.x,e.y,[h.directions.right,h.directions.left,h.directions.down,h.directions.up][i],[this.base_collider_layer],t.dynamic,s,_);n[o].push(r),this.insert_event(r.id),this.collision_change_functions.push(()=>{r.activation_collision_layers=[this.base_collider_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,s,a,n){[{x:e,y:i+1,activation_directions:[h.directions.up],activation_collision_layers:[this.base_collider_layer],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[h.directions.down],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collider_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[h.directions.up],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:a,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[h.directions.down],activation_collision_layers:[a],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=d.TileEvent.get_location_key(e.x,e.y);i in n||(n[i]=[]);const a=new p(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,s,e.change_to_collision_layer,t.is_set,this,e.climbing_only);n[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.interactable_object_sprite,!1),this.interactable_object_sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.interactable_object_sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=Object(h.mount_collision_polygon)(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.interactable_object_sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.interactable_object_sprite.body.setCollisionGroup(e[this.base_collider_layer]),this.interactable_object_sprite.body.damping=1,this.interactable_object_sprite.body.angularDamping=1,this.interactable_object_sprite.body.setZeroRotation(),this.interactable_object_sprite.body.fixedRotation=!0,this.interactable_object_sprite.body.dynamic=!1,this.interactable_object_sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}var f=i(5);const x=8+(o.WINDOW_PADDING_H<<1),v=(o.GAME_WIDTH>>1)-(x>>1),E=(o.GAME_HEIGHT>>1)+o.HERO_BODY_RADIUS+6;class k{constructor(t,e){this.game=t,this.data=e,this.window=new f.a(this.game,v,E,x,20),this.text=this.window.set_single_line_text("")}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){let i=Object(h.get_text_width)(this.game,t);this.window.update_size({width:x+i,height:20}),this.window.update_position({x:v-(i>>1)|0,y:E+this.vertical_adjust()|0}),this.window.update_text(Object(h.capitalize)(t),this.text),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}class j{constructor(t,e,i,s,a,n){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=a,this.need_target=n,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new k(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===directions_count?h.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,h.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(h.base_actions.IDLE,h.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,h.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===h.directions.up||this.cast_direction===h.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===h.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===h.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let _=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[_.key_name].psynergy_keys))continue;const o=_.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),r=_.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=r>=i&&r<=s;if(o>=t&&o<=e&&h&&this.data.map.collision_layer===_.base_collider_layer){let t=Math.pow(o-this.controllable_char.sprite.x,2)+Math.pow(r-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=_)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===u){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=function(t,e,i,s,a,n,_){e.filters=[s];let o=[],r=!1,h=[];for(let s=0;s<2;++s){let a=i.create(0,0,"psynergy_aura"),n=i.create(0,0,"psynergy_aura");a.base_collider_layer=e.base_collider_layer,n.base_collider_layer=e.base_collider_layer,a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e))},a.sort_function(),n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e)+1)},n.sort_function();const _=(e.height+n.height-8)/3|0;n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const c=n.y;n.scale.setTo(0,0),a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const d=a.y;a.scale.setTo(0,0);let l=[{aura:n,initial_y:c,scale_factor:1},{aura:a,initial_y:d,scale_factor:-1}];o.push([]);for(let e=0;e<l.length;++e){let i,a=l[e].aura,n=l[e].initial_y,c=l[e].scale_factor,d=t.add.tween(a).to({y:n-_},250,Phaser.Easing.Linear.None),p=t.add.tween(a).to({y:n-2*_},250,Phaser.Easing.Linear.None),u=t.add.tween(a).to({y:n-3*_},250,Phaser.Easing.Linear.None);h.push(new Promise(t=>{i=t})),u.onComplete.add(()=>{a.y=n,r?i():(d.start(),g.start())});let g=t.add.tween(a.scale).to({x:c,y:c},375,Phaser.Easing.Quadratic.Out),m=t.add.tween(a.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);o[s].push({aura:a,tween_a:d,tween_aa:g,tween_b:p,tween_c:u,tween_cc:m}),d.chain(p),p.chain(u),g.chain(m),s>0&&(g.onComplete.addOnce(()=>{o[0][e].aura.y=n,o[0][e].tween_a.start(),o[0][e].tween_aa.start()}),d.start(),g.start())}}let c=16,d=t.time.create(!1),l=t.time.create(!1);return d.loop(50,()=>{s.tint=c%2==0?[1,1,1]:[-1,-1,-1],--c,0===c&&(s.gray=.4,d.stop(),void 0!==a&&a(),l.start())}),l.loop(100,()=>{s.hue_adjust=2*Math.random()*Math.PI}),d.start(),async()=>{void 0!==_&&_(),r=!0,l.stop(),d.stop(),s.tint=[-1,-1,-1],s.gray=0,s.hue_adjust=0,e.filters=void 0,await Promise.all(h);for(let t=0;t<o.length;++t)for(let e=0;e<o[t].length;++e)o[t][e].tween_a.stop(),o[t][e].tween_aa.stop(),o[t][e].tween_b.stop(),o[t][e].tween_c.stop(),o[t][e].tween_cc.stop(),i.remove(o[t][e].aura,!0);void 0!==n&&n()}}(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}class T extends j{constructor(t,e){super(t,e,"move",26,"cast",!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list.move_hand;const i=this.hand_sprite_base.getActionKey("move_hand");this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,"move_hand"),this.emitter=null,this.final_emitter=null,this.set_controls(),this.controls_active=!1}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.right,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.left,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.up,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.down,this.fire_push())}),this.data.esc_input.add(()=>{this.controls_active&&(this.controls_active=!1,this.finish_hand(),this.unset_hero_cast_anim())})}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collider_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case h.directions.up:t.y-=1;break;case h.directions.down:t.y+=1;break;case h.directions.left:t.x-=1;break;case h.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.controls_active=!1,Object(r.b)(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,s=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:s},o.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(o.PUSH_TIME>>1,()=>{let t=!1;if([h.directions.up,h.directions.down].includes(this.cast_direction)&&[h.directions.left,h.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=Object(h.join_directions)(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[h.directions.up,h.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[h.directions.left,h.directions.right].includes(this.cast_direction)&&(this.cast_direction=Object(h.join_directions)(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=h.reverse_directions[this.cast_direction];this.controllable_char.sprite.animations.play("cast_"+e,0),this.controllable_char.sprite.animations.frameName=`cast/${e}/01`})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.interactable_object_sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.interactable_object_sprite.body.y,2)<=Math.pow(o.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collider_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName("move_hand",h.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case h.directions.up:this.target_found?(t=this.target_object.interactable_object_sprite.centerX,e=this.target_object.interactable_object_sprite.y):e-=16;break;case h.directions.down:this.target_found?(t=this.target_object.interactable_object_sprite.centerX,e=this.target_object.interactable_object_sprite.y-this.target_object.interactable_object_sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=16;break;case h.directions.right:this.target_found?(t=this.target_object.interactable_object_sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.interactable_object_sprite.centerY):t+=16;break;case h.directions.left:this.target_found?(t=this.target_object.interactable_object_sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.interactable_object_sprite.centerY):t-=16}this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey("move_hand",h.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.interactable_object_sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.controls_active=!0):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();let i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},350,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case h.directions.up:e=-16;break;case h.directions.down:e=16;break;case h.directions.left:t=-16;break;case h.directions.right:t=16}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=52,this.emitter.height=52,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.final_emitter.x=t,this.final_emitter.y=e;let i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.interactable_object_sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}const A=7*Math.PI;class S extends j{constructor(t,e){super(t,e,"frost",12,"cast",!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close();for(let t=0;t<16;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=_.random(5,8)/10,s=Math.random()*o.degree360;e.scale.setTo(i,i),e.rotation=s;let a=this.controllable_char.sprite.centerX,n=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case h.directions.left:a-=16;break;case h.directions.right:a+=16;break;case h.directions.up:n-=14;break;case h.directions.down:n+=12}let r={rad:A};const c=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),l=this.game.add.tween(r).to({rad:-Math.PI},1650,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));l.onUpdateCallback(()=>{e.centerX=8*c*Math.exp(.15*r.rad)*Math.cos(r.rad)+a,e.centerY=8*d*Math.exp(.15*r.rad)*Math.sin(r.rad)+n}),l.onComplete.addOnce(()=>{e.destroy(),15===t&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,t.type===d.event_types.JUMP&&l.a.active_jump_surroundings(this.data,Object(h.get_surroundings)(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collider_layer))}),this.target_object.interactable_object_sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.interactable_object_sprite.filters=[this.target_object.custom_data.color_filters];let t=16,e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.target_object.interactable_object_sprite.animations.play("frost_pool_pillar"),this.target_object.interactable_object_sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.interactable_object_sprite.events.onDestroy.add(()=>{t.destroy()})}}class I extends j{constructor(t,e){super(t,e,"growth",12,"cast",!0),this.set_bootstrap_method(this.init_bubbles.bind(this))}set_emitter(){let t=0,e=0,i=0,s=0,a=this.controllable_char.sprite.centerX,n=this.controllable_char.sprite.centerY+5,_=0,o=0;switch(this.increase_duration=0,this.cast_direction){case h.directions.up:e=-60,s=-55,t=i=35,n-=7,_=6,o=18,this.increase_duration=80;break;case h.directions.down:e=60,s=55,t=i=35,n+=12,_=6,o=18,this.increase_duration=80;break;case h.directions.left:t=-60,i=-55,e=s=35,a-=16,_=18,o=12;break;case h.directions.right:t=60,i=55,e=s=35,a+=16,_=18,o=12}this.emitter=this.game.add.emitter(a,n,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,s),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=_,this.emitter.height=o,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close(),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()}),this.target_object.interactable_object_sprite.animations.play("growth_growing",8,!1),this.target_object.interactable_object_sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case h.directions.up:e-=16;break;case h.directions.down:e+=16;break;case h.directions.left:t-=16;break;case h.directions.right:t+=16}const i=Phaser.Animation.generateFrameNames("growth/no_target/",0,6,"",2);let s=new Array(5);for(let a=0;a<5;++a){let n,o=this.data.overlayer_group.create(t+_.random(-13,13),e+_.random(-13,13),"growth_growth");o.anchor.setTo(.5,1),o.animations.add("no_target",i,10,!1,!1),s.push(new Promise(t=>{n=t})),this.game.time.events.add(40*a,()=>{o.animations.play("no_target"),o.animations.currentAnim.onComplete.addOnce(()=>{o.destroy(),n()})})}Promise.all(s).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}var O=i(7);var P=i(3);var N=i(19);var R=i(14);class D extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r,h,c,l,p){super(t,e,d.event_types.TELEPORT,i,s,a,n,_,o,null),this.target=r,this.x_target=h,this.y_target=c,this.advance_effect=l,this.dest_collider_layer=p}fire(){if(!(!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event))if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(h.base_actions.WALK,h.reverse_directions[h.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[this.data.hero.current_direction]),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.game.camera.lerp.setTo(1,1),this.change_map()})}async change_map(){this.data.map.unset_map();const t=this.target,e=this.dest_collider_layer;this.data.hero.shadow.base_collider_layer=e,this.data.hero.sprite.base_collider_layer=e,this.data.map=await this.data.info.maps_list[t].mount_map(e),this.game.camera.setBoundsToWorld(),this.game.camera.bounds.width<o.GAME_WIDTH&&(this.game.camera.bounds.width=o.GAME_WIDTH),this.game.camera.bounds.height<o.GAME_HEIGHT&&(this.game.camera.bounds.height=o.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}camera_fade_out(){this.data.hero.update_shadow(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(o.CAMERA_LERP,o.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=_.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=_.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let a,n,o,r,h,c,d;for(let e=0;e<s.length;++e)a=s[e],n=1+(0|a.index),o=a.close_door,r=a.base_offset.split(","),h=this.x+(0|r[0]),c=this.y+(0|r[1])-1,d=1+(0|_.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:o})),this.data.map.sprite.replace(n,d,h,c,1,1,t.name)}}class M extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.STEP,i,s,a,n,_,o,null),this.step_direction=r,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===h.directions.up?e=-(this.data.map.sprite.tileHeight/4|0):this.step_direction===h.directions.down&&(e=this.data.map.sprite.tileHeight/4|0),this.activation_directions[0]===h.directions.left?t=this.x-1:this.activation_directions[0]===h.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.sprite.body.y+=this.shift_y):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}class L extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.COLLISION,i,s,a,n,_,o,null),this.dest_collider_layer=r,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===directions.left?t=this.x-1:this.activation_directions[0]===directions.right?t=this.x+1:this.activation_directions[0]===directions.up?e=this.y-1:this.activation_directions[0]===directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collider_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}class q extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.SPEED,i,s,a,n,_,o,null),this.speed=r}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}var C=i(13);class H{constructor(t,e,i,s,a,n,_,o,r,h){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=a,this.physics_names=n,this.tileset_image_url=_,this.tileset_json_url=o,this.physics_jsons_url=r,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,a)=>{s.y_sort=s.base_collider_layer.toString()+s.y.toString()|0,s.sort_function?i[a]=s:s.send_to_back?t[a]=s:s.send_to_front&&(e[a]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendChildToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringChildToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites()}load_map_assets(t,e){let i,s,a=new Promise(t=>{i=t});this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(i);let n=new Promise(t=>{s=t});this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(s);let _=[];for(let t=0;t<this.physics_names.length;++t){let e,i=new Promise(t=>{e=t});_.push(i),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all([a,n,..._]).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]),this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=o.MAP_DAMPING,this.collision_sprite.body.angularDamping=o.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t)),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return _.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=d.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===d.event_types.CLIMB){const t=new p(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===d.event_types.SPEED){const t=new q(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===d.event_types.TELEPORT){const t=new D(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collider_layer?e.dest_collider_layer:0);this.events[i].push(t)}else if(e.type===d.event_types.JUMP){const t=new l.a(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===d.event_types.STEP){const t=new M(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,h.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===d.event_types.COLLISION){const t=new L(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collider_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name].initial_action;this.npcs.push(new R.a(this.game,this.data,e.key_name,e.initial_x,e.initial_y,i,this.data.dbs.npc_db[e.key_name].actions[i].initial_direction,e.enable_footsteps,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,void 0===e.base_collider_layer?0:e.base_collider_layer,e.talk_range_factor,void 0===e.events?[]:e.events))}create_interactable_objects(t){const e=JSON.parse(t),i=new y(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collider_layer?0:e.base_collider_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in data.dbs.interactable_objects_db[e.key_name].psynergy_keys){data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===u&&(i.custom_data[t+"_casted"]=!1)}data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}async config_interactable_object(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t],i=e.key_name;let s=new w(e.key_name,[i]);e.sprite_info=s,s.setActionSpritesheet(i,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.image,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.json),s.setActionDirections(i,this.data.dbs.interactable_objects_db[e.key_name].actions.animations,this.data.dbs.interactable_objects_db[e.key_name].actions.frames_count),s.setActionFrameRate(i,this.data.dbs.interactable_objects_db[e.key_name].actions.frame_rate),s.setActionLoop(i,this.data.dbs.interactable_objects_db[e.key_name].actions.loop),s.generateAllFrames(),await new Promise(t=>{s.loadSpritesheets(this.game,!0,()=>{e.initial_config(this.sprite),e.initialize_related_events(this.events,this),t()})})}}async config_npc(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=[];e.movement_type===R.c.IDLE&&(s=[h.base_actions.IDLE]);const a=new R.b(e.key_name,s);for(let t=0;t<s.length;++t){const n=s[t];a.setActionSpritesheet(n,`assets/images/spritesheets/npc/${e.key_name}_${n}.png`,`assets/images/spritesheets/npc/${e.key_name}_${n}.json`),a.setActionDirections(n,i.actions[n].directions,i.actions[n].frames_count),a.setActionFrameRate(n,i.actions[n].frame_rate),a.setActionLoop(n,i.actions[n].loop)}a.generateAllFrames(),await new Promise(t=>{a.loadSpritesheets(this.game,!0,()=>{e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collider_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,a,this.sprite,e.base_collider_layer,i.anchor_x,i.anchor_y),e.set_sprite_as_npc(),e.play(),t()})})}}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,this.layers[i].sprite.layer_z=this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let a=this.layers[i].properties.over.toString().split(",");a=a.length>this.collision_layer?0|a[this.collision_layer]:0|a[0],0!==a?t.add(s):e.add(s)}}async mount_map(t){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),await e}this.collision_layer=t,this.events={},d.TileEvent.reset(),C.a.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.addTilesetImage(this.tileset_name,this.key_name);for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),await this.config_interactable_object(),await this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}var U=i(16),G=i(9);const F=100-2*(o.OUTSIDE_BORDER_WIDTH+o.INSIDE_BORDER_WIDTH),W=parseInt(F/4),K=parseInt(F/4/2);class Y{constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.enter_propagation_priority=_,this.esc_propagation_priority=n,this.on_choose=void 0===i?()=>{}:i,this.on_change=void 0===s?()=>{}:s,this.on_cancel=void 0===a?()=>{}:a,this.base_window=new f.a(this.game,0,0,100,36),this.group=t.add.group(),this.group.alpha=0,this.x=0,this.y=0,this.selected_y=0,this.unselected_y=-4,this.set_chars(),this.selected_button_index=0,this.line_index=0,this.menu_open=!1,this.menu_active=!1,this.set_control(),this.cursor_control=new G.a(this.game,!0,!1,this.get_max_per_line.bind(this),void 0,this.group,this.change_button.bind(this),void 0,this.get_selected_button_index.bind(this),this.set_selected_button_index.bind(this),void 0,void 0,this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}get_cursor_x(){return this.char_buttons[this.data.info.party_data.members[this.selected_button_index].key_name].x}get_cursor_y(){return 22}get_max_per_line(){return this.data.info.party_data.members.slice(4*this.line_index,4*(this.line_index+1)).length}get_selected_button_index(){return this.selected_button_index}set_selected_button_index(t){this.selected_button_index=t}is_open(){return this.menu_open}is_activated(){return this.menu_active}set_chars(){for(let t in this.char_buttons)this.char_buttons[t].destroy();this.char_buttons={};for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name]=this.group.create(0,0,e.sprite_base.getActionKey(h.base_actions.IDLE)),this.data.info.party_data.members[t].sprite_base.setAnimation(this.char_buttons[e.key_name],h.base_actions.IDLE),this.char_buttons[e.key_name].animations.play(e.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]))}}set_control(){this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y;for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name].centerX=t*W+K+o.OUTSIDE_BORDER_WIDTH+o.INSIDE_BORDER_WIDTH,this.char_buttons[e.key_name].y=this.unselected_y}}change_button(t,e){this.reset_button(t),this.on_change(e),this.set_button(e)}set_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.selected_y}reset_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.unselected_y}set_char_by_index(t){this.reset_button(this.selected_button_index),this.selected_button_index=t,this.set_button(this.selected_button_index)}open(t,e=!0){Object.keys(this.char_buttons).length!=_.clamp(this.data.info.party_data.members.length,0,4)&&this.set_chars(),this.buttons_number=_.clamp(this.data.info.party_data.members.length,0,4),this.selected_button_index=void 0===t?0:t,this.line_index=0,this.update_position(),this.set_button(this.selected_button_index),this.base_window.show(void 0,!1),this.group.alpha=1,this.menu_active=e,this.cursor_control.activate(),this.menu_open=!0}close(){this.menu_open=!1,this.reset_button(this.selected_button_index),this.group.alpha=0,this.cursor_control.deactivate(),this.base_window.close(void 0,!1)}activate(){this.menu_active=!0,this.cursor_control.activate()}deactivate(){this.menu_active=!1,this.cursor_control.deactivate()}}class B{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new f.a(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const z=o.FONT_SIZE;class ${constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.is_psynergy_window=i,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.on_choose=void 0===a?()=>{}:a,this.on_change=void 0===s?()=>{}:s,this.esc_propagation_priority=n+1,this.enter_propagation_priority=_+1,this.window=new f.a(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.set_control(),this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const r=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(r.text,r.shadow),this.page_index=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.cursor_control=new G.a(this.game,!0,!0,this.get_page_number.bind(this),this.get_elem_per_page.bind(this),this.group,this.page_change.bind(this),this.element_change.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_element_index.bind(this),this.set_element_index.bind(this),this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(o.ICON_WIDTH>>1),0,114,z),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8),this.init_page_indicator_bar()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.window.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.window.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.window.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.window.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.window.create_at_group(129,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.window.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_activated&&(this.data.esc_input.halt(),this.close())},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_activated&&(this.data.enter_input.halt(),this.is_psynergy_window&&this.element_list[this.elements[this.selected_element_index]].is_field_psynergy&&this.close(),this.is_psynergy_window||this.deactivate(),this.on_choose(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]))},this,this.enter_propagation_priority)}is_open(){return this.window_open}is_activated(){return this.window_activated}get_element_index(){return this.selected_element_index}set_element_index(t){this.selected_element_index=t}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_cursor_x(){return-5}get_cursor_y(){return 12+(o.ICON_HEIGHT>>1|0)+this.selected_element_index*(o.ICON_HEIGHT+1)}get_elem_per_page(){return this.elements.length}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_page_number(){return this.page_number}set_page_indicator(){const t=this.get_page_number();if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=132-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.window.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(),this.set_page_indicator_arrow()}}set_page_indicator_highlight(){this.page_number_bar_highlight.x=127-8*(this.get_page_number()-this.get_page_index())}set_page_indicator_arrow(){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=127-8*this.get_page_number()-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=129-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.window.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.cursor_control.set_cursor_position());for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(o.ICON_HEIGHT+1),a=i+(o.ICON_WIDTH>>1),n=s+(o.ICON_HEIGHT>>1),_=8+o.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,_,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(a,n,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=a,i.y=n,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(o.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween&&(this.selected_element_tween.stop(),this.icon_sprites_in_window[t].scale.setTo(1,1)),this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[this.selected_element_index].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(){this.selected_element_tween.stop(),this.selected_element_tween=null}element_change(t,e){this.set_element_tween(t),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(e)],this.is_psynergy_window?void 0:this.item_objs[e])}page_change(){this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.set_page_indicator_highlight()}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=0,this.page_index=0,this.set_elements(),this.set_page_indicator(),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.set_page_indicator(),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}const X=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,J=(132-2*(o.INSIDE_BORDER_WIDTH+1)-8*o.ICON_WIDTH)/7;class Z{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.chars_menu=new Y(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.enter_propagation_priority),this.basic_info_window=new B(this.game),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new f.a(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_psynergy=!1,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.description_window=new f.a(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.psynergy_overview_window=new f.a(this.game,104,24,132,76),this.shortcuts_window=new f.a(this.game,104,104,132,28),this.shortcuts_window_text=this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3),this.psynergy_choose_window=new $(this.game,this.data,!0,this.psynergy_change.bind(this),this.psynergy_choose.bind(this),this.esc_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}char_change(t){this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_psynergy_icons())}char_choose(t){this.is_open&&(this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.open(t,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list&&(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name))}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=X+1+Math.ceil(t%8*(J+o.ICON_WIDTH)),s=X+5+parseInt(t/8)*(3+o.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}class V{constructor(t,e,i,s){this.game=t,this.data=e,this.base_window=new f.a(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.answer_index=0,this.dropped=!1,this.cursor_control=new G.a(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,this.dropped)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.on_choose())},this,this.enter_propagation_priority)}get_cursor_x(){return 16}get_cursor_y(){return 5+(this.answer_index?62:46)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_choose(){0===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close(this.close_callback.bind(this,this.dropped))}open(t,e,i,s,a,n){this.item_obj=t,this.item=e,this.char=i,this.quantity_to_remove=s,this.answer_index=0,this.cursor_control.activate(),this.set_info(),this.update_position(),this.dropped=!1,this.close_callback=a,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==n&&n()},!1)}close(t){this.cursor_control.deactivate(),this.unset_info(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}}class Q{constructor(t,e,i,s,a){this.game=t,this.group=e,this.available_items_count=0,this.x=i,this.y=s,this.on_change=void 0===a?()=>{}:a,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.index_change_time=Phaser.Timer.QUARTER/2,this.right_pressed=!1,this.left_pressed=!1,this.set_controls(),this.create_grid()}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})}set_change_timers(t){this.advance_step(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(this.index_change_time,this.advance_step.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=0;t<this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=30;t>this.available_items_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e){this.clear(),this.current_quantity=e,this.available_items_count=t,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear()}activate(){this.active=!0}deactivate(){this.active=!1}}const tt=16+o.FONT_SIZE,et=tt+o.FONT_SIZE;class it{constructor(t,e,i,s){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.choosen_quantity=1,this.item_counter=new Q(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,et,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,et,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_quantity=0,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback))},this,this.enter_propagation_priority)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,tt),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,tt)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,a,n){if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=a,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==n&&n()},!1)}close(t){this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}const st=8+o.FONT_SIZE,at=st+o.FONT_SIZE;class nt{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i,this.enter_propagation_priority=s,this.base_window=new f.a(this.game,104,0,132,36),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.group=this.game.add.group(),this.answer_index=0,this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.cursor_control=new G.a(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,!1,!1)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback.bind(this,!0,0===this.answer_index)))},this,this.enter_propagation_priority)}get_cursor_x(){return 96}get_cursor_y(){return 5+(this.answer_index?24:8)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,st),this.choosing_char?this.action_text=this.base_window.set_text_in_position("Give it to whom?",27,at):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.action_text=this.base_window.set_text_in_position("Equip this item?",8,at)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.base_window.remove_text(this.action_text),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}open(t,e,i,s,a,n,_){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=s,this.asking_for_equip=a,this.answer_index=0,this.asking_for_equip&&this.cursor_control.activate(),this.set_header(),this.update_position(),this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==_&&_()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}active(){this.window_active=!0,this.cursor_control.activate()}deactive(){this.window_active=!1,this.cursor_control.deactivate()}}const _t=8+o.FONT_SIZE;class ot{constructor(t,e,i,s){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+o.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+o.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+o.FONT_SIZE)},this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.horizontal_index=0,this.vertical_index=0,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.cursor_control=new G.a(this.game,!0,!0,()=>3,()=>2,this.group,this.on_change.bind(this),this.on_change.bind(this),this.get_horizontal_index.bind(this),this.set_horizontal_index.bind(this),this.get_vertical_index.bind(this),this.set_vertical_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.give_item_options_window=new nt(this.game,this.data,this.esc_propagation_priority+2,this.enter_propagation_priority+2),this.item_quantity_manager_window=new it(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.drop_item_window=new V(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.action_message_window=new f.a(this.game,122,66,67,20),this.set_control()}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}is_open(){return this.window_open}is_active(){return this.window_active}get_cursor_x(){return 8+40*this.horizontal_index-15}get_cursor_y(){return 32+o.FONT_SIZE*this.vertical_index+4}get_vertical_index(){return this.vertical_index}set_vertical_index(t){this.vertical_index=t}get_horizontal_index(){return this.horizontal_index}set_horizontal_index(t){this.horizontal_index=t}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.action_message_window.open?this.action_message_window.close():this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.action_message_window.open?this.action_message_window.close():this.on_choose())},this,this.enter_propagation_priority)}set_available_options(){!this.item.use_ability||this.item.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.imporant_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,_t),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.cursor_control.deactivate(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()})}on_choose(){if(0===this.horizontal_index)1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,!0,!1),this.give_item_options_window.deactive(),this.on_give_callback((t,e,i)=>{if(null===t)this.give_item_options_window.close(),this.activate();else if(t.key_name!==this.char.key_name){this.give_item_options_window.close();let s={key_name:this.item_obj.key_name,equipped:!1,quantity:this.item_obj.quantity};this.item.equipable_chars.includes(t.key_name)?this.give_item_options_window.open(s,this.item,t,!1,!0,(e,a)=>{e?(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,a),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())}):this.item_obj.quantity>1?this.item_quantity_manager_window.open(s,this.item,this.char,e=>{e>0?(this.activate(),s.quantity=e,this.char.remove_item(this.item_obj,e),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())},t):(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})),e()}}));else if(1===this.horizontal_index)0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}));else if(2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop){this.deactivate();let t=(t=1)=>{this.drop_item_window.open(this.item_obj,this.item,this.char,t,t=>{this.activate(),t&&this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})})};this.item_obj.quantity>1?this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,e=>{e>0?t(e):this.activate()}):t()}}on_change(){this.stats_window.hide_arrows(),this.stats_window.show(),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open(t,e,i,s,a,n,_,o){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.cursor_control.activate(),this.on_give_callback=a,this.close_callback=n,this.stats_update_callback=_,this.update_position(),this.set_header(),this.set_available_options(),this.on_change(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==o&&o()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.cursor_control.activate(),this.window_active=!0}deactivate(){this.unset_header(),this.cursor_control.deactivate(),this.window_active=!1}}var rt=i(2);class ht{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new f.a(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[rt.e.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[rt.e.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[rt.e.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[rt.e.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[rt.e.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[rt.e.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[rt.e.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[rt.e.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[rt.e.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.current_atk.toString(),this.attack_text),this.base_window.update_text(this.char.current_def.toString(),this.defense_text),this.base_window.update_text(this.char.current_agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let a,n=_.find(this.item.effects,{type:t});if(void 0!==n){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;a=this.char.preview_stats_by_effect(t,n,i)}if(null===this.char.equip_slots[e]){if(void 0===n)return;this.update_preview_text(a,t),this.up_arrows[t].alpha=1}else{if(void 0===_.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===n)return;(void 0===n||s)&&(n={type:t,quantity:0,operator:rt.d.PLUS},a=this.char.preview_stats_by_effect(t,n,this.char.equip_slots[e].key_name));const o=this.char[i];a>o?(this.up_arrows[t].alpha=1,this.update_preview_text(a,t)):a<o&&(this.down_arrows[t].alpha=1,this.update_preview_text(a,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e;switch(this.item.type){case O.b.WEAPONS:e="weapon";break;case O.b.HEAD_PROTECTOR:e="head";break;case O.b.CHEST_PROTECTOR:e="chest";break;case O.b.ARMOR:e="body"}this.set_compare_arrows(rt.e.ATTACK,e,"current_atk",t),this.set_compare_arrows(rt.e.DEFENSE,e,"current_def",t),this.set_compare_arrows(rt.e.AGILITY,e,"current_agi",t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const ct=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,dt=(132-2*(o.INSIDE_BORDER_WIDTH+11)-5*o.ICON_WIDTH)/4;class lt{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.chars_menu=new Y(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.char_choose_cancel.bind(this),this.esc_propagation_priority,this.enter_propagation_priority),this.basic_info_window=new B(this.game),this.item_change_stats_window=new ht(this.game,this.data),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new f.a(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new f.a(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new f.a(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new f.a(this.game,104,24,132,76),this.item_choose_window=new $(this.game,this.data,!1,this.item_change.bind(this),this.item_choose.bind(this),this.esc_propagation_priority),this.item_options_window=new ot(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.choosing_give_destination=!1}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}shift_item_overview(t){t?this.item_overview_window.group.y+=16:this.item_overview_window.group.y-=16}char_change(t){if(this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_item_icons(),this.choosing_give_destination))if(this.item_options_window.item.type===O.b.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==O.b.GENERAL_ITEM){const e=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[t],this.item_options_window.item,e),this.item_change_stats_window.compare_items()}}char_choose(t){if(this.is_open)if(this.choosing_give_destination){if(this.data.info.party_data.members[t].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate(),this.after_char_choose_on_give(this.data.info.party_data.members[t],()=>{this.choosing_give_destination=!1},()=>{this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16})})}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(t,()=>{this.on_item_choose_close()})}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}char_choose_cancel(){this.choosing_give_destination?(this.chars_menu.deactivate(),this.choosing_give_destination=!1,this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16}),this.after_char_choose_on_give(null),this.char_change(this.item_choose_window.char_index),this.item_options_window.item.type===O.b.ABILITY_GRANTOR||this.item_options_window.item.type!==O.b.GENERAL_ITEM&&(this.item_change_stats_window.open(this.data.info.party_data.members[this.item_choose_window.char_index],this.item_options_window.item,this.item_options_window.item_obj),this.item_change_stats_window.compare_items()),this.chars_menu.set_char_by_index(this.item_choose_window.char_index),this.item_options_window.stats_window.compare_items(!0)):this.close_menu()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,t=>{this.choosing_give_destination=!0,this.shift_item_overview(!0),this.item_overview_window.update_size({height:this.item_overview_window.height+16}),this.item_choose_window.hide(),this.item_options_window.hide(),this.chars_menu.activate(),this.char_change(this.selected_char_index),this.after_char_choose_on_give=t},e=>{this.item_choose_window.activate(),t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&this.item_change_stats_window.compare_items(),e&&this.item_choose_window.close()},()=>{t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())})}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=ct+11+Math.ceil(t%5*(dt+o.ICON_WIDTH)),a=ct+12+parseInt(t/5)*(3+o.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,a,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,a+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,a+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}const pt=8+o.FONT_SIZE;class ut{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.char=null,this.base_window=new f.a(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,pt),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const gt=[32,99],mt=[21,37],bt=[16,117],wt=[34,34];class yt{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.x=0,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=Object(h.capitalize)(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(P.b[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(P.b[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(P.b[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(P.b[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+o.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+o.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,a;["Trade","Give"].includes(this.action_text)?(s=gt[t],a=mt[t]):(s=32,a=31);const n=e.sprite_base.getActionKey(h.base_actions.IDLE),_=this.base_window.create_at_group(bt[t],wt[t],n);_.anchor.setTo(.5,1);const o=e.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]);if(_.animations.add(o,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),_.animations.play(o,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(_),"Give"===this.action_text&&1===t)break;const r=this.group.create(s,a,i.element+"_djinn_"+i.status);if(r.anchor.setTo(.5,1),r.scale.x=-.8,r.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(r,i.status),r.animations.play(i.status+"_down"),this.djinn_sprites.push(r),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,n=33*e,_=5*-e,o=this.game.add.tween(r).to({y:[a,a+_,a+_,a],x:[s,s+i,s+i+n,s+i+n+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);o.repeatDelay(300),this.tweens.push(o)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,a){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==a&&a()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const ft=["HP","PP","Attack","Defense","Agility","Luck"],xt=["max_hp","max_pp","atk","def","agi","luk"],vt=h.ordered_elements.slice().reverse();class Et{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.base_window=new f.a(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),this.djinn_number_texts={},vt.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),this.stats_current_texts={},this.stats_next_texts={},ft.forEach((t,e)=>{const i=64+e*o.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),vt.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(xt,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),ft.forEach((t,i)=>{const s=this.char[xt[i]],a=e[xt[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(a.toString(),this.stats_next_texts[t]);const n=64+i*o.FONT_SIZE-3;let _=0;if(["HP","PP"].includes(t)&&(_=-8),s!==a){const t=this.base_window.create_at_group(78+_,n,"stat_"+(a>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,a){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==a&&a()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const kt=o.YELLOW_FONT_COLOR,jt=o.RED_FONT_COLOR,Tt=97+o.FONT_SIZE;class At{constructor(t,e,i,s,a){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.spacebar_propagation_priority=a+1,this.base_window=new f.a(this.game,120,40,116,116),this.base_window.init_page_indicator_bar(),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,Tt),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.execute_operation=!1,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.execute_operation=!0,this.close(this.close_callback))},this,this.enter_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.window_open&&this.change_page(1)}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.window_open&&this.change_page(-1)}),this.data.spacebar_input.add(()=>{this.window_open&&(this.data.spacebar_input.halt(),void 0!==this.spacebar_callback&&this.spacebar_callback())},this,this.spacebar_propagation_priority)}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(o.ICON_HEIGHT+2),a=i+(o.ICON_WIDTH>>1),n=s+(o.ICON_HEIGHT>>1),_=8+o.ICON_WIDTH+2,r=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,_,s+4);this.text_sprites_in_window.push(r),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,n,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const h=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(h),this.gained_abilities.includes(e)?(this.base_window.update_text_color(kt,r),this.base_window.update_text_color(kt,h)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(jt,r),this.base_window.update_text_color(jt,h))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(o.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(kt,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(jt,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(kt,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(jt,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.unset_page_indicator(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,a=!1,n,_,o){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.spacebar_callback=n,this.action=_,a?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==o&&o()},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}const St=0,It=1,Ot=2;class Pt{constructor(t,e,i,s,a,n){this.game=t,this.data=e,this.base_window=new f.a(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.spacebar_propagation_priority=n+1,this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.close_callback=null,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.cursor_control=new G.a(this.game,!0,!0,this.get_max_chars.bind(this),this.get_max_djinn.bind(this),this.group,this.on_char_change.bind(this),this.on_djinn_change.bind(this),this.get_char_index.bind(this),this.set_char_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_x_cursor.bind(this),this.get_y_cursor.bind(this)),this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new yt(this.game,this.data),this.djinn_char_stats_window_left=new Et(this.game),this.djinn_char_stats_window_right=new Et(this.game,120),this.djinn_psynergy_window=new At(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.spacebar_propagation_priority),this.init_djinn_sprites(),this.init_djinni_status_texts(),this.set_control()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&this.setting_djinn_status&&(this.data.esc_input.halt(),this.cancel_djinn_status_set(!0))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.setting_djinn_status?this.set_djinn_operation():this.on_choose())},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.setting_djinn_status&&(this.data.shift_input.halt(),this.change_djinn_status(this.selected_char_index,this.selected_djinn_index))},this,this.shift_propagation_priority)}get_x_cursor(){return 16+56*this.selected_char_index-14}get_y_cursor(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?24-o.FONT_SIZE:24+this.selected_djinn_index*o.FONT_SIZE+3}is_open(){return this.window_open}is_active(){return this.window_active}get_char_index(){return this.selected_char_index}set_char_index(t){this.selected_char_index=t}get_djinn_index(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.setting_djinn_status_djinn_index:this.selected_djinn_index}set_djinn_index(t){this.selected_djinn_index=t}get_max_chars(){return this.sizes.length}get_max_djinn(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?1:this.sizes[this.selected_char_index]}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in h.elements){const i=h.elements[e];if(i===h.elements.NO_ELEMENT)continue;const s=50+56*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+56*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,n;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case P.c.RECOVERY:n="left";case P.c.STANDBY:n="down",a="standby";break;case P.c.SET:n="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+n)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(h.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],h.base_actions.IDLE)}const a=i.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]);this.chars_sprites[s].animations.play(a);const n=32+56*t;this.chars_sprites[s].x=n,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let a=0;a<e.length;++a){const n=this.data.info.djinni_list[e[a]],_=17+56*t,r=25+a*o.FONT_SIZE;s.push(this.base_window.create_at_group(_,r,n.element+"_star"));const h=24+56*t,c=24+a*o.FONT_SIZE;let d;switch(n.status){case P.c.SET:d=P.b[P.c.SET];break;case P.c.STANDBY:d=P.b[P.c.STANDBY];break;case P.c.RECOVERY:d=P.b[P.c.RECOVERY]}const l=this.base_window.set_text_in_position(n.name,h,c,!1,!1,d);i.push(l)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+56*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*o.FONT_SIZE),this.setting_djinn_status&&this.selected_char_index!==this.setting_djinn_status_char_index?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+56*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*o.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(t,e){this.selected_char_index=e,this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.cursor_control.set_cursor_position()),this.set_highlight_bar();const i=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(i),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(t,e){this.selected_djinn_index=e,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==P.c.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=o.FONT_SIZE;for(let t=0;t<4;++t)for(let e in h.elements){const i=h.elements[e];i!==h.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=o.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case P.c.SET:s=Object(h.capitalize)(P.c.STANDBY);break;case P.c.STANDBY:s=Object(h.capitalize)(P.c.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;e.djinni.length<t.djinni.length?(s="Give",++this.sizes[i]):s="Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.cursor_control.set_cursor_position()}}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?Object(h.change_brightness)(P.b[s.status],.7):P.b[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=o.FONT_SIZE;for(let t=0;t<4;++t){for(let e in h.elements){const i=h.elements[e];i!==h.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=o.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.set_cursor_position()}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,n,_,o,r;this.selected_djinn_index===i.djinni.length?(s=[e.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],a=[e.status===P.c.STANDBY?"irrelevant":e.status],n=[e],_=[e],o="Give"):(r=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[r.status===P.c.STANDBY?"irrelevant":r.status,e.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],a=[e.status===P.c.STANDBY?"irrelevant":e.status,r.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],n=[r,e],_=[e,r],o="Trade"),this.djinn_char_stats_window_left.open(t,n,s,o),this.djinn_char_stats_window_right.open(i,_,a,o),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],_,s,o),this.deactivate(),this.view_state=St,this.djinn_psynergy_window.open(t,n,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s&&("Trade"===o?(t.replace_djinn(e.key_name,r.key_name),i.replace_djinn(r.key_name,e.key_name)):"Give"===o&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>Ot&&(this.view_state=St),this.view_state){case St:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case It:this.djinn_psynergy_window.update_info(t,n,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case Ot:this.djinn_psynergy_window.update_info(i,_,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},o)}else{let i;switch(e.status){case P.c.SET:i=P.c.STANDBY;break;case P.c.STANDBY:i=P.c.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t&&(this.change_djinn_status(this.setting_djinn_status_char_index,this.setting_djinn_status_djinn_index),this.cancel_djinn_status_set()),this.activate()})}}change_djinn_status(t,e){const i=this.data.info.party_data.members[t],s=this.data.info.djinni_list[i.djinni[e]];s.status===P.c.SET?(s.set_status(P.c.STANDBY,i),this.base_window.update_text_color(P.b[P.c.STANDBY],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):s.status===P.c.STANDBY&&(s.set_status(P.c.SET,i),this.base_window.update_text_color(P.b[P.c.SET],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.activate(),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.base_window.show(void 0,!1),s&&s()}close(t){this.window_open=!1,this.window_active=!1,this.cursor_control.deactivate(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),t&&t()}activate(){this.window_active=!0,this.cursor_control.activate()}deactivate(){this.window_active=!1,this.cursor_control.deactivate()}}class Nt{constructor(t){this.game=t,this.window_open=!1,this.base_window=new f.a(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.star_sprite=null,this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")},this.action_text=this.base_window.set_text_in_position("",31,24)}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case P.c.SET:this.base_window.update_text(": Standby",this.action_text);break;case P.c.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}class Rt{constructor(t,e,i,s,a,n){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.spacebar_propagation_priority=n+1,this.is_open=!1,this.close_callback=null,this.selected_char_index=0,this.set_control(),this.chars_quick_info_window=new ut(this.game),this.djinn_action_window=new Nt(this.game),this.djinni_list_window=new Pt(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.shift_propagation_priority,this.spacebar_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}var Dt=i(18);class Mt{constructor(t,e){this.game=t,this.data=e,this.chars_status_window=new Dt.a(this.game,this.data),this.buttons_keys=["psynergy","djinni","item","status"];let i=0,s=0;this.horizontal_menu=new U.a(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>Object(h.capitalize)(t)),this.button_press.bind(this),s,this.close_menu.bind(this),i),++i,++s,this.psynergy_menu=new Z(this.game,this.data,i,s),this.item_menu=new lt(this.game,this.data,i,s),this.djinn_menu=new Rt(this.game,this.data,i,s,0,0)}button_press(t){switch(this.buttons_keys[t]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu)}}button_press_action(t){this.horizontal_menu.deactivate(),t.open_menu(t=>{this.horizontal_menu.activate(),this.chars_status_window.update_chars_info(),t&&this.close_menu()})}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_menu(){this.horizontal_menu.open(),this.chars_status_window.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.data.menu_open=!1,this.horizontal_menu.close(),this.chars_status_window.close())}}async function Lt(t,e){let i;const _=new Promise(t=>{i=t});let o;e.info.maps_list=function(t,e,i,s){let a={};for(let s=0;s<i.length;++s){const n=i[s];a[n.key_name]=new H(t,e,n.name,n.key_name,n.tileset_key_name,n.collision_key_names,n.tileset_files.image,n.tileset_files.json,n.collision_files,n.lazy_load)}let n=[];for(let t in a){if(a[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});n.push(i),a[t].load_map_assets(!0,e)}return Promise.all(n).then(s),a}(t,e,e.dbs.maps_db,i),await _,e.info.classes_list=function(t){let e={};for(let i=0;i<t.classes.length;++i){const a=t.classes[i];e[a.key_name]=new s.a(a.key_name,a.name,a.required_venus_level,a.required_mercury_level,a.required_mars_level,a.required_jupiter_level,a.hp_boost,a.pp_boost,a.atk_boost,a.def_boost,a.agi_boost,a.luk_boost,a.ability_level_pairs,a.class_type,a.vulnerabilities)}return e}(e.dbs.classes_db);const r=new Promise(t=>{o=t});let d;e.info.enemies_list=function(t,e,i){let s=[],a={};for(let i=0;i<e.length;++i){const n=e[i];a[n.key_name]=new N.a(n.key_name,n.battle_scale,n);const _=n.battle_spritesheet;if(void 0!==_){let e;a[n.key_name].setActionSpritesheet("battle",_.spritesheet_img,_.spritesheet),a[n.key_name].setActionDirections("battle",_.positions,_.frames_number),a[n.key_name].setActionFrameRate("battle",_.frame_rate),a[n.key_name].setActionLoop("battle",_.loop),a[n.key_name].generateAllFrames();const i=new Promise(t=>{e=t});s.push(i),a[n.key_name].loadSpritesheets(t,!0,e)}}return Promise.all(s).then(i),a}(t,e.dbs.enemies_db,o),await r,e.info.djinni_list=function(t){let e={};for(let i=0;i<t.length;++i){const s=t[i];e[s.key_name]=new P.a(s.key_name,s.name,s.description,s.element,s.ability_key_name,s.hp_boost,s.pp_boost,s.atk_boost,s.def_boost,s.agi_boost,s.luk_boost,i)}return e}(e.dbs.djinni_db);const l=new Promise(t=>{d=t});let p;e.info.djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},a={set:6,standby:2},n="assets/images/spritesheets/djinn/";let _=[],o={};for(let e in h.elements){const r=h.elements[e];if(r===h.elements.NO_ELEMENT)continue;o[r]=new c.a(r+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];o[r].setActionSpritesheet(e,`${n}${r}_djinn.png`,`${n}${r}_djinn.json`),o[r].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),o[r].setActionFrameRate(e,a[e])}let d;o[r].generateAllFrames();const l=new Promise(t=>{d=t});_.push(l),o[r].loadSpritesheets(t,!0,d)}return Promise.all(_).then(e),o}(t,d),await l;const u=new Promise(t=>{p=t});let g;e.info.abilities_list=function(t,e,i){let s={};for(let t=0;t<e.length;++t){const i=e[t];s[i.key_name]=new n.a(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),s}(t,e.dbs.abilities_db,p),await u;const m=new Promise(t=>{g=t});let b;e.info.items_list=function(t,e,i){let s={};for(let t=0;t<e.length;++t){const i=e[t];s[i.key_name]=new O.a(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.imporant_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability,i.icon_path)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),s}(t,e.dbs.items_db,g),await m,e.info.party_data={members:[],coins:e.dbs.init_db.coins};const w=new Promise(t=>{b=t});let y;e.info.main_char_list=function(t,e,i,s,n){let _=[],o={};for(let n=0;n<i.length;++n){const r=i[n],h=new a.b(r.key_name,r.actions.map(t=>t.key),r.walk_speed,r.dash_speed,r.climb_speed,r.push_speed);o[r.key_name]=new a.a(r.key_name,e,h,r.name,r.hp_curve,r.pp_curve,r.atk_curve,r.def_curve,r.agi_curve,r.luk_curve,r.exp_curve,r.starting_level,s.class_table,r.battle_scale,r.venus_level_base,r.mercury_level_base,r.mars_level_base,r.jupiter_level_base,r.venus_power_base,r.mercury_power_base,r.mars_power_base,r.jupiter_power_base,r.venus_resist_base,r.mercury_resist_base,r.mars_resist_base,r.jupiter_resist_base,r.innate_abilities,r.in_party,r.djinni,r.items,r.battle_animations_variations),r.in_party&&e.party_data.members.push(o[r.key_name]);for(let t=0;t<r.actions.length;++t){const e=r.actions[t];h.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),h.setActionDirections(e.key,e.directions,e.directions_frames_number),h.setActionFrameRate(e.key,e.frame_rate),h.setActionLoop(e.key,e.loop)}let c;h.generateAllFrames();const d=new Promise(t=>{c=t});_.push(d),h.loadSpritesheets(t,!0,c)}return Promise.all(_).then(n),o}(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,b),await w;const f=new Promise(t=>{y=t});e.info.misc_sprite_base_list=function(t,e,i){let s={},a=[];for(let i=0;i<e.length;++i){const n=e[i],_=new c.a(n.key_name,n.actions.map(t=>t.key_name));s[n.key_name]=_;for(let t=0;t<n.actions.length;++t){const e=n.actions[t];_.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),_.setActionDirections(e.key_name,e.animations,e.frames_count),_.setActionFrameRate(e.key_name,e.frame_rate),_.setActionLoop(e.key_name,e.loop)}let o;_.generateAllFrames();const r=new Promise(t=>{o=t});a.push(r),_.loadSpritesheets(t,!0,o)}return Promise.all(a).then(i),s}(t,e.dbs.misc_animations_db,y),await f,e.info.field_abilities_list=function(t,e){return{move:new T(t,e),frost:new S(t,e),growth:new I(t,e)}}(t,e),e.menu_screen=function(t,e){return e.spacebar_input.add(()=>{e.hero.in_action()||e.in_battle||!e.created||(e.menu_open?e.menu_screen.is_active()&&e.menu_screen.close_menu():(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.menu_screen.open_menu()))},this),new Mt(t,e)}(t,e)}},function(t,e,i){"use strict";i.r(e),i.d(e,"interaction_patterns",(function(){return r})),i.d(e,"GameEventManager",(function(){return h}));var s=i(0),a=i(1),n=i(5);class _{constructor(t,e,i=!0){this.game=t,this.data=e,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.italic_font=i,this.hero_direction=s.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const a=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,a),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null,this.show_crystal=!1}get_dialog_window_position(t,e){const i=a.GAME_WIDTH-t>>1;let n=a.MAX_DIAG_WIN_HEIGHT-e>>1;return[s.directions.up,s.directions.up_left,s.directions.up_right].includes(this.hero_direction)||(n=a.GAME_HEIGHT-(a.MAX_DIAG_WIN_HEIGHT+4)+n),{x:i,y:n}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=a.GAME_HEIGHT>>1?t.y-a.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t.bind(this,this.finished)),void this.dialog_crystal.destroy();this.window&&(this.window.destroy(!1),this.window=null),this.mount_window(t,e,i),++this.step}mount_window(t,e,i){this.dialog_crystal.visible=!1;let s=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(s.x=e.x),e&&void 0!==e.y&&(s.y=e.y),this.window=new n.a(this.game,s.x,s.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1||this.show_crystal){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i(this.finished)})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(s);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=a.AVATAR_SIZE+4;this.avatar_window=new n.a(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const n=a.MAX_DIAG_WIN_WIDTH-2*a.WINDOW_PADDING_H-a.INSIDE_BORDER_WIDTH;let _=t.split(" "),o=[],r=[],h=[],c=0,d=0;for(let t=0;t<_.length;++t){const e=_[t];if(c=s.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=n){const t=h.join(" ");r.push(t),d=Math.max(d,s.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=s.get_text_width(this.game,e,this.italic_font),r.length===a.MAX_LINES_PER_DIAG_WIN&&(o.push({lines:r.slice(),width:d+2*a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH,height:a.WINDOW_PADDING_TOP+a.WINDOW_PADDING_BOTTOM+r.length*(a.FONT_SIZE+a.SPACE_BETWEEN_LINES)-a.SPACE_BETWEEN_LINES}),d=0,r=[])}else h.push(e)}h.length&&(d=Math.max(d,s.get_text_width(this.game,h.join(" "),this.italic_font)),r.push(h.join(" ")),o.push({lines:r.slice(),width:d+2*a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH+2,height:a.WINDOW_PADDING_TOP+a.WINDOW_PADDING_BOTTOM+r.length*(a.FONT_SIZE+a.SPACE_BETWEEN_LINES)-a.SPACE_BETWEEN_LINES})),this.parts=o}quick_next(t,e,i,s,a,n,_=!1){this.parts=null,this.step=0,this.window&&(this.window.destroy(!1),this.window=null),this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.show_crystal=_,this.set_dialog(t,i,s),this.mount_window(e,a,n)}kill_dialog(t){this.avatar_window&&this.avatar_window.destroy(!1),this.window&&(this.finished=!0,this.window.destroy(!0,t),this.dialog_crystal.destroy())}}var o=i(14);const r={TIK_TAK_TOE:"tik_tak_toe",CROSS:"cross"};class h{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){this.data.enter_input.add(()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(Object(s.is_close)(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.data.force_stop_movement=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){if(t.npc_type===o.d.NORMAL)if(t.message){const e=new _(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction);const i=t.sprite.x,a=t.sprite.y,n=this.data.dbs.npc_db[t.key_name].interaction_pattern,o=h.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,i,a,n,t.body_radius);this.data.hero.set_direction(o.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[o.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[o.target_direction]),this.fire_next_step=e.next.bind(e,e=>{if(e){this.on_event=!1,this.data.force_stop_movement=!1;const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i),this.fire_npc_events(t)}this.control_enable=!0}),this.fire_next_step()}else this.fire_npc_events(t)}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,e,i,a,n,_){let o,h;if(n===r.CROSS){let n=t+(-a-i),_=-t+(-a+i);-e>=n&&-e>=_?o=s.directions.up:-e<=n&&-e>=_?o=s.directions.right:-e<=n&&-e<=_?o=s.directions.down:-e>=n&&-e<=_&&(o=s.directions.left)}return t<=i-_&&e>=a+_?(h=s.directions.up_right,o=n===r.TIK_TAK_TOE?s.directions.down_left:o):t<=i-_&&e>=a-_&&e<=a+_?(h=s.directions.right,o=n===r.TIK_TAK_TOE?s.directions.left:o):t<=i-_&&e<=a-_?(h=s.directions.down_right,o=n===r.TIK_TAK_TOE?s.directions.up_left:o):t>=i-_&&t<=i+_&&e<=a-_?(h=s.directions.down,o=n===r.TIK_TAK_TOE?s.directions.up:o):t>=i+_&&e<=a-_?(h=s.directions.down_left,o=n===r.TIK_TAK_TOE?s.directions.up_right:o):t>=i+_&&e>=a-_&&e<=a+_?(h=s.directions.left,o=n===r.TIK_TAK_TOE?s.directions.right:o):t>=i+_&&e>=a+_?(h=s.directions.up_left,o=n===r.TIK_TAK_TOE?s.directions.down_right:o):t>=i-_&&t<=i+_&&e>=a+_&&(h=s.directions.up,o=n===r.TIK_TAK_TOE?s.directions.down:o),{hero_direction:h,target_direction:o}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,