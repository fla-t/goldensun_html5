!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=21)}([function(t,e,i){"use strict";i.r(e),i.d(e,"elements",(function(){return a})),i.d(e,"ordered_elements",(function(){return n})),i.d(e,"element_names",(function(){return o})),i.d(e,"directions",(function(){return r})),i.d(e,"directions_count",(function(){return h})),i.d(e,"reverse_directions",(function(){return c})),i.d(e,"base_actions",(function(){return d})),i.d(e,"directions_angles",(function(){return l})),i.d(e,"map_directions",(function(){return p})),i.d(e,"split_direction",(function(){return u})),i.d(e,"join_directions",(function(){return g})),i.d(e,"variation",(function(){return m})),i.d(e,"range_360",(function(){return b})),i.d(e,"is_inside_sector",(function(){return w})),i.d(e,"is_close",(function(){return y})),i.d(e,"transitions",(function(){return f})),i.d(e,"get_opposite_direction",(function(){return x})),i.d(e,"get_transition_directions",(function(){return v})),i.d(e,"get_text_width",(function(){return E})),i.d(e,"get_surroundings",(function(){return k})),i.d(e,"get_directions",(function(){return j})),i.d(e,"capitalize",(function(){return T})),i.d(e,"change_brightness",(function(){return A})),i.d(e,"rgb2hsv",(function(){return S})),i.d(e,"hsv2rgb",(function(){return I})),i.d(e,"mount_collision_polygon",(function(){return O}));var s=i(1);const a={VENUS:"venus",MERCURY:"mercury",MARS:"mars",JUPITER:"jupiter",NO_ELEMENT:"no_element"},n=[a.VENUS,a.MERCURY,a.MARS,a.JUPITER],o={[a.VENUS]:"Earth",[a.MERCURY]:"Water",[a.MARS]:"Fire",[a.JUPITER]:"Wind"},r={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},h=Object.keys(r).length,c={[r.right]:"right",[r.up_right]:"up_right",[r.up]:"up",[r.up_left]:"up_left",[r.left]:"left",[r.down_left]:"down_left",[r.down]:"down",[r.down_right]:"down_right"},d={IDLE:"idle",WALK:"walk",DASH:"dash",PUSH:"push",CLIMB:"climb",CAST:"cast"};function l(t){return t*Math.PI/4}function p(t){return void 0===t?t:(t=Array.isArray(t)?t:[t]).map(t=>r[t])}function u(t){if(t%2==0)return[t];let e=new Array(2);return e[0]=t===r.right?t.up_right:t-1,e[1]=t===r.up_right?r.right:t+1,e}function g(t,e){return e=t===r.up&&e===r.right?h:e,Math.min(t,e)+1}function m(){return _.random(0,4)}function b(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function w(t,e,i,a,n,_,o){const r=e*i*(e*i),h=Math.pow(_-a,2)+Math.pow(o-n,2),c=b(Math.atan2(n-o,_-a)),d=[0,s.degree90,Math.PI,s.degree270,s.degree360];let l=!1;for(let e=0;e<t.length;++e){let i=t[e],s=d[i-1];if(l=d[i]>=c&&c>=s,l)break}return h<=r&&l}function y(t,e,i,a,n,_){switch(t){case r.up:return w([1,2],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.up_right:return w([1],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.right:return w([1,4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down_right:return w([4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down:return w([3,4],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.down_left:return w([3],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.left:return w([2,3],s.HERO_BODY_RADIUS,_,e,i,a,n);case r.up_left:return w([2],s.HERO_BODY_RADIUS,_,e,i,a,n)}}const f={[r.up]:{[r.up]:r.up,[r.down]:r.down_left,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.up},[r.down]:{[r.up]:r.up_left,[r.down]:r.down,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.right},[r.left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.up},[r.right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.down_left,[r.right]:r.right,[r.down_left]:r.down,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.right},[r.down_left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down_left,[r.down_right]:r.down,[r.up_left]:r.left,[r.up_right]:r.up},[r.down_right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.down_left,[r.right]:r.down_right,[r.down_left]:r.down,[r.down_right]:r.down_right,[r.up_left]:r.left,[r.up_right]:r.right},[r.up_left]:{[r.up]:r.up_left,[r.down]:r.down_left,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up_left,[r.up_right]:r.up},[r.up_right]:{[r.up]:r.up_right,[r.down]:r.down_right,[r.left]:r.up_left,[r.right]:r.up_right,[r.down_left]:r.left,[r.down_right]:r.right,[r.up_left]:r.up,[r.up_right]:r.up_right}};function x(t){switch(t){case r.up:return r.down;case r.down:return r.up;case r.left:return r.right;case r.right:return r.left}}function v(t,e){return f[e][t]}function E(t,e,i=!1){const a=i?"gs-italic-bmp-font":"gs-bmp-font";let n=t.add.bitmapText(0,0,a,e,s.FONT_SIZE);const _=n.width;return n.destroy(),_}function k(t,e,i=!1,s=1){let a=[{x:t-s,y:e,diag:!1,direction:r.left},{x:t+s,y:e,diag:!1,direction:r.right},{x:t,y:e-s,diag:!1,direction:r.up},{x:t,y:e+s,diag:!1,direction:r.down}];return i&&(a=a.concat([{x:t-s,y:e-s,diag:!0,direction:r.up_left},{x:t+s,y:e-s,diag:!0,direction:r.up_right},{x:t-s,y:e+s,diag:!0,direction:r.down_left},{x:t+s,y:e+s,diag:!0,direction:r.down_right}])),a}function j(t=!1){let e=[r.up,r.down,r.left,r.right];return t&&e.push(r.up_left,r.up_right,r.down_left,r.down_right),e}function T(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())}function A(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,a,n=parseInt(t.substr(0,2),16),_=parseInt(t.substr(2,2),16),o=parseInt(t.substr(4,2),16);return[i,s,a]=S(n,_,o),a=a*e|0,[n,_,o]=I(i,s,a),t=((1<<24)+(n<<16)+(_<<8)+o).toString(16).slice(1),parseInt(t,16)}function S(t,e,i){let s=Math.max(t,e,i),a=s-Math.min(t,e,i),n=a&&(s===t?(e-i)/a:s===e?2+(i-t)/a:4+(t-e)/a);return[60*(n<0?n+6:n),s&&a/s,s]}function I(t,e,i){let s=(s,a=(s+t/60)%6)=>i-i*e*Math.max(Math.min(a,4-a,1),0);return[s(5),s(3),s(1)]}function O(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";i.r(e),i.d(e,"GAME_WIDTH",(function(){return s})),i.d(e,"GAME_HEIGHT",(function(){return a})),i.d(e,"TARGET_FPS",(function(){return n})),i.d(e,"HERO_BODY_RADIUS",(function(){return _})),i.d(e,"INV_SQRT2",(function(){return o})),i.d(e,"DELTA_TIME_FACTOR",(function(){return r})),i.d(e,"MAP_DAMPING",(function(){return h})),i.d(e,"DEFAULT_WINDOW_COLOR",(function(){return c})),i.d(e,"DEFAULT_FONT_COLOR",(function(){return d})),i.d(e,"YELLOW_FONT_COLOR",(function(){return l})),i.d(e,"RED_FONT_COLOR",(function(){return p})),i.d(e,"BLUE_FONT_COLOR",(function(){return u})),i.d(e,"PURPLE_FONT_COLOR",(function(){return g})),i.d(e,"FONT_SIZE",(function(){return m})),i.d(e,"INSIDE_BORDER_WIDTH",(function(){return b})),i.d(e,"OUTSIDE_BORDER_WIDTH",(function(){return w})),i.d(e,"WINDOW_PADDING_H",(function(){return y})),i.d(e,"WINDOW_PADDING_TOP",(function(){return f})),i.d(e,"WINDOW_PADDING_BOTTOM",(function(){return x})),i.d(e,"SPACE_BETWEEN_LINES",(function(){return v})),i.d(e,"MAX_DIAG_WIN_WIDTH",(function(){return E})),i.d(e,"MAX_LINES_PER_DIAG_WIN",(function(){return k})),i.d(e,"MAX_DIAG_WIN_HEIGHT",(function(){return j})),i.d(e,"PUSH_TIME",(function(){return T})),i.d(e,"ICON_WIDTH",(function(){return A})),i.d(e,"ICON_HEIGHT",(function(){return S})),i.d(e,"degree15",(function(){return I})),i.d(e,"degree30",(function(){return O})),i.d(e,"degree60",(function(){return P})),i.d(e,"degree90",(function(){return N})),i.d(e,"degree180",(function(){return R})),i.d(e,"degree270",(function(){return D})),i.d(e,"degree360",(function(){return M})),i.d(e,"degree540",(function(){return L})),i.d(e,"CAMERA_LERP",(function(){return C})),i.d(e,"ELEM_ATTR_MIN",(function(){return q})),i.d(e,"ELEM_ATTR_MAX",(function(){return H})),i.d(e,"AVATAR_SIZE",(function(){return U}));const s=240,a=160,n=60,_=7,o=1/Math.sqrt(2),r=50/3,h=1,c=24704,d=16316664,l=16316480,p=16252928,u=248,g=14708912,m=8,b=3,w=1,y=4,f=8,x=4,v=5,E=180,k=3,j=m*k+v*(k-1)+f+x,T=850,A=14,S=14,I=15*Math.PI/180,O=30*Math.PI/180,P=60*Math.PI/180,N=Math.PI/2,R=Math.PI,D=3*Math.PI/2,M=2*Math.PI,L=3*Math.PI,C=.15,q=-200,H=200,U=32},function(t,e,i){"use strict";i.d(e,"e",(function(){return a})),i.d(e,"c",(function(){return _})),i.d(e,"d",(function(){return o})),i.d(e,"f",(function(){return r})),i.d(e,"b",(function(){return h})),i.d(e,"a",(function(){return c}));var s=i(0);const a={MAX_HP:"max_hp",MAX_PP:"max_pp",ATTACK:"attack",DEFENSE:"defense",AGILITY:"agility",LUCK:"luck",POWER:"power",RESIST:"resist",CURRENT_HP:"current_hp",CURRENT_PP:"current_pp",HP_RECOVERY:"hp_recovery",PP_RECOVERY:"pp_recovery",CRITICALS:"criticals",COUNTER_STRIKE:"counter_strike",TEMPORARY_STATUS:"temporary_status",PERMANENT_STATUS:"permanent_status",TURNS:"turns",ENCOUNTERS:"encounters",FLEE:"flee",END_THE_ROUND:"end_the_round",ABILITY_POWER:"ability_power",SET_DJINN:"set_djinn",DAMAGE_MODIFIER:"damage_modifier",DAMAGE_INPUT:"damage_input"},n={[a.MAX_HP]:"max_hp",[a.MAX_PP]:"max_pp",[a.ATTACK]:"atk",[a.DEFENSE]:"def",[a.AGILITY]:"agi",[a.LUCK]:"luk",[a.CURRENT_HP]:"current_hp",[a.CURRENT_PP]:"current_pp"},_={[a.MAX_HP]:"HP",[a.MAX_PP]:"PP",[a.ATTACK]:"Attack",[a.DEFENSE]:"Defense",[a.AGILITY]:"Agility",[a.LUCK]:"Luck",[a.POWER]:"Power",[a.RESIST]:"Resist"},o={PLUS:"plus",MINUS:"minus",TIMES:"times",DIVIDE:"divide"},r={NOT_APPLY:"not_apply",ON_USE:"on_use",ON_TAKE:"on_take",BATTLE_ROUND_START:"battle_round_start",BATTLE_ROUND_END:"battle_round_end",PLAYER_TURN_START:"player_turn_start",PLAYER_TURN_END:"player_turn_end"},h={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class c{constructor(t,e,i,a,n,_,o,h,c,d,l,p,u,g,m,b,w,y,f,x){this.type=t,this.quantity=e,this.operator=i,this.effect_owner_instance=a,this.quantity_is_absolute=void 0!==n&&n,this.rate=void 0===_?1:_,this.chance=void 0===o?1:o,this.attribute=void 0===h?s.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=d,this.turns_quantity=l,this.turn_count=l,this.variation_on_final_result=void 0!==p&&p,this.damage_formula_key_name=u,this.usage=void 0===g?r.NOT_APPLY:g,this.on_caster=void 0!==m&&m,this.relative_to_property=b,this.effect_msg=y,this.show_msg=void 0===f||f,this.char=x,this.sub_effect=w,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,e,i){switch(i){case o.PLUS:return t+e;case o.MINUS:return t-e;case o.TIMES:return t*e;case o.DIVIDE:return t/e}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?s.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?r.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let a;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),a=this.quantity;else{let i,n=this.quantity;n*=this.rate,this.variation_on_final_result&&(n+=Object(s.variation)()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const _=0|c.apply_operator(i,n,this.operator);void 0!==t&&(this.char[t]=_),a=_}return{before:i,after:a}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=Object(s.variation)()),this.char[t]=0|c.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,c.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case a.MAX_HP:case a.MAX_PP:case a.ATTACK:case a.DEFENSE:case a.AGILITY:case a.LUCK:return this.apply_general_value(n[this.type]);case a.HP_RECOVERY:return this.apply_general_value("hp_recovery");case a.PP_RECOVERY:return this.apply_general_value("pp_recovery");case a.CURRENT_HP:const e=this.apply_general_value("current_hp");return this.check_caps("current_hp","max_hp",0,e),e;case a.CURRENT_PP:const i=this.apply_general_value("current_pp");return this.check_caps("current_pp","max_pp",0,i),i;case a.POWER:return this.apply_general_value(this.attribute+"_power_current");case a.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case a.TURNS:return this.turn_count=1,this.apply_general_value("turns");case a.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case a.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case a.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case a.DAMAGE_INPUT:let s=this.apply_general_value(void 0,t);const _=n[this.sub_effect.type];switch(s.before=this.char[_],s.after=this.apply_subeffect(_,s.after),this.sub_effect.type){case a.CURRENT_HP:this.check_caps("current_hp","max_hp",0,s);break;case a.CURRENT_PP:this.check_caps("current_pp","max_pp",0,s)}return s}}}},function(t,e,i){"use strict";i.d(e,"c",(function(){return n})),i.d(e,"b",(function(){return o})),i.d(e,"a",(function(){return r}));var s=i(1),a=i(0);const n={SET:"set",STANDBY:"standby",RECOVERY:"recovery"},o={[n.RECOVERY]:s.YELLOW_FONT_COLOR,[n.STANDBY]:s.RED_FONT_COLOR,[n.SET]:s.DEFAULT_FONT_COLOR};class r{constructor(t,e,i,s,a,_,o,r,h,c,d,l){this.key_name=t,this.name=e,this.description=i,this.element=s,this.ability_key_name=a,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=d,this.status=n.SET,this.index=l,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,e){return _.some(e.map(t=>t.djinni).map(e=>e.filter(e=>t[e].status===n.STANDBY).length))}static get_standby_djinni(t,e){let i=_.mapValues(_.groupBy(e.map(t=>t.djinni).flat(),e=>t[e].element),e=>e.filter(e=>t[e].status===n.STANDBY).length);for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];e in i||(i[e]=0)}return i}static set_to_recovery(t,e,i){let s=Object.assign({},i),a=!1;for(let i=0;i<e.length;++i){const o=e[i],r=o.djinni;let h=1;for(let e=0;e<r.length;++e){const i=t[r[e]];if(i.status===n.STANDBY&&(s[i.element]>0&&(i.recovery_turn=h,++h,i.set_status(n.RECOVERY,o),--s[i.element],!_.some(s,Boolean)))){a=!0;break}}if(a)break}}}},function(t,e,i){"use strict";i.r(e),i.d(e,"event_types",(function(){return a})),i.d(e,"TileEvent",(function(){return n}));var s=i(0);const a={CLIMB:"climb",SPEED:"speed",TELEPORT:"teleport",JUMP:"jump",STEP:"step",COLLISION:"collision"};class n{constructor(t,e,i,a,_,o,r,h,c,d){this.game=t,this.data=e,this.type=i,this.x=a,this.y=_,this.location_key=n.get_location_key(this.x,this.y),this.id=n.id_incrementer++,this.activation_collision_layers=Array.isArray(r)?r:[r],void 0===o&&(o=Object(s.get_directions)(!0)),this.activation_directions=Array.isArray(o)?o:[o],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(c),this.origin_interactable_object=void 0===d?null:d,n.events[this.id]=this}is_active(t){const e=Object(s.split_direction)(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return _.find(t,{id:e})}static get_event(t){return n.events[t]}static reset(){n.id_incrementer=0,n.events={}}}n.reset()},function(t,e,i){"use strict";i.d(e,"a",(function(){return n}));var s=i(1),a=i(0);class n{constructor(t,e,i,a,n,_=!0,o=s.DEFAULT_WINDOW_COLOR,r=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=a,this.height=n,this.color=o,this.font_color=r,this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.group.window_object=this,this.need_pos_update=_,this.open=!1,this.lines_sprites=[],this.extra_sprites=[],this.internal_groups={}}get real_x(){return this.group.x}get real_y(){return this.group.y}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,n=!0){const _=a.change_brightness(this.color,1.3),o=a.change_brightness(this.color,.8),r=[a.change_brightness(this.color,.9),o,_];for(let a=0;a<r.length;++a){const _=r[a],o=a-1;this.separators_graphics.lineStyle(1,_),this.separators_graphics.moveTo(t+o*+n,e+o*+!n),this.separators_graphics.lineTo(i+o*+n,s+o*+!n)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.open=!0,this.close_callback=i,this.page_indicator_is_set=!1,e?(this.transition_time=Phaser.Timer.QUARTER/4,this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{void 0!==t&&t()})):(this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,a,n){let _=this.group;if(void 0!==n){const t=this.get_internal_group(n);t&&(_=t)}let o=_.create(t,e,i,a);return void 0!==s&&(o.tint=s),this.extra_sprites.push(o),o}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,a,n=!1,_=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const o=n?-2:0,r=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+o:i;const c=n?"gs-italic-bmp-font":"gs-bmp-font";let d,l,p=[];_&&(d=new Promise(t=>l=t));for(let e=0;e<t.length;++e){let i=t[e],n=this.game.add.bitmapText(r,h,c,_?"":i,s.FONT_SIZE),o=this.game.add.bitmapText(r+1,h+1,c,_?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===a?s.SPACE_BETWEEN_LINES:a),this.remove_smooth(n),n.tint=this.font_color,this.remove_smooth(o),o.tint=0,_){const t=i.split(" ");let e,s=0;const a=()=>{this.game.time.events.repeat(25,t.length,()=>{n.text+=t[s]+" ",o.text+=t[s]+" ",++s,s===t.length&&e()})};p.length?p.pop().then(a):a(),p.push(new Promise(t=>e=t))}this.group.add(o),this.group.add(n),this.lines_sprites.push({text:n,shadow:o})}return Promise.all(p).then(l),d}set_single_line_text(t,e=!1,i=!1){const a=s.WINDOW_PADDING_H+4;let n=s.WINDOW_PADDING_TOP;const _=i?"gs-italic-bmp-font":"gs-bmp-font";let o=this.game.add.bitmapText(a,n,_,t,s.FONT_SIZE),r=this.game.add.bitmapText(a+1,n+1,_,t,s.FONT_SIZE);return e&&(o.x-=o.width,r.x-=r.width),this.remove_smooth(o),o.tint=this.font_color,this.remove_smooth(r),r.tint=0,this.group.add(r),this.group.add(o),{text:o,shadow:r,right_align:e,initial_x:a}}set_text_in_position(t,e,i,a=!1,n=!1,_=this.font_color,o=!1,r,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let d,l=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),p=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);n&&(l.centerX=e,l.centerY=i,p.centerX=e+1,p.centerY=i+1),a&&(l.x-=l.width,p.x-=p.width),o&&(d=this.game.add.graphics(l.x-1,l.y),d.beginFill(this.color,1),d.drawRect(0,0,l.width+3,s.FONT_SIZE),d.endFill(),void 0!==r&&this.add_to_internal_group(r,d)||this.group.add(d)),this.remove_smooth(l),l.tint=_,this.remove_smooth(p),p.tint=0;let u=!1;return void 0!==r&&(u=this.add_to_internal_group(r,p)&&this.add_to_internal_group(r,l)),u||(this.group.add(p),this.group.add(l)),{text:l,shadow:p,right_align:a,initial_x:e,text_bg:d}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator_is_set&&this.unset_page_indicator(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},this.transition_time,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.create_at_group(this.width-3,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}set_page_indicator(t,e){if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=this.width-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(t,e),this.set_page_indicator_arrow(t)}}set_page_indicator_highlight(t,e){this.page_number_bar_highlight.x=this.width-5-8*(t-e)}set_page_indicator_arrow(t){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=this.width-5-8*t-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=this.width-3-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return n})),i.d(e,"f",(function(){return _})),i.d(e,"e",(function(){return o})),i.d(e,"c",(function(){return r})),i.d(e,"d",(function(){return h})),i.d(e,"a",(function(){return c}));var s=i(2),a=i(0);const n={ALLY:1,ENEMY:2},_={DELUSION:"delusion",STUN:"stun",SLEEP:"sleep",SEAL:"seal",DEATH_CURSE:"death_curse"},o={DOWNED:"downed",POISON:"poison",VENOM:"venom",EQUIP_CURSE:"equip_curse",HAUNT:"haunt"},r={[_.DELUSION]:t=>t.name+" is wrapped in delusion!",[_.STUN]:t=>t.name+" has been stunned!",[_.SLEEP]:t=>t.name+" falls asleep!",[_.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[_.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[o.DOWNED]:t=>t.fighter_type===n.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[o.POISON]:t=>t.name+" is infected with poison!",[o.VENOM]:t=>t.name+" is infected with deadly poison!",[o.HAUNT]:t=>`An evil spirit grips ${t.name}!`},h={[_.DELUSION]:t=>t.name+" sees clearly once again!",[_.STUN]:t=>t.name+" is no longer stunned!",[_.SLEEP]:t=>t.name+" wakes from slumber!",[_.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[o.DOWNED]:t=>t.name+"'s has been revived!",[o.POISON]:t=>`The poison is purged from ${t.name}!`,[o.VENOM]:t=>`The venom is purged from ${t.name}!`};class c{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[_.DELUSION]:0,[_.STUN]:0,[_.SLEEP]:0,[_.SEAL]:0,[_.DEATH_CURSE]:0,[s.e.MAX_HP]:0,[s.e.MAX_PP]:0,[s.e.ATTACK]:0,[s.e.DEFENSE]:0,[s.e.AGILITY]:0,[s.e.LUCK]:0,[s.e.POWER]:{},[s.e.RESIST]:{}};for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];this.effect_turns_count[s.e.POWER][e]=0,this.effect_turns_count[s.e.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.e.TEMPORARY_STATUS:return t.status_key_name;case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return t.type;case s.e.POWER:case s.e.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.e.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return this.effect_turns_count[t.type];case s.e.POWER:case s.e.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.e.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.e.MAX_HP:case s.e.MAX_PP:case s.e.ATTACK:case s.e.DEFENSE:case s.e.AGILITY:case s.e.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.e.POWER:case s.e.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let a,n=new s.a(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(n),i&&(a=n.apply_effect()),{effect:n,changes:a}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(_.SLEEP)||this.temporary_status.has(_.STUN)}is_poisoned(){return this.permanent_status.has(o.POISON)?o.POISON:!!this.permanent_status.has(o.VENOM)&&o.VENOM}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return s})),i.d(e,"c",(function(){return a})),i.d(e,"a",(function(){return n}));const s={WEAPONS:"weapons",ARMOR:"armor",CHEST_PROTECTOR:"chest_protector",HEAD_PROTECTOR:"head_protector",LEG_PROTECTOR:"leg_protector",ABILITY_GRANTOR:"ability_grantor",LUCKY_CHARM:"lucky_charm",RING:"ring",UNDERWEAR:"underwear",GENERAL_ITEM:"general_item",SHIRT:"shirt"},a={MULTIPLE_USES:"multiple_uses",SINGLE_USE:"single_use",BREAKS_WHEN_USE:"breaks_when_use",NO_USE:"no_use"};class n{constructor(t,e,i,a,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y){this.key_name=t,this.name=e,this.type=i,this.description=a,this.use_type=n,this.curses_when_equipped=_,this.cant_be_removed=o,this.rare_item=r,this.imporant_item=h,this.carry_up_to_30=c,this.effects=d,this.attribute=l,this.unleash_ability=p,this.unleash_rate=u,this.use_ability=g,this.equipable_chars=m,this.price=b,this.granted_ability=w,this.icon_path=y,this.broken=!1,this.equipable=this.type!==s.GENERAL_ITEM}}},function(t,e,i){"use strict";i.d(e,"e",(function(){return s})),i.d(e,"c",(function(){return a})),i.d(e,"d",(function(){return n})),i.d(e,"b",(function(){return _})),i.d(e,"f",(function(){return o})),i.d(e,"a",(function(){return r}));const s={HEALING:"healing",EFFECT_ONLY:"effect_only",ADDED_DAMAGE:"added_damage",MULTIPLIER:"multiplier",BASE_DAMAGE:"base_damage",SUMMON:"summon",UTILITY:"utility",DIRECT_DAMAGE:"direct_damage"},a={CAST:"cast",ATTACK:"attack",USE:"use",SUMMON:"summon",UNLEASH:"unleash",DEFEND:"defend",ITEM_UNLEASH:"item_unleash",SET_DJINN:"set_djinn",NO_MSG:"no_msg"},n={NO_TARGET:"no_target",ALLY:"ally",ENEMY:"enemy",USER:"user"},_={PSYNERGY:"psynergy",DJINN:"djinn",SUMMON:"summon",ITEM:"item",WEAPON_UNLEASH:"weapon_unleash",NORMAL:"normal"},o={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};class r{constructor(t,e,i,s,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y,f,x,v,E,k){this.key_name=t,this.name=e,this.description=i,this.type=s,this.element=n,this.battle_target=_,this.range=o,this.pp_cost=r,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=d,this.is_field_psynergy=l,this.effects=p,this.ability_category=u,this.battle_animation_key=g,this.priority_move=m||!1,this.has_critical=b||!1,this.crit_mult_factor=void 0!==w?w:1,this.can_switch_to_unleash=y||!1,this.can_be_evaded=f||!1,this.use_diminishing_ratio=x||!1,this.msg_type=void 0===v?a.CAST:v,this.affects_pp=void 0!==E&&E,this.has_animation_variation=void 0!==k&&k}static get_diminishing_ratios(t,e){if(e)return o.DIMINISH;switch(t){case s.SUMMON:return o.SUMMON;default:return o.STANDARD}}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return n}));const s=Phaser.Timer.QUARTER>>1,a=Phaser.Timer.QUARTER>>1;class n{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g){this.game=t,this.is_right_left=e,this.is_up_down=i,this.max_right_left_getter=s,this.max_up_down_getter=a,this.base_group=n,this.on_right_left_change=void 0===_?()=>{}:_,this.on_up_down_change=void 0===o?()=>{}:o,this.right_left_index_getter=r,this.right_left_index_setter=h,this.up_down_index_getter=c,this.up_down_index_setter=d,this.open_checker=l,this.active_checker=p,this.cursor_base_x_getter=u,this.cursor_base_y_getter=g,this.right_pressed=!1,this.left_pressed=!1,this.up_pressed=!1,this.down_pressed=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.init_cursor(),this.init_cursor_tween(),this.signal_bindings=this.set_control()}set_control(){return[this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.right_pressed&&this.is_right_left&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.left_pressed&&this.is_right_left&&(this.left_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.down_pressed&&(this.down_pressed=!1,this.stop_timers()),this.up_pressed=!0,this.set_change_timers(-1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.up_pressed&&this.is_up_down&&(this.up_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.up_pressed&&(this.up_pressed=!1,this.stop_timers()),this.down_pressed=!0,this.set_change_timers(1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.down_pressed&&this.is_up_down&&(this.down_pressed=!1,this.stop_timers())})]}set_change_timers(t,e){this.change_index(t,e),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(s,this.change_index.bind(this,t,e)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_index(t,e){const i=e?this.right_left_index_getter:this.up_down_index_getter,s=e?this.right_left_index_setter:this.up_down_index_setter,a=e?this.on_right_left_change:this.on_up_down_change,n=e?this.max_right_left_getter:this.max_up_down_getter,_=i();s((i()+t)%n()),i()<0&&s(n()-1),this.set_cursor_position(),a(_,i())}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}init_cursor(){this.cursor_base_x=-5,this.cursor_group=this.game.add.group(),this.cursor=this.cursor_group.create(0,0,"cursor"),this.cursor_group.alpha=0,this.base_group.add(this.cursor_group),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter(),this.cursor_tween=this.game.tweens.create(this.cursor)}init_cursor_tween(){this.cursor_tween.to({x:this.cursor.x-4,y:this.cursor.y+4},a,Phaser.Easing.Linear.None,!1,0,-1,!0)}set_cursor_position(){this.cursor_tween.isRunning&&this.cursor_tween.isPaused?this.cursor_tween.resume():this.cursor_tween.isRunning||(this.cursor_tween.start(),this.cursor_tween.isPaused&&this.cursor_tween.resume()),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter()}activate(){this.up_pressed=!1,this.down_pressed=!1,this.cursor_group.alpha=1,this.set_cursor_position()}deactivate(){this.stop_timers(),this.cursor_group.alpha=0,this.cursor_tween.pause()}destroy(){this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()}),this.cursor_tween.stop(),this.cursor_group.destroy()}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return s}));class s{constructor(t,e){this.key_name=t,this.actions={};for(let t=0;t<e.length;++t)this.actions[e[t]]={};this.animations={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let a=0;a<e.length;++a){const n=s?i[a]:i;this.actions[t].directions[a]=e[a],this.actions[t].frame_counts[a]=n}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let a;a=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=a}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const a=this.actions[s].spritesheet;let n=t.load.atlasJSONHash(this.key_name+"_"+s,a.spritesheet_image_url,a.spritesheet_json_url);e&&(n.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,a,n){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,a,n)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let a=0;a<i.length;++a){const n=i[a],_=this.actions[e].frame_rate[n];t.animations.add(e+"_"+n,this.animations[e][n],_,Array.isArray(s)?s[a]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const a=e[s];this.generateFrameNames(t,a,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return _}));var s=i(4),a=i(1),n=i(0);class _ extends s.TileEvent{constructor(t,e,i,a,n,_,o,r,h){super(t,e,s.event_types.JUMP,i,a,n,_,o,r,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event)return;let t,e,i=30,a={x:this.x,y:this.y},o={x:this.x,y:this.y};if(this.data.hero.current_direction===n.directions.left?(i=-i,t="x",a.x-=2,o.x-=1,e=n.directions.left):this.data.hero.current_direction===n.directions.right?(t="x",a.x+=2,o.x+=1,e=n.directions.right):this.data.hero.current_direction===n.directions.up?(i=-i,t="y",a.y-=2,o.y-=1,e=n.directions.up):this.data.hero.current_direction===n.directions.down&&(t="y",a.y+=2,o.y+=1,e=n.directions.down),void 0===e)return;let r=s.TileEvent.get_location_key(o.x,o.y);if(r in this.data.map.events)for(let t=0;t<this.data.map.events[r].length;++t){const e=this.data.map.events[r][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collider_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(a.x,a.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===a.x&&e.current_y===a.y&&this.data.map.collision_layer===e.base_collider_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const a=this.data.map.events[h][i];if(a.type===s.event_types.JUMP&&a.is_active(Object(n.get_opposite_direction)(e))&&a.is_set&&a.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,a.dynamic){_.set_jump_collision(this.game,this.data);break}this.dynamic&&_.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const d=this.data.map.sprite.tileWidth*(a.x+.5),l=this.data.map.sprite.tileHeight*(a.y+.5);"x"===t?c.y=[l-5,l-8,l-5,l]:c.x=d,this.game.physics.p2.pause(),this.data.hero.play("jump",n.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.data.hero.shadow.x=d,this.data.hero.shadow.y=l,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.sprite.animations.play("jump_"+n.reverse_directions[e],this.data.hero.sprite_info.actions.jump.frame_rate,!1),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=Object(n.get_surroundings)(e.x,e.y,!0),_=!1,o=Object(n.split_direction)(this.data.hero.current_direction);for(let t=0;t<o.length;++t)_=_||this.activation_directions.includes(o[t]);let r=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],d=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let a=0;a<this.data.map.events[e].length;++a){const o=this.data.map.events[e][a];if(o.type===s.event_types.JUMP&&_&&o.is_set&&o.activation_collision_layers.includes(this.data.map.collision_layer)){!o.dynamic&&!this.dynamic||i[t].diag||(d=!0);const s=Object(n.get_surroundings)(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&d){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(.5+(0|e[0]))*this.data.map.sprite.tileWidth,s=(.5+(0|e[1]))*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=a.MAP_DAMPING,n.angularDamping=a.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(n)})}this.dynamic||_||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let n=0;n<e.map.events[i].length;++n){const _=e.map.events[i][n];if(_.type===s.event_types.JUMP&&_.dynamic&&_.is_set&&_.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:_.x-1,y:_.y},{x:_.x+1,y:_.y},{x:_.x,y:_.y-1},{x:_.x,y:_.y+1}];for(let n=0;n<i.length;++n){const _=s.TileEvent.get_location_key(i[n].x,i[n].y);if(_ in e.map.events){let t=!1;for(let i=0;i<e.map.events[_].length;++i){const a=e.map.events[_][i];if(a.dynamic&&a.type===s.event_types.JUMP&&a.is_set&&a.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let o=(i[n].x+.5)*e.map.sprite.tileWidth,r=(i[n].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(o,r,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=a.MAP_DAMPING,h.angularDamping=a.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let a=0;a<e.length;++a){const _=e[a],o=s.TileEvent.get_location_key(_.x,_.y);if(o in t.map.events)for(let e=0;e<t.map.events[o].length;++e){const a=t.map.events[o][e];a.type===s.event_types.JUMP&&a.activation_collision_layers.includes(i)&&!1===a.dynamic&&a.is_set&&a.activate_at(Object(n.get_opposite_direction)(_.direction))}}}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return l})),i.d(e,"a",(function(){return p}));var s=i(10),a=i(15),n=i(3),o=i(2),r=i(7),h=i(6),c=i(0),d=i(1);class l extends s.a{constructor(t,e,i,s,a,n){super(t,e),this.walk_speed=i,this.dash_speed=s,this.climb_speed=a,this.push_speed=n}}class p extends h.a{constructor(t,e,i,s,a,n,o,r,d,l,p,u,g,m,b,w,y,f,x,v,E,k,j,T,A,S,I,O,P,N,R){super(t,s),this.info=e,this.sprite_base=i,this.starting_level=u,this.level=this.starting_level,this.class_table=g,this.battle_scale=m,this.exp_curve=p,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=b,this.mercury_level_base=w,this.mars_level_base=y,this.jupiter_level_base=f,this.venus_power_base=x,this.mercury_power_base=v,this.mars_power_base=E,this.jupiter_power_base=k,this.venus_resist_base=j,this.mercury_resist_base=T,this.mars_resist_base=A,this.jupiter_resist_base=S,this.element_afinity=_.maxBy([{element:c.elements.VENUS,level:this.venus_level_base},{element:c.elements.MERCURY,level:this.mercury_level_base},{element:c.elements.MARS,level:this.mars_level_base},{element:c.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(P),this.update_class(),this.hp_curve=a,this.pp_curve=n,this.atk_curve=o,this.def_curve=r,this.agi_curve=d,this.luk_curve=l,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=N,this.equip_slots={weapon:null,head:null,chest:null,body:null},this.equipped_abilities=[],this.innate_abilities=I,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=O,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=h.b.ALLY,this.battle_animations_variations=Object.assign({},R)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=Object(a.b)(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]}};return this.current_exp+=t,this.level=_.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===r.b.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,a)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(a),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,e=!1){let i=this.items[t];if(i.equipped&&!e)return;const s=this.info.items_list[i.key_name];switch(s.type===r.b.WEAPONS&&null!==this.equip_slots.weapon?this.unequip_item(this.equip_slots.weapon.index):s.type===r.b.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.unequip_item(this.equip_slots.head.index):s.type===r.b.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.unequip_item(this.equip_slots.chest.index):s.type===r.b.ARMOR&&null!==this.equip_slots.body&&this.unequip_item(this.equip_slots.body.index),s.type){case r.b.WEAPONS:this.equip_slots.weapon=i;break;case r.b.HEAD_PROTECTOR:this.equip_slots.head=i;break;case r.b.CHEST_PROTECTOR:this.equip_slots.chest=i;break;case r.b.ARMOR:this.equip_slots.body=i}i.equipped=!0;for(let t=0;t<s.effects.length;++t)this.add_effect(s.effects[t],s);this.update_attributes(),this.update_elemental_attributes(),s.type===r.b.ABILITY_GRANTOR&&(this.equipped_abilities.push(s.granted_ability),this.update_abilities())}unequip_item(t){let e=this.items[t];if(!e.equipped)return;const i=this.info.items_list[e.key_name];i.type===r.b.WEAPONS&&null!==this.equip_slots.weapon?this.equip_slots.weapon=null:i.type===r.b.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.equip_slots.head=null:i.type===r.b.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.equip_slots.chest=null:i.type===r.b.ARMOR&&null!==this.equip_slots.body&&(this.equip_slots.body=null),e.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===i&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),i.type===r.b.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==i.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){let i=this.info.djinni_list[t[e]];switch(i.element){case c.elements.VENUS:this.venus_djinni.push(i.key_name);break;case c.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case c.elements.MARS:this.mars_djinni.push(i.key_name);break;case c.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){let e=this.info.djinni_list[t];switch(e.element){case c.elements.VENUS:this.venus_djinni.push(e.key_name);break;case c.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case c.elements.MARS:this.mars_djinni.push(e.key_name);break;case c.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case c.elements.VENUS:e=this.venus_djinni;break;case c.elements.MERCURY:e=this.mercury_djinni;break;case c.elements.MARS:e=this.mars_djinni;break;case c.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,s){const _=this.class;let o=this.venus_level_current,r=this.mercury_level_current,h=this.mars_level_current,d=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let a;switch(i[t]){case n.c.SET:a=1;break;case n.c.RECOVERY:case"irrelevant":a=0;break;default:a=-1}switch(s.element){case c.elements.VENUS:o+=a;break;case c.elements.MERCURY:r+=a;break;case c.elements.MARS:h+=a;break;case c.elements.JUPITER:d+=a}}this.class=Object(a.b)(this.info.classes_list,this.class_table,this.element_afinity,o,r,h,d);let l={class_name:this.class.name,class_key_name:this.class.key_name};return l.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>"irrelevant"===t?n.c.STANDBY:t),t.forEach(t=>{l[t]=this.preview_stats_by_djinn(t,e,i,s)}),this.class=_,l}preview_stats_by_djinn(t,e,i,s){const a={djinni_key_name:e,djinni_next_status:i,action:s};switch(t){case"max_hp":return this.set_max_stat("hp",!0,a);case"max_pp":return this.set_max_stat("pp",!0,a);case"atk":return this.set_max_stat("atk",!0,a);case"def":return this.set_max_stat("def",!0,a);case"agi":return this.set_max_stat("agi",!0,a);case"luk":return this.set_max_stat("luk",!0,a)}}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i,item_key_name:i};switch(t){case o.e.MAX_HP:return this.set_max_stat("hp",!0,s);case o.e.MAX_PP:return this.set_max_stat("pp",!0,s);case o.e.ATTACK:return this.set_max_stat("atk",!0,s);case o.e.DEFENSE:return this.set_max_stat("def",!0,s);case o.e.AGILITY:return this.set_max_stat("agi",!0,s);case o.e.LUCK:return this.set_max_stat("luk",!0,s)}}set_max_stat(t,e=!1,i={}){const s=["hp","pp"].includes(t)?"max_"+t:t,a="current_"+t,_=t+"_boost",r=t+"_curve",h=t+"_extra",c=this[s];this[s]=this[r][this.level]*this.class[_]+this[h]|0;let d=this.djinni;if(e)if("Trade"===i.action){const t=d.indexOf(i.djinni_key_name[0]);t>=0?d[t]=i.djinni_key_name[1]:d[d.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&d.push(i.djinni_key_name[0]);for(let t=0;t<d.length;++t){let a=d[t],o=this.info.djinni_list[a],r=o.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(a)&&(r=i.djinni_next_status[i.djinni_key_name.indexOf(a)]),r===n.c.SET&&(this[s]+=o[_])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;let a;switch(t){case"hp":a=o.e.MAX_HP;break;case"pp":a=o.e.MAX_PP;break;case"atk":a=o.e.ATTACK;break;case"def":a=o.e.DEFENSE;break;case"agi":a=o.e.AGILITY;break;case"luk":a=o.e.LUCK}s.type===a&&s.apply_effect()}),e){const t=i.effect_obj?o.a.preview_value_applied(i.effect_obj,this[s]):this[s];return this[s]=c,t}void 0===this[a]?this[a]=this[s]:this[a]=Math.round(this[a]*this[s]/c)}update_attributes(){this.set_max_stat("hp"),this.set_max_stat("pp"),this.set_max_stat("atk"),this.set_max_stat("def"),this.set_max_stat("agi"),this.set_max_stat("luk")}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}init_elemental_attributes(){this.venus_level_current=this.venus_level_base,this.mercury_level_current=this.mercury_level_base,this.mars_level_current=this.mars_level_base,this.jupiter_level_current=this.jupiter_level_base,this.venus_power_current=this.venus_power_base,this.mercury_power_current=this.mercury_power_base,this.mars_power_current=this.mars_power_base,this.jupiter_power_current=this.jupiter_power_base,this.venus_resist_current=this.venus_resist_base,this.mercury_resist_current=this.mercury_resist_base,this.mars_resist_current=this.mars_resist_base,this.jupiter_resist_current=this.jupiter_resist_base}update_elemental_attributes(){this.init_elemental_attributes();for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===n.c.SET&&(this[e.element+"_level_current"]+=1,this[e.element+"_power_current"]+=5,this[e.element+"_resist_current"]+=5)}this.effects.forEach(t=>{t.type!==o.e.POWER&&t.type!==o.e.RESIST||t.apply_effect()});for(let t=0;t<c.ordered_elements.length;++t){const e=c.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=_.clamp(this[i],d.ELEM_ATTR_MIN,d.ELEM_ATTR_MAX),this[s]=_.clamp(this[s],d.ELEM_ATTR_MIN,d.ELEM_ATTR_MAX)}}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(h.e.DOWNED))}}},function(t,e,i){"use strict";i.d(e,"b",(function(){return s})),i.d(e,"a",(function(){return a}));const s={BATTLE:"battle"};class a{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=a.id_incrementer++,a.events[this.id]=this}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}a.reset()},function(t,e,i){"use strict";i.d(e,"b",(function(){return it})),i.d(e,"c",(function(){return st})),i.d(e,"d",(function(){return at})),i.d(e,"a",(function(){return nt}));var s=i(10),a=i(13),n=i(0),o=i(20),r=i(6),h=i(1),c=i(8);const d=h.GAME_WIDTH>>1,l=h.GAME_HEIGHT-35,p=.009*Math.PI,u=h.GAME_WIDTH/2-50,g=h.GAME_HEIGHT/50,m=[11,9,7,5,3,1,3,5,7,9,11],b=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class w{constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.esc_propagation_priority=n,this.enter_propagation_priority=_,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=a,this.allies_count=s.length,this.enemies_count=a.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.choosing_targets&&(this.data.enter_input.halt(),this.set_targets())},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.choosing_targets&&(this.data.esc_input.halt(),this.choosing_targets_finished(null))},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.choosing_targets&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.choosing_targets&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.choosing_targets&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.choosing_targets&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}set_targets(){let t,e;switch(this.target_type){case c.d.ALLY:t=this.allies_count,e=this.allies_info;break;case c.d.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case c.d.USER:t=this.ability_caster.fighter_type===r.b.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===r.b.ENEMY?this.allies_info:this.enemies_info}const i=_.zipWith(m.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===c.d.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}set_change_timers(t){this.change_target(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_target.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_target(t,e=!0){this.target_type===c.d.ENEMY&&(t*=-1);const i=this.target_type===c.d.ALLY?this.allies_info:this.enemies_info,s=i.length,a=s%2?s>>1:(s>>1)-1;let n;do{this.range_cursor_position+=t,0===t&&(t=-1);n=a+(this.range_cursor_position-(m.length>>1)),n>=s?(this.range_cursor_position=(m.length>>1)-a,n=0):n<0&&(this.range_cursor_position=(m.length>>1)+a+!(s%2),n=s-1)}while(i[n].instance.has_permanent_status(r.e.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,h.GAME_WIDTH,h.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,h.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,h.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1),this.battle_bg2.scale.setTo(1);const t=(t,e,i,s,a)=>{const n=t.create(0,0,e.sprite_key);n.anchor.setTo(.5,1),n.scale.setTo(e.scale,e.scale),n.ellipses_semi_major=u,n.ellipses_semi_minor=g,n.is_ally=i;return a[e.sprite_key.slice(0,e.sprite_key.lastIndexOf("_"))].setAnimation(n,"battle"),n.animations.play(s),this.sprites.push(n),n};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",_.mapValues(this.data.info.main_char_list,t=>t.sprite_base));e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,h.GAME_WIDTH,h.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,h.GAME_WIDTH,2+(h.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.right_pressed=!1,this.left_pressed=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:h.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:.7551327},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}async set_stage_default_position(){let t;const e=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:.7551327},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),await e}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.is_ally?88:106-40*(this.enemies_count>>1))+40*i,a=e.is_ally?160:98;e.x=s,e.y=a;const n=e.scale.x+.2*Math.sign(e.scale.x),_=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(n,_)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===c.d.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,s=this.range_cursor_position-(m.length>>1);this.cursors.forEach((a,n)=>{let _=n-((this.cursors.length>>1)-i)+s;const o=e[_];if(o&&!o.instance.has_permanent_status(r.e.DOWNED)){const e=o.sprite,i=b[this.range_cursor_position-s-(this.cursors.length>>1)+n];a.scale.setTo(i,i),a.alpha=1,this.cursors_tweens[n]&&this.cursors_tweens[n].stop();const _=e.x,r=e.y-e.height-5;t?this.game.add.tween(a).to({centerX:_,y:r},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[n]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(a.centerX=_,a.y=r,this.cursors_tweens[n]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{a.alpha=0,_=_<0?0:e.length-1;const t=e[_].sprite;a.centerX=t.x,a.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()}),this.stop_timers()}choose_targets(t,e,i,s,a){this.choosing_targets_callback=a,this.range_cursor_position=m.length>>1,this.ability_range="all"===t?m[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===c.d.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===c.d.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1)})}choosing_targets_finished(t){this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===c.d.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.choosing_targets=!1,this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=Object(n.range_360)(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad-=p,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad+=p,this.battle_bg.x+=2.4;else{const t=Object(n.range_360)(this.camera_angle.rad)-Object(n.range_360)(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=w.get_angle(i),a=w.ellipse_position(e,s,!0),n=w.ellipse_position(e,s,!1),_=e.is_ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,o=e.is_ally?t:t-this.allies_count;e.x=a+(35*o-_+17)*Math.sin(i),e.y=n;const r=e.is_ally?this.allies_info[o]:this.enemies_info[o],h=w.get_scale(r.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.signal_bindings.forEach(t=>{t.detach()}),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=h.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=h.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:h.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?u:e)*(i=void 0===i?g:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return d+w.ellipse(e,i,g)*Math.cos(e)}{const i=t.ellipses_semi_minor;return l+w.ellipse(e,u,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((g-u)*Math.tan(t)/(u+g*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}var y=i(2);class f{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",h.FONT_SIZE);return e.tint=h.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}async add_ability(t,e,i,s){switch(e.msg_type){case c.c.ATTACK:await this.add(t.name+" attacks!");break;case c.c.CAST:await this.add(`${t.name} casts ${e.name}!`);break;case c.c.UNLEASH:await this.add(`${t.name} unleashes ${e.name}!`);break;case c.c.SUMMON:await this.add(`${t.name} summons ${e.name}!`);break;case c.c.USE:await this.add(`${t.name} uses ${e.name}!`);break;case c.c.DEFEND:await this.add(t.name+" is defending!");break;case c.c.ITEM_UNLEASH:await this.add(`${t.name}'s ${i}`),await this.add(`lets out a howl! ${e.name}!`);break;case c.c.SET_DJINN:await this.add(`${s} is set to ${t.name}!`)}}async add_recover_effect(t){const e=t.char;switch(t.type){case y.e.MAX_HP:case y.e.MAX_PP:case y.e.ATTACK:case y.e.DEFENSE:case y.e.AGILITY:case y.e.LUCK:await this.add(`${e.name}'s ${y.c[t.type]} returns to normal!`);break;case y.e.POWER:case y.e.RESIST:await this.add(`${e.name}'s ${n.element_names[t.attribute]} ${y.c[t.type]} returns to normal!`);break;case y.e.TEMPORARY_STATUS:case y.e.PERMANENT_STATUS:await this.add(r.d[t.status_key_name](e))}}async add_damage(t,e,i=!1){const s=i?"PP":"HP",a=i?"current_pp":"current_hp",n=i?"max_pp":"max_hp";t>=0?(e[a]-t<0&&(t=e[a]),await this.add(`${e.name} takes ${t.toString()} damage!`)):e[a]>=e[n]?await this.add(`${e.name}'s ${s} is fully restored`):await this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}var x=i(18),v=i(16),E=i(3),k=i(5);class j{constructor(t){this.game=t,this.base_window=new k.a(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}var T=i(9);const A=h.YELLOW_FONT_COLOR,S=h.RED_FONT_COLOR,I=90+h.FONT_SIZE;class O{constructor(t,e,i,s){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,72,72,164,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(48,136,"buttons","psynergy"),this.group.alpha=0,this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_ability.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_ability_index.bind(this),this.set_ability_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.signal_bindings=this.set_control(),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}get_cursor_x(){return this.expanded,66}get_cursor_y(){return(this.expanded,83)+16*this.ability_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_ability_index(){return this.ability_index}set_ability_index(t){this.ability_index=t}get_max_elem_on_page(){return this.abilities.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.enter_input.halt(),this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t,e){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_ability(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(h.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(h.ICON_HEIGHT+2),a=i+(h.ICON_WIDTH>>1),n=s+(h.ICON_HEIGHT>>1),_=10+h.ICON_WIDTH+2;let o=h.DEFAULT_FONT_COLOR;this.psy_sealed?o=h.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(o=h.RED_FONT_COLOR);const r=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,_,s+4,!1,!1,o);this.text_sprites_in_window.push(r);const c=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,o);this.text_sprites_in_window.push(c),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,n,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const d=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,o);this.text_sprites_in_window.push(d),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(A,r),this.base_window.update_text_color(A,d),this.base_window.update_text_color(A,c)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(S,r),this.base_window.update_text_color(S,d),this.base_window.update_text_color(S,c)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,I),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(h.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(A,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(S,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(A,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(S,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72})),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}open(t,e,i,s=!1,a=null,n=null){this.char=t,this.psy_sealed=this.char.has_temporary_status(r.f.SEAL),this.djinni=[a],this.next_djinni_status=[n],this.close_callback=e,this.choosen_ability=null,this.expanded=s,this.page_index=0,this.ability_index=0,this.set_description=i,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.cursor_control.activate(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}const P=["max_hp","max_pp","atk","def","agi","luk"];class N{constructor(t,e){this.game=t,this.data=e,this.base_window=new k.a(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<P.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*h.FONT_SIZE),this.before_stats[P[t]]=this.base_window.set_text_in_position("",78,16+t*h.FONT_SIZE,!0),this.after_stats[P[t]]=this.base_window.set_text_in_position("",126,16+t*h.FONT_SIZE,!0),this.up_arrows[P[t]]=this.base_window.create_at_group(80,15+t*h.FONT_SIZE,"stat_up"),this.down_arrows[P[t]]=this.base_window.create_at_group(80,15+t*h.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-h.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<P.length;++t)this.down_arrows[P[t]].alpha=0,this.up_arrows[P[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(P,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<P.length;++e){const i=P[e],s=this.char[i],a=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(a.toString(),this.after_stats[i]),s>a?this.down_arrows[i].alpha=1:s<a&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}class R{constructor(t,e,i,s,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.base_window=new k.a(this.game,160,72,76,84),this.base_window.init_page_indicator_bar(),this.stats_window=new N(this.game,this.data),this.group=this.game.add.group(),this.button=this.group.create(140,136,"buttons","djinni"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.djinn_names=[],this.stars_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_djinn.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active||this.psynergy_window_open)return;this.data.enter_input.halt();const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==E.c.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.shift_input.halt(),this.cursor_control.deactivate(),this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0)},this,this.shift_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onUp.add(()=>{this.window_open&&this.window_active&&this.psynergy_window_open&&(this.cursor_control.activate(),this.psynergy_window.close(),this.psynergy_window_open=!1)})]}get_cursor_x(){return 154}get_cursor_y(){return 84+16*this.djinn_index}is_open(){return this.window_open}is_active(){return this.window_active&&!this.psynergy_window_open}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_djinn_index(){return this.djinn_index}set_djinn_index(t){this.djinn_index=t}get_max_elem_on_page(){return this.djinni.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case E.c.SET:this.set_description(t.description);break;case E.c.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case E.c.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(t,e){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.cursor_control.set_cursor_position()),this.call_set_description(),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.update_stats()}change_djinn(t,e){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let a;switch(this.stars_sprites.push(s),e.status){case E.c.SET:a=E.b[E.c.SET];break;case E.c.STANDBY:a=E.b[E.c.STANDBY];break;case E.c.RECOVERY:a=E.b[E.c.RECOVERY]}const n=this.base_window.set_text_in_position(e.name,17,i,!1,!1,a);if(this.djinn_names.push(n),e.status===E.c.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,E.b[E.c.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case E.c.SET:t=E.c.STANDBY;break;case E.c.STANDBY:t=E.c.SET;break;case E.c.RECOVERY:t=E.c.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.call_set_description(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.stats_window.open(this.char),this.update_stats(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.cursor_control.destroy()}}var D=i(7);class M{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,120,72,116,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(96,136,"buttons","item"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.item_names=[],this.other_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_item.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_item_index.bind(this),this.set_item_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active)return;this.data.enter_input.halt();const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==D.c.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 116}get_cursor_y(){return 84+16*this.item_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_item_index(){return this.item_index}set_item_index(t){this.item_index=t}get_max_elem_on_page(){return this.items.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_item(t,e){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let a=h.DEFAULT_FONT_COLOR;e.use_type!==D.c.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(a=h.YELLOW_FONT_COLOR);const n=this.base_window.set_text_in_position(e.name,26,i,!1,!1,a);this.item_names.push(n)}}set_page_number(){const t=this.all_items.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.all_items=this.char.items,this.all_items=_.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===D.c.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}class L{constructor(t){this.game=t,this.base_window=new k.a(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}var C=i(12);class q{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window=new k.a(this.game,104,88,132,68),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(80,136,"buttons","summon"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.summon_names=[],this.other_sprites=[],this.cursor_control=new T.a(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_summon.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_summon_index.bind(this),this.set_summon_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.djinn_numbers_window=new L(t)}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 98}get_cursor_y(){return 100+16*this.summon_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_summon_index(){return this.summon_index}set_summon_index(t){this.summon_index=t}get_max_elem_on_page(){return this.summons.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let a=h.DEFAULT_FONT_COLOR;this.summons[t].available||(a=h.RED_FONT_COLOR);const n=this.base_window.set_text_in_position(e.name,28,i,!1,!1,a);this.summon_names.push(n)}}set_page_number(){const t=this.all_summons.length;this.page_number=parseInt((t-1)/4)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.standby_djinni=E.a.get_standby_djinni(this.data.info.djinni_list,C.a.get_active_players(this.data.info.party_data,B));for(let t in this.standby_djinni)this.standby_djinni[t]-=this.djinni_already_used[t];this.all_summons=_.map(this.data.dbs.summons_db,t=>{const e=_.every(t.requirements,(t,e)=>t<=this.standby_djinni[e]);return Object.assign({},t,{available:e,index:e?-t.index:t.index})}),this.all_summons=_.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.group.alpha=1,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.djinn_numbers_window.open(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy(),this.djinn_numbers_window.destroy()}}class H{constructor(t,e,i,s,a,_){this.game=t,this.data=e,this.on_abilities_choose=a,this.choose_targets=_,this.chars_status_window=new x.a(this.game,this.data,!0,!0),this.start_buttons_keys=["fight","flee","status"],this.shift_propagation_priority=0,this.esc_propagation_priority=s,this.enter_propagation_priority=i,this.start_horizontal_menu=new v.a(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>Object(n.capitalize)(t)),this.start_button_press.bind(this),this.enter_propagation_priority,void 0,void 0,76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.description_window=new j(this.game),this.djinn_window=new R(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1,this.shift_propagation_priority),this.psynergy_window=new O(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.item_window=new M(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.summon_window=new q(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,h.GAME_HEIGHT-h.AVATAR_SIZE),this.avatar_sprite.alpha=0,this.inner_horizontal_menu=new v.a(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>Object(n.capitalize)(t)),this.inner_button_press.bind(this),this.enter_propagation_priority,this.inner_menu_cancel.bind(this),this.esc_propagation_priority,60,!0)}start_button_press(t){switch(this.start_buttons_keys[t]){case"fight":this.start_horizontal_menu.close();let t=[];E.a.has_standby_djinn(this.data.info.djinni_list,C.a.get_active_players(this.data.info.party_data,B))||t.push("summon"),this.current_buttons=this.inner_buttons_keys.filter(e=>!t.includes(e)),this.inner_horizontal_menu.mount_buttons(t),this.abilities={},this.data.info.party_data.members.slice(0,B).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=n.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let e=this.data.info.party_data.members[this.current_char_index];for(;e.is_paralyzed()||e.has_permanent_status(r.e.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,e=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=B||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()}}inner_button_press(t){switch(this.current_buttons[t]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t,type:"attack"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t,type:"defend"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let a;if("djinni"===i&&this.data.info.djinni_list[e].status===E.c.STANDBY)a=e,e="set_djinn";else if("summon"===i){const t=this.data.dbs.summons_db[e].requirements;this.djinni_already_used=_.mapValues(this.djinni_already_used,(e,i)=>e+t[i])}this.description_window.hide(),this.choose_targets(e,i,s=>{s?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:s,type:i,djinn_key_name:a}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.is_open()&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=B||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if("summon"===t.type){const e=this.data.dbs.summons_db[t.key_name].requirements;this.djinni_already_used=_.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(r.e.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}var U=i(19);class G{constructor(t,e){this.game=t,this.data=e,this.base_window=new k.a(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t=this.base_window.set_text_in_position(this.ability_name,this.ability_name_x,8);if(this.texts.push(t),this.element&&this.element!==n.elements.NO_ELEMENT&&"summon"!==this.action){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=_.pickBy(this.data.dbs.summons_db[this.ability_key_name].requirements,t=>t);let e=0;n.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,a=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(a);const n=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(n),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.ability_key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(h.ICON_WIDTH>>1),this.icon_group.y=5+(h.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,a,n){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=a,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=n}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}class F{static roll_action(t,e,i){let s=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(r.e.DOWNED);const a={magnitude:i&&!s?1:null,target:{instance:i&&!s?t:null},type:"attack"};return i&&!s&&(s=!0),a})}}}class W{static player_turn_speed(t,e=!1,i=!1){return(t+(t*_.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const a=s?1e4:0;if(1===e)return t+a;if(2===i)return(t>>1)+a;if(3===i)switch(e){case 2:return 3*t/4+a;case 3:return(t>>1)+a}return(t>>1)+a}static base_damage(t,e){const i=t.current_atk-e.current_def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,s=!0){let a=100,o=100;if(i!==n.elements.NO_ELEMENT){if(o=e[i+"_resist_current"],void 0!==t){a=t[i+"_power_current"]}}return 1+_.clamp(a-o,h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX)/(s?200:400)}static physical_attack(t,e,i,s,a){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,a,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let s=100;if(i!==n.elements.NO_ELEMENT){s=t[i+"_power_current"]}return e*s/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,a,n){const _=a+"_level_current";return 3*(t[_]-e[_]-(e.current_luk>>1))/100+i+(n=void 0===n?0:n)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.current_luk-5*e+100*i)>=_.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case r.e.POISON:i=1;break;case r.e.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=_.clamp(t,0,4))*t+t)}}class K{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g,m,b,w,y,f,x,v){this.game=t,this.key_name=e,this.sprites_keys=i,this.x_sequence=s,this.y_sequence=a,this.x_ellipse_axis_factor_sequence=n,this.y_ellipse_axis_factor_sequence=_,this.x_scale_sequence=o,this.y_scale_sequence=r,this.x_anchor_sequence=h,this.y_anchor_sequence=c,this.alpha_sequence=d,this.rotation_sequence=l,this.stage_angle_sequence=p,this.hue_angle_sequence=u,this.tint_sequence=g,this.grayscale_sequence=m,this.colorize_sequence=b,this.custom_filter_sequence=w,this.play_sequence=y,this.set_frame_sequence=f,this.blend_mode_sequence=x,this.is_party_animation=v,this.running=!1}initialize(t,e,i,s,a,n,_,o){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=o,this.group_caster=s,this.group_enemy=a,this.super_group=n,this.stage_camera=_,this.trails_objs=[];for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let _;if(i.trails&&(_=this.initialize_trail_textures(i.trail_frame_diff,i.trails_mode)),!i.per_target){const e=i.count?i.count:1;for(let o=0;o<e;++o){const e=this.game.add.sprite(this.x0,this.y0,t);let o,r;n.getChildIndex(s)<n.getChildIndex(a)?(o=s,r=a):(o=a,r=s),"over"===i.position?n.addChild(e):"between"===i.position?n.addChildAt(e,n.getChildIndex(r)):"behind"===i.position&&n.addChildAt(e,n.getChildIndex(o));const h=Phaser.Animation.generateFrameNames(i.key_name+"/",1,e.animations.frameTotal,"",3);e.animations.add(i.key_name,h),e.animations.frameName=h[0],e.battle_index=this.sprites.length,e.trails=i.trails,e.trails_info=_,i.trails&&(e.x_history=new Array(_.frame_diff+1).fill(e.x-this.game.camera.x),e.y_history=new Array(_.frame_diff+1).fill(e.y-this.game.camera.y)),this.sprites.push(e)}}}this.set_filters()}initialize_trail_textures(t,e){switch(e){case"screen":e=PIXI.blendModes.SCREEN;break;case"normal":e=PIXI.blendModes.NORMAL}const i=this.game.add.renderTexture(h.GAME_WIDTH,h.GAME_HEIGHT);let s=this.game.add.sprite(this.game.camera.x,this.game.camera.y,i);s.blendMode=e,s.alpha=.6;const a=this.game.add.renderTexture(h.GAME_WIDTH,h.GAME_HEIGHT);let n=this.game.add.sprite(this.game.camera.x,this.game.camera.y,a);return n.blendMode=e,n.alpha=.4,this.trails_objs=this.trails_objs.concat(i,a,s,n),{texture_1:i,texture_2:a,frame_diff:t}}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy()}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let s={},a={};for(let _=0;_<t.length;++_){const o=t[_];o.sprite_index in a||(a[o.sprite_index]=!0),o.sprite_index in s&&(a[o.sprite_index]=!1);let r=this.get_sprites(o,i),c=!1;r.forEach((t,i)=>{const _=t.key+"_"+t.battle_index;void 0===this.sprites_prev_properties[_]&&(this.sprites_prev_properties[_]={}),void 0===this.sprites_prev_properties[_][e]&&(this.sprites_prev_properties[_][e]=t[e]);const r=Array.isArray(o.to)?o.to[i]:o.to;let d=r;if("target"===r){const t=Array.isArray(o.shift)?o.shift[i]:o.shift;d=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[_][e]=Object(n.range_360)(this.sprites_prev_properties[_][e]),t[e]=this.sprites_prev_properties[_][e],d=K.get_angle_by_direction(this.sprites_prev_properties[_][e],r,o.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[_][e]-d)>h.degree360&&(d-=Math.sign(d)*h.degree360)),d=o.is_absolute?d:this.sprites_prev_properties[_][e]+r,o.yoyo||(this.sprites_prev_properties[_][e]=d),"initial"===o.tween)t[e]=d;else{o.sprite_index in s||(s[o.sprite_index]={[i]:[]}),i in s[o.sprite_index]||(s[o.sprite_index][i]=[]);const _=Array.isArray(o.start_delay)?o.start_delay[i]:o.start_delay;if("instantly"===o.duration){let i;if(!c){let t=new Promise(t=>{i=t});this.promises.push(t),c=!0}this.game.time.events.add(_,()=>{t[e]=d,o.force_stage_update&&this.stage_camera.update(),o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(n.range_360)(t[e])),void 0!==i&&i()})}else{const r=this.game.add.tween(t).to({[e]:d},Array.isArray(o.duration)?o.duration[i]:o.duration,o.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),a[o.sprite_index],_,0,void 0!==o.yoyo&&o.yoyo);if(!c){let i,s=new Promise(t=>{i=t});this.promises.push(s),r.onStart.addOnce(()=>{o.force_stage_update&&(this.stage_camera.spining=!0)}),r.onComplete.addOnce(()=>{o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(n.range_360)(t[e])),i(),o.force_stage_update&&(this.stage_camera.spining=!1)}),c=!0}s[o.sprite_index][i].length&&s[o.sprite_index][i][s[o.sprite_index][i].length-1].chain(r),s[o.sprite_index][i].push(r)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,a=new Promise(t=>{s=t});this.promises.push(a);const n=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(n,()=>{e.reverse?t.animations.getAnimation(e.animation_key).reversed=!0:t.animations.getAnimation(e.animation_key).reversed=!1,t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,a=new Promise(t=>{s=t});this.promises.push(a);const n=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(n,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const a=t[s];this.get_sprites(a).forEach((t,s)=>{let n,_=new Promise(t=>{n=t});this.promises.push(_);const o=Array.isArray(a.start_delay)?a.start_delay[s]:a.start_delay;this.game.time.events.add(o,()=>{const s=void 0!==a.filter?a.filter:e;t.filters[0][s]=a.value,i.forEach(e=>{t.filters[0][e]=a[e]})}),n()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let s;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?s=.7551327:i.is_absolute?(this.stage_prev_value=Object(n.range_360)(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,s=K.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-s)>h.degree360&&(s-=Math.sign(s)*h.degree360)):s=this.stage_prev_value+i.to,this.stage_prev_value=s,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=s:this.stage_camera.rad+=s;else{const e=this.game.add.tween(this.stage_camera).to({rad:s},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let a,_=new Promise(t=>{a=t});this.promises.push(_),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=Object(n.range_360)(this.stage_camera.rad)),this.stage_camera.spining=!1,a()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}render(){let t=!0;this.sprites.forEach(e=>{e.trails&&(e.x_history.unshift(e.x),e.y_history.unshift(e.y),t&&(e.trails_info.texture_1.clear(),e.trails_info.texture_2.clear(),t=!1),e.trails_info.texture_1.renderXY(e,e.x_history[e.trails_info.frame_diff>>1],e.y_history[e.trails_info.frame_diff>>1]),e.trails_info.texture_2.renderXY(e,e.x_history.pop(),e.y_history.pop()))})}static get_angle_by_direction(t,e,i,s=!1){let a;if(a=s?(e=h.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",a===i)return e;const _=e%h.degree360-t%h.degree360,o=Math.sign(_)*h.degree360-_,r=t%h.degree360-o;if("closest"===i){let i,s;return r>0?(s=r-Object(n.range_360)(t),i=h.degree360-s):(i=e-Object(n.range_360)(t),s=h.degree360-i),Math.abs(i)<Math.abs(s)?e:r}return r}}class Y{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}async load_animation(t){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),a=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let n,_=!0;const o=new Promise(t=>{n=t});let r;s.onFileComplete.addOnce((t,e,i)=>{_=_&&i,n()});const h=new Promise(t=>{r=t});let c;a.onFileComplete.addOnce((t,e,i)=>{_=_&&i,r()});const d=new Promise(t=>c=t);if(this.game.load.onLoadComplete.addOnce(c),this.game.load.start(),await Promise.all([o,h,d]),_){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new K(this.game,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.is_party_animation)}else this.not_available.add(t)}animation_available(t){return t in this.animations}async play(t,e,i,s,a,n){if(!(t in this.animations))return;const _=t+"_battle_animation";let o;this.animations[t].initialize(_,e,i,s,a,n.battle_group,n.camera_angle,[n.battle_bg,n.battle_bg2]);const r=new Promise(t=>{o=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(o),await r,this.render_function=null}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}const B=4,z=0,$=1,X=2,J=3,Z=4,V=5,Q=6;class tt{constructor(t,e,i,s){this.game=t,this.data=e,this.allies_info=this.data.info.party_data.members.slice(0,B).map(t=>(t.init_effect_turns_count(),{sprite_key:t.key_name+"_battle",scale:t.battle_scale,instance:t,entered_in_battle:!0})),this.enemies_party_data=this.data.dbs.enemies_parties_db[s],this.enemies_info=[],this.this_enemies_list={};let a={},n=0;this.enemies_party_data.members.forEach(t=>{const e=_.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle",scale:this.data.info.enemies_list[t.key].battle_scale}),this.enemies_info[n].sprite_key in a?a[this.enemies_info[n].sprite_key]+=1:a[this.enemies_info[n].sprite_key]=1;let e="",i="";a[this.enemies_info[n].sprite_key]>1&&(e="_"+a[this.enemies_info[n].sprite_key].toString(),i=" "+a[this.enemies_info[n].sprite_key].toString()),this.enemies_info[n].instance=Object(U.b)(this.data.info.enemies_list,t.key,i),this.enemies_info[n].battle_key=this.enemies_info[n].sprite_key+e,this.this_enemies_list[this.enemies_info[n].battle_key]=this.enemies_info[n].instance,++n}}),this.enter_propagation_priority=0,this.esc_propagation_priority=0,this.battle_stage=new w(this.game,this.data,i,this.allies_info,this.enemies_info,this.esc_propagation_priority++,this.enter_propagation_priority++),this.battle_log=new f(this.game),this.battle_menu=new H(this.game,this.data,++this.enter_propagation_priority,++this.esc_propagation_priority,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new G(this.game,this.data),this.animation_manager=new Y(this.game,this.data),this.battle_phase=z,this.controls_enabled=!1,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,++this.enter_propagation_priority,++this.esc_propagation_priority,this.battle_finishing=!1,this.signal_bindings=this.set_controls()}set_controls(){return[this.data.enter_input.add(()=>{if(this.data.in_battle&&this.controls_enabled)switch(this.data.enter_input.halt(),this.battle_phase){case $:this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=X,this.check_phases();break;case Z:case V:case Q:this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)}},this,this.enter_propagation_priority)]}start_battle(){this.check_phases()}on_abilities_choose(t){this.player_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=J,this.check_phases()}choose_targets(t,e,i,s,a){const n=this.data.info.abilities_list[t];let _;"psynergy"===e&&(_=[n.pp_cost]),"defend"!==e&&this.target_window.open(e,n.name,n.element,t,_,a),this.battle_stage.choose_targets(n.range,n.battle_target,n.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(r.e.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(r.e.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=Q)}check_phases(){switch(this.check_parties(),this.battle_phase){case z:this.battle_phase_none();break;case $:case X:this.battle_phase_menu();break;case J:this.battle_phase_round_start();break;case Z:this.battle_phase_combat();break;case V:this.battle_phase_round_end();break;case Q:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.battle_phase=$,this.data.in_battle=!0,this.data.battle_instance=this,this.battle_log.add(this.enemies_party_data.name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=_.mapValues(_.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=_.mapValues(_.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.controls_enabled=!0})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}async battle_phase_round_start(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=F.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.player_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.player_abilities[t].length;++i){const s=this.data.info.abilities_list[this.player_abilities[t][i].key_name],a=void 0!==s&&s.priority_move;this.player_abilities[t][i].speed=W.player_turn_speed(e.current_agi,a,i>0),this.player_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],a=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=W.enemy_turn_speed(e.current_agi,i+1,e.turns,a),this.enemies_abilities[t][i].caster=e}}this.turns_actions=_.sortBy(Object.values(this.player_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,await this.animation_manager.load_animation(s)}this.battle_phase=Z,this.controls_enabled=!0,this.check_phases()}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}async check_downed(t){0===t.current_hp&&(t.add_permanent_status(r.e.DOWNED),await this.battle_log.add(r.c[r.e.DOWNED](t)),await this.wait_for_key())}async battle_phase_combat(){if(!this.turns_actions.length)return this.battle_phase=V,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(r.e.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(r.f.SLEEP)?await this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(r.f.STUN)&&await this.battle_log.add(t.caster.name+" is paralyzed and cannot move!"),await this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==r.b.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,F.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let e=this.data.info.abilities_list[t.key_name],i="";if(t.caster.fighter_type===r.b.ALLY&&void 0!==e&&e.can_switch_to_unleash&&t.caster.equip_slots.weapon&&this.data.info.items_list[t.caster.equip_slots.weapon.key_name].unleash_ability){const s=this.data.info.items_list[t.caster.equip_slots.weapon.key_name];Math.random()<s.unleash_rate&&(i=s.name,t.key_name=s.unleash_ability,e=this.data.info.abilities_list[s.unleash_ability])}if(void 0===e)return await this.battle_log.add(t.key_name+" ability key not registered."),await this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(r.f.SEAL)&&e.ability_category===c.b.PSYNERGY)return await this.battle_log.add("But the Psynergy was blocked!"),await this.wait_for_key(),void this.check_phases();if(e.pp_cost>t.caster.current_pp)return await this.battle_log.add("... But doesn't have enough PP!"),await this.wait_for_key(),void this.check_phases();t.caster.current_pp-=e.pp_cost;let s=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(await this.battle_log.add_ability(t.caster,e,i,s),e.ability_category===c.b.DJINN)e.effects.some(t=>t.type===y.e.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(E.c.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(E.c.STANDBY,t.caster);else if(e.ability_category===c.b.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements,s=E.a.get_standby_djinni(this.data.info.djinni_list,C.a.get_active_players(this.data.info.party_data,B));if(!_.every(i,(t,e)=>s[e]>=t))return await this.battle_log.add(`${t.caster.name} summons ${e.name} but`),await this.battle_log.add("doesn't have enough standby Djinn!"),await this.wait_for_key(),void this.check_phases();E.a.set_to_recovery(this.data.info.djinni_list,C.a.get_active_players(this.data.info.party_data,B),i)}if(this.battle_menu.chars_status_window.update_chars_info(),e.type===c.e.UTILITY&&await this.wait_for_key(),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===r.b.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),s=t.caster.fighter_type===r.b.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===r.b.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;await this.animation_manager.play(t.battle_animation_key,e,i,s,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else await this.battle_log.add(`Animation for ${e.name} not available...`),await this.wait_for_key();[c.e.UTILITY,c.e.EFFECT_ONLY].includes(e.type)||await this.apply_damage(t,e);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(!y.f.ON_USE)continue;if(await this.apply_effects(t,e,s))return this.battle_phase=V,void this.check_phases()}if(await this.battle_stage.set_stage_default_position(),e.ability_category===c.b.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements;for(let s=0;s<n.ordered_elements.length;++s){const a=n.ordered_elements[s],_=W.summon_power(i[a]);_>0&&(t.caster.add_effect({type:"power",quantity:_,operator:"plus",attribute:a},e,!0),await this.battle_log.add(`${t.caster.name}'s ${n.element_names[a]} Power rises by ${_.toString()}!`),await this.wait_for_key())}}const a=t.caster.is_poisoned();if(a){let e=W.battle_poison_damage(t.caster,a);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=_.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=a===r.e.POISON?"poison":"venom";await this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(t.caster)}if(t.caster.has_temporary_status(r.f.DEATH_CURSE)){const e=_.find(t.caster.effects,{status_key_name:r.f.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(r.e.DOWNED),await this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),await this.wait_for_key())}this.check_phases()}async apply_damage(t,e){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===y.e.CRITICALS).reduce((t,e)=>y.a.apply_operator(t,e.quantity,e.operator),0));for(let s=0;s<t.targets.length;++s){const a=t.targets[s];if(null===a.magnitude)continue;const o=a.target.instance;if(o.has_permanent_status(r.e.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<1/32||t.caster.temporary_status.has(r.f.DELUSION)&&Math.random()<.66))return await this.battle_log.add(o.name+" nimbly dodges the blow!"),this.wait_for_key();let h=0;if(e.has_critical&&(Math.random()<1/32||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+o.level/5;h=W.physical_attack(t.caster,o,i,s,e.element)}else switch(e.type){case c.e.ADDED_DAMAGE:h=W.physical_attack(t.caster,o,1,e.ability_power,e.element);break;case c.e.MULTIPLIER:h=W.physical_attack(t.caster,o,e.ability_power/10,0,e.element);break;case c.e.BASE_DAMAGE:h=W.psynergy_damage(t.caster,o,e.ability_power,e.element);break;case c.e.HEALING:h=-W.heal_ability(t.caster,e.ability_power,e.element);break;case c.e.SUMMON:const i=_.sum(_.values(this.data.dbs.summons_db[e.key_name].requirements));h=W.summon_damage(o,e.ability_power,i);break;case c.e.DIRECT_DAMAGE:h=e.ability_power}const d=c.a.get_diminishing_ratios(e.type,e.use_diminishing_ratio);h=h*d[a.magnitude]|0,h+=Object(n.variation)(),h>=0&&o.effects.forEach(t=>{t.type===y.e.DAMAGE_MODIFIER&&(h=t.apply_effect(h).after)}),await this.battle_log.add_damage(h,o,e.affects_pp);const l=e.affects_pp?"current_pp":"current_hp",p=e.affects_pp?"max_pp":"max_hp";o.current_hp=_.clamp(o[l]-h,0,o[p]),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(o);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===y.e.DAMAGE_INPUT){const i=s.on_caster?t.caster:o,a=i.add_effect(s,e).effect,n=a.apply_effect(h);if([y.e.CURRENT_HP,y.e.CURRENT_PP].includes(a.sub_effect.type)){const t=n.before-n.after;0!==t&&(a.effect_msg?await this.battle_log.add(y.b[a.effect_msg](o)):await this.battle_log.add_damage(t,i,a.sub_effect.type===y.e.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()),await this.check_downed(i)}i.remove_effect(a)}}}}async apply_effects(t,e,i){let s;for(let a=0;a<t.targets.length;++a){const o=t.targets[a];if(null===o.magnitude)continue;const h=o.target.instance;if(!h.has_permanent_status(r.e.DOWNED))switch(i.type){case y.e.PERMANENT_STATUS:if(i.add_status){if(h.has_permanent_status(i.status_key_name))break;if(i.status_key_name===r.e.POISON&&h.has_permanent_status(r.e.VENOM))break}case y.e.TEMPORARY_STATUS:if(i.add_status){let s=_.find(h.class.vulnerabilities,{status_key_name:i.status_key_name});s=void 0===s?0:s.chance;const a=c.f.STATUS[o.magnitude];if(W.ailment_success(t.caster,h,i.chance,a,e.element,s)){const t=h.add_effect(i,e,!0).effect;if(t.type===y.e.TEMPORARY_STATUS)h.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===r.f.DEATH_CURSE&&h.has_temporary_status(r.f.DEATH_CURSE)?h.set_effect_turns_count(t):h.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===r.e.VENOM&&h.has_permanent_status(r.e.POISON)){const t=_.find(h.effects,{status_key_name:r.e.POISON});h.remove_effect(t,!0)}await this.battle_log.add(r.c[i.status_key_name](h))}else await this.battle_log.add(`But it has no effect on ${h.name}!`);await this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=_.find(h.effects,{status_key_name:i.status_key_name});if(!t)break;h.remove_effect(t,!0),t.status_key_name===r.e.DOWNED&&h.init_effect_turns_count(),t.type===y.e.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),await this.wait_for_key())}break;case y.e.CURRENT_HP:if(s=h.add_effect(i,e,!0),s.effect.show_msg){const t=s.changes.before-s.changes.after;await this.battle_log.add_damage(t,h),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}await this.check_downed(h),void 0!==s.effect.turns_quantity?this.on_going_effects.push(s.effect):h.remove_effect(s.effect);break;case y.e.MAX_HP:case y.e.MAX_PP:case y.e.ATTACK:case y.e.DEFENSE:case y.e.AGILITY:case y.e.LUCK:case y.e.POWER:case y.e.RESIST:if(s=h.add_effect(i,e,!0),this.on_going_effects.push(s.effect),h.set_effect_turns_count(s.effect,s.effect.turn_count,!1),s.effect.show_msg){const t=s.changes.after-s.changes.before,e=t>=0?"rises":"drops";let a="";[y.e.POWER,y.e.RESIST].includes(i.type)&&(a=n.element_names[s.effect.attribute]+" "),await this.battle_log.add(`${h.name}'s ${a}${y.c[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}break;case y.e.END_THE_ROUND:return await this.battle_log.add("Everybody is resting!"),await this.wait_for_key(),!0;case y.e.TURNS:await this.battle_log.add(t.caster.name+" readies for action!"),await this.wait_for_key(),this.on_going_effects.push(h.add_effect(i,e,!0).effect);break;case y.e.DAMAGE_MODIFIER:await this.battle_log.add(y.b[i.effect_msg](h)),await this.wait_for_key(),this.on_going_effects.push(h.add_effect(i,e,!0).effect);break;case y.e.COUNTER_STRIKE:case y.e.FLEE:break;default:this.on_going_effects.push(h.add_effect(i,e,!0).effect)}}return!1}async battle_phase_round_end(){let t=[],e={};for(let i=0;i<this.on_going_effects.length;++i){const s=this.on_going_effects[i];if(s.char.has_permanent_status(r.e.DOWNED)){s.char.remove_effect(s),s.char.update_all(),t.push(i);continue}let a=!1;void 0!==s.turn_count&&(null!==s.char.get_effect_turns_count(s)?(s.char.key_name in e&&s.char.get_effect_turns_key(s)in e[s.char.key_name]||s.char.set_effect_turns_count(s),s.turn_count=s.char.get_effect_turns_count(s),e[s.char.key_name]?e[s.char.key_name][s.char.get_effect_turns_key(s)]=s:e[s.char.key_name]={[s.char.get_effect_turns_key(s)]:s},a=!0):--s.turn_count,0===s.turn_count&&(s.char.remove_effect(s),s.char.update_all(),t.push(i),a||(this.battle_log.add_recover_effect(s),await this.wait_for_key())))}for(let t in e)for(let i in e[t]){const s=e[t][i];0===s.turn_count&&(this.battle_log.add_recover_effect(s),await this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<B;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],a=this.data.info.djinni_list[s];a.status===E.c.RECOVERY&&(0===a.recovery_turn?(a.set_status(E.c.SET,e),await this.battle_log.add(`${a.name} is set to ${e.name}!`),await this.wait_for_key()):--a.recovery_turn)}}this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=X,this.check_phases()}async battle_phase_end(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.char.remove_effect(e),e.char.update_all()}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_data.name+" has been defeated!"),await this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),await this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],s=i.instance;if(!s.has_permanent_status(r.e.DOWNED)){const e=s.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${s.name} is now a level ${s.level} ${s.class.name}!`),await this.wait_for_key();const t=_.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${s.class.name}'s ${i.name}!`),await this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case"max_hp":t="Maximum HP";break;case"max_pp":t="Maximum PP";break;case"atk":t="Attack";break;case"def":t="Defense";break;case"agi":t="Agility";break;case"luk":t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),await this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),await this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?(this.battle_log.add(`You got a ${t.name}.`),await this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),await this.wait_for_key())}}}this.unset_battle()}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.signal_bindings.forEach(t=>{t.detach()}),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}class et extends a.a{constructor(t,e,i,s){super(t,e,a.b.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new tt(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}class it extends s.a{constructor(t,e){super(t,e)}}const st={IDLE:"idle",WALK_AROUND:"walk_around"},at={NORMAL:"normal",INN:"inn",WEAPON_SHOP:"weapon_shop",ARMOR_SHOP:"armor_shop",MEDICINE_SHOP:"medicine_shop"};class nt extends o.a{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u,g){super(t,e,i,s,a,n,_,o),this.npc_type=r,this.movement_type=h,this.message=c,this.thought_message=d,this.avatar=l,this.base_collider_layer=p,this.talk_range_factor=void 0===u?3:u,this.events=[],this.set_events(g)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case a.b.BATTLE:this.events.push(new et(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===st.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=Object(n.mount_collision_polygon)(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collider_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return a})),i.d(e,"b",(function(){return n}));var s=i(0);class a{constructor(t,e,i,s,a,n,_,o,r,h,c,d,l,p,u){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=a,this.required_jupiter_level=n,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=d,this.ability_level_pairs=l,this.class_type=p,this.vulnerabilities=void 0===u?[]:u}}function n(t,e,i,a,n,o,r){let h=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:n}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:o}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:r}]:[]];let c;c=h.every(t=>0===t.level)?i:_.maxBy(h,t=>t.level).element;const d=e[i][c];let l=Object.values(t).filter(t=>t.class_type===d);return l=l.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=n&&t.required_mars_level<=o&&t.required_jupiter_level<=r),_.sortBy(l,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";i.d(e,"a",(function(){return h}));var s=i(0),a=i(1),n=i(5);const o=a.GAME_HEIGHT-24,r=24-a.OUTSIDE_BORDER_WIDTH-a.INSIDE_BORDER_WIDTH;class h{constructor(t,e,i,h,c,d,l,p,u,g=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.buttons_number=i.length,this.enter_propagation_priority=d,this.esc_propagation_priority=p;const m=Object(s.get_text_width)(this.game,_.maxBy(h,t=>t.length));this.title_window_width=void 0!==u?u:m+2*(a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH);const b=24*this.buttons_number+this.title_window_width+2*a.OUTSIDE_BORDER_WIDTH+2;this.dock_right=g,this.x=a.GAME_WIDTH-b,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new n.a(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,r),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.on_choose=void 0===c?()=>{}:c,this.on_cancel=void 0===l?()=>{}:l,this.right_pressed=!1,this.left_pressed=!1,this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+2*a.OUTSIDE_BORDER_WIDTH+2;this.x=a.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=parseInt(24*(t+.5)),this.buttons[t].sprite.centerY=parseInt(12)}set_change_timers(t){this.change_button(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_button.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){this.buttons[this.selected_button_index].sprite.scale.setTo(1.2,1.2),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:1.3,y:1.3},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e,i=!0){let s;this.reset_button(),this.right_pressed=!1,this.left_pressed=!1,this.menu_active=i,this.group.alpha=1,this.selected_button_index=void 0===e?0:e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,n=new Promise(t=>{s=t});this.title_window.show(s);let _=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([n,_]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.stop_timers(),this.reset_button(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let a,n=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([i,n]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.right_pressed=!1,this.left_pressed=!1,this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.stop_timers(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy(),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return o})),i.d(e,"b",(function(){return r}));var s=i(1),a=i(4),n=i(0),_=i(11);function o(t,e,i){!e.hero.trying_to_push||![n.directions.up,n.directions.down,n.directions.left,n.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||h(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null}function r(t,e,i,s,a,n=!0,_){h(t,e,i,a,s,!0,n,_)}function h(t,e,i,a,_,o=!1,r=!0,h){let l;if(!o){let t=e.hero.sprite.x+(-i.interactable_object_sprite.y-i.interactable_object_sprite.x),s=-e.hero.sprite.x+(-i.interactable_object_sprite.y+i.interactable_object_sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?l=n.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?l=n.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?l=n.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(l=n.directions.right)}if(o||l===e.hero.trying_to_push_direction){o||(e.hero.pushing=!0,e.hero.current_action=n.base_actions.PUSH),t.physics.p2.pause();let l=0,p=0,u=0,g=0;switch(e.hero.trying_to_push_direction){case n.directions.up:g=-1,p=-16;break;case n.directions.down:g=1,p=16;break;case n.directions.left:u=-1,l=-16;break;case n.directions.right:u=1,l=16}c(e,i,u,g);let m=[i.interactable_object_sprite.body];o||m.push(e.hero.shadow,e.hero.sprite.body);const b=i.current_x,w=i.current_y;i.current_x+=u,i.current_y+=g;let y=[];void 0!==_&&_(l,p),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=l,i.custom_data.blocking_stair_block.y+=p);for(let a=0;a<m.length;++a){let _,o=m[a],r=o.x+l,f=o.y+p;o!==e.hero.shadow&&o!==e.hero.sprite.body||(0===l?r=e.map.sprite.tileWidth*(b+u+.5):0===p&&(f=e.map.sprite.tileHeight*(w+g+.5))),y.push(new Promise(t=>{_=t}));const x=t.add.tween(o).to({x:r,y:f},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);h&&x.onUpdateCallback(h),x.onComplete.addOnce(()=>{let s=!1;a===m.length-1&&i.object_drop_tiles.forEach(a=>{if(a.x===i.current_x&&a.y===i.current_y){s=!0;const o=(a.dest_y-i.current_y)*e.map.sprite.tileHeight;return c(e,i,0,a.dest_y-i.current_y),i.current_y=a.dest_y,i.change_collider_layer(e,a.destination_collider_layer),void t.add.tween(i.interactable_object_sprite.body).to({y:i.interactable_object_sprite.body.y+o},a.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{a.dust_animation?(e.hero.current_action=n.base_actions.IDLE,e.hero.play(e.hero.current_action,n.reverse_directions[e.hero.current_direction]),d(t,e,i,_)):_()})}}),s||_()})}Promise.all(y).then(()=>{e.hero.pushing=!1,r&&t.physics.p2.resume(),void 0!==a&&a()})}}function c(t,e,i,s){let o=e.get_events();for(let r=0;r<o.length;++r){let h=o[r];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,d=h.y,l=c+i,p=d+s;const u=a.TileEvent.get_location_key(l,p);h.x=l,h.y=p,h.location_key=u,u in t.map.events||(t.map.events[u]=[]),t.map.events[u].push(h);const g=Object(n.get_surroundings)(l,p,!1,2);_.a.active_jump_surroundings(t,g,e.collider_layer_shift+e.base_collider_layer);const m=Object(n.get_surroundings)(c,d,!1,2);for(let i=0;i<m.length;++i){const s=m[i],_=a.TileEvent.get_location_key(s.x,s.y);if(_ in t.map.events)for(let i=0;i<t.map.events[_].length;++i){const o=t.map.events[_][i];if(o.type===a.event_types.JUMP){const t=e.collider_layer_shift+e.base_collider_layer;o.activation_collision_layers.includes(t)&&!1===o.dynamic&&o.deactivate_at(Object(n.get_opposite_direction)(s.direction))}}}}}function d(t,e,i,a){let n=new Array(7),_=new Array(7);const o=(i.current_x+.5)*e.map.sprite.tileWidth,r=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let a=0;a<7;++a){const c=(Math.PI+s.degree60)*a/6-s.degree30,d=o+18*Math.cos(c),l=r+18*Math.sin(c);let p=e.npc_group.create(o,r,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(p,e.npc_group.getChildIndex(i.interactable_object_sprite)),p.anchor.setTo(.5,.5),t.add.tween(p).to({x:d,y:l},400,Phaser.Easing.Linear.In,!0),_[a]=p,h.setAnimation(p,"dust");const u=h.getAnimationKey("dust","spread");let g;n[a]=new Promise(t=>{g=t}),p.animations.getAnimation(u).onComplete.addOnce(g),p.animations.play(u)}Promise.all(n).then(()=>{_.forEach(t=>{e.npc_group.remove(t,!0)}),a()})}},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));var s=i(5),a=i(0),n=i(1),o=i(3),r=i(12);const h=n.BLUE_FONT_COLOR,c=n.RED_FONT_COLOR,d=[0,16],l=[1,9],p=[20,36],u=[8,16];class g{constructor(t,e,i=!1,o=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=o,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const r=_.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=49*r+4,this.status_win_x=n.GAME_WIDTH-this.status_win_width-n.INSIDE_BORDER_WIDTH-n.OUTSIDE_BORDER_WIDTH,this.status_window=new s.a(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.status_header_width=Object(a.get_text_width)(this.game,"HP "),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(d[i],l[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",p[i],this.name_y+u[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={};const s=t[e],a=49*e+8,_=s.key_name+"_status";i.group=this.status_window.define_internal_group(_),i.name=this.status_window.set_text_in_position(s.name,a,this.name_y,!1,!1,this.status_window.font_color,this.compact,_);let o=this.name_y+n.FONT_SIZE,r=o+n.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(a,r),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,43,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.default_y=r,i.group.add(i.hp_bar_damage_graphics),i.hp_header=this.status_window.set_text_in_position("HP",a,o,!1,!1,this.status_window.font_color,!1,_);const c=a+40;i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),o=this.name_y+2*n.FONT_SIZE,r=o+n.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(a,r),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,43,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.default_y=r,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",a,o,!1,!1,this.status_window.font_color,!1,_),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=o.a.get_standby_djinni(this.data.info.djinni_list,r.a.get_active_players(this.data.info.party_data,4)),t=_.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=7,this.stars_group.y=this.name_y+n.FONT_SIZE;for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+u[+(t>1)])}}else{for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=_.clamp(this.data.info.party_data.members.length,4);this.status_win_width=49*e+4+(t?36:0),this.status_win_x=n.GAME_WIDTH-this.status_win_width-n.INSIDE_BORDER_WIDTH-n.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let a=this.info_sprites[e.key_name];a.group.visible=!0;const n=49*s+8+(t?36:0);this.status_window.update_text(e.name,a.name,n);const _=n+40;this.status_window.update_text(e.current_hp,a.hp,_),this.status_window.update_text(e.current_pp,a.pp,_),this.status_window.update_text_position({x:n},a.hp_header),this.status_window.update_text_position({x:n},a.pp_header),a.hp_bar_graphics.x=n,a.pp_bar_graphics.x=n;const o=parseInt(43*(1-e.current_hp/e.max_hp)),r=n+43-o;a.hp_bar_damage_graphics.clear(),a.hp_bar_damage_graphics.beginFill(c,1),a.hp_bar_damage_graphics.drawRect(r,a.hp_bar_damage_graphics.default_y,o,3),a.hp_bar_damage_graphics.endFill();const h=parseInt(43*(1-e.current_pp/e.max_pp)),d=n+43-h;a.pp_bar_damage_graphics.clear(),a.pp_bar_damage_graphics.beginFill(c,1),a.pp_bar_damage_graphics.drawRect(d,a.pp_bar_damage_graphics.default_y,h,3),a.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(n-4,3,n-4,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(){this.status_window.close()}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";i.d(e,"a",(function(){return r})),i.d(e,"b",(function(){return h}));var s=i(10),a=i(6),n=i(0);class o extends a.a{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=a.b.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.current_atk=this.atk,this.current_def=this.def,this.current_agi=this.agi,this.current_luk=this.luk,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case effect_types.POWER:case effect_types.RESIST:case effect_types.MAX_HP:case effect_types.MAX_PP:case effect_types.ATTACK:case effect_types.DEFENSE:case effect_types.AGILITY:case effect_types.LUCK:t.apply_effect()}});for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=_.clamp(this[i],ELEM_ATTR_MIN,ELEM_ATTR_MAX),this[s]=_.clamp(this[s],ELEM_ATTR_MIN,ELEM_ATTR_MAX)}}}class r extends s.a{constructor(t,e,i){super(t,["battle"]),this.key_name=t,this.battle_scale=e,this.data=i}}function h(t,e,i){return new o(t[e].data,t[e].data.name+i)}},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));var s=i(1),a=i(0);const n=Phaser.Timer.SECOND<<1,_=Phaser.Timer.QUARTER,o=Phaser.Timer.QUARTER,r=a.base_actions.IDLE,h=a.directions.down,c="none",d="right",l="left";class p{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=r,this.current_direction=h,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collider_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=c,this.can_make_footprint=!0,this.footsteps_type=1,this.footsteps_time_interval=_,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===d?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot(),this.footsteps_type=this.current_action===a.base_actions.IDLE?"double":"single";const i=this.footsteps_sprite_base.getAnimationKey("footprints",this.footsteps_type);let s;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");s=this.group.create(0,0,t),s.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(s,"footprints")}else s=this.dead_steps[--this.dead_index],s.reset(0,0);const n=s.animations.getAnimation(i);n.stop(!0),this.group.base_collider_layer=this.data.map.collision_layer,s.x=this.data.hero.shadow.x,s.y=this.data.hero.shadow.y,this.position_footsteps(s),n.onComplete.addOnce(()=>{this.kill_step(s)}),this.set_expire_timer(s,i),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===a.base_actions.WALK?_:o,this.current_action===a.base_actions.IDLE?this.foot_forward=c:this.foot_forward=this.foot_forward===l?d:l}clean_all(t){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}const u={x:.5,y:.8};class g{constructor(t,e,i,s,a,n,_,o){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.stop_by_colliding=!1,this.force_direction=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=a,this.current_action=n,this.current_direction=_,this.required_direction=0,this.desired_direction=_,this.color_filter=this.game.add.filter("ColorFilters"),this.enable_footsteps=void 0!==o&&o,this.footsteps=new p(this.game,this.data)}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting}set_sprite(t,e,i,s,a,n){a=void 0===a?u.x:a,n=void 0===n?u.y:n,this.sprite_info=e;const _=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,_),this.sprite.centerX=(this.tile_x_pos+1.5)*i.tileWidth|0,this.sprite.centerY=(this.tile_y_pos+1.5)*i.tileHeight|0,this.sprite.base_collider_layer=s,this.sprite.roundPx=!0,this.sprite.anchor.setTo(a,n)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=u[t]:(this.sprite.anchor.x=u.x,this.sprite.anchor.y=u.y)}set_shadow(t,e,i,s,a){t=void 0===t?"shadow":t,s=void 0===s?.45:s,a=void 0===a?.05:a,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(s,a),this.shadow.base_collider_layer=i}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collider_layer(t){this.sprite.base_collider_layer=t,this.shadow.base_collider_layer=t}play(t,e){if(t=void 0===t?this.current_action:t,e=void 0===e?a.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const i=this.sprite_info.getAnimationKey(t,e);return this.sprite.animations.getAnimation(i)||this.sprite_info.setAnimation(this.sprite,t),this.sprite.animations.play(i),this.sprite.animations.getAnimation(i)}update_shadow(){this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y}stop_char(t=!0){this.sprite.body.velocity.y=this.sprite.body.velocity.x=0,t&&(this.current_action=a.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=a.base_actions.IDLE;const s=i?a.base_actions.IDLE:a.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===a.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action);const e=this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT);e&&this.current_action!==a.base_actions.DASH?this.current_action=a.base_actions.DASH:e||this.current_action===a.base_actions.WALK||(this.current_action=a.base_actions.WALK)}}else this.current_action=a.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;this.current_action===a.base_actions.DASH?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.dash_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.dash_speed+this.extra_speed)|0):this.current_action===a.base_actions.WALK?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.walk_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.walk_speed+this.extra_speed)|0):this.current_action===a.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.sprite_info.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.sprite_info.climb_speed|0):this.current_action===a.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[a.base_actions.WALK,a.base_actions.DASH,a.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(a,n){function _(t){try{r(s.next(t))}catch(t){n(t)}}function o(t){try{r(s.throw(t))}catch(t){n(t)}}function r(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const a=i(1),n=i(4),_=i(22),o=i(23),r=i(24),h=i(0),c=i(25),d=i(26),l=i(29),p=i(27),u=i(28);var g=new class{constructor(){this.game={},this.dbs={},this.info={},this.menu_open=!1,this.in_battle=!1,this.created=!1,this.hero=null,this.collision=null,this.cursors=null,this.debug=null,this.menu_screen=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.enter_input=null,this.esc_input=null,this.shift_input=null,this.spacebar_input=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(a.GAME_WIDTH,a.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){o.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){p.load_databases(this.game,this.dbs),this.enter_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER).onDown,this.esc_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ESC).onDown,this.shift_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onDown,this.spacebar_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onDown,this.scale_factor=this.dbs.init_db.initial_scale_factor,this.debug=new _.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),yield u.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index),this.hero=new c.Hero(this.game,this,this.dbs.init_db.hero_key_name,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction]),this.hero.set_sprite(this.npc_group,this.info.main_char_list[this.hero.key_name].sprite_base,this.map.sprite,this.map.collision_layer),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.camera_follow(),this.hero.play(),this.collision=new r.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.initialize_game_main_controls(),this.tile_event_manager=new d.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new l.GameEventManager(this.game,this),this.cursors=this.game.input.keyboard.createCursorKeys(),this.created=!0,this.game.camera.resetFX()}))}initialize_game_main_controls(){this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(a.GAME_WIDTH,a.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.game.input.keyboard.addKey(Phaser.Keyboard.ONE).onDown.add(()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(a.GAME_WIDTH,a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.TWO).onDown.add(()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.THREE).onDown.add(()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*a.GAME_WIDTH,this.scale_factor*a.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.Q).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}),this.game.input.keyboard.addKey(Phaser.Keyboard.W).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}),this.game.input.keyboard.addKey(Phaser.Keyboard.E).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)})}update(){if(this.created)if(this.tile_event_manager.on_event||this.game_event_manager.on_event||this.hero.pushing||this.menu_open||this.hero.casting_psynergy||this.in_battle)this.hero.stop_char(!1),this.hero.pushing?this.hero.set_action():this.menu_open&&this.menu_screen.horizontal_menu.menu_active?this.menu_screen.update_position():this.in_battle&&this.battle_instance.update();else{this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=n.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}};window.data=g},function(t,e,i){"use strict";i.r(e),i.d(e,"Debug",(function(){return a}));var s=i(0);class a{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1}initialize_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.D).onDown.add(()=>{this.toggle_debug_physics()}),this.game.input.keyboard.addKey(Phaser.Keyboard.G).onDown.add(()=>{this.toggle_grid()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.K).onDown.add(()=>{this.toggle_keys()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.S).onDown.add(()=>{this.toggle_stats()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.F).onDown.add(()=>{this.toggle_fps()},this)}update_debug_physics(t){data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction,document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding)}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,a=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,a,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_");this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,{game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t]),...t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`}}));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level,document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp,document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp,document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp,document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp,document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp,document.querySelector("#stats_debug table .atk").innerHTML=t.current_atk,document.querySelector("#stats_debug table .def").innerHTML=t.current_def,document.querySelector("#stats_debug table .agi").innerHTML=t.current_agi,document.querySelector("#stats_debug table .luk").innerHTML=t.current_luk,document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current,document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current,document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current,document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current,document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current,document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current,document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current,document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current,document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current,document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current,document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current,document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current,document.querySelector("#stats_debug table .turns").innerHTML=t.turns,document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length}}},function(t,e,i){"use strict";function s(t){!function(t){t.load.json("init_db","init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),t.load.script("color_filters","plugins/color_filters.js")}i.r(e),i.d(e,"load_all",(function(){return s}))},function(t,e,i){"use strict";i.r(e),i.d(e,"Collision",(function(){return s}));class s{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collider_layer=t.map.collision_layer,this.hero.sprite.base_collider_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let s=0;s<i.length;++s){let a=i[s],n=a.properties.over.toString().split(",");if(n.length>e)if(n=n.length>e?0|n[e]:0|n[0],0!==n){t.underlayer_group.remove(a.sprite,!1,!0);let e=0;for(e=0;e<t.overlayer_group.children.length;++e){if(t.overlayer_group.children[e].layer_z>a.z){t.overlayer_group.addAt(a.sprite,e,!0);break}}e===t.overlayer_group.children.length&&t.overlayer_group.add(a.sprite,!0)}else{t.overlayer_group.remove(a.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>a.z){t.underlayer_group.addAt(a.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(a.sprite,!0)}}}}},function(t,e,i){"use strict";i.r(e),i.d(e,"Hero",(function(){return d}));var s=i(20),a=i(1),n=i(4),_=i(0),o=i(17);const r=[null,_.directions.right,_.directions.left,null,_.directions.up,_.directions.up_right,_.directions.up_left,null,_.directions.down,_.directions.down_right,_.directions.down_left,null,null,null,null,null],h=[_.directions.right,_.directions.up_right,_.directions.up_right,_.directions.up,_.directions.up_left,_.directions.up_left,_.directions.left,_.directions.down_left,_.directions.down_left,_.directions.down,_.directions.down_right,_.directions.down_right],c={[_.directions.right]:{x:1,y:0},[_.directions.left]:{x:-1,y:0},[_.directions.up]:{x:0,y:-1},[_.directions.up_right]:{x:a.INV_SQRT2,y:-a.INV_SQRT2},[_.directions.up_left]:{x:-a.INV_SQRT2,y:-a.INV_SQRT2},[_.directions.down]:{x:0,y:1},[_.directions.down_right]:{x:a.INV_SQRT2,y:a.INV_SQRT2},[_.directions.down_left]:{x:-a.INV_SQRT2,y:a.INV_SQRT2}};class d extends s.a{constructor(t,e,i,s,a,n,_){super(t,e,i,s,a,n,_,!0),this.arrow_inputs=null,this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null}update_arrow_inputs(){this.arrow_inputs=1*this.data.cursors.right.isDown|2*this.data.cursors.left.isDown|4*this.data.cursors.up.isDown|8*this.data.cursors.down.isDown,this.required_direction=r[this.arrow_inputs]}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=r[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=c[e].x,this.y_speed=c[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=Object(_.get_transition_directions)(this.desired_direction,e))),this.x_speed=c[e].x,this.y_speed=c[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].interactable_object_sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([_.base_actions.WALK,_.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collider_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[n.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===n.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case _.directions.up:i.y-=1;break;case _.directions.down:i.y+=1;break;case _.directions.left:i.x-=1;break;case _.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,o.a.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[_.base_actions.WALK,_.base_actions.DASH,_.base_actions.CLIMB].includes(this.current_action))if(Math.abs(this.sprite.body.velocity.x)<13&&Math.abs(this.sprite.body.velocity.y)<13){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<.1&&(e[0]=0),Math.abs(e[1])<.1&&(e[1]=0),Math.abs(e[0])>.9&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>.9&&(e[1]=Math.sign(e[1])),t[i]=Object(_.range_360)(Math.atan2(e[1],-e[0]))});const i=Object(_.range_360)(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-a.degree15&&t<=i+a.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==_.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=h[Object(_.range_360)(Math.atan2(e[0][1],-e[0][0])+a.degree15)/a.degree30|0],i=r[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1;else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.update_arrow_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=a.HERO_BODY_RADIUS,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}},function(t,e,i){"use strict";i.r(e),i.d(e,"TileEventManager",(function(){return _}));var s=i(0),a=i(4);class n{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case a.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==a.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}class _{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===a.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==a.event_types.CLIMB||this.hero.idle_climbing?[a.event_types.TELEPORT,a.event_types.JUMP].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new n;for(let n=0;n<e.events[t].length;++n){const _=e.events[t][n];if(_.activation_collision_layers.includes(e.collision_layer)&&(_.type===a.event_types.JUMP&&_.jump_near_collision(),_.is_active(this.hero.current_direction)))if(_.type===a.event_types.SPEED)this.hero.extra_speed!==_.speed&&i.add(_,this.hero.current_direction,_.fire.bind(_),!0);else if(_.type!==a.event_types.TELEPORT||_.advance_effect)if([a.event_types.STEP,a.event_types.COLLISION].includes(_.type)&&!this.event_triggered(_))i.add(_,this.hero.current_direction,_.set.bind(_));else{if(_.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[_.id]&&!this.event_timers[_.id].timer.expired)continue;i.add(_,this.hero.current_direction,()=>{this.event_timers[_.id]=this.game.time.events.add(350,this.fire_event.bind(this,_,this.hero.current_direction))})}}else i.add(_,this.hero.current_direction,this.fire_event.bind(this,_,this.hero.current_direction))}i.process_queue()}}},function(t,e,i){"use strict";function s(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.interactable_objects_db=_.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=_.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=_.mapKeys(e.npc_db,t=>t.key_name),e.summons_db=_.mapKeys(e.summons_db,(t,e)=>(t.index=parseInt(e),t.key_name))}i.r(e),i.d(e,"load_databases",(function(){return s}))},function(t,e,i){"use strict";i.r(e),i.d(e,"initialize_game_data",(function(){return Lt}));var s=i(15),a=i(12);var n=i(8),o=i(1),r=i(17),h=i(0);var c=i(10),d=i(4),l=i(11);class p extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r,h,c,l){super(t,e,d.event_types.CLIMB,i,s,a,n,_,o,c),this.change_to_collision_layer=r,this.is_set=void 0===h||h,this.climbing_only=void 0!==l&&l}fire(t){!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action(!0)||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event||(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===h.directions.down){this.data.hero.play(h.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(h.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.play(h.base_actions.CLIMB,h.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=h.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===h.directions.up){this.data.hero.play(h.base_actions.CLIMB,h.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=h.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===h.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collider_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(h.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-15},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-15;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[h.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(250,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=h.base_actions.IDLE,this.data.hero.set_direction(h.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===h.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[h.directions.up]);const t=Phaser.Timer.QUARTER/3;this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y+15},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.shadow.visible=!0,this.data.hero.current_action=h.base_actions.IDLE,this.data.hero.set_direction(h.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.interactable_object_sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));l.a.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=o.MAP_DAMPING,a.angularDamping=o.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(a)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.interactable_object_sprite.send_to_back=!1,l.a.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}const u="once",g="jump",m="jump_around",b="climb";class w extends c.a{constructor(t,e){super(t,e)}}class y{constructor(t,e,i,s,a,n,_,o,r,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=a,this.allowed_tiles=n,this.base_collider_layer=_,this.collider_layer_shift=o,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===r?[]:r,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=a,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.interactable_object_sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.interactable_object_sprite.x/t.sprite.tileWidth|0,y:this.interactable_object_sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.interactable_object_sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collider_layer]),this.interactable_object_sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collider_layer=e,this.interactable_object_sprite.base_collider_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>d.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collider_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes();const n=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;a.setRectangle(n,n,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),a.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),a.damping=o.MAP_DAMPING,a.angularDamping=o.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=a}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.interactable_object_sprite.is_interactable_object=!0,this.interactable_object_sprite.roundPx=!0,this.interactable_object_sprite.base_collider_layer=this.base_collider_layer,this.interactable_object_sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.interactable_object_sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.interactable_object_sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.interactable_object_sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.interactable_object_sprite.centerX=(this.x+1)*t.tileWidth+i;const a=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.interactable_object_sprite.centerY=this.y*t.tileWidth-a+s,this.sprite_info.setAnimation(this.interactable_object_sprite,this.key_name);const n=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.interactable_object_sprite.animations.play(this.key_name+"_"+n)}initialize_related_events(t,e){const i=this.get_current_position(e);let s=i.x,a=i.y;for(let e=0;e<this.data.dbs.interactable_objects_db[this.key_name].events.length;++e){const i=this.data.dbs.interactable_objects_db[this.key_name].events[e];s+=void 0!==i.x_shift?i.x_shift:0,a+=void 0!==i.y_shift?i.y_shift:0;let n=void 0!==i.collider_layer_shift?i.collider_layer_shift:0;n=void 0!==this.collider_layer_shift?this.collider_layer_shift:n,this.collider_layer_shift=n;const _=void 0===i.active||i.active,o=this.base_collider_layer+n;switch(i.type){case g:this.set_jump_type_event(i,s,a,_,o,t);break;case m:this.set_jump_around_event(i,s,a,_,o,t);break;case b:this.set_stair_event(i,s,a,_,o,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,s,a,n){if(this.not_allowed_tile_test(e,i))return;const _=d.TileEvent.get_location_key(e,i);_ in n||(n[_]=[]);const o=new l.a(this.game,this.data,e,i,[h.directions.up,h.directions.down,h.directions.right,h.directions.left],[a],t.dynamic,s,void 0===t.is_set||t.is_set);n[_].push(o),this.insert_event(o.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{o.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,s,a,n){let _=void 0===t.is_set||t.is_set;Object(h.get_surroundings)(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const o=d.TileEvent.get_location_key(e.x,e.y);if(o in n)for(let t=0;t<n[o].length;++t){const e=n[o][t];e.type===d.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(a)&&(_=!1)}else n[o]=[];const r=new l.a(this.game,this.data,e.x,e.y,[h.directions.right,h.directions.left,h.directions.down,h.directions.up][i],[this.base_collider_layer],t.dynamic,s,_);n[o].push(r),this.insert_event(r.id),this.collision_change_functions.push(()=>{r.activation_collision_layers=[this.base_collider_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,s,a,n){[{x:e,y:i+1,activation_directions:[h.directions.up],activation_collision_layers:[this.base_collider_layer],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[h.directions.down],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collider_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[h.directions.up],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:a,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[h.directions.down],activation_collision_layers:[a],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=d.TileEvent.get_location_key(e.x,e.y);i in n||(n[i]=[]);const a=new p(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,s,e.change_to_collision_layer,t.is_set,this,e.climbing_only);n[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.interactable_object_sprite,!1),this.interactable_object_sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.interactable_object_sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=Object(h.mount_collision_polygon)(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.interactable_object_sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.interactable_object_sprite.body.setCollisionGroup(e[this.base_collider_layer]),this.interactable_object_sprite.body.damping=1,this.interactable_object_sprite.body.angularDamping=1,this.interactable_object_sprite.body.setZeroRotation(),this.interactable_object_sprite.body.fixedRotation=!0,this.interactable_object_sprite.body.dynamic=!1,this.interactable_object_sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}var f=i(5);const x=8+(o.WINDOW_PADDING_H<<1),v=(o.GAME_WIDTH>>1)-(x>>1),E=(o.GAME_HEIGHT>>1)+o.HERO_BODY_RADIUS+6;class k{constructor(t,e){this.game=t,this.data=e,this.window=new f.a(this.game,v,E,x,20),this.text=this.window.set_single_line_text("")}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){let i=Object(h.get_text_width)(this.game,t);this.window.update_size({width:x+i,height:20}),this.window.update_position({x:v-(i>>1)|0,y:E+this.vertical_adjust()|0}),this.window.update_text(Object(h.capitalize)(t),this.text),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}class j{constructor(t,e,i,s,a,n){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=a,this.need_target=n,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new k(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===directions_count?h.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,h.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(h.base_actions.IDLE,h.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,h.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===h.directions.up||this.cast_direction===h.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===h.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===h.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let _=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[_.key_name].psynergy_keys))continue;const o=_.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),r=_.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=r>=i&&r<=s;if(o>=t&&o<=e&&h&&this.data.map.collision_layer===_.base_collider_layer){let t=Math.pow(o-this.controllable_char.sprite.x,2)+Math.pow(r-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=_)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===u){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=function(t,e,i,s,a,n,_){e.filters=[s];let o=[],r=!1,h=[];for(let s=0;s<2;++s){let a=i.create(0,0,"psynergy_aura"),n=i.create(0,0,"psynergy_aura");a.base_collider_layer=e.base_collider_layer,n.base_collider_layer=e.base_collider_layer,a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e))},a.sort_function(),n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e)+1)},n.sort_function();const _=(e.height+n.height-8)/3|0;n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const c=n.y;n.scale.setTo(0,0),a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const d=a.y;a.scale.setTo(0,0);let l=[{aura:n,initial_y:c,scale_factor:1},{aura:a,initial_y:d,scale_factor:-1}];o.push([]);for(let e=0;e<l.length;++e){let i,a=l[e].aura,n=l[e].initial_y,c=l[e].scale_factor,d=t.add.tween(a).to({y:n-_},250,Phaser.Easing.Linear.None),p=t.add.tween(a).to({y:n-2*_},250,Phaser.Easing.Linear.None),u=t.add.tween(a).to({y:n-3*_},250,Phaser.Easing.Linear.None);h.push(new Promise(t=>{i=t})),u.onComplete.add(()=>{a.y=n,r?i():(d.start(),g.start())});let g=t.add.tween(a.scale).to({x:c,y:c},375,Phaser.Easing.Quadratic.Out),m=t.add.tween(a.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);o[s].push({aura:a,tween_a:d,tween_aa:g,tween_b:p,tween_c:u,tween_cc:m}),d.chain(p),p.chain(u),g.chain(m),s>0&&(g.onComplete.addOnce(()=>{o[0][e].aura.y=n,o[0][e].tween_a.start(),o[0][e].tween_aa.start()}),d.start(),g.start())}}let c=16,d=t.time.create(!1),l=t.time.create(!1);return d.loop(50,()=>{s.tint=c%2==0?[1,1,1]:[-1,-1,-1],--c,0===c&&(s.gray=.4,d.stop(),void 0!==a&&a(),l.start())}),l.loop(100,()=>{s.hue_adjust=2*Math.random()*Math.PI}),d.start(),async()=>{void 0!==_&&_(),r=!0,l.stop(),d.stop(),s.tint=[-1,-1,-1],s.gray=0,s.hue_adjust=0,e.filters=void 0,await Promise.all(h);for(let t=0;t<o.length;++t)for(let e=0;e<o[t].length;++e)o[t][e].tween_a.stop(),o[t][e].tween_aa.stop(),o[t][e].tween_b.stop(),o[t][e].tween_c.stop(),o[t][e].tween_cc.stop(),i.remove(o[t][e].aura,!0);void 0!==n&&n()}}(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}class T extends j{constructor(t,e){super(t,e,"move",26,"cast",!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list.move_hand;const i=this.hand_sprite_base.getActionKey("move_hand");this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,"move_hand"),this.emitter=null,this.final_emitter=null,this.set_controls(),this.controls_active=!1}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.right,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.left,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.up,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=h.directions.down,this.fire_push())}),this.data.esc_input.add(()=>{this.controls_active&&(this.controls_active=!1,this.finish_hand(),this.unset_hero_cast_anim())})}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collider_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case h.directions.up:t.y-=1;break;case h.directions.down:t.y+=1;break;case h.directions.left:t.x-=1;break;case h.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.controls_active=!1,Object(r.b)(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,s=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:s},o.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(o.PUSH_TIME>>1,()=>{let t=!1;if([h.directions.up,h.directions.down].includes(this.cast_direction)&&[h.directions.left,h.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=Object(h.join_directions)(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[h.directions.up,h.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[h.directions.left,h.directions.right].includes(this.cast_direction)&&(this.cast_direction=Object(h.join_directions)(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=h.reverse_directions[this.cast_direction];this.controllable_char.sprite.animations.play("cast_"+e,0),this.controllable_char.sprite.animations.frameName=`cast/${e}/01`})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.interactable_object_sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.interactable_object_sprite.body.y,2)<=Math.pow(o.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collider_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName("move_hand",h.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case h.directions.up:this.target_found?(t=this.target_object.interactable_object_sprite.centerX,e=this.target_object.interactable_object_sprite.y):e-=16;break;case h.directions.down:this.target_found?(t=this.target_object.interactable_object_sprite.centerX,e=this.target_object.interactable_object_sprite.y-this.target_object.interactable_object_sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=16;break;case h.directions.right:this.target_found?(t=this.target_object.interactable_object_sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.interactable_object_sprite.centerY):t+=16;break;case h.directions.left:this.target_found?(t=this.target_object.interactable_object_sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.interactable_object_sprite.centerY):t-=16}this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey("move_hand",h.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.interactable_object_sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.controls_active=!0):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();let i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},350,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case h.directions.up:e=-16;break;case h.directions.down:e=16;break;case h.directions.left:t=-16;break;case h.directions.right:t=16}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=52,this.emitter.height=52,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.final_emitter.x=t,this.final_emitter.y=e;let i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.interactable_object_sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}const A=7*Math.PI;class S extends j{constructor(t,e){super(t,e,"frost",12,"cast",!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close();for(let t=0;t<16;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=_.random(5,8)/10,s=Math.random()*o.degree360;e.scale.setTo(i,i),e.rotation=s;let a=this.controllable_char.sprite.centerX,n=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case h.directions.left:a-=16;break;case h.directions.right:a+=16;break;case h.directions.up:n-=14;break;case h.directions.down:n+=12}let r={rad:A};const c=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),l=this.game.add.tween(r).to({rad:-Math.PI},1650,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));l.onUpdateCallback(()=>{e.centerX=8*c*Math.exp(.15*r.rad)*Math.cos(r.rad)+a,e.centerY=8*d*Math.exp(.15*r.rad)*Math.sin(r.rad)+n}),l.onComplete.addOnce(()=>{e.destroy(),15===t&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,t.type===d.event_types.JUMP&&l.a.active_jump_surroundings(this.data,Object(h.get_surroundings)(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collider_layer))}),this.target_object.interactable_object_sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.interactable_object_sprite.filters=[this.target_object.custom_data.color_filters];let t=16,e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.target_object.interactable_object_sprite.animations.play("frost_pool_pillar"),this.target_object.interactable_object_sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.interactable_object_sprite.events.onDestroy.add(()=>{t.destroy()})}}class I extends j{constructor(t,e){super(t,e,"growth",12,"cast",!0),this.set_bootstrap_method(this.init_bubbles.bind(this))}set_emitter(){let t=0,e=0,i=0,s=0,a=this.controllable_char.sprite.centerX,n=this.controllable_char.sprite.centerY+5,_=0,o=0;switch(this.increase_duration=0,this.cast_direction){case h.directions.up:e=-60,s=-55,t=i=35,n-=7,_=6,o=18,this.increase_duration=80;break;case h.directions.down:e=60,s=55,t=i=35,n+=12,_=6,o=18,this.increase_duration=80;break;case h.directions.left:t=-60,i=-55,e=s=35,a-=16,_=18,o=12;break;case h.directions.right:t=60,i=55,e=s=35,a+=16,_=18,o=12}this.emitter=this.game.add.emitter(a,n,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,s),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=_,this.emitter.height=o,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close(),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()}),this.target_object.interactable_object_sprite.animations.play("growth_growing",8,!1),this.target_object.interactable_object_sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case h.directions.up:e-=16;break;case h.directions.down:e+=16;break;case h.directions.left:t-=16;break;case h.directions.right:t+=16}const i=Phaser.Animation.generateFrameNames("growth/no_target/",0,6,"",2);let s=new Array(5);for(let a=0;a<5;++a){let n,o=this.data.overlayer_group.create(t+_.random(-13,13),e+_.random(-13,13),"growth_growth");o.anchor.setTo(.5,1),o.animations.add("no_target",i,10,!1,!1),s.push(new Promise(t=>{n=t})),this.game.time.events.add(40*a,()=>{o.animations.play("no_target"),o.animations.currentAnim.onComplete.addOnce(()=>{o.destroy(),n()})})}Promise.all(s).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}var O=i(7);var P=i(3);var N=i(19);var R=i(14);class D extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r,h,c,l,p){super(t,e,d.event_types.TELEPORT,i,s,a,n,_,o,null),this.target=r,this.x_target=h,this.y_target=c,this.advance_effect=l,this.dest_collider_layer=p}fire(){if(!(!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event))if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(h.base_actions.WALK,h.reverse_directions[h.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(h.base_actions.IDLE,h.reverse_directions[this.data.hero.current_direction]),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.game.camera.lerp.setTo(1,1),this.change_map()})}async change_map(){this.data.map.unset_map();const t=this.target,e=this.dest_collider_layer;this.data.hero.shadow.base_collider_layer=e,this.data.hero.sprite.base_collider_layer=e,this.data.map=await this.data.info.maps_list[t].mount_map(e),this.game.camera.setBoundsToWorld(),this.game.camera.bounds.width<o.GAME_WIDTH&&(this.game.camera.bounds.width=o.GAME_WIDTH),this.game.camera.bounds.height<o.GAME_HEIGHT&&(this.game.camera.bounds.height=o.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}camera_fade_out(){this.data.hero.update_shadow(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(o.CAMERA_LERP,o.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=_.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=_.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let a,n,o,r,h,c,d;for(let e=0;e<s.length;++e)a=s[e],n=1+(0|a.index),o=a.close_door,r=a.base_offset.split(","),h=this.x+(0|r[0]),c=this.y+(0|r[1])-1,d=1+(0|_.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:o})),this.data.map.sprite.replace(n,d,h,c,1,1,t.name)}}class M extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.STEP,i,s,a,n,_,o,null),this.step_direction=r,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===h.directions.up?e=-(this.data.map.sprite.tileHeight/4|0):this.step_direction===h.directions.down&&(e=this.data.map.sprite.tileHeight/4|0),this.activation_directions[0]===h.directions.left?t=this.x-1:this.activation_directions[0]===h.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.sprite.body.y+=this.shift_y):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}class L extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.COLLISION,i,s,a,n,_,o,null),this.dest_collider_layer=r,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===directions.left?t=this.x-1:this.activation_directions[0]===directions.right?t=this.x+1:this.activation_directions[0]===directions.up?e=this.y-1:this.activation_directions[0]===directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collider_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}class C extends d.TileEvent{constructor(t,e,i,s,a,n,_,o,r){super(t,e,d.event_types.SPEED,i,s,a,n,_,o,null),this.speed=r}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}var q=i(13);class H{constructor(t,e,i,s,a,n,_,o,r,h){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=a,this.physics_names=n,this.tileset_image_url=_,this.tileset_json_url=o,this.physics_jsons_url=r,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,a)=>{s.y_sort=s.base_collider_layer.toString()+s.y.toString()|0,s.sort_function?i[a]=s:s.send_to_back?t[a]=s:s.send_to_front&&(e[a]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendChildToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringChildToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites()}load_map_assets(t,e){let i,s,a=new Promise(t=>{i=t});this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(i);let n=new Promise(t=>{s=t});this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(s);let _=[];for(let t=0;t<this.physics_names.length;++t){let e,i=new Promise(t=>{e=t});_.push(i),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all([a,n,..._]).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]),this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=o.MAP_DAMPING,this.collision_sprite.body.angularDamping=o.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t)),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return _.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=d.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===d.event_types.CLIMB){const t=new p(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===d.event_types.SPEED){const t=new C(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===d.event_types.TELEPORT){const t=new D(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collider_layer?e.dest_collider_layer:0);this.events[i].push(t)}else if(e.type===d.event_types.JUMP){const t=new l.a(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===d.event_types.STEP){const t=new M(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,h.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===d.event_types.COLLISION){const t=new L(this.game,this.data,e.x,e.y,Object(h.map_directions)(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collider_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name].initial_action;this.npcs.push(new R.a(this.game,this.data,e.key_name,e.initial_x,e.initial_y,i,this.data.dbs.npc_db[e.key_name].actions[i].initial_direction,e.enable_footsteps,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,void 0===e.base_collider_layer?0:e.base_collider_layer,e.talk_range_factor,void 0===e.events?[]:e.events))}create_interactable_objects(t){const e=JSON.parse(t),i=new y(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collider_layer?0:e.base_collider_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in data.dbs.interactable_objects_db[e.key_name].psynergy_keys){data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===u&&(i.custom_data[t+"_casted"]=!1)}data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}async config_interactable_object(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t],i=e.key_name;let s=new w(e.key_name,[i]);e.sprite_info=s,s.setActionSpritesheet(i,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.image,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.json),s.setActionDirections(i,this.data.dbs.interactable_objects_db[e.key_name].actions.animations,this.data.dbs.interactable_objects_db[e.key_name].actions.frames_count),s.setActionFrameRate(i,this.data.dbs.interactable_objects_db[e.key_name].actions.frame_rate),s.setActionLoop(i,this.data.dbs.interactable_objects_db[e.key_name].actions.loop),s.generateAllFrames(),await new Promise(t=>{s.loadSpritesheets(this.game,!0,()=>{e.initial_config(this.sprite),e.initialize_related_events(this.events,this),t()})})}}async config_npc(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=[];e.movement_type===R.c.IDLE&&(s=[h.base_actions.IDLE]);const a=new R.b(e.key_name,s);for(let t=0;t<s.length;++t){const n=s[t];a.setActionSpritesheet(n,`assets/images/spritesheets/npc/${e.key_name}_${n}.png`,`assets/images/spritesheets/npc/${e.key_name}_${n}.json`),a.setActionDirections(n,i.actions[n].directions,i.actions[n].frames_count),a.setActionFrameRate(n,i.actions[n].frame_rate),a.setActionLoop(n,i.actions[n].loop)}a.generateAllFrames(),await new Promise(t=>{a.loadSpritesheets(this.game,!0,()=>{e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collider_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,a,this.sprite,e.base_collider_layer,i.anchor_x,i.anchor_y),e.set_sprite_as_npc(),e.play(),t()})})}}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,this.layers[i].sprite.layer_z=this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let a=this.layers[i].properties.over.toString().split(",");a=a.length>this.collision_layer?0|a[this.collision_layer]:0|a[0],0!==a?t.add(s):e.add(s)}}async mount_map(t){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),await e}this.collision_layer=t,this.events={},d.TileEvent.reset(),q.a.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.addTilesetImage(this.tileset_name,this.key_name);for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),await this.config_interactable_object(),await this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}var U=i(16),G=i(9);const F=100-2*(o.OUTSIDE_BORDER_WIDTH+o.INSIDE_BORDER_WIDTH),W=parseInt(F/4),K=parseInt(F/4/2);class Y{constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.enter_propagation_priority=_,this.esc_propagation_priority=n,this.on_choose=void 0===i?()=>{}:i,this.on_change=void 0===s?()=>{}:s,this.on_cancel=void 0===a?()=>{}:a,this.base_window=new f.a(this.game,0,0,100,36),this.group=t.add.group(),this.group.alpha=0,this.x=0,this.y=0,this.selected_y=0,this.unselected_y=-4,this.set_chars(),this.selected_button_index=0,this.line_index=0,this.menu_open=!1,this.menu_active=!1,this.set_control(),this.cursor_control=new G.a(this.game,!0,!1,this.get_max_per_line.bind(this),void 0,this.group,this.change_button.bind(this),void 0,this.get_selected_button_index.bind(this),this.set_selected_button_index.bind(this),void 0,void 0,this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}get_cursor_x(){return this.char_buttons[this.data.info.party_data.members[this.selected_button_index].key_name].x}get_cursor_y(){return 22}get_max_per_line(){return this.data.info.party_data.members.slice(4*this.line_index,4*(this.line_index+1)).length}get_selected_button_index(){return this.selected_button_index}set_selected_button_index(t){this.selected_button_index=t}is_open(){return this.menu_open}is_activated(){return this.menu_active}set_chars(){for(let t in this.char_buttons)this.char_buttons[t].destroy();this.char_buttons={};for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name]=this.group.create(0,0,e.sprite_base.getActionKey(h.base_actions.IDLE)),this.data.info.party_data.members[t].sprite_base.setAnimation(this.char_buttons[e.key_name],h.base_actions.IDLE),this.char_buttons[e.key_name].animations.play(e.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]))}}set_control(){this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y;for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name].centerX=t*W+K+o.OUTSIDE_BORDER_WIDTH+o.INSIDE_BORDER_WIDTH,this.char_buttons[e.key_name].y=this.unselected_y}}change_button(t,e){this.reset_button(t),this.on_change(e),this.set_button(e)}set_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.selected_y}reset_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.unselected_y}set_char_by_index(t){this.reset_button(this.selected_button_index),this.selected_button_index=t,this.set_button(this.selected_button_index)}open(t,e=!0){Object.keys(this.char_buttons).length!=_.clamp(this.data.info.party_data.members.length,0,4)&&this.set_chars(),this.buttons_number=_.clamp(this.data.info.party_data.members.length,0,4),this.selected_button_index=void 0===t?0:t,this.line_index=0,this.update_position(),this.set_button(this.selected_button_index),this.base_window.show(void 0,!1),this.group.alpha=1,this.menu_active=e,this.cursor_control.activate(),this.menu_open=!0}close(){this.menu_open=!1,this.reset_button(this.selected_button_index),this.group.alpha=0,this.cursor_control.deactivate(),this.base_window.close(void 0,!1)}activate(){this.menu_active=!0,this.cursor_control.activate()}deactivate(){this.menu_active=!1,this.cursor_control.deactivate()}}class B{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new f.a(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const z=o.FONT_SIZE;class ${constructor(t,e,i,s,a,n,_){this.game=t,this.data=e,this.is_psynergy_window=i,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.on_choose=void 0===a?()=>{}:a,this.on_change=void 0===s?()=>{}:s,this.esc_propagation_priority=n+1,this.enter_propagation_priority=_+1,this.window=new f.a(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.set_control(),this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const r=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(r.text,r.shadow),this.page_index=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.cursor_control=new G.a(this.game,!0,!0,this.get_page_number.bind(this),this.get_elem_per_page.bind(this),this.group,this.page_change.bind(this),this.element_change.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_element_index.bind(this),this.set_element_index.bind(this),this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(o.ICON_WIDTH>>1),0,114,z),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8),this.init_page_indicator_bar()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.window.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.window.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.window.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.window.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.window.create_at_group(129,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.window.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_activated&&(this.data.esc_input.halt(),this.close())},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_activated&&(this.data.enter_input.halt(),this.is_psynergy_window&&this.element_list[this.elements[this.selected_element_index]].is_field_psynergy&&this.close(),this.is_psynergy_window||this.deactivate(),this.on_choose(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]))},this,this.enter_propagation_priority)}is_open(){return this.window_open}is_activated(){return this.window_activated}get_element_index(){return this.selected_element_index}set_element_index(t){this.selected_element_index=t}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_cursor_x(){return-5}get_cursor_y(){return 12+(o.ICON_HEIGHT>>1|0)+this.selected_element_index*(o.ICON_HEIGHT+1)}get_elem_per_page(){return this.elements.length}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_page_number(){return this.page_number}set_page_indicator(){const t=this.get_page_number();if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=132-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.window.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(),this.set_page_indicator_arrow()}}set_page_indicator_highlight(){this.page_number_bar_highlight.x=127-8*(this.get_page_number()-this.get_page_index())}set_page_indicator_arrow(){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=127-8*this.get_page_number()-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=129-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.window.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.cursor_control.set_cursor_position());for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(o.ICON_HEIGHT+1),a=i+(o.ICON_WIDTH>>1),n=s+(o.ICON_HEIGHT>>1),_=8+o.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,_,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(a,n,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=a,i.y=n,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(o.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween&&(this.selected_element_tween.stop(),this.icon_sprites_in_window[t].scale.setTo(1,1)),this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[this.selected_element_index].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(){this.selected_element_tween.stop(),this.selected_element_tween=null}element_change(t,e){this.set_element_tween(t),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(e)],this.is_psynergy_window?void 0:this.item_objs[e])}page_change(){this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.set_page_indicator_highlight()}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=0,this.page_index=0,this.set_elements(),this.set_page_indicator(),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.set_page_indicator(),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}const X=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,J=(132-2*(o.INSIDE_BORDER_WIDTH+1)-8*o.ICON_WIDTH)/7;class Z{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.chars_menu=new Y(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.enter_propagation_priority),this.basic_info_window=new B(this.game),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new f.a(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_psynergy=!1,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.description_window=new f.a(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.psynergy_overview_window=new f.a(this.game,104,24,132,76),this.shortcuts_window=new f.a(this.game,104,104,132,28),this.shortcuts_window_text=this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3),this.psynergy_choose_window=new $(this.game,this.data,!0,this.psynergy_change.bind(this),this.psynergy_choose.bind(this),this.esc_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}char_change(t){this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_psynergy_icons())}char_choose(t){this.is_open&&(this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.open(t,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list&&(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name))}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=X+1+Math.ceil(t%8*(J+o.ICON_WIDTH)),s=X+5+parseInt(t/8)*(3+o.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}class V{constructor(t,e,i,s){this.game=t,this.data=e,this.base_window=new f.a(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.answer_index=0,this.dropped=!1,this.cursor_control=new G.a(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,this.dropped)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.on_choose())},this,this.enter_propagation_priority)}get_cursor_x(){return 16}get_cursor_y(){return 5+(this.answer_index?62:46)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_choose(){0===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close(this.close_callback.bind(this,this.dropped))}open(t,e,i,s,a,n){this.item_obj=t,this.item=e,this.char=i,this.quantity_to_remove=s,this.answer_index=0,this.cursor_control.activate(),this.set_info(),this.update_position(),this.dropped=!1,this.close_callback=a,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==n&&n()},!1)}close(t){this.cursor_control.deactivate(),this.unset_info(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}}class Q{constructor(t,e,i,s,a){this.game=t,this.group=e,this.available_items_count=0,this.x=i,this.y=s,this.on_change=void 0===a?()=>{}:a,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.index_change_time=Phaser.Timer.QUARTER/2,this.right_pressed=!1,this.left_pressed=!1,this.set_controls(),this.create_grid()}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})}set_change_timers(t){this.advance_step(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(this.index_change_time,this.advance_step.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=0;t<this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=30;t>this.available_items_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e){this.clear(),this.current_quantity=e,this.available_items_count=t,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear()}activate(){this.active=!0}deactivate(){this.active=!1}}const tt=16+o.FONT_SIZE,et=tt+o.FONT_SIZE;class it{constructor(t,e,i,s){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.choosen_quantity=1,this.item_counter=new Q(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,et,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,et,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_quantity=0,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback))},this,this.enter_propagation_priority)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,tt),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,tt)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,a,n){if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=a,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==n&&n()},!1)}close(t){this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}const st=8+o.FONT_SIZE,at=st+o.FONT_SIZE;class nt{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i,this.enter_propagation_priority=s,this.base_window=new f.a(this.game,104,0,132,36),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.group=this.game.add.group(),this.answer_index=0,this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.cursor_control=new G.a(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,!1,!1)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback.bind(this,!0,0===this.answer_index)))},this,this.enter_propagation_priority)}get_cursor_x(){return 96}get_cursor_y(){return 5+(this.answer_index?24:8)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,st),this.choosing_char?this.action_text=this.base_window.set_text_in_position("Give it to whom?",27,at):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.action_text=this.base_window.set_text_in_position("Equip this item?",8,at)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.base_window.remove_text(this.action_text),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}open(t,e,i,s,a,n,_){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=s,this.asking_for_equip=a,this.answer_index=0,this.asking_for_equip&&this.cursor_control.activate(),this.set_header(),this.update_position(),this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==_&&_()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}active(){this.window_active=!0,this.cursor_control.activate()}deactive(){this.window_active=!1,this.cursor_control.deactivate()}}const _t=8+o.FONT_SIZE;class ot{constructor(t,e,i,s){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+o.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+o.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+o.FONT_SIZE)},this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.horizontal_index=0,this.vertical_index=0,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.cursor_control=new G.a(this.game,!0,!0,()=>3,()=>2,this.group,this.on_change.bind(this),this.on_change.bind(this),this.get_horizontal_index.bind(this),this.set_horizontal_index.bind(this),this.get_vertical_index.bind(this),this.set_vertical_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.give_item_options_window=new nt(this.game,this.data,this.esc_propagation_priority+2,this.enter_propagation_priority+2),this.item_quantity_manager_window=new it(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.drop_item_window=new V(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.action_message_window=new f.a(this.game,122,66,67,20),this.set_control()}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}is_open(){return this.window_open}is_active(){return this.window_active}get_cursor_x(){return 8+40*this.horizontal_index-15}get_cursor_y(){return 32+o.FONT_SIZE*this.vertical_index+4}get_vertical_index(){return this.vertical_index}set_vertical_index(t){this.vertical_index=t}get_horizontal_index(){return this.horizontal_index}set_horizontal_index(t){this.horizontal_index=t}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.action_message_window.open?this.action_message_window.close():this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.action_message_window.open?this.action_message_window.close():this.on_choose())},this,this.enter_propagation_priority)}set_available_options(){!this.item.use_ability||this.item.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.imporant_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,_t),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.cursor_control.deactivate(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()})}on_choose(){if(0===this.horizontal_index)1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,!0,!1),this.give_item_options_window.deactive(),this.on_give_callback((t,e,i)=>{if(null===t)this.give_item_options_window.close(),this.activate();else if(t.key_name!==this.char.key_name){this.give_item_options_window.close();let s={key_name:this.item_obj.key_name,equipped:!1,quantity:this.item_obj.quantity};this.item.equipable_chars.includes(t.key_name)?this.give_item_options_window.open(s,this.item,t,!1,!0,(e,a)=>{e?(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,a),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())}):this.item_obj.quantity>1?this.item_quantity_manager_window.open(s,this.item,this.char,e=>{e>0?(this.activate(),s.quantity=e,this.char.remove_item(this.item_obj,e),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())},t):(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})),e()}}));else if(1===this.horizontal_index)0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}));else if(2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop){this.deactivate();let t=(t=1)=>{this.drop_item_window.open(this.item_obj,this.item,this.char,t,t=>{this.activate(),t&&this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})})};this.item_obj.quantity>1?this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,e=>{e>0?t(e):this.activate()}):t()}}on_change(){this.stats_window.hide_arrows(),this.stats_window.show(),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open(t,e,i,s,a,n,_,o){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.cursor_control.activate(),this.on_give_callback=a,this.close_callback=n,this.stats_update_callback=_,this.update_position(),this.set_header(),this.set_available_options(),this.on_change(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==o&&o()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.cursor_control.activate(),this.window_active=!0}deactivate(){this.unset_header(),this.cursor_control.deactivate(),this.window_active=!1}}var rt=i(2);class ht{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new f.a(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[rt.e.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[rt.e.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[rt.e.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[rt.e.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[rt.e.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[rt.e.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[rt.e.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[rt.e.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[rt.e.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.current_atk.toString(),this.attack_text),this.base_window.update_text(this.char.current_def.toString(),this.defense_text),this.base_window.update_text(this.char.current_agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let a,n=_.find(this.item.effects,{type:t});if(void 0!==n){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;a=this.char.preview_stats_by_effect(t,n,i)}if(null===this.char.equip_slots[e]){if(void 0===n)return;this.update_preview_text(a,t),this.up_arrows[t].alpha=1}else{if(void 0===_.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===n)return;(void 0===n||s)&&(n={type:t,quantity:0,operator:rt.d.PLUS},a=this.char.preview_stats_by_effect(t,n,this.char.equip_slots[e].key_name));const o=this.char[i];a>o?(this.up_arrows[t].alpha=1,this.update_preview_text(a,t)):a<o&&(this.down_arrows[t].alpha=1,this.update_preview_text(a,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e;switch(this.item.type){case O.b.WEAPONS:e="weapon";break;case O.b.HEAD_PROTECTOR:e="head";break;case O.b.CHEST_PROTECTOR:e="chest";break;case O.b.ARMOR:e="body"}this.set_compare_arrows(rt.e.ATTACK,e,"current_atk",t),this.set_compare_arrows(rt.e.DEFENSE,e,"current_def",t),this.set_compare_arrows(rt.e.AGILITY,e,"current_agi",t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const ct=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,dt=(132-2*(o.INSIDE_BORDER_WIDTH+11)-5*o.ICON_WIDTH)/4;class lt{constructor(t,e,i,s){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.chars_menu=new Y(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.char_choose_cancel.bind(this),this.esc_propagation_priority,this.enter_propagation_priority),this.basic_info_window=new B(this.game),this.item_change_stats_window=new ht(this.game,this.data),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new f.a(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new f.a(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new f.a(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new f.a(this.game,104,24,132,76),this.item_choose_window=new $(this.game,this.data,!1,this.item_change.bind(this),this.item_choose.bind(this),this.esc_propagation_priority),this.item_options_window=new ot(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.choosing_give_destination=!1}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}shift_item_overview(t){t?this.item_overview_window.group.y+=16:this.item_overview_window.group.y-=16}char_change(t){if(this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_item_icons(),this.choosing_give_destination))if(this.item_options_window.item.type===O.b.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==O.b.GENERAL_ITEM){const e=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[t],this.item_options_window.item,e),this.item_change_stats_window.compare_items()}}char_choose(t){if(this.is_open)if(this.choosing_give_destination){if(this.data.info.party_data.members[t].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate(),this.after_char_choose_on_give(this.data.info.party_data.members[t],()=>{this.choosing_give_destination=!1},()=>{this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16})})}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(t,()=>{this.on_item_choose_close()})}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}char_choose_cancel(){this.choosing_give_destination?(this.chars_menu.deactivate(),this.choosing_give_destination=!1,this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16}),this.after_char_choose_on_give(null),this.char_change(this.item_choose_window.char_index),this.item_options_window.item.type===O.b.ABILITY_GRANTOR||this.item_options_window.item.type!==O.b.GENERAL_ITEM&&(this.item_change_stats_window.open(this.data.info.party_data.members[this.item_choose_window.char_index],this.item_options_window.item,this.item_options_window.item_obj),this.item_change_stats_window.compare_items()),this.chars_menu.set_char_by_index(this.item_choose_window.char_index),this.item_options_window.stats_window.compare_items(!0)):this.close_menu()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,t=>{this.choosing_give_destination=!0,this.shift_item_overview(!0),this.item_overview_window.update_size({height:this.item_overview_window.height+16}),this.item_choose_window.hide(),this.item_options_window.hide(),this.chars_menu.activate(),this.char_change(this.selected_char_index),this.after_char_choose_on_give=t},e=>{this.item_choose_window.activate(),t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&this.item_change_stats_window.compare_items(),e&&this.item_choose_window.close()},()=>{t.type===O.b.ABILITY_GRANTOR||t.type!==O.b.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())})}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=ct+11+Math.ceil(t%5*(dt+o.ICON_WIDTH)),a=ct+12+parseInt(t/5)*(3+o.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,a,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,a+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,a+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}const pt=8+o.FONT_SIZE;class ut{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.char=null,this.base_window=new f.a(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,pt),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const gt=[32,99],mt=[21,37],bt=[16,117],wt=[34,34];class yt{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.x=0,this.y=0,this.base_window=new f.a(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=Object(h.capitalize)(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(P.b[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(P.b[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(P.b[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(P.b[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+o.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+o.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,a;["Trade","Give"].includes(this.action_text)?(s=gt[t],a=mt[t]):(s=32,a=31);const n=e.sprite_base.getActionKey(h.base_actions.IDLE),_=this.base_window.create_at_group(bt[t],wt[t],n);_.anchor.setTo(.5,1);const o=e.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]);if(_.animations.add(o,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),_.animations.play(o,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(_),"Give"===this.action_text&&1===t)break;const r=this.group.create(s,a,i.element+"_djinn_"+i.status);if(r.anchor.setTo(.5,1),r.scale.x=-.8,r.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(r,i.status),r.animations.play(i.status+"_down"),this.djinn_sprites.push(r),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,n=33*e,_=5*-e,o=this.game.add.tween(r).to({y:[a,a+_,a+_,a],x:[s,s+i,s+i+n,s+i+n+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);o.repeatDelay(300),this.tweens.push(o)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,a){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==a&&a()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const ft=["HP","PP","Attack","Defense","Agility","Luck"],xt=["max_hp","max_pp","atk","def","agi","luk"],vt=h.ordered_elements.slice().reverse();class Et{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.base_window=new f.a(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),this.djinn_number_texts={},vt.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),this.stats_current_texts={},this.stats_next_texts={},ft.forEach((t,e)=>{const i=64+e*o.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),vt.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(xt,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),ft.forEach((t,i)=>{const s=this.char[xt[i]],a=e[xt[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(a.toString(),this.stats_next_texts[t]);const n=64+i*o.FONT_SIZE-3;let _=0;if(["HP","PP"].includes(t)&&(_=-8),s!==a){const t=this.base_window.create_at_group(78+_,n,"stat_"+(a>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,a){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==a&&a()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const kt=o.YELLOW_FONT_COLOR,jt=o.RED_FONT_COLOR,Tt=97+o.FONT_SIZE;class At{constructor(t,e,i,s,a){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.spacebar_propagation_priority=a+1,this.base_window=new f.a(this.game,120,40,116,116),this.base_window.init_page_indicator_bar(),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,Tt),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.execute_operation=!1,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.execute_operation=!0,this.close(this.close_callback))},this,this.enter_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.window_open&&this.change_page(1)}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.window_open&&this.change_page(-1)}),this.data.spacebar_input.add(()=>{this.window_open&&(this.data.spacebar_input.halt(),void 0!==this.spacebar_callback&&this.spacebar_callback())},this,this.spacebar_propagation_priority)}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(o.ICON_HEIGHT+2),a=i+(o.ICON_WIDTH>>1),n=s+(o.ICON_HEIGHT>>1),_=8+o.ICON_WIDTH+2,r=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,_,s+4);this.text_sprites_in_window.push(r),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,n,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const h=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(h),this.gained_abilities.includes(e)?(this.base_window.update_text_color(kt,r),this.base_window.update_text_color(kt,h)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(jt,r),this.base_window.update_text_color(jt,h))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(o.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(kt,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(jt,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(kt,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(jt,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.unset_page_indicator(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,a=!1,n,_,o){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.spacebar_callback=n,this.action=_,a?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==o&&o()},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}const St=0,It=1,Ot=2;class Pt{constructor(t,e,i,s,a,n){this.game=t,this.data=e,this.base_window=new f.a(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.spacebar_propagation_priority=n+1,this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.close_callback=null,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.cursor_control=new G.a(this.game,!0,!0,this.get_max_chars.bind(this),this.get_max_djinn.bind(this),this.group,this.on_char_change.bind(this),this.on_djinn_change.bind(this),this.get_char_index.bind(this),this.set_char_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_x_cursor.bind(this),this.get_y_cursor.bind(this)),this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new yt(this.game,this.data),this.djinn_char_stats_window_left=new Et(this.game),this.djinn_char_stats_window_right=new Et(this.game,120),this.djinn_psynergy_window=new At(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.spacebar_propagation_priority),this.init_djinn_sprites(),this.init_djinni_status_texts(),this.set_control()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&this.setting_djinn_status&&(this.data.esc_input.halt(),this.cancel_djinn_status_set(!0))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.setting_djinn_status?this.set_djinn_operation():this.on_choose())},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.setting_djinn_status&&(this.data.shift_input.halt(),this.change_djinn_status(this.selected_char_index,this.selected_djinn_index))},this,this.shift_propagation_priority)}get_x_cursor(){return 16+56*this.selected_char_index-14}get_y_cursor(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?24-o.FONT_SIZE:24+this.selected_djinn_index*o.FONT_SIZE+3}is_open(){return this.window_open}is_active(){return this.window_active}get_char_index(){return this.selected_char_index}set_char_index(t){this.selected_char_index=t}get_djinn_index(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.setting_djinn_status_djinn_index:this.selected_djinn_index}set_djinn_index(t){this.selected_djinn_index=t}get_max_chars(){return this.sizes.length}get_max_djinn(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?1:this.sizes[this.selected_char_index]}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in h.elements){const i=h.elements[e];if(i===h.elements.NO_ELEMENT)continue;const s=50+56*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+56*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,n;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case P.c.RECOVERY:n="left";case P.c.STANDBY:n="down",a="standby";break;case P.c.SET:n="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+n)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(h.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],h.base_actions.IDLE)}const a=i.sprite_base.getAnimationKey(h.base_actions.IDLE,h.reverse_directions[h.directions.down]);this.chars_sprites[s].animations.play(a);const n=32+56*t;this.chars_sprites[s].x=n,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let a=0;a<e.length;++a){const n=this.data.info.djinni_list[e[a]],_=17+56*t,r=25+a*o.FONT_SIZE;s.push(this.base_window.create_at_group(_,r,n.element+"_star"));const h=24+56*t,c=24+a*o.FONT_SIZE;let d;switch(n.status){case P.c.SET:d=P.b[P.c.SET];break;case P.c.STANDBY:d=P.b[P.c.STANDBY];break;case P.c.RECOVERY:d=P.b[P.c.RECOVERY]}const l=this.base_window.set_text_in_position(n.name,h,c,!1,!1,d);i.push(l)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+56*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*o.FONT_SIZE),this.setting_djinn_status&&this.selected_char_index!==this.setting_djinn_status_char_index?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+56*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*o.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(t,e){this.selected_char_index=e,this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.cursor_control.set_cursor_position()),this.set_highlight_bar();const i=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(i),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(t,e){this.selected_djinn_index=e,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==P.c.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=o.FONT_SIZE;for(let t=0;t<4;++t)for(let e in h.elements){const i=h.elements[e];i!==h.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=o.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case P.c.SET:s=Object(h.capitalize)(P.c.STANDBY);break;case P.c.STANDBY:s=Object(h.capitalize)(P.c.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;e.djinni.length<t.djinni.length?(s="Give",++this.sizes[i]):s="Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.cursor_control.set_cursor_position()}}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?Object(h.change_brightness)(P.b[s.status],.7):P.b[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=o.FONT_SIZE;for(let t=0;t<4;++t){for(let e in h.elements){const i=h.elements[e];i!==h.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=o.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.set_cursor_position()}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,n,_,o,r;this.selected_djinn_index===i.djinni.length?(s=[e.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],a=[e.status===P.c.STANDBY?"irrelevant":e.status],n=[e],_=[e],o="Give"):(r=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[r.status===P.c.STANDBY?"irrelevant":r.status,e.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],a=[e.status===P.c.STANDBY?"irrelevant":e.status,r.status===P.c.STANDBY?"irrelevant":P.c.STANDBY],n=[r,e],_=[e,r],o="Trade"),this.djinn_char_stats_window_left.open(t,n,s,o),this.djinn_char_stats_window_right.open(i,_,a,o),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],_,s,o),this.deactivate(),this.view_state=St,this.djinn_psynergy_window.open(t,n,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s&&("Trade"===o?(t.replace_djinn(e.key_name,r.key_name),i.replace_djinn(r.key_name,e.key_name)):"Give"===o&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>Ot&&(this.view_state=St),this.view_state){case St:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case It:this.djinn_psynergy_window.update_info(t,n,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case Ot:this.djinn_psynergy_window.update_info(i,_,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},o)}else{let i;switch(e.status){case P.c.SET:i=P.c.STANDBY;break;case P.c.STANDBY:i=P.c.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t&&(this.change_djinn_status(this.setting_djinn_status_char_index,this.setting_djinn_status_djinn_index),this.cancel_djinn_status_set()),this.activate()})}}change_djinn_status(t,e){const i=this.data.info.party_data.members[t],s=this.data.info.djinni_list[i.djinni[e]];s.status===P.c.SET?(s.set_status(P.c.STANDBY,i),this.base_window.update_text_color(P.b[P.c.STANDBY],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):s.status===P.c.STANDBY&&(s.set_status(P.c.SET,i),this.base_window.update_text_color(P.b[P.c.SET],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.activate(),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.base_window.show(void 0,!1),s&&s()}close(t){this.window_open=!1,this.window_active=!1,this.cursor_control.deactivate(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),t&&t()}activate(){this.window_active=!0,this.cursor_control.activate()}deactivate(){this.window_active=!1,this.cursor_control.deactivate()}}class Nt{constructor(t){this.game=t,this.window_open=!1,this.base_window=new f.a(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.star_sprite=null,this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")},this.action_text=this.base_window.set_text_in_position("",31,24)}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case P.c.SET:this.base_window.update_text(": Standby",this.action_text);break;case P.c.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}class Rt{constructor(t,e,i,s,a,n){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=s+1,this.shift_propagation_priority=a+1,this.spacebar_propagation_priority=n+1,this.is_open=!1,this.close_callback=null,this.selected_char_index=0,this.set_control(),this.chars_quick_info_window=new ut(this.game),this.djinn_action_window=new Nt(this.game),this.djinni_list_window=new Pt(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.shift_propagation_priority,this.spacebar_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}var Dt=i(18);class Mt{constructor(t,e){this.game=t,this.data=e,this.chars_status_window=new Dt.a(this.game,this.data),this.buttons_keys=["psynergy","djinni","item","status"];let i=0,s=0;this.horizontal_menu=new U.a(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>Object(h.capitalize)(t)),this.button_press.bind(this),s,this.close_menu.bind(this),i),++i,++s,this.psynergy_menu=new Z(this.game,this.data,i,s),this.item_menu=new lt(this.game,this.data,i,s),this.djinn_menu=new Rt(this.game,this.data,i,s,0,0)}button_press(t){switch(this.buttons_keys[t]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu)}}button_press_action(t){this.horizontal_menu.deactivate(),t.open_menu(t=>{this.horizontal_menu.activate(),this.chars_status_window.update_chars_info(),t&&this.close_menu()})}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_menu(){this.horizontal_menu.open(),this.chars_status_window.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.data.menu_open=!1,this.horizontal_menu.close(),this.chars_status_window.close())}}async function Lt(t,e){let i;const _=new Promise(t=>{i=t});let o;e.info.maps_list=function(t,e,i,s){let a={};for(let s=0;s<i.length;++s){const n=i[s];a[n.key_name]=new H(t,e,n.name,n.key_name,n.tileset_key_name,n.collision_key_names,n.tileset_files.image,n.tileset_files.json,n.collision_files,n.lazy_load)}let n=[];for(let t in a){if(a[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});n.push(i),a[t].load_map_assets(!0,e)}return Promise.all(n).then(s),a}(t,e,e.dbs.maps_db,i),await _,e.info.classes_list=function(t){let e={};for(let i=0;i<t.classes.length;++i){const a=t.classes[i];e[a.key_name]=new s.a(a.key_name,a.name,a.required_venus_level,a.required_mercury_level,a.required_mars_level,a.required_jupiter_level,a.hp_boost,a.pp_boost,a.atk_boost,a.def_boost,a.agi_boost,a.luk_boost,a.ability_level_pairs,a.class_type,a.vulnerabilities)}return e}(e.dbs.classes_db);const r=new Promise(t=>{o=t});let d;e.info.enemies_list=function(t,e,i){let s=[],a={};for(let i=0;i<e.length;++i){const n=e[i];a[n.key_name]=new N.a(n.key_name,n.battle_scale,n);const _=n.battle_spritesheet;if(void 0!==_){let e;a[n.key_name].setActionSpritesheet("battle",_.spritesheet_img,_.spritesheet),a[n.key_name].setActionDirections("battle",_.positions,_.frames_number),a[n.key_name].setActionFrameRate("battle",_.frame_rate),a[n.key_name].setActionLoop("battle",_.loop),a[n.key_name].generateAllFrames();const i=new Promise(t=>{e=t});s.push(i),a[n.key_name].loadSpritesheets(t,!0,e)}}return Promise.all(s).then(i),a}(t,e.dbs.enemies_db,o),await r,e.info.djinni_list=function(t){let e={};for(let i=0;i<t.length;++i){const s=t[i];e[s.key_name]=new P.a(s.key_name,s.name,s.description,s.element,s.ability_key_name,s.hp_boost,s.pp_boost,s.atk_boost,s.def_boost,s.agi_boost,s.luk_boost,i)}return e}(e.dbs.djinni_db);const l=new Promise(t=>{d=t});let p;e.info.djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},a={set:6,standby:2},n="assets/images/spritesheets/djinn/";let _=[],o={};for(let e in h.elements){const r=h.elements[e];if(r===h.elements.NO_ELEMENT)continue;o[r]=new c.a(r+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];o[r].setActionSpritesheet(e,`${n}${r}_djinn.png`,`${n}${r}_djinn.json`),o[r].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),o[r].setActionFrameRate(e,a[e])}let d;o[r].generateAllFrames();const l=new Promise(t=>{d=t});_.push(l),o[r].loadSpritesheets(t,!0,d)}return Promise.all(_).then(e),o}(t,d),await l;const u=new Promise(t=>{p=t});let g;e.info.abilities_list=function(t,e,i){let s={};for(let t=0;t<e.length;++t){const i=e[t];s[i.key_name]=new n.a(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),s}(t,e.dbs.abilities_db,p),await u;const m=new Promise(t=>{g=t});let b;e.info.items_list=function(t,e,i){let s={};for(let t=0;t<e.length;++t){const i=e[t];s[i.key_name]=new O.a(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.imporant_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability,i.icon_path)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),s}(t,e.dbs.items_db,g),await m,e.info.party_data={members:[],coins:e.dbs.init_db.coins};const w=new Promise(t=>{b=t});let y;e.info.main_char_list=function(t,e,i,s,n){let _=[],o={};for(let n=0;n<i.length;++n){const r=i[n],h=new a.b(r.key_name,r.actions.map(t=>t.key),r.walk_speed,r.dash_speed,r.climb_speed,r.push_speed);o[r.key_name]=new a.a(r.key_name,e,h,r.name,r.hp_curve,r.pp_curve,r.atk_curve,r.def_curve,r.agi_curve,r.luk_curve,r.exp_curve,r.starting_level,s.class_table,r.battle_scale,r.venus_level_base,r.mercury_level_base,r.mars_level_base,r.jupiter_level_base,r.venus_power_base,r.mercury_power_base,r.mars_power_base,r.jupiter_power_base,r.venus_resist_base,r.mercury_resist_base,r.mars_resist_base,r.jupiter_resist_base,r.innate_abilities,r.in_party,r.djinni,r.items,r.battle_animations_variations),r.in_party&&e.party_data.members.push(o[r.key_name]);for(let t=0;t<r.actions.length;++t){const e=r.actions[t];h.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),h.setActionDirections(e.key,e.directions,e.directions_frames_number),h.setActionFrameRate(e.key,e.frame_rate),h.setActionLoop(e.key,e.loop)}let c;h.generateAllFrames();const d=new Promise(t=>{c=t});_.push(d),h.loadSpritesheets(t,!0,c)}return Promise.all(_).then(n),o}(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,b),await w;const f=new Promise(t=>{y=t});e.info.misc_sprite_base_list=function(t,e,i){let s={},a=[];for(let i=0;i<e.length;++i){const n=e[i],_=new c.a(n.key_name,n.actions.map(t=>t.key_name));s[n.key_name]=_;for(let t=0;t<n.actions.length;++t){const e=n.actions[t];_.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),_.setActionDirections(e.key_name,e.animations,e.frames_count),_.setActionFrameRate(e.key_name,e.frame_rate),_.setActionLoop(e.key_name,e.loop)}let o;_.generateAllFrames();const r=new Promise(t=>{o=t});a.push(r),_.loadSpritesheets(t,!0,o)}return Promise.all(a).then(i),s}(t,e.dbs.misc_animations_db,y),await f,e.info.field_abilities_list=function(t,e){return{move:new T(t,e),frost:new S(t,e),growth:new I(t,e)}}(t,e),e.menu_screen=function(t,e){return e.spacebar_input.add(()=>{e.hero.in_action()||e.in_battle||!e.created||(e.menu_open?e.menu_screen.is_active()&&e.menu_screen.close_menu():(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.menu_screen.open_menu()))},this),new Mt(t,e)}(t,e)}},function(t,e,i){"use strict";i.r(e),i.d(e,"interaction_patterns",(function(){return r})),i.d(e,"GameEventManager",(function(){return h}));var s=i(0),a=i(1),n=i(5);class _{constructor(t,e,i=!0){this.game=t,this.data=e,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.italic_font=i,this.hero_direction=s.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const a=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,a),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null}get_dialog_window_position(t,e){const i=a.GAME_WIDTH-t>>1;let n=a.MAX_DIAG_WIN_HEIGHT-e>>1;return[s.directions.up,s.directions.up_left,s.directions.up_right].includes(this.hero_direction)||(n=a.GAME_HEIGHT-(a.MAX_DIAG_WIN_HEIGHT+4)+n),{x:i,y:n}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=a.GAME_HEIGHT>>1?t.y-a.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&this.avatar_window.destroy(!1),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t),this.dialog_crystal.destroy(),this.finished;this.window&&this.window.destroy(!1),this.dialog_crystal.visible=!1;let s=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(s.x=e.x),e&&void 0!==e.y&&(s.y=e.y),this.window=new n.a(this.game,s.x,s.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i()})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(s);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=a.AVATAR_SIZE+4;this.avatar_window=new n.a(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}return++this.step,this.finished}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const n=a.MAX_DIAG_WIN_WIDTH-2*a.WINDOW_PADDING_H-a.INSIDE_BORDER_WIDTH;let _=t.split(" "),o=[],r=[],h=[],c=0,d=0;for(let t=0;t<_.length;++t){const e=_[t];if(c=s.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=n){const t=h.join(" ");r.push(t),d=Math.max(d,s.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=s.get_text_width(this.game,e,this.italic_font),r.length===a.MAX_LINES_PER_DIAG_WIN&&(o.push({lines:r.slice(),width:d+2*a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH,height:a.WINDOW_PADDING_TOP+a.WINDOW_PADDING_BOTTOM+r.length*(a.FONT_SIZE+a.SPACE_BETWEEN_LINES)-a.SPACE_BETWEEN_LINES}),d=0,r=[])}else h.push(e)}h.length&&(d=Math.max(d,s.get_text_width(this.game,h.join(" "),this.italic_font)),r.push(h.join(" ")),o.push({lines:r.slice(),width:d+2*a.WINDOW_PADDING_H+a.INSIDE_BORDER_WIDTH+2,height:a.WINDOW_PADDING_TOP+a.WINDOW_PADDING_BOTTOM+r.length*(a.FONT_SIZE+a.SPACE_BETWEEN_LINES)-a.SPACE_BETWEEN_LINES})),this.parts=o}}var o=i(14);const r={TIK_TAK_TOE:"tik_tak_toe",CROSS:"cross"};class h{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){this.data.enter_input.add(()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(Object(s.is_close)(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){if(t.npc_type===o.d.NORMAL)if(t.message){const e=new _(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction);const i=t.sprite.x,a=t.sprite.y,n=this.data.dbs.npc_db[t.key_name].interaction_pattern,o=h.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,i,a,n,t.body_radius);this.data.hero.set_direction(o.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[o.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[o.target_direction]),this.fire_next_step=e.next.bind(e,()=>{if(e.finished){this.on_event=!1;const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i),this.fire_npc_events(t)}this.control_enable=!0}),this.fire_next_step()}else this.fire_npc_events(t)}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,e,i,a,n,_){let o,h;if(n===r.CROSS){let n=t+(-a-i),_=-t+(-a+i);-e>=n&&-e>=_?o=s.directions.up:-e<=n&&-e>=_?o=s.directions.right:-e<=n&&-e<=_?o=s.directions.down:-e>=n&&-e<=_&&(o=s.directions.left)}return t<=i-_&&e>=a+_?(h=s.directions.up_right,o=n===r.TIK_TAK_TOE?s.directions.down_left:o):t<=i-_&&e>=a-_&&e<=a+_?(h=s.directions.right,o=n===r.TIK_TAK_TOE?s.directions.left:o):t<=i-_&&e<=a-_?(h=s.directions.down_right,o=n===r.TIK_TAK_TOE?s.directions.up_left:o):t>=i-_&&t<=i+_&&e<=a-_?(h=s.directions.down,o=n===r.TIK_TAK_TOE?s.directions.up:o):t>=i+_&&e<=a-_?(h=s.directions.down_left,o=n===r.TIK_TAK_TOE?s.directions.up_right:o):t>=i+_&&e>=a-_&&e<=a+_?(h=s.directions.left,o=n===r.TIK_TAK_TOE?s.directions.right:o):t>=i+_&&e>=a+_?(h=s.directions.up_left,o=n===r.TIK_TAK_TOE?s.directions.down_right:o):t>=i-_&&t<=i+_&&e>=a+_&&(h=s.directions.up,o=n===r.TIK_TAK_TOE?s.directions.down:o),{hero_direction:h,target_direction:o}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL21hZ2ljX251bWJlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9FZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Eamlubi5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL1RpbGVFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL1BsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL0l0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9BYmlsaXR5LmpzIiwid2VicGFjazovLy8uL2Jhc2UvdXRpbHMvQ3Vyc29yQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL1Nwcml0ZUJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9KdW1wRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9NYWluQ2hhci5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2dhbWVfZXZlbnRzL0dhbWVFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVTdGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVMb2cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9EZXNjcmlwdGlvbldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL1BzeW5lcmd5V2luZG93LmpzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvRGppbm5TdGF0c1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0RqaW5uV2luZG93LmpzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvSXRlbVdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL1N1bW1vbkRqaW5uU3RhbmRieVdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL1N1bW1vbldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3NjcmVlbnMvYmF0dGxlX21lbnVzLmpzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvQ2hvb3NpbmdUYXJnZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvRW5lbXlBSS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVGb3JtdWxhcy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvQmF0dGxlQW5pbWF0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9nYW1lX2V2ZW50cy9CYXR0bGVFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL05QQy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tZW51cy9Ib3Jpem9udGFsTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ludGVyYWN0YWJsZV9vYmplY3RzL3B1c2guanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL0NoYXJzU3RhdHVzV2luZG93LmpzIiwid2VicGFjazovLy8uL2Jhc2UvRW5lbXkuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Gb290c3RlcHMuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Db250cm9sbGFibGVDaGFyLmpzIiwid2VicGFjazovLy8uL2Jhc2UvR29sZGVuU3VuLnRzIiwid2VicGFjazovLy8uL2Jhc2UvZGVidWcvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvYXNzZXRzX2xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL0NvbGxpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL0hlcm8uanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9UaWxlRXZlbnRNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2RhdGFiYXNlc19sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9DbGltYkV2ZW50LmpzIiwid2VicGFjazovLy8uL2Jhc2UvSW50ZXJhY3RhYmxlT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvRmllbGRQc3luZXJneVdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9GaWVsZEFiaWxpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9wc3luZXJneV9jYXN0LmpzIiwid2VicGFjazovLy8uL2Jhc2UvZmllbGRfYWJpbGl0aWVzL21vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9maWVsZF9hYmlsaXRpZXMvZnJvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9maWVsZF9hYmlsaXRpZXMvZ3Jvd3RoLmpzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvVGVsZXBvcnRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL1N0ZXBFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL0NvbGxpc2lvbkV2ZW50LmpzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvU3BlZWRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL01hcC5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL21lbnVzL0NoYXJzTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvQmFzaWNJbmZvV2luZG93LmpzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9JdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9zY3JlZW5zL3BzeW5lcmd5X21lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2l0ZW0vRHJvcEl0ZW1XaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy9JdGVtc0NvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2l0ZW0vSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvaXRlbS9HaXZlSXRlbU9wdGlvbnNXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2l0ZW0vSXRlbU9wdGlvbnNXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2l0ZW0vU3RhdHNDaGVja1dpdGhJdGVtV2luZG93LmpzIiwid2VicGFjazovLy8uL2Jhc2Uvc2NyZWVucy9pdGVtX21lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0NoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0RqaW5uTW9kZUhlYWRlcldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5DaGFyU3RhdHNXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0RqaW5uUHN5bmVyZ3lXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0RqaW5uTGlzdFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5BY3Rpb25XaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9zY3JlZW5zL2RqaW5uaV9tZW51LmpzIiwid2VicGFjazovLy8uL2Jhc2Uvc2NyZWVucy9tZW51LmpzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2luaXRpYWxpemVfaW5mby5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9tYXBzLmpzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL21haW5fY2hhcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvZW5lbWllcy5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9kamlubmkuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvYWJpbGl0aWVzLmpzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2l0ZW1zLmpzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL21pc2NfZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL0RpYWxvZ01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9nYW1lX2V2ZW50cy9HYW1lRXZlbnRNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZWxlbWVudHMiLCJWRU5VUyIsIk1FUkNVUlkiLCJNQVJTIiwiSlVQSVRFUiIsIk5PX0VMRU1FTlQiLCJvcmRlcmVkX2VsZW1lbnRzIiwiZWxlbWVudF9uYW1lcyIsImRpcmVjdGlvbnMiLCJyaWdodCIsImRvd25fcmlnaHQiLCJkb3duIiwiZG93bl9sZWZ0IiwibGVmdCIsInVwX2xlZnQiLCJ1cCIsInVwX3JpZ2h0IiwiZGlyZWN0aW9uc19jb3VudCIsImtleXMiLCJsZW5ndGgiLCJyZXZlcnNlX2RpcmVjdGlvbnMiLCJiYXNlX2FjdGlvbnMiLCJJRExFIiwiV0FMSyIsIkRBU0giLCJQVVNIIiwiQ0xJTUIiLCJDQVNUIiwiZGlyZWN0aW9uc19hbmdsZXMiLCJkaXJlY3Rpb24iLCJNYXRoIiwiUEkiLCJtYXBfZGlyZWN0aW9ucyIsImFyciIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInNwbGl0X2RpcmVjdGlvbiIsInZhbHMiLCJqb2luX2RpcmVjdGlvbnMiLCJkaXJfMSIsImRpcl8yIiwibWluIiwidmFyaWF0aW9uIiwiXyIsInJhbmRvbSIsInJhbmdlXzM2MCIsImFuZ2xlIiwiaXNfaW5zaWRlX3NlY3RvciIsInF1YWRyYW50cyIsInJhZGl1cyIsInJhbmdlX2ZhY3RvciIsIngiLCJ5IiwidGFyZ2V0X3giLCJ0YXJnZXRfeSIsInJhbmdlX3JhZGl1c19zcXVhcmVkIiwidGFyZ2V0X3JhZGl1c19zcXVhcmVkIiwicG93IiwidGFyZ2V0X2FuZ2xlIiwiYXRhbjIiLCJhbmdsZXMiLCJiZXR3ZWVuX2FuZ2xlcyIsInF1YWRyYW50Iiwic3RhcnRfYW5nbGUiLCJpc19jbG9zZSIsImN1cnJlbnRfZGlyZWN0aW9uIiwidHJhbnNpdGlvbnMiLCJnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uIiwiZ2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucyIsImRlc2lyZWRfZGlyZWN0aW9uIiwiZ2V0X3RleHRfd2lkdGgiLCJnYW1lIiwidGV4dCIsIml0YWxpYyIsImZvbnRfbmFtZSIsInRleHRfc3ByaXRlIiwiYWRkIiwiYml0bWFwVGV4dCIsInRleHRfd2lkdGgiLCJ3aWR0aCIsImRlc3Ryb3kiLCJnZXRfc3Vycm91bmRpbmdzIiwid2l0aF9kaWFnb25hbHMiLCJzaGlmdCIsInN1cnJvdW5kaW5ncyIsImRpYWciLCJjb25jYXQiLCJnZXRfZGlyZWN0aW9ucyIsImRpcnMiLCJwdXNoIiwiY2FwaXRhbGl6ZSIsImxvd2VyIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwibWF0Y2giLCJ0b1VwcGVyQ2FzZSIsImNoYW5nZV9icmlnaHRuZXNzIiwiaGV4IiwicGVyY2VudCIsInRvU3RyaW5nIiwic2xpY2UiLCJoIiwidiIsInBhcnNlSW50Iiwic3Vic3RyIiwiZyIsImIiLCJyZ2IyaHN2IiwiaHN2MnJnYiIsIm1heCIsImYiLCJrIiwibW91bnRfY29sbGlzaW9uX3BvbHlnb24iLCJiZXZlbCIsIkdBTUVfV0lEVEgiLCJHQU1FX0hFSUdIVCIsIlRBUkdFVF9GUFMiLCJIRVJPX0JPRFlfUkFESVVTIiwiSU5WX1NRUlQyIiwic3FydCIsIkRFTFRBX1RJTUVfRkFDVE9SIiwiTUFQX0RBTVBJTkciLCJERUZBVUxUX1dJTkRPV19DT0xPUiIsIkRFRkFVTFRfRk9OVF9DT0xPUiIsIllFTExPV19GT05UX0NPTE9SIiwiUkVEX0ZPTlRfQ09MT1IiLCJCTFVFX0ZPTlRfQ09MT1IiLCJQVVJQTEVfRk9OVF9DT0xPUiIsIkZPTlRfU0laRSIsIklOU0lERV9CT1JERVJfV0lEVEgiLCJPVVRTSURFX0JPUkRFUl9XSURUSCIsIldJTkRPV19QQURESU5HX0giLCJXSU5ET1dfUEFERElOR19UT1AiLCJXSU5ET1dfUEFERElOR19CT1RUT00iLCJTUEFDRV9CRVRXRUVOX0xJTkVTIiwiTUFYX0RJQUdfV0lOX1dJRFRIIiwiTUFYX0xJTkVTX1BFUl9ESUFHX1dJTiIsIk1BWF9ESUFHX1dJTl9IRUlHSFQiLCJQVVNIX1RJTUUiLCJJQ09OX1dJRFRIIiwiSUNPTl9IRUlHSFQiLCJkZWdyZWUxNSIsImRlZ3JlZTMwIiwiZGVncmVlNjAiLCJkZWdyZWU5MCIsImRlZ3JlZTE4MCIsImRlZ3JlZTI3MCIsImRlZ3JlZTM2MCIsImRlZ3JlZTU0MCIsIkNBTUVSQV9MRVJQIiwiRUxFTV9BVFRSX01JTiIsIkVMRU1fQVRUUl9NQVgiLCJBVkFUQVJfU0laRSIsImVmZmVjdF90eXBlcyIsIk1BWF9IUCIsIk1BWF9QUCIsIkFUVEFDSyIsIkRFRkVOU0UiLCJBR0lMSVRZIiwiTFVDSyIsIlBPV0VSIiwiUkVTSVNUIiwiQ1VSUkVOVF9IUCIsIkNVUlJFTlRfUFAiLCJIUF9SRUNPVkVSWSIsIlBQX1JFQ09WRVJZIiwiQ1JJVElDQUxTIiwiQ09VTlRFUl9TVFJJS0UiLCJURU1QT1JBUllfU1RBVFVTIiwiUEVSTUFORU5UX1NUQVRVUyIsIlRVUk5TIiwiRU5DT1VOVEVSUyIsIkZMRUUiLCJFTkRfVEhFX1JPVU5EIiwiQUJJTElUWV9QT1dFUiIsIlNFVF9ESklOTiIsIkRBTUFHRV9NT0RJRklFUiIsIkRBTUFHRV9JTlBVVCIsImVmZmVjdF90eXBlX3N0YXQiLCJlZmZlY3RfbmFtZXMiLCJlZmZlY3Rfb3BlcmF0b3JzIiwiUExVUyIsIk1JTlVTIiwiVElNRVMiLCJESVZJREUiLCJlZmZlY3RfdXNhZ2VzIiwiTk9UX0FQUExZIiwiT05fVVNFIiwiT05fVEFLRSIsIkJBVFRMRV9ST1VORF9TVEFSVCIsIkJBVFRMRV9ST1VORF9FTkQiLCJQTEFZRVJfVFVSTl9TVEFSVCIsIlBMQVlFUl9UVVJOX0VORCIsImVmZmVjdF9tc2ciLCJhdXJhIiwidGFyZ2V0IiwiZG91YmxlIiwiRWZmZWN0IiwidHlwZSIsInF1YW50aXR5Iiwib3BlcmF0b3IiLCJlZmZlY3Rfb3duZXJfaW5zdGFuY2UiLCJxdWFudGl0eV9pc19hYnNvbHV0ZSIsInJhdGUiLCJjaGFuY2UiLCJhdHRyaWJ1dGUiLCJhZGRfc3RhdHVzIiwic3RhdHVzX2tleV9uYW1lIiwidHVybnNfcXVhbnRpdHkiLCJ2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0IiwiZGFtYWdlX2Zvcm11bGFfa2V5X25hbWUiLCJ1c2FnZSIsIm9uX2Nhc3RlciIsInJlbGF0aXZlX3RvX3Byb3BlcnR5Iiwic3ViX2VmZmVjdCIsInNob3dfbXNnIiwiY2hhciIsInRoaXMiLCJ0dXJuX2NvdW50IiwiaW5pdF9zdWJfZWZmZWN0IiwiYSIsImRpcmVjdF92YWx1ZSIsImJlZm9yZV92YWx1ZSIsImJlZm9yZSIsImFmdGVyIiwiYWZ0ZXJfdmFsdWUiLCJ2YWx1ZV90b191c2UiLCJyZXN1bHQiLCJhcHBseV9vcGVyYXRvciIsImVmZmVjdF9vYmoiLCJiYXNlX3ZhbHVlIiwiY3VycmVudF9wcm9wIiwibWF4X3Byb3AiLCJtaW5fdmFsdWUiLCJyZXN1bHRfb2JqIiwiYXBwbHlfZ2VuZXJhbF92YWx1ZSIsInJlc3VsdF9jdXJyZW50X2hwIiwiY2hlY2tfY2FwcyIsInJlc3VsdF9jdXJyZW50X3BwIiwiYWRkX3Blcm1hbmVudF9zdGF0dXMiLCJyZW1vdmVfcGVybWFuZW50X3N0YXR1cyIsImFkZF90ZW1wb3Jhcnlfc3RhdHVzIiwicmVtb3ZlX3RlbXBvcmFyeV9zdGF0dXMiLCJzdGF0IiwiYXBwbHlfc3ViZWZmZWN0IiwiZGppbm5fc3RhdHVzIiwiU0VUIiwiU1RBTkRCWSIsIlJFQ09WRVJZIiwiZGppbm5fZm9udF9jb2xvcnMiLCJEamlubiIsImtleV9uYW1lIiwiZGVzY3JpcHRpb24iLCJlbGVtZW50IiwiYWJpbGl0eV9rZXlfbmFtZSIsImhwX2Jvb3N0IiwicHBfYm9vc3QiLCJhdGtfYm9vc3QiLCJkZWZfYm9vc3QiLCJhZ2lfYm9vc3QiLCJsdWtfYm9vc3QiLCJpbmRleCIsInN0YXR1cyIsInJlY292ZXJ5X3R1cm4iLCJ1cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMiLCJ1cGRhdGVfY2xhc3MiLCJ1cGRhdGVfYXR0cmlidXRlcyIsInVwZGF0ZV9hYmlsaXRpZXMiLCJkamlubmlfbGlzdCIsIm1lbWJlcnMiLCJzb21lIiwiZGppbm5pIiwiZGppbm5fa2V5cyIsImZpbHRlciIsInN0YW5kYnlfZGppbm5pIiwibWFwVmFsdWVzIiwiZ3JvdXBCeSIsImZsYXQiLCJkamlubmlfa2V5cyIsInJlcXVpcmVtZW50cyIsInJlcV9jb3VudGVyIiwiYXNzaWduIiwiZG9uZSIsInBsYXllciIsInBsYXllcl9kamlubmkiLCJyZWNvdmVyeV9jb3VudGVyIiwiaiIsImRqaW5uIiwic2V0X3N0YXR1cyIsIkJvb2xlYW4iLCJldmVudF90eXBlcyIsIlNQRUVEIiwiVEVMRVBPUlQiLCJKVU1QIiwiU1RFUCIsIkNPTExJU0lPTiIsIlRpbGVFdmVudCIsImRhdGEiLCJhY3RpdmF0aW9uX2RpcmVjdGlvbnMiLCJhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMiLCJkeW5hbWljIiwiYWN0aXZlIiwib3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QiLCJsb2NhdGlvbl9rZXkiLCJnZXRfbG9jYXRpb25fa2V5IiwiaWQiLCJpZF9pbmNyZW1lbnRlciIsImZpbGwiLCJldmVudHMiLCJwb3NzaWJsZV9kaXJlY3Rpb25zIiwiaW5kZXhPZiIsImhlcm8iLCJ0aWxlX3hfcG9zIiwidGlsZV95X3BvcyIsImZpbmQiLCJyZXNldCIsIldpbmRvdyIsImhlaWdodCIsIm5lZWRfcG9zX3VwZGF0ZSIsImNvbG9yIiwiZm9udF9jb2xvciIsImdyb3VwIiwiZ3JhcGhpY3MiLCJzZXBhcmF0b3JzX2dyYXBoaWNzIiwiZHJhd19iYWNrZ3JvdW5kIiwiZHJhd19ib3JkZXJzIiwiYWxwaGEiLCJ3aW5kb3dfb2JqZWN0Iiwib3BlbiIsImxpbmVzX3Nwcml0ZXMiLCJleHRyYV9zcHJpdGVzIiwiaW50ZXJuYWxfZ3JvdXBzIiwiY2xlYXIiLCJ4XzAiLCJ5XzAiLCJ4XzEiLCJ5XzEiLCJ2ZXJ0aWNhbCIsImxpZ2h0ZXIiLCJkYXJrZXIiLCJjb2xvcnMiLCJsaW5lU3R5bGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJiZWdpbkZpbGwiLCJkcmF3UmVjdCIsImVuZEZpbGwiLCJuZXdfc2l6ZSIsIm5ld19wb3NpdGlvbiIsInJlbGF0aXZlIiwiY2FtZXJhIiwicG9zaXRpb24iLCJpbnRlcm5hbF9ncm91cCIsImRlc3Ryb3lfaW50ZXJuYWxfZ3JvdXAiLCJzcHJpdGUiLCJzaG93X2NhbGxiYWNrIiwiYW5pbWF0ZSIsImNsb3NlX2NhbGxiYWNrIiwicGFnZV9pbmRpY2F0b3JfaXNfc2V0IiwidHJhbnNpdGlvbl90aW1lIiwiUGhhc2VyIiwiVGltZXIiLCJRVUFSVEVSIiwidHdlZW4iLCJ0byIsIkVhc2luZyIsIkxpbmVhciIsIk5vbmUiLCJvbkNvbXBsZXRlIiwiYWRkT25jZSIsImZvcmNlIiwiaW50ZXJuYWxfZ3JvdXBfa2V5IiwiZ2V0X2ludGVybmFsX2dyb3VwIiwiZnJhbWUiLCJ0aW50IiwicGFyZW50IiwiYnJpbmdUb1RvcCIsInJlbW92ZSIsInNtb290aGVkIiwiYXV0b1JvdW5kIiwibGluZXMiLCJwYWRkaW5nX3giLCJwYWRkaW5nX3kiLCJzcGFjZV9iZXR3ZWVuX2xpbmVzIiwic2hhZG93IiwidG9wX3NoaWZ0IiwieF9wb3MiLCJ5X3BvcyIsImFuaW1fcHJvbWlzZSIsImFuaW1fcHJvbWlzZV9yZXNvbHZlIiwibGluZXNfcHJvbWlzZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxpbmUiLCJ0ZXh0X3Nwcml0ZV9zaGFkb3ciLCJyZW1vdmVfc21vb3RoIiwid29yZHMiLCJzcGxpdCIsImxpbmVfcHJvbWlzZV9yZXNvbHZlIiwid29yZHNfaW5kZXgiLCJyZXBlYXRlciIsInRpbWUiLCJyZXBlYXQiLCJwb3AiLCJ0aGVuIiwiYWxsIiwicmlnaHRfYWxpZ24iLCJpbml0aWFsX3giLCJpc19jZW50ZXJfcG9zIiwid2l0aF9iZyIsInRleHRfYmciLCJjZW50ZXJYIiwiY2VudGVyWSIsImFkZF90b19pbnRlcm5hbF9ncm91cCIsImFkZGVkX3RvX2ludGVybmFsIiwibmV3X3RleHQiLCJ0ZXh0X3NoYWRvd19wYWlyIiwibmV3X3giLCJuZXdfeSIsInNldFRleHQiLCJ1cGRhdGVfdGV4dF9wb3NpdGlvbiIsImNhbGxiYWNrIiwidW5zZXRfcGFnZV9pbmRpY2F0b3IiLCJkZXN0cm95X2NhbGxiYWNrIiwib25fZGVzdHJveSIsInBhZ2VfbnVtYmVyX2JhciIsImFkZF9zcHJpdGVfdG9fZ3JvdXAiLCJwYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0IiwiYmxlbmRNb2RlIiwiUElYSSIsImJsZW5kTW9kZXMiLCJTQ1JFRU4iLCJwYWdlX2luZGljYXRvcnMiLCJwYWdlX2luZGljYXRvcl9hcnJvd190aW1lciIsInBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93IiwiY3JlYXRlX2F0X2dyb3VwIiwic2NhbGUiLCJwYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93IiwicGFnZV9udW1iZXIiLCJwYWdlX2luZGV4IiwiUEFHRV9OVU1CRVJfSEVJR0hUIiwic2V0X3RleHRfaW5fcG9zaXRpb24iLCJzZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0Iiwic2V0X3BhZ2VfaW5kaWNhdG9yX2Fycm93IiwiY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3giLCJydW5uaW5nIiwicGF1c2VkIiwicmVzdW1lIiwibG9vcCIsInN0YXJ0IiwicmVtb3ZlX3RleHQiLCJwYXVzZSIsImZpZ2h0ZXJfdHlwZXMiLCJBTExZIiwiRU5FTVkiLCJ0ZW1wb3Jhcnlfc3RhdHVzIiwiREVMVVNJT04iLCJTVFVOIiwiU0xFRVAiLCJTRUFMIiwiREVBVEhfQ1VSU0UiLCJwZXJtYW5lbnRfc3RhdHVzIiwiRE9XTkVEIiwiUE9JU09OIiwiVkVOT00iLCJFUVVJUF9DVVJTRSIsIkhBVU5UIiwib25fY2F0Y2hfc3RhdHVzX21zZyIsImZpZ2h0ZXJfdHlwZSIsIm9uX3JlbW92ZV9zdGF0dXNfbXNnIiwiUGxheWVyIiwiU2V0IiwiZWZmZWN0cyIsImluaXRfZWZmZWN0X3R1cm5zX2NvdW50IiwiZWZmZWN0X3R1cm5zX2NvdW50IiwiZWZmZWN0IiwiYXBwbHkiLCJjaGFuZ2VzIiwiYXBwbHlfZWZmZWN0IiwiZWZmZWN0X3RvX3JlbW92ZSIsImRlbGV0ZSIsImhhcyIsIml0ZW1fdHlwZXMiLCJXRUFQT05TIiwiQVJNT1IiLCJDSEVTVF9QUk9URUNUT1IiLCJIRUFEX1BST1RFQ1RPUiIsIkxFR19QUk9URUNUT1IiLCJBQklMSVRZX0dSQU5UT1IiLCJMVUNLWV9DSEFSTSIsIlJJTkciLCJVTkRFUldFQVIiLCJHRU5FUkFMX0lURU0iLCJTSElSVCIsInVzZV90eXBlcyIsIk1VTFRJUExFX1VTRVMiLCJTSU5HTEVfVVNFIiwiQlJFQUtTX1dIRU5fVVNFIiwiTk9fVVNFIiwiSXRlbSIsInVzZV90eXBlIiwiY3Vyc2VzX3doZW5fZXF1aXBwZWQiLCJjYW50X2JlX3JlbW92ZWQiLCJyYXJlX2l0ZW0iLCJpbXBvcmFudF9pdGVtIiwiY2FycnlfdXBfdG9fMzAiLCJ1bmxlYXNoX2FiaWxpdHkiLCJ1bmxlYXNoX3JhdGUiLCJ1c2VfYWJpbGl0eSIsImVxdWlwYWJsZV9jaGFycyIsInByaWNlIiwiZ3JhbnRlZF9hYmlsaXR5IiwiaWNvbl9wYXRoIiwiYnJva2VuIiwiZXF1aXBhYmxlIiwiYWJpbGl0eV90eXBlcyIsIkhFQUxJTkciLCJFRkZFQ1RfT05MWSIsIkFEREVEX0RBTUFHRSIsIk1VTFRJUExJRVIiLCJCQVNFX0RBTUFHRSIsIlNVTU1PTiIsIlVUSUxJVFkiLCJESVJFQ1RfREFNQUdFIiwiYWJpbGl0eV9tc2dfdHlwZXMiLCJVU0UiLCJVTkxFQVNIIiwiREVGRU5EIiwiSVRFTV9VTkxFQVNIIiwiTk9fTVNHIiwiYWJpbGl0eV90YXJnZXRfdHlwZXMiLCJOT19UQVJHRVQiLCJVU0VSIiwiYWJpbGl0eV9jYXRlZ29yaWVzIiwiUFNZTkVSR1kiLCJESklOTiIsIklURU0iLCJXRUFQT05fVU5MRUFTSCIsIk5PUk1BTCIsImRpbWluaXNoaW5nX3JhdGlvcyIsIlNUQU5EQVJEIiwiMTEiLCI5IiwiNyIsIjUiLCIzIiwiMSIsIkRJTUlOSVNIIiwiU1RBVFVTIiwiQWJpbGl0eSIsImJhdHRsZV90YXJnZXQiLCJyYW5nZSIsInBwX2Nvc3QiLCJhYmlsaXR5X3Bvd2VyIiwiZWZmZWN0c19vdXRzaWRlX2JhdHRsZSIsImlzX2JhdHRsZV9hYmlsaXR5IiwiaXNfZmllbGRfcHN5bmVyZ3kiLCJhYmlsaXR5X2NhdGVnb3J5IiwiYmF0dGxlX2FuaW1hdGlvbl9rZXkiLCJwcmlvcml0eV9tb3ZlIiwiaGFzX2NyaXRpY2FsIiwiY3JpdF9tdWx0X2ZhY3RvciIsImNhbl9zd2l0Y2hfdG9fdW5sZWFzaCIsImNhbl9iZV9ldmFkZWQiLCJ1c2VfZGltaW5pc2hpbmdfcmF0aW8iLCJtc2dfdHlwZSIsImFmZmVjdHNfcHAiLCJoYXNfYW5pbWF0aW9uX3ZhcmlhdGlvbiIsImFiaWxpdHlfdHlwZSIsIklOREVYX0NIQU5HRV9USU1FIiwiQ1VSU09SX1RXRUVOX1RJTUUiLCJDdXJzb3JDb250cm9sIiwiaXNfcmlnaHRfbGVmdCIsImlzX3VwX2Rvd24iLCJtYXhfcmlnaHRfbGVmdF9nZXR0ZXIiLCJtYXhfdXBfZG93bl9nZXR0ZXIiLCJiYXNlX2dyb3VwIiwib25fcmlnaHRfbGVmdF9jaGFuZ2UiLCJvbl91cF9kb3duX2NoYW5nZSIsInJpZ2h0X2xlZnRfaW5kZXhfZ2V0dGVyIiwicmlnaHRfbGVmdF9pbmRleF9zZXR0ZXIiLCJ1cF9kb3duX2luZGV4X2dldHRlciIsInVwX2Rvd25faW5kZXhfc2V0dGVyIiwib3Blbl9jaGVja2VyIiwiYWN0aXZlX2NoZWNrZXIiLCJjdXJzb3JfYmFzZV94X2dldHRlciIsImN1cnNvcl9iYXNlX3lfZ2V0dGVyIiwicmlnaHRfcHJlc3NlZCIsImxlZnRfcHJlc3NlZCIsInVwX3ByZXNzZWQiLCJkb3duX3ByZXNzZWQiLCJjaG9vc2VfdGltZXJfcmVwZWF0IiwiY2hvb3NlX3RpbWVyX3N0YXJ0IiwiaW5pdF9jdXJzb3IiLCJpbml0X2N1cnNvcl90d2VlbiIsInNpZ25hbF9iaW5kaW5ncyIsInNldF9jb250cm9sIiwiaW5wdXQiLCJrZXlib2FyZCIsImFkZEtleSIsIktleWJvYXJkIiwiUklHSFQiLCJvbkRvd24iLCJzdG9wX3RpbWVycyIsInNldF9jaGFuZ2VfdGltZXJzIiwib25VcCIsIkxFRlQiLCJVUCIsIkRPV04iLCJzdGVwIiwicmlnaHRfbGVmdCIsImNoYW5nZV9pbmRleCIsInNldHRlciIsIm9uX2NoYW5nZSIsImJlZm9yZV9pbmRleCIsInNldF9jdXJzb3JfcG9zaXRpb24iLCJzdG9wIiwiY3Vyc29yX2Jhc2VfeCIsImN1cnNvcl9ncm91cCIsImN1cnNvciIsImN1cnNvcl90d2VlbiIsInR3ZWVucyIsImlzUnVubmluZyIsImlzUGF1c2VkIiwiZm9yRWFjaCIsInNpZ25hbF9iaW5kaW5nIiwiZGV0YWNoIiwiU3ByaXRlQmFzZSIsImFjdGlvbnMiLCJhbmltYXRpb25zIiwiYWN0aW9uIiwiZnJhbWVfY291bnRzIiwiZnJhbWVfY291bnRfaXNfYXJyYXkiLCJmcmFtZV9jb3VudCIsImZyYW1lX3JhdGUiLCJ0aGlzX2ZyYW1lX3JhdGUiLCJzcHJpdGVzaGVldF9pbWFnZV91cmwiLCJzcHJpdGVzaGVldF9qc29uX3VybCIsInNwcml0ZXNoZWV0IiwiZm9yY2VfbG9hZCIsIm9uX2xvYWRfY29tcGxldGUiLCJsb2FkZXIiLCJsb2FkIiwiYXRsYXNKU09OSGFzaCIsIm9uTG9hZENvbXBsZXRlIiwic3VmZml4IiwiemVyb1BhZCIsIkFuaW1hdGlvbiIsImdlbmVyYXRlRnJhbWVOYW1lcyIsInRvTG9jYWxlU3RyaW5nIiwibWluaW11bUludGVnZXJEaWdpdHMiLCJ1c2VHcm91cGluZyIsIkp1bXBFdmVudCIsImlzX3NldCIsInN1cGVyIiwic3RvcF9ieV9jb2xsaWRpbmciLCJjaGVja19wb3NpdGlvbiIsImluX2FjdGlvbiIsIm1lbnVfb3BlbiIsImluX2JhdHRsZSIsInRpbGVfZXZlbnRfbWFuYWdlciIsIm9uX2V2ZW50IiwianVtcF9kaXJlY3Rpb24iLCJqdW1wX29mZnNldCIsIm5leHRfcG9zaXRpb24iLCJzaWRlX3Bvc2l0aW9uIiwic2lkZV9wb3Nfa2V5IiwiZXZlbnQiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kIiwiaW50ZXJhY3RhYmxlX29iamVjdHMiLCJpbnRlcmFjdGFibGVfb2JqZWN0IiwiY29sbGlzaW9uX2xheWVyIiwiYmFzZV9jb2xsaWRlcl9sYXllciIsImN1cnJlbnRfeCIsImN1cnJlbnRfeSIsImluY2x1ZGVzIiwibmV4dF9wb3Nfa2V5IiwibmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0IiwiYWN0aXZlX2p1bXBfZXZlbnRfZm91bmQiLCJpc19hY3RpdmUiLCJzZXRfanVtcF9jb2xsaXNpb24iLCJ1bnNldF9zZXRfanVtcF9jb2xsaXNpb24iLCJqdW1waW5nIiwidHdlZW5fb2JqIiwiaGVyb194IiwidGlsZVdpZHRoIiwiaGVyb195IiwidGlsZUhlaWdodCIsInBoeXNpY3MiLCJwMiIsInBsYXkiLCJjdXJyZW50QW5pbSIsInZpc2libGUiLCJib2R5IiwicmV2ZXJzZU9uY2UiLCJzcHJpdGVfaW5mbyIsImN1cnJlbnRfcG9zX2tleSIsImN1cnJlbnRfcG9zIiwicmlnaHRfZGlyZWN0aW9uIiwiY2xlYXJfYm9kaWVzIiwiY29sbGlkZXMiLCJjb2xsaXNpb24iLCJtYXBfY29sbGlzaW9uX2dyb3VwIiwiY29sbGlzaW9uX3Nwcml0ZSIsImhlcm9fY29sbGlzaW9uX2dyb3VwIiwiZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMiLCJjb25jYXRfa2V5cyIsImJvZGllc19wb3NpdGlvbnMiLCJhdF9sZWFzdF9vbmVfZHluYW1pY19hbmRfbm90X2RpYWciLCJzdXJyb3VuZGluZ19rZXkiLCJzdXJyb3VuZGluZ19ldmVudCIsInNpZGVfZXZlbnRfc3Vycm91bmRpbmdzIiwid2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzIiwiYm9kaWVzX3Bvc2l0aW9uIiwicG9zIiwicmVtb3ZlQ29sbGlzaW9uR3JvdXAiLCJwb3NfYXJyYXkiLCJjcmVhdGVCb2R5IiwiY2xlYXJTaGFwZXMiLCJzZXRSZWN0YW5nbGUiLCJzZXRDb2xsaXNpb25Hcm91cCIsImR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cCIsImRhbXBpbmciLCJhbmd1bGFyRGFtcGluZyIsInNldFplcm9Sb3RhdGlvbiIsImZpeGVkUm90YXRpb24iLCJzdGF0aWMiLCJkZWJ1ZyIsInNpemUiLCJldmVudF9rZXkiLCJkeW5hbWljX2ZvdW5kIiwidGhpc19ldmVudCIsInRhcmdldF9sYXllciIsInN1cnJvdW5kaW5nIiwidGhpc19rZXkiLCJzdXJyX2V2ZW50IiwiYWN0aXZhdGVfYXQiLCJNYWluQ2hhckJhc2UiLCJ3YWxrX3NwZWVkIiwiZGFzaF9zcGVlZCIsImNsaW1iX3NwZWVkIiwicHVzaF9zcGVlZCIsIk1haW5DaGFyIiwiaW5mbyIsInNwcml0ZV9iYXNlIiwiaHBfY3VydmUiLCJwcF9jdXJ2ZSIsImF0a19jdXJ2ZSIsImRlZl9jdXJ2ZSIsImFnaV9jdXJ2ZSIsImx1a19jdXJ2ZSIsImV4cF9jdXJ2ZSIsInN0YXJ0aW5nX2xldmVsIiwiY2xhc3NfdGFibGUiLCJiYXR0bGVfc2NhbGUiLCJ2ZW51c19sZXZlbF9iYXNlIiwibWVyY3VyeV9sZXZlbF9iYXNlIiwibWFyc19sZXZlbF9iYXNlIiwianVwaXRlcl9sZXZlbF9iYXNlIiwidmVudXNfcG93ZXJfYmFzZSIsIm1lcmN1cnlfcG93ZXJfYmFzZSIsIm1hcnNfcG93ZXJfYmFzZSIsImp1cGl0ZXJfcG93ZXJfYmFzZSIsInZlbnVzX3Jlc2lzdF9iYXNlIiwibWVyY3VyeV9yZXNpc3RfYmFzZSIsIm1hcnNfcmVzaXN0X2Jhc2UiLCJqdXBpdGVyX3Jlc2lzdF9iYXNlIiwiaW5uYXRlX2FiaWxpdGllcyIsImluX3BhcnR5IiwiaXRlbXMiLCJiYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zIiwibGV2ZWwiLCJjdXJyZW50X2V4cCIsImVsZW1lbnRfYWZpbml0eSIsIm1heEJ5IiwidmVudXNfZGppbm5pIiwibWVyY3VyeV9kamlubmkiLCJtYXJzX2RqaW5uaSIsImp1cGl0ZXJfZGppbm5pIiwiaW5pdF9kamlubmkiLCJocF9leHRyYSIsInBwX2V4dHJhIiwiYXRrX2V4dHJhIiwiZGVmX2V4dHJhIiwiYWdpX2V4dHJhIiwibHVrX2V4dHJhIiwiaHBfcmVjb3ZlcnkiLCJwcF9yZWNvdmVyeSIsImVxdWlwX3Nsb3RzIiwid2VhcG9uIiwiaGVhZCIsImNoZXN0IiwiZXF1aXBwZWRfYWJpbGl0aWVzIiwiaW5pdF9pdGVtcyIsImFiaWxpdGllcyIsInR1cm5zIiwic29ydCIsImNsYXNzIiwiY2xhc3Nlc19saXN0IiwidmVudXNfbGV2ZWxfY3VycmVudCIsIm1lcmN1cnlfbGV2ZWxfY3VycmVudCIsIm1hcnNfbGV2ZWxfY3VycmVudCIsImp1cGl0ZXJfbGV2ZWxfY3VycmVudCIsInJldHVybl9kYXRhIiwic3RhdHMiLCJtYXhfaHAiLCJtYXhfcHAiLCJhdGsiLCJkZWYiLCJhZ2kiLCJsdWsiLCJmaW5kSW5kZXgiLCJleHAiLCJ1cGRhdGVfYWxsIiwiaXRlbV9vYmoiLCJlcXVpcHBlZCIsImVxdWlwX2l0ZW0iLCJpdGVtX2tleV9uYW1lIiwiZXF1aXAiLCJmb3VuZCIsIml0ZW1zX2xpc3QiLCJpdGVtX29ial90b19yZW1vdmUiLCJhZGp1c3RfaW5kZXgiLCJ1bmVxdWlwX2l0ZW0iLCJpbml0aWFsaXplIiwiaXRlbSIsImFkZF9lZmZlY3QiLCJyZW1vdmVfZWZmZWN0IiwiYWJpbGl0eSIsImRqaW5uX2tleV9uYW1lIiwidGhpc19kamlubmlfbGlzdCIsInNwbGljZSIsIm9sZF9kamlubl9rZXlfbmFtZSIsIm5ld19kamlubl9rZXlfbmFtZSIsInJlbW92ZV9kamlubiIsImFkZF9kamlubiIsImRqaW5uaV9rZXlfbmFtZSIsImRqaW5uaV9uZXh0X3N0YXR1cyIsInByZXZpb3VzX2NsYXNzIiwidmVudXNfbHYiLCJtZXJjdXJ5X2x2IiwibWFyc19sdiIsImp1cGl0ZXJfbHYiLCJsdl9zaGlmdCIsInJldHVybl9vYmoiLCJjbGFzc19uYW1lIiwiY2xhc3Nfa2V5X25hbWUiLCJhYmlsaXR5X2xldmVsX3BhaXJzIiwicGFpciIsInByZXZpZXdfc3RhdHNfYnlfZGppbm4iLCJwcmV2aWV3X29iaiIsInNldF9tYXhfc3RhdCIsImVmZmVjdF90eXBlIiwicHJldmlldyIsInN0YXRfa2V5IiwiY3VycmV0X2tleSIsImJvb3N0X2tleSIsImN1cnZlX2tleSIsImV4dHJhX2tleSIsInByZXZpb3VzX3ZhbHVlIiwidGhpc19kamlubmkiLCJmaXJzdF9pbmRleCIsInByZXZpZXdfdmFsdWUiLCJwcmV2aWV3X3ZhbHVlX2FwcGxpZWQiLCJyb3VuZCIsImFtb3VudCIsInZlbnVzX3Bvd2VyX2N1cnJlbnQiLCJtZXJjdXJ5X3Bvd2VyX2N1cnJlbnQiLCJtYXJzX3Bvd2VyX2N1cnJlbnQiLCJqdXBpdGVyX3Bvd2VyX2N1cnJlbnQiLCJ2ZW51c19yZXNpc3RfY3VycmVudCIsIm1lcmN1cnlfcmVzaXN0X2N1cnJlbnQiLCJtYXJzX3Jlc2lzdF9jdXJyZW50IiwianVwaXRlcl9yZXNpc3RfY3VycmVudCIsImluaXRfZWxlbWVudGFsX2F0dHJpYnV0ZXMiLCJwb3dlcl9rZXkiLCJyZXNpc3Rfa2V5IiwiY2xhbXAiLCJwYXJ0eV9kYXRhIiwiaGFzX3Blcm1hbmVudF9zdGF0dXMiLCJCQVRUTEUiLCJHYW1lRXZlbnQiLCJDRU5URVJfWCIsIkNFTlRFUl9ZIiwiQ0FNRVJBX1NQRUVEIiwiU0VNSV9NQUpPUl9BWElTIiwiU0VNSV9NSU5PUl9BWElTIiwiUkFOR0VTIiwiQkFUVExFX0NVUlNPUl9TQ0FMRVMiLCJiYWNrZ3JvdW5kX2tleSIsImFsbGllc19pbmZvIiwiZW5lbWllc19pbmZvIiwiZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IiwiZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkiLCJjYW1lcmFfYW5nbGUiLCJyYWQiLCJzcGluaW5nIiwidXBkYXRlIiwidXBkYXRlX3Nwcml0ZV9wcm9wZXJ0aWVzIiwib2xkX2NhbWVyYV9hbmdsZSIsImJhdHRsZV9ncm91cCIsImNyb3BfZ3JvdXAiLCJncm91cF9lbmVtaWVzIiwiZ3JvdXBfYWxsaWVzIiwiYWxsaWVzX2NvdW50IiwiZW5lbWllc19jb3VudCIsInNoaWZ0X2Zyb21fbWlkZGxlX2VuZW15Iiwic2hpZnRfZnJvbV9taWRkbGVfYWxseSIsInNwcml0ZXMiLCJzZXRUbyIsImVudGVyX2lucHV0IiwiY2hvb3NpbmdfdGFyZ2V0cyIsImhhbHQiLCJzZXRfdGFyZ2V0cyIsImVzY19pbnB1dCIsImNob29zaW5nX3RhcmdldHNfZmluaXNoZWQiLCJwYXJ0eV9jb3VudCIsInBhcnR5X2luZm8iLCJ0YXJnZXRfdHlwZSIsImFiaWxpdHlfY2FzdGVyIiwidGFyZ2V0cyIsInppcFdpdGgiLCJyYW5nZV9jdXJzb3JfcG9zaXRpb24iLCJyZXZlcnNlIiwibWFnbml0dWRlIiwiYWJpbGl0eV9yYW5nZSIsImNob29zaW5nX3RhcmdldHNfY2FsbGJhY2siLCJjaGFuZ2VfdGFyZ2V0IiwidHdlZW5fdG9fcG9zIiwiZ3JvdXBfaW5mbyIsImdyb3VwX2xlbmd0aCIsImdyb3VwX2hhbGZfbGVuZ3RoIiwidGFyZ2V0X3Nwcml0ZV9pbmRleCIsImluc3RhbmNlIiwic2V0X2JhdHRsZV9jdXJzb3JzX3Bvc2l0aW9uIiwiYmxhY2tfYmciLCJiYXR0bGVfYmciLCJ0aWxlU3ByaXRlIiwiYmF0dGxlX2JnMiIsImJnX2hlaWdodCIsInNldF9zcHJpdGUiLCJpc19hbGx5IiwiYW5pbWF0aW9uIiwibGlzdCIsInNwcml0ZV9rZXkiLCJhbmNob3IiLCJlbGxpcHNlc19zZW1pX21ham9yIiwiZWxsaXBzZXNfc2VtaV9taW5vciIsImxhc3RJbmRleE9mIiwic2V0QW5pbWF0aW9uIiwibWFpbl9jaGFyX2xpc3QiLCJlbmVtaWVzX2xpc3QiLCJmaXJzdF9hbGx5X2NoYXIiLCJjaGlsZHJlbiIsImxhc3RfYWxseV9jaGFyIiwiZmlyc3RfZW5lbXlfY2hhciIsImxhc3RfZW5lbXlfY2hhciIsInVwcGVyX3JlY3QiLCJsb3dlcl95IiwibG93ZXJfcmVjdCIsImNob29zaW5nX2FjdGlvbnMiLCJpbml0aWFsaXplX3Nwcml0ZXMiLCJpbnRpYWxpemVfY3JvcF9yZWN0YW5nbGVzIiwicHJvbWlzZV9yZXNvbHZlIiwicHJvbWlzZSIsImluZGV4X3NoaWZ0ZWQiLCJwb3NfeCIsInBvc195IiwidGhpc19zY2FsZV94Iiwic2lnbiIsInRoaXNfc2NhbGVfeSIsImNlbnRlcl9zaGlmdCIsImN1cnNvcnMiLCJjdXJzb3Jfc3ByaXRlIiwidGFyZ2V0X2luZGV4IiwidGFyZ2V0X2luZm8iLCJ0YXJnZXRfc3ByaXRlIiwidGhpc19zY2FsZSIsImN1cnNvcnNfdHdlZW5zIiwiZGVzdF94IiwiZGVzdF95IiwiY3Vyc29yX2NvdW50IiwidW5zZXRfYmF0dGxlX2N1cnNvcnMiLCJpc0Rvd24iLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiZGVsdGEiLCJzaW4iLCJnZXRDaGlsZEluZGV4Iiwic3dhcENoaWxkcmVuIiwiY29zIiwieiIsInJlbGF0aXZlX2FuZ2xlIiwiYW5nbGVfcG9zaXRpb24iLCJnZXRfYW5nbGUiLCJlbGxpcHNlX3Bvc2l0aW9uIiwic2hpZnRfZnJvbV9taWRkbGUiLCJnZXRfc2NhbGUiLCJlbmRzV2l0aCIsIm9uX2ZhZGVfY29tcGxldGUiLCJvbl9mbGFzaF9jb21wbGV0ZSIsImZhZGUiLCJvbkZhZGVDb21wbGV0ZSIsInJlc2V0RlgiLCJpc194IiwiZWxsaXBzZSIsImF0YW4iLCJ0YW4iLCJkZWZhdWx0X3NjYWxlIiwibG9ncyIsImxvZ190ZXh0IiwicmVzb2x2ZV9hbmltIiwiY2FzdGVyIiwiaXRlbV9uYW1lIiwiZGppbm5fbmFtZSIsImRhbWFnZSIsInBwX2RhbWFnZSIsInN0YXRfc3RyIiwiY3VycmVudF9wcm9wZXJ0eSIsIm1heF9wcm9wZXJ0eSIsImFicyIsImJhc2Vfd2luZG93Iiwib25fdG9wIiwidXBkYXRlX3Bvc2l0aW9uIiwidXBkYXRlX3RleHQiLCJpc19vcGVuIiwic2hvdyIsImNsb3NlIiwiUFNZX0dBSU5fQ09MT1IiLCJQU1lfTE9TVF9DT0xPUiIsIlBTWV9JTkZPXzJfWSIsIlBTWV9JTkZPXzFfWSIsIndpbmRvd19vcGVuIiwid2luZG93X2FjdGl2ZSIsInRleHRfc3ByaXRlc19pbl93aW5kb3ciLCJpY29uX3Nwcml0ZXNfaW5fd2luZG93IiwibWlzY19zcHJpdGVzX2luX3dpbmRvdyIsImluaXRfcGFnZV9pbmRpY2F0b3JfYmFyIiwiYnV0dG9uIiwiY3Vyc29yX2NvbnRyb2wiLCJnZXRfbWF4X3BhZ2VzIiwiZ2V0X21heF9lbGVtX29uX3BhZ2UiLCJjaGFuZ2VfcGFnZSIsImNoYW5nZV9hYmlsaXR5IiwiZ2V0X3BhZ2VfaW5kZXgiLCJzZXRfcGFnZV9pbmRleCIsImdldF9hYmlsaXR5X2luZGV4Iiwic2V0X2FiaWxpdHlfaW5kZXgiLCJnZXRfY3Vyc29yX3giLCJnZXRfY3Vyc29yX3kiLCJoaWdobGlnaHRfYmFyIiwiZXhwYW5kZWQiLCJhYmlsaXR5X2luZGV4IiwiY2hvb3Nlbl9hYmlsaXR5IiwiaGlkZSIsImxpc3RfbGVuZ3RoIiwiYWxsX2FiaWxpdGllcyIsImFmdGVyX2luZGV4Iiwic2V0X2FiaWxpdGllc19saXN0Iiwic2V0X2Rlc2NyaXB0aW9uIiwiYWJpbGl0aWVzX2xpc3QiLCJzZXRfaGlnaGxpZ2h0X2JhciIsImNsZWFyX3Nwcml0ZXMiLCJpY29uX3giLCJpY29uX3kiLCJ4X2VsZW1fbmFtZSIsInBzeV9zZWFsZWQiLCJjdXJyZW50X3BwIiwicHN5bmVyZ3lfbmFtZV9zcHJpdGUiLCJwcF9zcHJpdGUiLCJwc3luZXJneV9jb3N0X3Nwcml0ZSIsImdhaW5lZF9hYmlsaXRpZXMiLCJ1cGRhdGVfdGV4dF9jb2xvciIsImxvc3RfYWJpbGl0aWVzIiwiY3VycmVudF9hYmlsaXRpZXMiLCJwcmV2aWV3X3ZhbHVlcyIsInByZXZpZXdfZGppbm5fY2hhbmdlIiwibmV4dF9kamlubmlfc3RhdHVzIiwibmV4dF9hYmlsaXRpZXMiLCJjdXJyZW50X3NldCIsIm5leHRfc2V0IiwiaW50ZXJzZWN0aW9uX2FiaWxpdGllcyIsInBzeV9pbmZvXzFfdGV4dCIsInBzeV9pbmZvXzJfdGV4dCIsInNldF9hYmlsaXRpZXMiLCJzZXRfcGFnZV9udW1iZXIiLCJ1cGRhdGVfc2l6ZSIsInNldF9wYWdlX2luZGljYXRvciIsImNsZWFyX3BzeV9nYWluIiwicmVtb3ZlX2Zyb21fZ3JvdXAiLCJuZXh0X2RqaW5uX3N0YXR1cyIsImhhc190ZW1wb3Jhcnlfc3RhdHVzIiwibW91bnRfd2luZG93IiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwic3RhdHNfa2V5cyIsImxhYmVscyIsImJlZm9yZV9zdGF0cyIsImFmdGVyX3N0YXRzIiwidXBfYXJyb3dzIiwiZG93bl9hcnJvd3MiLCJoaWRlX2Fycm93cyIsImJlZm9yZV9jbGFzc190ZXh0IiwiYWZ0ZXJfY2xhc3NfdGV4dCIsInJvdGF0aW9uIiwiU0hJRlRfQlVUVE9OX1giLCJTSElGVF9CVVRUT05fWSIsImN1cnJlbnRfc3RhdCIsIm5leHRfc3RhdCIsInNldF9zdGF0cyIsInNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5Iiwic3RhdHNfd2luZG93IiwiZGppbm5fbmFtZXMiLCJzdGFyc19zcHJpdGVzIiwiY2hhbmdlX2RqaW5uIiwiZ2V0X2RqaW5uX2luZGV4Iiwic2V0X2RqaW5uX2luZGV4IiwicHN5bmVyZ3lfd2luZG93X29wZW4iLCJ0aGlzX2RqaW5uIiwiZGppbm5faW5kZXgiLCJzaGlmdF9pbnB1dCIsInBzeW5lcmd5X3dpbmRvdyIsImdldF9uZXh0X3N0YXR1cyIsIlNISUZUIiwiY29uZmlnX3BhZ2UiLCJjYWxsX3NldF9kZXNjcmlwdGlvbiIsInVwZGF0ZV9zdGF0cyIsImFsbF9kamlubmkiLCJiYXNlX3kiLCJzdGFyIiwicmVjX251bWJlciIsIm5leHRfc3RhdHVzIiwic2V0X2RqaW5uIiwiaXRlbV9uYW1lcyIsIm90aGVyX3Nwcml0ZXMiLCJjaGFuZ2VfaXRlbSIsImdldF9pdGVtX2luZGV4Iiwic2V0X2l0ZW1faW5kZXgiLCJ0aGlzX2l0ZW0iLCJpdGVtX2luZGV4IiwiYWxsX2l0ZW1zIiwiaXRlbV95IiwiSVRFTV9JQ09OX1giLCJpdGVtX2NvdW50Iiwic29ydEJ5IiwidGV4dHMiLCJ0aW1lcnMiLCJkamlubl9udW1iZXIiLCJibGluayIsInN1bW1vbl9uYW1lcyIsImNoYW5nZV9zdW1tb24iLCJnZXRfc3VtbW9uX2luZGV4Iiwic2V0X3N1bW1vbl9pbmRleCIsImRqaW5uX251bWJlcnNfd2luZG93Iiwic3VtbW9ucyIsInN1bW1vbl9pbmRleCIsInNldF9udW1iZXJzIiwiYWxsX3N1bW1vbnMiLCJzdW1tb25feSIsImF2YWlsYWJsZSIsImdldF9zdGFuZGJ5X2RqaW5uaSIsImdldF9hY3RpdmVfcGxheWVycyIsIk1BWF9DSEFSU19JTl9CQVRUTEUiLCJlbGVtIiwiZGppbm5pX2FscmVhZHlfdXNlZCIsImRicyIsInN1bW1vbnNfZGIiLCJzdW1tb24iLCJldmVyeSIsIm9uX2FiaWxpdGllc19jaG9vc2UiLCJjaG9vc2VfdGFyZ2V0cyIsImNoYXJzX3N0YXR1c193aW5kb3ciLCJDaGFyc1N0YXR1c1dpbmRvdyIsInN0YXJ0X2J1dHRvbnNfa2V5cyIsInN0YXJ0X2hvcml6b250YWxfbWVudSIsIkhvcml6b250YWxNZW51Iiwic3RhcnRfYnV0dG9uX3ByZXNzIiwiaW5uZXJfYnV0dG9uc19rZXlzIiwiZGVzY3JpcHRpb25fd2luZG93IiwiZGppbm5fd2luZG93IiwiaXRlbV93aW5kb3ciLCJzdW1tb25fd2luZG93IiwiYXZhdGFyX3Nwcml0ZSIsImlubmVyX2hvcml6b250YWxfbWVudSIsImlubmVyX2J1dHRvbl9wcmVzcyIsImlubmVyX21lbnVfY2FuY2VsIiwiZmlsdGVyZWRfYnV0dG9ucyIsImhhc19zdGFuZGJ5X2RqaW5uIiwiY3VycmVudF9idXR0b25zIiwibW91bnRfYnV0dG9ucyIsInJlZHVjZSIsInRoaXNfY2hhciIsImN1cnJlbnRfY2hhcl9pbmRleCIsImlzX3BhcmFseXplZCIsInNldF9hdmF0YXIiLCJjaGFuZ2VfY2hhciIsIm9uX2FiaWxpdHlfY2hvb3NlIiwid2luZG93IiwiZGVzY3JpcHRpb25fb25fdG9wIiwiYWN0aW9uX3R5cGUiLCJhcmdzIiwicG9wX2FiaWxpdHkiLCJiZWZvcmVfY2hhciIsImFiaWxpdGllc19jb3VudCIsIm5leHRfY2hhciIsImFiaWxpdHlfaW5mbyIsImxvYWRUZXh0dXJlIiwiY2hhcl9rZXlfbmFtZSIsImhpZGVfYXZhdGFyIiwibWVudV9hY3RpdmUiLCJ1cGRhdGVfY2hhcnNfaW5mbyIsImFiaWxpdHlfbmFtZSIsImFiaWxpdHlfbmFtZV94Iiwic3Rhcl94Iiwid2luZG93X3Nwcml0ZXMiLCJpY29uX3Nwcml0ZV9zaGVldCIsImljb24iLCJwcF92YWx1ZSIsInF1YW50aXRpZXMiLCJwcF90ZXh0IiwicmVxcyIsInBpY2tCeSIsInJlcSIsImNvdW50ZXIiLCJyZXFfdGV4dCIsImljb25fZ3JvdXAiLCJzZXRfYnV0dG9uIiwic2V0X2luZm8iLCJhbGxpZXMiLCJlbmVtaWVzIiwiY2hhcl9jaG9zZW4iLCJhbGx5IiwiYXZhaWxhYmxlX3RhcmdldCIsImFnaWxpdHkiLCJtdWx0aV90dXJuIiwidHVybl9udW1iZXIiLCJ0dXJuX3F1YW50aXR5IiwicHJpb3JpdHkiLCJyZWxhdGl2ZV9hdGsiLCJjdXJyZW50X2F0ayIsImN1cnJlbnRfZGVmIiwibXVsdF9tb2QiLCJhZGRfbW9kIiwiYmFzZV9kYW1hZ2UiLCJpc19wc3luZXJneSIsImNhc3Rlcl9wb3dlciIsInRhcmdldF9yZXNpc3QiLCJzcGVjaWFsX3BoeXNpY2FsX2F0dGFjayIsInBvd2VyX211bHRpcGxpZXIiLCJwb3dlciIsImRqaW5uaV91c2VkIiwiYmFzZV9jaGFuY2UiLCJ2dWxuZXJhYml0eSIsImxldmVsX2tleSIsImN1cnJlbnRfbHVrIiwicG9pc29uX3R5cGUiLCJwb2lzb25fZmFjdG9yIiwic3ByaXRlc19rZXlzIiwieF9zZXF1ZW5jZSIsInlfc2VxdWVuY2UiLCJ4X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ5X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ4X3NjYWxlX3NlcXVlbmNlIiwieV9zY2FsZV9zZXF1ZW5jZSIsInhfYW5jaG9yX3NlcXVlbmNlIiwieV9hbmNob3Jfc2VxdWVuY2UiLCJhbHBoYV9zZXF1ZW5jZSIsInJvdGF0aW9uX3NlcXVlbmNlIiwic3RhZ2VfYW5nbGVfc2VxdWVuY2UiLCJodWVfYW5nbGVfc2VxdWVuY2UiLCJ0aW50X3NlcXVlbmNlIiwiZ3JheXNjYWxlX3NlcXVlbmNlIiwiY29sb3JpemVfc2VxdWVuY2UiLCJjdXN0b21fZmlsdGVyX3NlcXVlbmNlIiwicGxheV9zZXF1ZW5jZSIsInNldF9mcmFtZV9zZXF1ZW5jZSIsImJsZW5kX21vZGVfc2VxdWVuY2UiLCJpc19wYXJ0eV9hbmltYXRpb24iLCJjYXN0ZXJfc3ByaXRlIiwidGFyZ2V0c19zcHJpdGVzIiwiZ3JvdXBfY2FzdGVyIiwiZ3JvdXBfZW5lbXkiLCJzdXBlcl9ncm91cCIsInN0YWdlX2NhbWVyYSIsImJhY2tncm91bmRfc3ByaXRlcyIsInNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzIiwic3RhZ2VfcHJldl92YWx1ZSIsIngwIiwieTAiLCJ0cmFpbHNfb2JqcyIsInRyYWlsc19pbmZvIiwidHJhaWxzIiwiaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyIsInRyYWlsX2ZyYW1lX2RpZmYiLCJ0cmFpbHNfbW9kZSIsInBlcl90YXJnZXQiLCJjb3VudCIsInBzeV9zcHJpdGUiLCJiYWNrX2dyb3VwIiwiZnJvbnRfZ3JvdXAiLCJhZGRDaGlsZCIsImFkZENoaWxkQXQiLCJmcmFtZXMiLCJmcmFtZVRvdGFsIiwiZnJhbWVOYW1lIiwiYmF0dGxlX2luZGV4IiwieF9oaXN0b3J5IiwiZnJhbWVfZGlmZiIsInlfaGlzdG9yeSIsInNldF9maWx0ZXJzIiwiYmxlbmRfbW9kZSIsInRyYWlsX3RleHR1cmUiLCJyZW5kZXJUZXh0dXJlIiwidHJhaWxfc3ByaXRlIiwidHJhaWxfdGV4dHVyZV8yIiwidHJhaWxfc3ByaXRlXzIiLCJ0ZXh0dXJlXzEiLCJ0ZXh0dXJlXzIiLCJjYXN0ZXJfZmlsdGVyIiwidGFyZ2V0c19maWx0ZXIiLCJiYWNrZ3JvdW5kX2ZpbHRlciIsInNwcml0ZXNfZmlsdGVycyIsImZpbHRlcnMiLCJmaW5pc2hfY2FsbGJhY2siLCJwcm9taXNlcyIsInBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlIiwicGxheV9zcHJpdGVfc2VxdWVuY2UiLCJwbGF5X2JsZW5kX21vZGVzIiwicGxheV9maWx0ZXJfcHJvcGVydHkiLCJwbGF5X3N0YWdlX2FuZ2xlX3NlcXVlbmNlIiwidW5tb3VudF9hbmltYXRpb24iLCJvYmoiLCJzZXEiLCJpbm5lcl9wcm9wZXJ0eSIsInNwcml0ZV9pbmRleCIsInNlcXVlbmNlIiwidGFyZ2V0X3Byb3BlcnR5IiwiY2hhaW5lZF90d2VlbnMiLCJhdXRvX3N0YXJ0X3R3ZWVuIiwiZ2V0X3Nwcml0ZXMiLCJwcm9taXNlc19zZXQiLCJ0aGlzX3Nwcml0ZSIsInVuaXFfa2V5Iiwic2VxX3RvIiwidG9fdmFsdWUiLCJnZXRfYW5nbGVfYnlfZGlyZWN0aW9uIiwiaXNfYWJzb2x1dGUiLCJ5b3lvIiwic3RhcnRfZGVsYXkiLCJkdXJhdGlvbiIsInJlc29sdmVfZnVuY3Rpb24iLCJ0aGlzX3Byb21pc2UiLCJmb3JjZV9zdGFnZV91cGRhdGUiLCJwcm9wIiwib25TdGFydCIsImNoYWluIiwicGxheV9zZXEiLCJnZXRBbmltYXRpb24iLCJhbmltYXRpb25fa2V5IiwicmV2ZXJzZWQiLCJ3YWl0IiwiaGlkZV9vbl9jb21wbGV0ZSIsImJsZW5kX21vZGVfc2VxIiwic2Vjb25kYXJ5X3Byb3BlcnRpZXMiLCJmaWx0ZXJfc2VxIiwidGhpc19wcm9wZXJ0eSIsInNlY29uZGFyeV9wcm9wZXJ0eSIsInN0YWdlX2FuZ2xlX3NlcSIsInVuc2hpZnQiLCJyZW5kZXJYWSIsImN1cnJlbnRfYW5nbGUiLCJmb3VydGhfcXVhZHJhbnQiLCJ0aGlzX2RpcmVjdGlvbiIsImRpZmYiLCJuZXdfdGFyZ2V0IiwidGFyZ2V0X2RlbHRhIiwibmV3X3RhcmdldF9kZWx0YSIsIm5vdF9hdmFpbGFibGUiLCJyZW5kZXJfZnVuY3Rpb24iLCJiYXR0bGVfYW5pbV9rZXkiLCJyZWNpcGVfa2V5Iiwic3ByaXRlX2xvYWRlciIsInJlY2lwZV9sb2FkZXIiLCJqc29uIiwic3ByaXRlX2xvYWRlcl9wcm9taXNlX3Jlc29sdmUiLCJhbGxfc3VjY2VlZCIsInNwcml0ZV9sb2FkZXJfcHJvbWlzZSIsInJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlIiwib25GaWxlQ29tcGxldGUiLCJwcm9ncmVzcyIsImZpbGVrZXkiLCJzdWNjZXNzIiwicmVjaXBlX2xvYWRlcl9wcm9taXNlIiwibG9hZF9jb21wbGV0ZV9wcm9taXNlX3Jlc29sdmUiLCJsb2FkX2NvbXBsZXRlX3Byb21pc2UiLCJhbmltYXRpb25fcmVjaXBlIiwiY2FjaGUiLCJnZXRKU09OIiwiZ3JvdXBfdGFrZXIiLCJiYXR0bGVfc3RhZ2UiLCJwbGF5X3Byb21pc2VfcmVzb2x2ZSIsInBsYXlfcHJvbWlzZSIsInJlbmRlciIsInJlbW92ZVRleHR1cmVBdGxhcyIsInJlbW92ZUpTT04iLCJiYXR0bGVfcGhhc2VzIiwiZW5lbXlfcGFydHlfa2V5IiwiZW50ZXJlZF9pbl9iYXR0bGUiLCJlbmVtaWVzX3BhcnR5X2RhdGEiLCJlbmVtaWVzX3BhcnRpZXNfZGIiLCJ0aGlzX2VuZW1pZXNfbGlzdCIsImJhdHRsZV9rZXlzX2NvdW50IiwibWVtYmVyX2luZm8iLCJxdGQiLCJiYXR0bGVfa2V5X3N1ZmZpeCIsIm5hbWVfc3VmZml4IiwiYmF0dGxlX2tleSIsImJhdHRsZV9sb2ciLCJiYXR0bGVfbWVudSIsInRhcmdldF93aW5kb3ciLCJhbmltYXRpb25fbWFuYWdlciIsImJhdHRsZV9waGFzZSIsImNvbnRyb2xzX2VuYWJsZWQiLCJvbl9nb2luZ19lZmZlY3RzIiwiYWxsaWVzX2RlZmVhdGVkIiwiZW5lbWllc19kZWZlYXRlZCIsImJhdHRsZV9maW5pc2hpbmciLCJzZXRfY29udHJvbHMiLCJjaGVja19waGFzZXMiLCJhZHZhbmNlX2xvZ19yZXNvbHZlIiwicGxheWVyX2FiaWxpdGllcyIsImNsb3NlX21lbnUiLCJyZXNldF9wb3NpdGlvbnMiLCJhYmlsaXR5X2tleSIsInRoaXNfYWJpbGl0eSIsImNoZWNrX3BhcnRpZXMiLCJiYXR0bGVfcGhhc2Vfbm9uZSIsImJhdHRsZV9waGFzZV9tZW51IiwiYmF0dGxlX3BoYXNlX3JvdW5kX3N0YXJ0IiwiYmF0dGxlX3BoYXNlX2NvbWJhdCIsImJhdHRsZV9waGFzZV9yb3VuZF9lbmQiLCJiYXR0bGVfcGhhc2VfZW5kIiwiYmF0dGxlX2luc3RhbmNlIiwiaW5pdGlhbGl6ZV9zdGFnZSIsImFsbGllc19tYXBfc3ByaXRlIiwia2V5QnkiLCJlbmVtaWVzX21hcF9zcHJpdGUiLCJzZXRfY2hvb3NpbmdfYWN0aW9uX3Bvc2l0aW9uIiwib3Blbl9tZW51IiwiZW5lbXlfbWVtYmVycyIsImVuZW1pZXNfYWJpbGl0aWVzIiwiZnJvbUVudHJpZXMiLCJlbmVteSIsInJvbGxfYWN0aW9uIiwiY2hhcl9rZXkiLCJzcGVlZCIsInBsYXllcl90dXJuX3NwZWVkIiwiY3VycmVudF9hZ2kiLCJ0aGlzX2VuZW15IiwiZW5lbXlfdHVybl9zcGVlZCIsInR1cm5zX2FjdGlvbnMiLCJ2YWx1ZXMiLCJsb2FkX2FuaW1hdGlvbiIsImN1cnJlbnRfaHAiLCJ3YWl0X2Zvcl9rZXkiLCJhZGRfYWJpbGl0eSIsInJlcXVpcmVtZW50Iiwic2V0X3RvX3JlY292ZXJ5IiwiYW5pbWF0aW9uX2F2YWlsYWJsZSIsInRhcmdldF9zcHJpdGVzIiwiZmxhdE1hcCIsInByZXZlbnRfY2FtZXJhX2FuZ2xlX292ZXJmbG93IiwiYXBwbHlfZGFtYWdlIiwiYXBwbHlfZWZmZWN0cyIsInNldF9zdGFnZV9kZWZhdWx0X3Bvc2l0aW9uIiwic3VtbW9uX3Bvd2VyIiwicG9pc29uX3N0YXR1cyIsImlzX3BvaXNvbmVkIiwiYmF0dGxlX3BvaXNvbl9kYW1hZ2UiLCJwb2lzb25fbmFtZSIsImNoZWNrX2Rvd25lZCIsInRoaXNfZWZmZWN0IiwiZ2V0X2VmZmVjdF90dXJuc19jb3VudCIsImluY3JlYXNlZF9jcml0IiwiYWNjIiwidGFyZ2V0X2luc3RhbmNlIiwicGh5c2ljYWxfYXR0YWNrIiwicHN5bmVyZ3lfZGFtYWdlIiwiaGVhbF9hYmlsaXR5IiwiZGppbm5fdXNlZCIsInN1bSIsInN1bW1vbl9kYW1hZ2UiLCJyYXRpb3MiLCJnZXRfZGltaW5pc2hpbmdfcmF0aW9zIiwiYWRkX2RhbWFnZSIsImRpX2VmZmVjdCIsImVmZmVjdF9yZXN1bHQiLCJlZmZlY3RfZGFtYWdlIiwidnVsbmVyYWJpbGl0eSIsInZ1bG5lcmFiaWxpdGllcyIsImFpbG1lbnRfc3VjY2VzcyIsInNldF9lZmZlY3RfdHVybnNfY291bnQiLCJwb2lzb25fZWZmZWN0IiwicmVtb3ZlZCIsImFkZF9yZWNvdmVyX2VmZmVjdCIsImVsZW1lbnRfaW5mbyIsImVmZmVjdHNfdG9fcmVtb3ZlIiwiZWZmZWN0X2dyb3VwcyIsImF2b2lkX21zZyIsImdldF9lZmZlY3RfdHVybnNfa2V5IiwiZWZmZWN0X3R1cm5fa2V5IiwiZGppbm5fa2V5IiwidG90YWxfZXhwIiwiZXhwX3Jld2FyZCIsImNoYW5nZSIsImFkZF9leHAiLCJkaWZmZXJlbmNlIiwic3RhdF90ZXh0IiwidG90YWxfY29pbnMiLCJjb2luc19yZXdhcmQiLCJpdGVtX3Jld2FyZCIsIml0ZW1fcmV3YXJkX2NoYW5jZSIsInVuc2V0X2JhdHRsZSIsInVuc2V0X3N0YWdlIiwiZGVzdHJveV9tZW51IiwidXBkYXRlX3N0YWdlIiwic3RvcF9jaGFyIiwiYmF0dGxlIiwic3RhcnRfYmF0dGxlIiwibnBjX21vdmVtZW50X3R5cGVzIiwiV0FMS19BUk9VTkQiLCJucGNfdHlwZXMiLCJJTk4iLCJXRUFQT05fU0hPUCIsIkFSTU9SX1NIT1AiLCJNRURJQ0lORV9TSE9QIiwiQ29udHJvbGxhYmxlQ2hhciIsImluaXRpYWxfeSIsImluaXRpYWxfYWN0aW9uIiwiaW5pdGlhbF9kaXJlY3Rpb24iLCJlbmFibGVfZm9vdHN0ZXBzIiwibnBjX3R5cGUiLCJtb3ZlbWVudF90eXBlIiwibWVzc2FnZSIsInRob3VnaHRfbWVzc2FnZSIsImF2YXRhciIsInRhbGtfcmFuZ2VfZmFjdG9yIiwiZXZlbnRzX2luZm8iLCJzZXRfZXZlbnRzIiwiaXNfbnBjIiwiZXZlbnRfaW5mbyIsInVwZGF0ZV9zaGFkb3ciLCJjb2xsaXNpb25fb2JqIiwiZW5hYmxlIiwibnBjX2RiIiwiYW5jaG9yX3giLCJyZXNldF9hbmNob3IiLCJhbmNob3JfeSIsImJvZHlfcmFkaXVzIiwicG9seWdvbiIsImNvbGxpc2lvbl9ib2R5X2JldmVsIiwiYWRkUG9seWdvbiIsIm9wdGltYWxEZWNvbXAiLCJza2lwU2ltcGxlQ2hlY2siLCJyZW1vdmVDb2xsaW5lYXJQb2ludHMiLCJucGNfY29sbGlzaW9uX2dyb3VwcyIsIkNsYXNzZXMiLCJyZXF1aXJlZF92ZW51c19sZXZlbCIsInJlcXVpcmVkX21lcmN1cnlfbGV2ZWwiLCJyZXF1aXJlZF9tYXJzX2xldmVsIiwicmVxdWlyZWRfanVwaXRlcl9sZXZlbCIsImNsYXNzX3R5cGUiLCJjaG9vc2VfcmlnaHRfY2xhc3MiLCJ2ZW51c19sdmwiLCJtZXJjdXJ5X2x2bCIsIm1hcnNfbHZsIiwianVwaXRlcl9sdmwiLCJzZWNvbmRhcnlfZWxlbWVudHMiLCJzZWNvbmRhcnlfYWZpbml0eSIsImNsYXNzZXMiLCJ0aGlzX2NsYXNzIiwiQlVUVE9OX1kiLCJUSVRMRV9XSU5ET1dfSEVJR0hUIiwiYnV0dG9ucyIsInRpdGxlcyIsIm9uX2Nob29zZSIsIm9uX2NhbmNlbCIsInRpdGxlX3dpbmRvd193aWR0aCIsImRvY2tfcmlnaHQiLCJidXR0b25zX2tleXMiLCJidXR0b25zX251bWJlciIsIm1heF90aXRsZV93aWR0aCIsInRpdGxlIiwidG90YWxfd2lkdGgiLCJ0aXRsZV93aW5kb3ciLCJzZWxlY3RlZF9idXR0b25faW5kZXgiLCJzZWxlY3RlZF9idXR0b25fdHdlZW4iLCJCVVRUT05fSEVJR0hUIiwiY2hhbmdlX2J1dHRvbiIsInJlc2V0X2J1dHRvbiIsInNldF90ZXh0Iiwic2VsZWN0X2luZGV4Iiwic3RhcnRfYWN0aXZlIiwid2luZG93X3Byb21pc2VfcmVzb2x2ZSIsImJ1dHRvbnNfcmVzb2x2ZSIsIndpbmRvd19wcm9taXNlIiwiYnV0dG9uc19wcm9taXNlIiwibm9ybWFsX3B1c2giLCJ0cnlpbmdfdG9fcHVzaCIsInRyeWluZ190b19wdXNoX2RpcmVjdGlvbiIsImNhc3RpbmdfcHN5bmVyZ3kiLCJmaXJlX3B1c2hfbW92ZW1lbnQiLCJwdXNoX3RpbWVyIiwidGFyZ2V0X29ubHlfcHVzaCIsImJlZm9yZV9tb3ZlIiwicHVzaF9lbmQiLCJlbmFibGVfcGh5c2ljc19hdF9lbmQiLCJvbl9wdXNoX3VwZGF0ZSIsInRhcmdldF9vbmx5IiwiZXhwZWN0ZWRfcG9zaXRpb24iLCJwb3NpdGl2ZV9saW1pdCIsImludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlIiwibmVnYXRpdmVfbGltaXQiLCJwdXNoaW5nIiwiY3VycmVudF9hY3Rpb24iLCJ0d2Vlbl94IiwidHdlZW5feSIsImV2ZW50X3NoaWZ0X3giLCJldmVudF9zaGlmdF95Iiwic2hpZnRfZXZlbnRzIiwicHJldl94IiwicHJldl95IiwiY3VzdG9tX2RhdGEiLCJibG9ja2luZ19zdGFpcl9ibG9jayIsInRoaXNfdHdlZW4iLCJvblVwZGF0ZUNhbGxiYWNrIiwiZHJvcF9mb3VuZCIsIm9iamVjdF9kcm9wX3RpbGVzIiwiZHJvcF90aWxlIiwiZGVzdF95X3NoaWZ0X3B4IiwiY2hhbmdlX2NvbGxpZGVyX2xheWVyIiwiZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXIiLCJhbmltYXRpb25fZHVyYXRpb24iLCJRdWFkcmF0aWMiLCJJbiIsImR1c3RfYW5pbWF0aW9uIiwib2JqZWN0X2V2ZW50cyIsImdldF9ldmVudHMiLCJlIiwib2xkX3giLCJvbGRfeSIsIm5ld19ldmVudF9sb2NhdGlvbl9rZXkiLCJuZXdfc3Vycm91bmRpbmdzIiwiYWN0aXZlX2p1bXBfc3Vycm91bmRpbmdzIiwiY29sbGlkZXJfbGF5ZXJfc2hpZnQiLCJvbGRfc3Vycm91bmRpbmdzIiwib2xkX3N1cnJvdW5kaW5nIiwib2xkX2tleSIsIm9sZF9zdXJyX2V2ZW50IiwiZGVhY3RpdmF0ZV9hdCIsIm9yaWdpbl94Iiwib3JpZ2luX3kiLCJkdXN0X3Nwcml0ZV9iYXNlIiwibWlzY19zcHJpdGVfYmFzZV9saXN0IiwidGhpc19hbmdsZSIsImR1c3Rfc3ByaXRlIiwibnBjX2dyb3VwIiwic2V0Q2hpbGRJbmRleCIsImdldEFuaW1hdGlvbktleSIsInJlc29sdmVfZnVuYyIsIlNUQVRVU19CQVJfQ09MT1JfR09PRCIsIlNUQVRVU19CQVJfQ09MT1JfQkFEIiwiU1RBUlNfWCIsIlNUQVJTX1kiLCJTVEFOREJZX0NPVU5UX1giLCJTVEFOREJZX0NPVU5UX1NISUZUX1kiLCJkamlubmlfaW5mbyIsImNvbXBhY3QiLCJuYW1lX3kiLCJzdGF0dXNfd2luX2hlaWdodCIsImNoYXJzX251bWJlciIsInN0YXR1c193aW5fd2lkdGgiLCJzdGF0dXNfd2luX3giLCJzdGF0dXNfd2luZG93Iiwic3RhdHVzX2hlYWRlcl93aWR0aCIsImluZm9fc3ByaXRlcyIsInNldF9jaGFyc19pbmZvIiwic3RhbmRieV9jb3VudF90ZXh0Iiwic3RhcnNfZ3JvdXAiLCJjaGFyc19saXN0IiwiaW5mb19zcHJpdGVzX29iaiIsImJhc2VfeF9wb3MiLCJncm91cF9rZXkiLCJkZWZpbmVfaW50ZXJuYWxfZ3JvdXAiLCJ5X3Bvc19iYXIiLCJocF9iYXJfZ3JhcGhpY3MiLCJocF9iYXJfZGFtYWdlX2dyYXBoaWNzIiwiZGVmYXVsdF95IiwiaHBfaGVhZGVyIiwieF9udW1iZXJfcG9zIiwiaHAiLCJwcF9iYXJfZ3JhcGhpY3MiLCJwcF9iYXJfZGFtYWdlX2dyYXBoaWNzIiwicHBfaGVhZGVyIiwicHAiLCJzaG93X2RqaW5uX2luZm8iLCJjbGVhcl9zZXBhcmF0b3JzIiwiY3VycmVudF9jaGFycyIsImluZm9fc3ByaXRlIiwiaHBfZGFtYWdlX2Jhcl93aWR0aCIsImhwX2RhbWFnZV9iYXJfeCIsInBwX2RhbWFnZV9iYXJfd2lkdGgiLCJwcF9kYW1hZ2VfYmFyX3giLCJkcmF3X3NlcGFyYXRvciIsIkVuZW15IiwiZW5lbXlfZGF0YSIsInZlbnVzX2xldmVsIiwibWVyY3VyeV9sZXZlbCIsIm1hcnNfbGV2ZWwiLCJqdXBpdGVyX2xldmVsIiwidmVudXNfcG93ZXIiLCJtZXJjdXJ5X3Bvd2VyIiwibWFyc19wb3dlciIsImp1cGl0ZXJfcG93ZXIiLCJ2ZW51c19yZXNpc3QiLCJtZXJjdXJ5X3Jlc2lzdCIsIm1hcnNfcmVzaXN0IiwianVwaXRlcl9yZXNpc3QiLCJzZXRfYmFzZV9hdHRyaWJ1dGVzIiwiY3VycmVudF9ocF9yZWNvdmVyeSIsImN1cnJlbnRfcHBfcmVjb3ZlcnkiLCJFbmVteUJhc2UiLCJnZXRfZW5lbXlfaW5zdGFuY2UiLCJGT09UU1RFUFNfVFRMIiwiU0VDT05EIiwiV0FMS0lOR19USU1FX0lOVEVSVkFMIiwiUlVOTklOR19USU1FX0lOVEVSVkFMIiwiSU5JVElBTF9BQ1RJT04iLCJJTklUSUFMX0RJUkVDVElPTiIsImZvb3RfZm9yd2FyZF90eXBlcyIsInNlbmRfdG9fYmFjayIsImRlYWRfc3RlcHMiLCJkZWFkX2luZGV4IiwiZm9vdF9mb3J3YXJkIiwiY2FuX21ha2VfZm9vdHByaW50IiwiZm9vdHN0ZXBzX3R5cGUiLCJmb290c3RlcHNfdGltZV9pbnRlcnZhbCIsIm5ld19zdGVwX3RpbWVyIiwiZXhwaXJlX3RpbWVyIiwiZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlIiwiZXhwaXJlZCIsImtpbGwiLCJnZXRJbmRleCIsInVwZGF0ZV9mb290IiwiYW5pbWF0aW9uX25hbWUiLCJmb290c3RlcHNfc3ByaXRlIiwiZ2V0QWN0aW9uS2V5IiwiYW5pbWF0aW9uX29iaiIsInBvc2l0aW9uX2Zvb3RzdGVwcyIsImtpbGxfc3RlcCIsInNldF9leHBpcmVfdGltZXIiLCJzZXRfbmV3X3N0ZXBfdGltZXIiLCJmb3JjZV9kZXN0cm95IiwicmVtb3ZlQWxsIiwiY2xlYW5fYWxsIiwiZGVmYXVsdF9hbmNob3IiLCJ4X3NwZWVkIiwieV9zcGVlZCIsImV4dHJhX3NwZWVkIiwiZm9yY2VfZGlyZWN0aW9uIiwiY2xpbWJpbmciLCJ0ZWxlcG9ydGluZyIsImlkbGVfY2xpbWJpbmciLCJyZXF1aXJlZF9kaXJlY3Rpb24iLCJjb2xvcl9maWx0ZXIiLCJmb290c3RlcHMiLCJhbGxvd19jbGltYmluZyIsIm1hcF9zcHJpdGUiLCJsYXllciIsImFjdGlvbl9rZXkiLCJyb3VuZFB4Iiwic2hhZG93X2FuY2hvcl94Iiwic2hhZG93X2FuY2hvcl95IiwiTVVMVElQTFkiLCJkaXNhYmxlUm91bmRQeCIsImZvbGxvdyIsIkNhbWVyYSIsIkZPTExPV19MT0NLT04iLCJmb2N1c09uIiwiZ2V0U3ByaXRlQWN0aW9uIiwiY2hhbmdlX3Nwcml0ZSIsInZlbG9jaXR5Iiwic2V0X2FjdGlvbiIsImNoZWNrX29uX2V2ZW50IiwidGlsZXMiLCJnZXRfY3VycmVudF90aWxlIiwidGlsZSIsInByb3BlcnRpZXMiLCJkaXNhYmxlX2Zvb3RwcmludCIsInNob3dfZm9vdHN0ZXBzIiwidGlsZV9hYmxlX3RvX3Nob3dfZm9vdHByaW50IiwiY3JlYXRlX3N0ZXAiLCJzaGlmdF9wcmVzc2VkIiwiZGVsdGFfdGltZSIsImVsYXBzZWRNUyIsInRlbXBfeCIsInRlbXBfeSIsImNhbGN1bGF0ZV9zcGVlZCIsImFwcGx5X3NwZWVkIiwiZ29sZGVuX3N1biIsImNyZWF0ZWQiLCJtZW51X3NjcmVlbiIsImdhbWVfZXZlbnRfbWFuYWdlciIsInNwYWNlYmFyX2lucHV0IiwiZnVsbHNjcmVlbiIsInNjYWxlX2ZhY3RvciIsInVuZGVybGF5ZXJfZ3JvdXAiLCJvdmVybGF5ZXJfZ3JvdXAiLCJHYW1lIiwibnVtYmVycyIsIldFQkdMIiwicHJlbG9hZCIsImxvYWRSZW5kZXIiLCJsb2FkX2FsbCIsImFkdmFuY2VkVGltaW5nIiwic3RhZ2UiLCJyZW5kZXJlciIsInJlbmRlclNlc3Npb24iLCJyb3VuZFBpeGVscyIsInJlbmRlcl9sb2FkaW5nIiwibG9hZF9kYXRhYmFzZXMiLCJFTlRFUiIsIkVTQyIsIlNQQUNFQkFSIiwiaW5pdF9kYiIsImluaXRpYWxfc2NhbGVfZmFjdG9yIiwiRGVidWciLCJpbml0aWFsaXplX2NvbnRyb2xzIiwiaW5pdGlhbGl6ZV9nYW1lX2RhdGEiLCJtYXBzX2xpc3QiLCJtYXBfa2V5X25hbWUiLCJtb3VudF9tYXAiLCJtYXBfel9pbmRleCIsIkhlcm8iLCJoZXJvX2tleV9uYW1lIiwieF90aWxlX3Bvc2l0aW9uIiwieV90aWxlX3Bvc2l0aW9uIiwic2V0X3NoYWRvdyIsImNhbWVyYV9mb2xsb3ciLCJDb2xsaXNpb24iLCJjb25maWdfYm9keSIsImNvbmZpZ19jb2xsaXNpb25fZ3JvdXBzIiwiY29uZmlnX2FsbF9ib2RpZXMiLCJjb25maWdfY29sbGlzaW9ucyIsInVwZGF0ZUJvdW5kc0NvbGxpc2lvbkdyb3VwIiwiaW5pdGlhbGl6ZV9nYW1lX21haW5fY29udHJvbHMiLCJUaWxlRXZlbnRNYW5hZ2VyIiwiR2FtZUV2ZW50TWFuYWdlciIsImNyZWF0ZUN1cnNvcktleXMiLCJzZXR1cFNjYWxlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiZnVsbFNjcmVlblNjYWxlTW9kZSIsIlNjYWxlTWFuYWdlciIsIlNIT1dfQUxMIiwib25UYXAiLCJwb2ludGVyIiwiaXNfZG91YmxlX2NsaWNrIiwic3RhcnRGdWxsU2NyZWVuIiwib25GdWxsU2NyZWVuQ2hhbmdlIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJRIiwiZmllbGRfYWJpbGl0aWVzX2xpc3QiLCJtb3ZlIiwiY2FzdCIsImluaXRpYWxfc2hvcnRjdXRzIiwiVyIsImZyb3N0IiwiRSIsImdyb3d0aCIsImhvcml6b250YWxfbWVudSIsInVwZGF0ZV90aWxlX3Bvc2l0aW9uIiwiZmlyZV90cmlnZ2VyZWRfZXZlbnRzIiwiY2hlY2tfdGlsZV9ldmVudHMiLCJzZXRfZGVidWdfaW5mbyIsImZpbGxfa2V5X2RlYnVnX3RhYmxlIiwiZmlsbF9zdGF0c19kZWJ1Z190YWJsZSIsImRlYnVnX3BoeXNpY3MiLCJncmlkIiwiZGVidWdfa2V5cyIsImRlYnVnX3N0YXRzIiwic2hvd19mcHMiLCJEIiwidG9nZ2xlX2RlYnVnX3BoeXNpY3MiLCJHIiwidG9nZ2xlX2dyaWQiLCJLIiwidG9nZ2xlX2tleXMiLCJTIiwidG9nZ2xlX3N0YXRzIiwiRiIsInRvZ2dsZV9mcHMiLCJmbGFnIiwiaXNfaW50ZXJhY3RhYmxlX29iamVjdCIsInVwZGF0ZV9kZWJ1Z19waHlzaWNzIiwidG9nZ2xlciIsImlzX2Rvd24iLCJjbGFzc19saXN0Iiwia2V5Q29kZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5Iiwib25rZXlkb3duIiwib25rZXl1cCIsImlubmVySFRNTCIsInRvRml4ZWQiLCJmcHMiLCJ0aWxlX3dpZHRoIiwid29ybGQiLCJnZW9tIiwiTGluZSIsInRpbGVfaGVpZ2h0IiwiUmVjdGFuZ2xlIiwiQ2lyY2xlIiwicG9pbnQiLCJtb3VzZVBvaW50ZXIiLCJ3aXRoaW5HYW1lIiwibW91c2VfeCIsIm1vdXNlX3kiLCJkaXIiLCJpbm5lclRleHQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VsZWN0X2VsZW1lbnQiLCJkZWJ1Z19zdGF0c19pbmZvIiwiY2hhcnMiLCJzZWxlY3RlZCIsImxpc3RlbmVyIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJqb2luIiwiYnVmZl9odG1sIiwibG9hZF9kYl9maWxlcyIsImltYWdlIiwibG9hZF9taXNjIiwibG9hZF9hc3NldHMiLCJsb2FkX2J1dHRvbnMiLCJiaXRtYXBGb250IiwibG9hZF9mb250cyIsInNjcmlwdCIsImNvbmZpZ193b3JsZCIsImNyZWF0ZUNvbGxpc2lvbkdyb3VwIiwiaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3VwcyIsIm1heF9sYXllcnNfY3JlYXRlZCIsInN0YXJ0U3lzdGVtIiwiUGh5c2ljcyIsIlAySlMiLCJzZXRJbXBhY3RFdmVudHMiLCJkZWZhdWx0Q29udGFjdE1hdGVyaWFsIiwicmVzdGl0dXRpb24iLCJyZWxheGF0aW9uIiwiZnJpY3Rpb24iLCJjb250YWN0U2tpblNpemUiLCJzZXRHbG9iYWxTdGlmZm5lc3MiLCJsYXllcl9pbmRleCIsImNvbGxpc2lvbl9sYXllcnNfbnVtYmVyIiwiY29sbGlkZV9pbmRleCIsIm5ld19jb2xsaWRlcl9sYXllcl9pbmRleCIsImxheWVycyIsImlzX292ZXIiLCJvdmVyIiwibGF5ZXJfeiIsImFkZEF0Iiwicm90YXRpb25fa2V5Iiwicm90YXRpb25fbm9ybWFsIiwic3BlZWRzIiwiYXJyb3dfaW5wdXRzIiwic2V0X2RpcmVjdGlvbiIsImNvbnRhY3QiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2JvZHkiLCJib2R5QSIsImJvZHlCIiwiZXZlbnRzX2luX3BvcyIsImhhc19zdGFpciIsIml0ZW1fcG9zaXRpb24iLCJnZXRfY3VycmVudF9wb3NpdGlvbiIsInBvc2l0aW9uX2FsbG93ZWQiLCJub3JtYWxzIiwibmFycm93cGhhc2UiLCJjb250YWN0RXF1YXRpb25zIiwibm9ybWFsQSIsImNoZWNrX2ludGVyYWN0YWJsZV9vYmplY3RzIiwiY29udGFjdF9wb2ludF9kaXJlY3Rpb25zIiwibm9ybWFsIiwid2FsbF9kaXJlY3Rpb24iLCJyZWxhdGl2ZV9kaXJlY3Rpb24iLCJ1cGRhdGVfYXJyb3dfaW5wdXRzIiwic2V0X3NwZWVkX2ZhY3RvcnMiLCJzZXRfY3VycmVudF9hY3Rpb24iLCJjb2xsaXNpb25fZGVhbGVyIiwic2V0Q2lyY2xlIiwibWFzcyIsImluZXJ0aWEiLCJFdmVudFF1ZXVlIiwiY2xpbWJfZXZlbnQiLCJxdWV1ZSIsInRoaXNfYWN0aXZhdGlvbl9kaXJlY3Rpb24iLCJmaXJlX2Z1bmN0aW9uIiwiZmlyZSIsImV2ZW50X3RpbWVycyIsInRyaWdnZXJlZF9ldmVudHMiLCJ1bnNldCIsImN1cnJlbnRfZXZlbnQiLCJldmVudF9xdWV1ZSIsImp1bXBfbmVhcl9jb2xsaXNpb24iLCJhZHZhbmNlX2VmZmVjdCIsImV2ZW50X3RyaWdnZXJlZCIsInNldCIsInRpbWVyIiwiZmlyZV9ldmVudCIsInByb2Nlc3NfcXVldWUiLCJpbnRlcmFjdGFibGVfb2JqZWN0c19kYiIsIm1pc2NfYW5pbWF0aW9uc19kYiIsImNsYXNzZXNfZGIiLCJhYmlsaXRpZXNfZGIiLCJpdGVtc19kYiIsImRqaW5uaV9kYiIsImVuZW1pZXNfZGIiLCJtYXBzX2RiIiwibWFpbl9jaGFyc19kYiIsIm1hcEtleXMiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2RhdGEiLCJlbmVteV9wYXJ0eV9kYXRhIiwibnBjX2RhdGEiLCJzdW1tb25fZGF0YSIsImNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIiLCJjbGltYmluZ19vbmx5IiwiYWN0aXZhdGlvbl9kaXJlY3Rpb24iLCJmaW5pc2hfY2xpbWJpbmciLCJzdGFydF9jbGltYmluZyIsImNoYW5nZV9tYXBfYm9keSIsInhfdHdlZW4iLCJ5X3R3ZWVuIiwiY3JlYXRlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMiLCJvdXRfdGltZSIsImVuZF9hbmltYXRpb24iLCJmaW5hbF9zaGFkb3dfcG9zIiwicmVtb3ZlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMiLCJwb3N0aW9ucyIsImNsaW1iIiwiY29sbGlzaW9uX3RpbGVzIiwidGlsZV9zaGlmdCIsImNvbGxpc2lvbl90aWxlc19ib2RpZXMiLCJjb2xsaWRlX3dpdGhfbWFwIiwiYm9kaWVzIiwiaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcyIsImludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMiLCJhbGxvd2VkX3RpbGVzIiwibm90X2FsbG93ZWRfdGlsZXMiLCJpbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQiLCJjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9ucyIsImdldF9ldmVudCIsImJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0Iiwic2hpZnRfeCIsInNoaWZ0X3kiLCJhbmNob3Jfc2hpZnQiLCJpbml0aWFsX2FuaW1hdGlvbiIsIm1hcF9ldmVudHMiLCJ4X3NoaWZ0IiwieV9zaGlmdCIsImFjdGl2ZV9ldmVudCIsInNldF9qdW1wX3R5cGVfZXZlbnQiLCJzZXRfanVtcF9hcm91bmRfZXZlbnQiLCJzZXRfc3RhaXJfZXZlbnQiLCJub3RfYWxsb3dlZF90aWxlIiwibm90X2FsbG93ZWRfdGlsZV90ZXN0IiwidGhpc19ldmVudF9sb2NhdGlvbl9rZXkiLCJuZXdfZXZlbnQiLCJpbnNlcnRfZXZlbnQiLCJjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uIiwibGFzdF95X3NoaWZ0IiwiZXZlbnRfZGF0YSIsInRoaXNfbG9jYXRpb25fa2V5IiwiY29sbGlzaW9uX2dyb3VwcyIsImNyZWF0aW5nX2Jsb2NraW5nX3N0YWlyX2Jsb2NrIiwiQkFTRV9XSURUSCIsIlBPU19YIiwiUE9TX1kiLCJzZXRfc2luZ2xlX2xpbmVfdGV4dCIsInRleHRfc2l6ZSIsInZlcnRpY2FsX2FkanVzdCIsInRhcmdldF9tYXhfcmFuZ2UiLCJhY3Rpb25fa2V5X25hbWUiLCJuZWVkX3RhcmdldCIsImJvb3RzdHJhcF9tZXRob2QiLCJjYXN0X2ZpbmlzaGVyIiwiY29udHJvbGxhYmxlX2NoYXIiLCJ0YXJnZXRfZm91bmQiLCJ0YXJnZXRfb2JqZWN0Iiwic3RvcF9jYXN0aW5nIiwiZmllbGRfcHN5bmVyZ3lfd2luZG93IiwiY2FzdF9kaXJlY3Rpb24iLCJtZXRob2QiLCJtaW5feCIsIm1heF94IiwibWluX3kiLCJtYXhfeSIsInNxcl9kaXN0YW5jZSIsIkluZmluaXR5IiwicHN5bmVyZ3lfa2V5cyIsIml0ZW1feF9weCIsIml0ZW1feV9weCIsInlfY29uZGl0aW9uIiwidGhpc19zcXJfZGlzdGFuY2UiLCJpbnRlcmFjdGlvbl90eXBlIiwiY2FzdGVkX3Byb3BlcnR5IiwiY2FzdGVyX2tleV9uYW1lIiwicmVzZXRfbWFwIiwic2VuZF90b19mcm9udCIsImdldF9jYXN0X2RpcmVjdGlvbiIsInNlYXJjaF9mb3JfdGFyZ2V0Iiwic2V0X3RhcmdldF9jYXN0ZWQiLCJzZXRfaGVyb19jYXN0X2FuaW0iLCJhZnRlcl9pbml0IiwiYWZ0ZXJfZGVzdHJveSIsImJlZm9yZV9kZXN0cm95Iiwic3RvcF9hc2tlZCIsImJhY2tfYXVyYSIsImZyb250X2F1cmEiLCJzb3J0X2Z1bmN0aW9uIiwic3RlcF9oZWlnaHQiLCJpbml0aWFsX2Zyb250X3kiLCJpbml0aWFsX2JhY2tfeSIsImF1cmFzIiwidHdlZW5fYSIsInR3ZWVuX2IiLCJ0d2Vlbl9jIiwidHdlZW5fYWEiLCJyaW5nX3VwX3RpbWUiLCJPdXQiLCJ0d2Vlbl9jYyIsImJsaW5rX2NvdW50ZXIiLCJibGlua190aW1lciIsImh1ZV90aW1lciIsImdyYXkiLCJodWVfYWRqdXN0IiwiYXN5bmMiLCJpbml0X2Nhc3RfYXVyYSIsImNvbG9yaXplX2ludGVuc2l0eSIsImNvbG9yaXplIiwidGludF9tYXBfbGF5ZXJzIiwic2V0X2Jvb3RzdHJhcF9tZXRob2QiLCJpbml0X21vdmUiLCJzZXRfY2FzdF9maW5pc2hlcl9tZXRob2QiLCJ1bnNldF9odWVfc2hpZnRlciIsImhhbmRfc3ByaXRlX2Jhc2UiLCJoYW5kX3Nwcml0ZSIsImVtaXR0ZXIiLCJmaW5hbF9lbWl0dGVyIiwiY29udHJvbHNfYWN0aXZlIiwiZmlyZV9wdXNoIiwiZmluaXNoX2hhbmQiLCJ1bnNldF9oZXJvX2Nhc3RfYW5pbSIsInhfdGFyZ2V0IiwieV90YXJnZXQiLCJuZWVkX2NoYW5nZSIsImRlc3RfZGlyZWN0aW9uIiwic29ydF9zcHJpdGVzIiwiZ2V0RnJhbWVOYW1lIiwidHJhbnNsYXRlX3giLCJ0cmFuc2xhdGVfeSIsImFuaW1fa2V5IiwidGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyIiwiZmxpcF90aW1lciIsImZha2VfaGFuZF9zY2FsZSIsInN0YXJ0X2ZpbmFsX2VtaXR0ZXIiLCJ1bnNldF9lbWl0dGVyIiwibWFrZVBhcnRpY2xlcyIsIm1pblBhcnRpY2xlU3BlZWQiLCJtYXhQYXJ0aWNsZVNwZWVkIiwiZ3Jhdml0eSIsInBhcnRpY2xlIiwic2V0RnJhbWUiLCJmaW5hbF9lbWl0dGVyX3BhcnRpY2xlc19jb3VudCIsImxpZmV0aW1lIiwidW5zZXRfZmluYWxfZW1pdHRlciIsInNldF9lbWl0dGVyIiwic2V0X2ZpbmFsX2VtaXR0ZXIiLCJzZXRfaGFuZCIsInRyYW5zbGF0ZV9oYW5kIiwic3RhcnRfZW1pdHRlciIsIlRPVEFMX1RVUk5TX1NOT1dGTEFLRVMiLCJpbml0X3Nub3dmbGFrZXMiLCJzbm93Zmxha2Vfc3ByaXRlIiwicm90YXRpb25fZmFjdG9yIiwieF9kZXN0IiwieV9kZXN0Iiwic3BpcmFsX2FuZ2xlIiwic2lnbl94Iiwic2lnbl95IiwiU05PV0ZMQUtFU19DT1VOVCIsImluaXRfcGlsbGFyIiwiY29sb3JfZmlsdGVycyIsImdyb3dfcGlsbGFyIiwic2V0X3Blcm1hbmVudF9ibGluayIsIm9uRGVzdHJveSIsImluaXRfYnViYmxlcyIsIm1heF94X3NwZWVkIiwibWF4X3lfc3BlZWQiLCJtaW5feF9zcGVlZCIsIm1pbl95X3NwZWVkIiwiZW1pdHRlcl93aWR0aCIsImVtaXR0ZXJfaGVpZ2h0IiwiaW5jcmVhc2VfZHVyYXRpb24iLCJHUk9XVEhfTUFYX1JBTkdFIiwicGFydGljbGVfZmlsdGVyIiwibWF4UGFydGljbGVTY2FsZSIsIm1pblBhcnRpY2xlU2NhbGUiLCJncm93X3Nwcm91dCIsIm1pc3NfdGFyZ2V0IiwiZ3Jvd19jZW50ZXJfeCIsImdyb3dfY2VudGVyX3kiLCJtaXNzX3RhcmdldF9zcHJpdGUiLCJkZXN0X2NvbGxpZGVyX2xheWVyIiwib3Blbl9kb29yIiwiY2FtZXJhX2ZhZGVfaW4iLCJsZXJwIiwiY2hhbmdlX21hcCIsInVuc2V0X21hcCIsIm5leHRfbWFwX2tleV9uYW1lIiwidGFyZ2V0X2NvbGxpc2lvbl9sYXllciIsInNldEJvdW5kc1RvV29ybGQiLCJib3VuZHMiLCJjYW1lcmFfZmFkZV9vdXQiLCJucGNzIiwibnBjIiwiZmxhc2giLCJvbkZsYXNoQ29tcGxldGUiLCJkb29yX2xheWVyIiwic2FtcGxlX3RpbGUiLCJnZXRUaWxlIiwiZG9vcl90eXBlX2luZGV4IiwiZG9vcl90eXBlIiwidGlsZXNldHMiLCJ0aWxlUHJvcGVydGllcyIsInNvdXJjZV9pbmRleCIsImNsb3NlX2Rvb3JfaW5kZXgiLCJvZmZzZXRzIiwiYmFzZV94IiwiY2xvc2VfZG9vciIsImJhc2Vfb2Zmc2V0IiwiZmluZEtleSIsInN0ZXBfZGlyZWN0aW9uIiwibmV4dF94IiwibmV4dF95Iiwic2V0X3RyaWdnZXJlZF9ldmVudCIsInVuc2V0X3RyaWdnZXJlZF9ldmVudCIsInRpbGVzZXRfbmFtZSIsInBoeXNpY3NfbmFtZXMiLCJ0aWxlc2V0X2ltYWdlX3VybCIsInRpbGVzZXRfanNvbl91cmwiLCJwaHlzaWNzX2pzb25zX3VybCIsImxhenlfbG9hZCIsImFzc2V0c19sb2FkZWQiLCJzZW5kX3RvX2JhY2tfbGlzdCIsInNlbmRfdG9fZnJvbnRfbGlzdCIsImhhc19zb3J0X2Z1bmN0aW9uIiwieV9zb3J0IiwiR3JvdXAiLCJTT1JUX0FTQ0VORElORyIsInNoYWRvd19pbmRleCIsInNlbmRDaGlsZFRvQmFjayIsImJyaW5nQ2hpbGRUb1RvcCIsImZyZWV6ZV9ib2R5Iiwib25fY29tcGxldGUiLCJsb2FkX3RpbGVtYXBfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF9pbWFnZV9wcm9taXNlX3Jlc29sdmUiLCJsb2FkX3RpbGVtYXBfcHJvbWlzZSIsInRpbGVtYXAiLCJUaWxlbWFwIiwiVElMRURfSlNPTiIsImxvYWRfaW1hZ2VfcHJvbWlzZSIsInBoeXNpY3NfcHJvbWlzZXMiLCJsb2FkX3BoeXNpY3NfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF9waHlzaWNzX3Byb21pc2UiLCJsb2FkUG9seWdvbiIsImludGVyYWN0YWJsZV9vYmoiLCJyYXdfcHJvcGVydHkiLCJwcm9wZXJ0eV9pbmZvIiwicGFyc2UiLCJpbml0aWFsbHlfYWN0aXZlIiwiTlBDIiwicHN5bmVyZ3lfa2V5IiwicHVzaGFibGUiLCJpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvIiwic2V0QWN0aW9uU3ByaXRlc2hlZXQiLCJzZXRBY3Rpb25EaXJlY3Rpb25zIiwiZnJhbWVzX2NvdW50Iiwic2V0QWN0aW9uRnJhbWVSYXRlIiwic2V0QWN0aW9uTG9vcCIsImdlbmVyYXRlQWxsRnJhbWVzIiwibG9hZFNwcml0ZXNoZWV0cyIsImluaXRpYWxfY29uZmlnIiwiaW5pdGlhbGl6ZV9yZWxhdGVkX2V2ZW50cyIsIm5wY19zcHJpdGVfaW5mbyIsInNoYWRvd19rZXkiLCJzZXRfc3ByaXRlX2FzX25wYyIsImNyZWF0ZUxheWVyIiwicmVzaXplV29ybGQiLCJsb2FkX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfcHJvbWlzZSIsImxvYWRfbWFwX2Fzc2V0cyIsImFkZFRpbGVzZXRJbWFnZSIsInRpbGVzZXQiLCJ0aWxlX2luZGV4Iiwic3RhcnRzV2l0aCIsImNyZWF0ZV90aWxlX2V2ZW50cyIsImNyZWF0ZV9ucGNzIiwiY3JlYXRlX2ludGVyYWN0YWJsZV9vYmplY3RzIiwiY29uZmlnX2xheWVycyIsImNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0IiwiY29uZmlnX25wYyIsImZvb3RwcmludCIsInNwcml0ZXNfdG9fcmVtb3ZlIiwiV09SS0lOR19XSURUSCIsIlNMT1RfV0lEVEgiLCJTTE9UX1dJRFRIX0NFTlRFUiIsInNlbGVjdGVkX3kiLCJ1bnNlbGVjdGVkX3kiLCJzZXRfY2hhcnMiLCJsaW5lX2luZGV4IiwiZ2V0X21heF9wZXJfbGluZSIsImdldF9zZWxlY3RlZF9idXR0b25faW5kZXgiLCJzZXRfc2VsZWN0ZWRfYnV0dG9uX2luZGV4IiwiaXNfYWN0aXZhdGVkIiwiY2hhcl9idXR0b25zIiwib2xkX2luZGV4IiwibmV3X2luZGV4IiwicGFydHlfaW5kZXgiLCJhdmF0YXJfZ3JvdXAiLCJ4X2F2YXRhciIsInlfYXZhdGFyIiwibmFtZV90ZXh0IiwibHZfdGV4dCIsImNsYXNzX3RleHQiLCJocF90ZXh0IiwibWF4X2hwX3RleHQiLCJtYXhfcHBfdGV4dCIsImV4cF90ZXh0IiwiaW5pdGlhbF9jaGFyIiwic2V0X2NoYXIiLCJISUdITElHSFRfSEVJR0hUIiwiaXNfcHN5bmVyZ3lfd2luZG93IiwiZWxlbWVudF9saXN0IiwiZWxlbWVudF9zcHJpdGVfa2V5Iiwid2luZG93X2FjdGl2YXRlZCIsImNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMiLCJzcHJpdGVfcGFpciIsInNlbGVjdGVkX2VsZW1lbnRfaW5kZXgiLCJnZXRfcGFnZV9udW1iZXIiLCJnZXRfZWxlbV9wZXJfcGFnZSIsInBhZ2VfY2hhbmdlIiwiZWxlbWVudF9jaGFuZ2UiLCJnZXRfZWxlbWVudF9pbmRleCIsInNldF9lbGVtZW50X2luZGV4Iiwic2VsZWN0ZWRfZWxlbWVudF90d2VlbiIsImdldF9lbGVtZW50X2tleV9uYW1lIiwiaXRlbV9vYmpzIiwiZWxlbV9rZXlfbmFtZSIsIlBTWV9PVkVSVklFV19XSU5fV0lEVEgiLCJ4X2VsZW1fcHBfY29zdCIsInNldF9lbGVtZW50X3R3ZWVuIiwic2V0X2VsZW1lbnRzIiwiY2hhcl9pbmRleCIsIm9wZW5fY2FsbGJhY2siLCJ1bnNldF9lbGVtZW50X3R3ZWVuIiwidW5zZXRfaGlnaGxpZ2h0X2JhciIsIlRPVEFMX0JPUkRFUiIsIlBTWV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPIiwiY2hhcnNfbWVudSIsImNoYXJfY2hvb3NlIiwiY2hhcl9jaGFuZ2UiLCJiYXNpY19pbmZvX3dpbmRvdyIsInNlbGVjdGVkX2NoYXJfaW5kZXgiLCJndWlkZV93aW5kb3ciLCJndWlkZV93aW5kb3dfdGV4dCIsImNob29zaW5nX3BzeW5lcmd5IiwiZ3VpZGVfd2luZG93X21zZ3MiLCJjaG9vc2luZ19jaGFyIiwiZGVzY3JpcHRpb25fd2luZG93X3RleHQiLCJwc3luZXJneV9vdmVydmlld193aW5kb3ciLCJzaG9ydGN1dHNfd2luZG93Iiwic2hvcnRjdXRzX3dpbmRvd190ZXh0IiwicHN5bmVyZ3lfY2hvb3NlX3dpbmRvdyIsInBzeW5lcmd5X2NoYW5nZSIsInBzeW5lcmd5X2Nob29zZSIsInNldF9wc3luZXJneV9pY29ucyIsInNldF9ndWlkZV93aW5kb3dfdGV4dCIsInNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCIsImNvaW5zIiwiY2VpbCIsImNsb3NlX21lbnVfYmVsb3ciLCJpY29uX25hbWUiLCJpdGVtX2NvdW50X3Nwcml0ZSIsImFuc3dlcl9pbmRleCIsImRyb3BwZWQiLCJnZXRfYW5zd2VyX2luZGV4Iiwic2V0X2Fuc3dlcl9pbmRleCIsInF1YW50aXR5X3RvX3JlbW92ZSIsIklORk9fWCIsIklDT05fWSIsInJlbW92ZV9pdGVtIiwidW5zZXRfaW5mbyIsIkl0ZW1Db3VudGVyIiwiYXZhaWxhYmxlX2l0ZW1zX2NvdW50IiwiY3VycmVudF9xdWFudGl0eSIsImFjdGl2ZV9iYXJfZ3JhcGhpY3MiLCJpbmFjdGl2ZV9iYXJfZ3JhcGhpY3MiLCJpbmRleF9jaGFuZ2VfdGltZSIsImNyZWF0ZV9ncmlkIiwiYWR2YW5jZV9zdGVwIiwiR1JJRF9IRUlHSFQiLCJNQVhfSVRFTVMiLCJHUklEX1dJRFRIIiwiaW5pdGlhbF9xdWFudGl0eSIsImNyZWF0ZV9pbmFjdGl2ZV9iYXIiLCJDSEFSX05BTUVfWSIsIlJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSIsImNob29zZW5fcXVhbnRpdHkiLCJpdGVtX2NvdW50ZXIiLCJyZW1haW5pbmdfd2l0aF9jaGFyX2NvdW50IiwibmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCIsInRvX3JlbW92ZV9jb3VudCIsImRlc3RpbmF0aW9uX2NoYXIiLCJkZXN0X2l0ZW1fb2JqIiwiaWNvbl9zcHJpdGUiLCJjaGFyX25hbWUiLCJkZXN0X2NoYXJfbmFtZSIsImVxdWlwX3Nwcml0ZSIsIklURU1fSUNPTl9ZIiwic2V0X2hlYWRlciIsImNvbmZpZyIsInVuc2V0X2hlYWRlciIsIkFDVElPTl9URVhUX1kiLCJhc2tpbmdfZm9yX2VxdWlwIiwieWVzX3RleHQiLCJub190ZXh0IiwiYWN0aW9uX3RleHQiLCJ0ZXh0X3Nwcml0ZXMiLCJ1c2UiLCJPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkciLCJkZXRhaWxzIiwiZ2l2ZSIsImRyb3AiLCJvcHRpb25fYWN0aXZlIiwiaG9yaXpvbnRhbF9pbmRleCIsInZlcnRpY2FsX2luZGV4IiwiZ2V0X2hvcml6b250YWxfaW5kZXgiLCJzZXRfaG9yaXpvbnRhbF9pbmRleCIsImdldF92ZXJ0aWNhbF9pbmRleCIsInNldF92ZXJ0aWNhbF9pbmRleCIsImdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdyIsIml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3ciLCJkcm9wX2l0ZW1fd2luZG93IiwiYWN0aW9uX21lc3NhZ2Vfd2luZG93Iiwic3RhdHNfdXBkYXRlX2NhbGxiYWNrIiwiZGVhY3RpdmUiLCJvbl9naXZlX2NhbGxiYWNrIiwiYWZ0ZXJfY2hvb3NlX2NhbGxiYWNrIiwidW5tb3VudF9naXZlX3dpbmRvd19zZXQiLCJhbnN3ZXIiLCJhZGRfaXRlbSIsIm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93Iiwib3Blbl9kcm9wX3dpbmRvdyIsImNvbXBhcmVfaXRlbXMiLCJzZXRfYXZhaWxhYmxlX29wdGlvbnMiLCJwcmV2aWV3X3N0YXRzX3RleHRzIiwiYXR0YWNrX3RleHQiLCJkZWZlbnNlX3RleHQiLCJhZ2lsaXR5X3RleHQiLCJzZXRfY29tcGFyZV9hcnJvd3MiLCJlcXVpcF9zbG90X3Byb3BlcnR5IiwiY3VycmVudF9zdGF0c19wcm9wZXJ0eSIsImNvbXBhcmVfcmVtb3ZpbmciLCJwcmV2aWV3X3N0YXRzIiwiZXF1aXBfc2xvdF9rZXlfbmFtZSIsInByZXZpZXdfc3RhdHNfYnlfZWZmZWN0IiwidXBkYXRlX3ByZXZpZXdfdGV4dCIsImN1cnJlbnRfc3RhdHMiLCJ1cGRhdGVfaW5mbyIsIklURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyIsImNoYXJfY2hvb3NlX2NhbmNlbCIsIml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdyIsImNob29zaW5nX2l0ZW0iLCJhcnJhbmdlX3dpbmRvdyIsImFycmFuZ2Vfd2luZG93X3RleHQiLCJpdGVtX292ZXJ2aWV3X3dpbmRvdyIsIml0ZW1fY2hvb3NlX3dpbmRvdyIsIml0ZW1fY2hhbmdlIiwiaXRlbV9jaG9vc2UiLCJpdGVtX29wdGlvbnNfd2luZG93IiwiY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiIsInNldF9pdGVtX2ljb25zIiwiYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZSIsInNoaWZ0X2l0ZW1fb3ZlcnZpZXciLCJvbl9pdGVtX2Nob29zZV9jbG9zZSIsInNldF9jaGFyX2J5X2luZGV4IiwiY2xvc2VfaXRlbV9jaG9vc2UiLCJDTEFTU19ZIiwiY2hhcl9jbGFzcyIsImxldmVsX251bWJlciIsIkRKSU5OX01VTFRfWCIsIkRKSU5OX01VTFRfWSIsIkNIQVJTX1giLCJDSEFSU19ZIiwib2tfbXNnX3RleHQiLCJkamlubl9zdGF0dXNfdGV4dCIsImRqaW5uX25hbWVfYmVmb3JlX3RleHQiLCJkamlubl9uYW1lX2FmdGVyX3RleHQiLCJkamlubl9zcHJpdGVzIiwiZGppbm5fc3RhdHVzX2Fycm93Iiwic3BhY2ViYXJfa2V5IiwiU1BBQ0VCQVJfS0VZX1giLCJTUEFDRUJBUl9LRVlfWSIsImFjdGlvbl9pbmZvX3RleHQiLCJpbml0X2Fycm93X2JsaW5rcyIsImRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lciIsIlNUQVJfQkVGT1JFX1giLCJTVEFSX0FGVEVSX1giLCJESklOTl9OQU1FX0FGVEVSX1giLCJESklOTl9OQU1FX0JFRk9SRV9YIiwic2V0X2NoYXJfYW5kX2RqaW5uX3Nwcml0ZSIsImRqaW5uX3giLCJkamlubl95IiwiY2hhcl9zcHJpdGUiLCJpZGxlIiwiZGppbm5fc3ByaXRlIiwiZGppbm5pX3Nwcml0ZXMiLCJyZXBlYXREZWxheSIsInVubW91bnRfd2luZG93IiwiZWxlbWVudHNfbGlzdCIsIndpbl94IiwiY2hhcl9uYW1lX3RleHQiLCJsZXZlbF9udW1iZXJfdGV4dCIsIm5ld19jbGFzc190ZXh0IiwiZGppbm5fbnVtYmVyX3RleHRzIiwic3RhdHNfY3VycmVudF90ZXh0cyIsInN0YXRzX25leHRfdGV4dHMiLCJjbGFzc19uYW1lX2Fycm93IiwiY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lciIsIkRKSU5OX05VTUJFUl9YIiwic3Rhcl9zcHJpdGUiLCJESklOTl9OVU1CRVJfWSIsImFycm93X3Nwcml0ZSIsInNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IiwiZXhlY3V0ZV9vcGVyYXRpb24iLCJzcGFjZWJhcl9jYWxsYmFjayIsInBhZ2Vfc2hpZnQiLCJoaWRkZW4iLCJWSUVXX1NUQVRFUyIsImNoYXJzX3Nwcml0ZXNfZ3JvdXAiLCJzZWxlY3RlZF9kamlubl9pbmRleCIsImNoYXJzX3Nwcml0ZXMiLCJkamlubnNfc3ByaXRlcyIsImRqaW5uX2Rlc2NyaXB0aW9uIiwiZ2V0X2hpZ2hsaWdodF9iYXIiLCJvbl9hY3Rpb25fYmFyX2hpZ2hsaWdodCIsImdldF9tYXhfY2hhcnMiLCJnZXRfbWF4X2RqaW5uIiwib25fY2hhcl9jaGFuZ2UiLCJvbl9kamlubl9jaGFuZ2UiLCJnZXRfY2hhcl9pbmRleCIsInNldF9jaGFyX2luZGV4IiwiZ2V0X3hfY3Vyc29yIiwiZ2V0X3lfY3Vyc29yIiwic2l6ZXMiLCJhY3RpdmVfZGppbm5fc3ByaXRlIiwiZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93IiwiZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdCIsImRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0IiwiZGppbm5fcHN5bmVyZ3lfd2luZG93IiwiaW5pdF9kamlubl9zcHJpdGVzIiwiaW5pdF9kamlubmlfc3RhdHVzX3RleHRzIiwiYmFyX2hpZ2hsaWdodCIsInNldHRpbmdfZGppbm5fc3RhdHVzIiwiY2FuY2VsX2RqaW5uX3N0YXR1c19zZXQiLCJzZXRfZGppbm5fb3BlcmF0aW9uIiwiY2hhbmdlX2RqaW5uX3N0YXR1cyIsInNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgiLCJzZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleCIsImRqaW5uaV9zdGF0dXNfdGV4dHMiLCJTVEFSX1hfUEFERElORyIsInN0YXJzIiwidXBkYXRlX2RqaW5uX2xpc3QiLCJjaGFyX2RqaW5uaSIsInRoaXNfZGppbm5fbmFtZXMiLCJISUdITElHSFRfWF9QQURESU5HIiwic3Rhcl95IiwiSElHSExJR0hUX1lfUEFERElORyIsIm5hbWVzIiwiZGppbm5fYWN0aW9uX3dpbmRvdyIsInNldF9hY3Rpb25fdGV4dCIsImNoYXJzX3F1aWNrX2luZm9fd2luZG93IiwidXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uIiwic2V0X2RqaW5uX3Nwcml0ZSIsInN0YXR1c190ZXh0Iiwib3RoZXJfY2hhciIsInNldF9hY3Rpb25fZm9yX3NwZWNpZmljX2RqaW5uIiwiZGFya2VuX2ZvbnRfY29sb3IiLCJkYXJrZW4iLCJyZXNldF9pbmRleCIsInRoaXNfc3RhdHVzZXMiLCJuZXh0X3N0YXR1c2VzIiwibmV4dF9kamlubmkiLCJuZXh0X2RqaW5uIiwidmlld19zdGF0ZSIsInJlcGxhY2VfZGppbm4iLCJzZXRfYWN0aW9uX2luZm9fdGV4dCIsImxvYWRfcGFnZSIsImNoYW5naW5nX2RqaW5uX3N0YXR1cyIsInVuc2V0X3BhZ2UiLCJhY3Rpb25fZGVzY3JpcHRpb25fdGV4dCIsImRqaW5uX25hbWVfdGV4dCIsInNoaWZ0X2tleSIsIlNISUZUX0tFWV9YIiwiU0hJRlRfS0VZX1kiLCJESklOTl9OQU1FX1giLCJESklOTl9OQU1FX1kiLCJkamlubmlfbGlzdF93aW5kb3ciLCJidXR0b25fcHJlc3MiLCJwc3luZXJneV9tZW51IiwiaXRlbV9tZW51IiwiZGppbm5fbWVudSIsImJ1dHRvbl9wcmVzc19hY3Rpb24iLCJtZW51IiwiY2xvc2VfdGhpc19tZW51IiwibG9hZF9tYXBzX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfbWFwc19wcm9taXNlIiwibG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlIiwibWFwcyIsIm1hcF9kYXRhIiwidGlsZXNldF9rZXlfbmFtZSIsImNvbGxpc2lvbl9rZXlfbmFtZXMiLCJ0aWxlc2V0X2ZpbGVzIiwiY29sbGlzaW9uX2ZpbGVzIiwibG9hZF9wcm9taXNlcyIsImxvYWRfbWFwX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfbWFwX3Byb21pc2UiLCJpbml0aWFsaXplX21hcHMiLCJjbGFzc19kYXRhIiwiaW5pdGlhbGl6ZV9jbGFzc2VzIiwibG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZSIsImxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlIiwiYmF0dGxlX3Nwcml0ZXNoZWV0IiwibG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUiLCJzcHJpdGVzaGVldF9pbWciLCJwb3NpdGlvbnMiLCJmcmFtZXNfbnVtYmVyIiwibG9hZF9zcHJpdGVzaGVldF9wcm9taXNlIiwiaW5pdGlhbGl6ZV9lbmVtaWVzIiwiZGppbm5fZGF0YSIsImluaXRpYWxpemVfZGppbm5pIiwibG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlIiwibG9hZF9hYmlsaXRpZXNfcHJvbWlzZV9yZXNvbHZlIiwic3RhbmRieSIsImZyYW1lc19yYXRlIiwiYmFzZV9wYXRoIiwiaW5pdGlhbGl6ZV9kamlubmlfc3ByaXRlcyIsImxvYWRfYWJpbGl0aWVzX3Byb21pc2UiLCJsb2FkX2l0ZW1zX3Byb21pc2VfcmVzb2x2ZSIsImFiaWxpdHlfZGF0YSIsImluaXRpYWxpemVfYWJpbGl0aWVzIiwibG9hZF9pdGVtc19wcm9taXNlIiwibG9hZF9jaGFyc19wcm9taXNlX3Jlc29sdmUiLCJpdGVtX2RhdGEiLCJpbml0aWFsaXplX2l0ZW1zIiwibG9hZF9jaGFyc19wcm9taXNlIiwibG9hZF9taXNjX3Byb21pc2VfcmVzb2x2ZSIsImNoYXJfZGF0YSIsImRpcmVjdGlvbnNfZnJhbWVzX251bWJlciIsImluaXRpYWxpemVfbWFpbl9jaGFycyIsImxvYWRfbWlzY19wcm9taXNlIiwibWlzY19kYiIsIm1pc2NfZGF0YSIsImluaXRpYWxpemVfbWlzY19kYXRhIiwiaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMiLCJpbml0aWFsaXplX21lbnUiLCJpdGFsaWNfZm9udCIsInBhcnRzIiwiZmluaXNoZWQiLCJhdmF0YXJfd2luZG93IiwiaGVyb19kaXJlY3Rpb24iLCJ1dGlscyIsImRpYWxvZ19jcnlzdGFsX3Nwcml0ZV9iYXNlIiwiZGlhbG9nX2NyeXN0YWwiLCJkaWFsb2dfY3J5c3RhbF9hbmltX2tleSIsImRpYWxvZ19jcnlzdGFsX3R3ZWVuIiwid2luX3BvcyIsImN1c3RvbV9wb3MiLCJjdXN0b21fYXZhdGFyX3BvcyIsImdldF9kaWFsb2dfd2luZG93X3Bvc2l0aW9uIiwibmV4dF9jYWxsYmFjayIsInJlYWxfeCIsInJlYWxfeSIsInR3ZWVuX3RvX3kiLCJJbk91dCIsImF2YXRhcl9wb3MiLCJnZXRfYXZhdGFyX3Bvc2l0aW9uIiwid2luZG93X3NpemUiLCJzZXRfaGVyb19kaXJlY3Rpb24iLCJtYXhfZWZlY3RpdmVfd2lkdGgiLCJ3aW5kb3dzIiwibGluZV93aWR0aCIsIm1heF93aW5kb3dfd2lkdGgiLCJ3b3JkIiwibGluZV90ZXh0IiwiaW50ZXJhY3Rpb25fcGF0dGVybnMiLCJUSUtfVEFLX1RPRSIsIkNST1NTIiwiY29udHJvbF9lbmFibGUiLCJmaXJlX25leHRfc3RlcCIsInNlYXJjaF9mb3JfbnBjIiwic2V0X25wY19ldmVudCIsImRpYWxvZ19tYW5hZ2VyIiwic2V0X2RpYWxvZyIsIm5wY194IiwibnBjX3kiLCJpbnRlcmFjdGlvbl9wYXR0ZXJuIiwiaW50ZXJhY3Rpb25fZGlyZWN0aW9ucyIsImdldF9pbnRlcmFjdGlvbl9kaXJlY3Rpb25zIiwidGFyZ2V0X2RpcmVjdGlvbiIsIm5leHQiLCJmaXJlX25wY19ldmVudHMiLCJ0YXJnZXRfYm9keV9yYWRpdXMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVB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QUFXZ29GLEdBQ2xIMUMsRUFBaUIsYUFBV2pvRixLQUM1QndxRixFQUFtQkgsSUFBd0JYLEVBQXFCQyxZQUFjLGFBQVcvcEYsTUFBUTRxRixHQUMxRnZnRSxHQUFVdm5CLEVBQVdpb0YsR0FBc0J4Z0UsR0FBVXhuQixFQUFXZ29GLEdBQ3ZFMUMsRUFBaUIsYUFBV2hvRixRQUM1QnVxRixFQUFtQkgsSUFBd0JYLEVBQXFCQyxZQUFjLGFBQVc5cEYsV0FBYTJxRixHQUMvRnZnRSxHQUFVdm5CLEVBQVdpb0YsR0FBc0IxZ0UsR0FBVXZuQixFQUFXaW9GLEdBQXNCeGdFLEdBQVV4bkIsRUFBV2dvRixJQUNsSDFDLEVBQWlCLGFBQVcvbkYsR0FDNUJzcUYsRUFBbUJILElBQXdCWCxFQUFxQkMsWUFBYyxhQUFXN3BGLEtBQU8wcUYsR0FHN0YsQ0FBQ3ZDLGVBQWdCQSxFQUFnQnVDLGlCQUFrQkEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvZGlzdC9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIxKTtcbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi9tYWdpY19udW1iZXJzLmpzJztcclxuXHJcbi8qRWxlbWVudCBrZXlzKi9cclxuZXhwb3J0IGNvbnN0IGVsZW1lbnRzID0ge1xyXG4gICAgVkVOVVM6IFwidmVudXNcIixcclxuICAgIE1FUkNVUlk6IFwibWVyY3VyeVwiLFxyXG4gICAgTUFSUzogXCJtYXJzXCIsXHJcbiAgICBKVVBJVEVSOiBcImp1cGl0ZXJcIixcclxuICAgIE5PX0VMRU1FTlQ6IFwibm9fZWxlbWVudFwiXHJcbn07XHJcblxyXG4vKkRlZmF1bHQgZWxlbWVudHMgb3JkZXIqL1xyXG5leHBvcnQgY29uc3Qgb3JkZXJlZF9lbGVtZW50cyA9IFtcclxuICAgIGVsZW1lbnRzLlZFTlVTLCBlbGVtZW50cy5NRVJDVVJZLCBlbGVtZW50cy5NQVJTLCBlbGVtZW50cy5KVVBJVEVSXHJcbl07XHJcblxyXG4vKkVsZW1lbnQgbmFtZXMqL1xyXG5leHBvcnQgY29uc3QgZWxlbWVudF9uYW1lcyA9IHtcclxuICAgIFtlbGVtZW50cy5WRU5VU106IFwiRWFydGhcIixcclxuICAgIFtlbGVtZW50cy5NRVJDVVJZXTogXCJXYXRlclwiLFxyXG4gICAgW2VsZW1lbnRzLk1BUlNdOiBcIkZpcmVcIixcclxuICAgIFtlbGVtZW50cy5KVVBJVEVSXTogXCJXaW5kXCJcclxufTtcclxuXHJcbi8qOC1EaXJlY3Rpb25hbCBkaXJlY3Rpb24gdmFsdWVzKi9cclxuZXhwb3J0IGNvbnN0IGRpcmVjdGlvbnMgPSB7XHJcbiAgICByaWdodDogMCxcclxuICAgIGRvd25fcmlnaHQ6IDEsXHJcbiAgICBkb3duOiAyLFxyXG4gICAgZG93bl9sZWZ0OiAzLFxyXG4gICAgbGVmdDogNCxcclxuICAgIHVwX2xlZnQ6IDUsXHJcbiAgICB1cDogNixcclxuICAgIHVwX3JpZ2h0OiA3XHJcbn07XHJcblxyXG4vKlNpemUgb2YgXCJkaXJlY3Rpb25zXCIgb2JqZWN0Ki9cclxuZXhwb3J0IGNvbnN0IGRpcmVjdGlvbnNfY291bnQgPSBPYmplY3Qua2V5cyhkaXJlY3Rpb25zKS5sZW5ndGg7XHJcblxyXG4vKjgtRGlyZWN0aW9uYWwgZGlyZWN0aW9uIGtleXMqL1xyXG5leHBvcnQgY29uc3QgcmV2ZXJzZV9kaXJlY3Rpb25zID0ge1xyXG4gICAgW2RpcmVjdGlvbnMucmlnaHRdOiBcInJpZ2h0XCIsXHJcbiAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IFwidXBfcmlnaHRcIixcclxuICAgIFtkaXJlY3Rpb25zLnVwXTogXCJ1cFwiLFxyXG4gICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IFwidXBfbGVmdFwiLFxyXG4gICAgW2RpcmVjdGlvbnMubGVmdF06IFwibGVmdFwiLFxyXG4gICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XTogXCJkb3duX2xlZnRcIixcclxuICAgIFtkaXJlY3Rpb25zLmRvd25dOiBcImRvd25cIixcclxuICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdOiBcImRvd25fcmlnaHRcIlxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBiYXNlX2FjdGlvbnMgPSB7XHJcbiAgICBJRExFOiBcImlkbGVcIixcclxuICAgIFdBTEs6IFwid2Fsa1wiLFxyXG4gICAgREFTSDogXCJkYXNoXCIsXHJcbiAgICBQVVNIOiBcInB1c2hcIixcclxuICAgIENMSU1COiBcImNsaW1iXCIsXHJcbiAgICBDQVNUOiBcImNhc3RcIlxyXG59O1xyXG5cclxuXHJcbi8qUmV0dXJucyB0aGUgYW5nbGUgZm9yIGFuIDgtRGlyZWN0aW9uYWwgdmFsdWVcclxuV29ya3MgY2xvY2t3aXNlIHN0YXJ0aW5nIHdpdGggXCJSaWdodFwiXHJcblxyXG5JbnB1dDogZGlyZWN0aW9uIFtudW1iZXJdOiAwLTcsIGNsb2Nrd2lzZSBzdGFydGluZyB3aXRoIFwiUmlnaHRcIlxyXG5cclxuT3V0cHV0OiBbbnVtYmVyXSAtIEFuZ2xlIGluIHJhZGlhbnMqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlyZWN0aW9uc19hbmdsZXMoZGlyZWN0aW9uKXsgLy9jbG9ja3dpc2UgZnJvbSBcInJpZ2h0XCJcclxuICAgIHJldHVybiBkaXJlY3Rpb24qTWF0aC5QSS80O1xyXG59XHJcblxyXG4vKk1hcHMgZGlyZWN0aW9uIGtleXMgdG8gdGhlaXIgdmFsdWVzXHJcblxyXG5JbnB1dDogYXJyIFthcnJheV0gLSBEaXJlY3Rpb24ga2V5cyAoYXJyYXkgb2Ygc3RyaW5nKVxyXG5cclxuT3V0cHV0OiBbYXJyYXldIC0gRGlyZWN0aW9uIHZhbHVlcyAoYXJyYXkgb2YgbnVtYmVyKSovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBfZGlyZWN0aW9ucyhhcnIpIHtcclxuICAgIGlmIChhcnIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGFycjtcclxuICAgIGFyciA9IEFycmF5LmlzQXJyYXkoYXJyKSA/IGFyciA6IFthcnJdO1xyXG4gICAgcmV0dXJuIGFyci5tYXAoa2V5ID0+IGRpcmVjdGlvbnNba2V5XSk7XHJcbn1cclxuXHJcbi8qUmV0dXJucyB0aGUgZGlyZWN0aW9uIHZhbHVlcyBmb3IgZGlhZ29uYWwgZGlyZWN0aW9uc1xyXG5FeGFtcGxlOiBJbnB1dDogNyAodXBfcmlnaHQpIC8gT3V0cHV0OiBbNiwwXVxyXG5cclxuSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIERpYWdvbmFsIGRpcmVjdGlvbiB2YWx1ZVxyXG5cclxuT3V0cHV0OiBbYXJyYXldIC0gQXJyYXkgd2l0aCBzcGxpdCBkaXJlY3Rpb24gdmFsdWVzKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0X2RpcmVjdGlvbihkaXJlY3Rpb24pIHtcclxuICAgIGlmKGRpcmVjdGlvbiUyPT09MCkgcmV0dXJuIFtkaXJlY3Rpb25dO1xyXG4gICAgXHJcbiAgICBsZXQgdmFscyA9IG5ldyBBcnJheSgyKTtcclxuICAgIHZhbHNbMF0gPSBkaXJlY3Rpb249PT1kaXJlY3Rpb25zLnJpZ2h0ID8gZGlyZWN0aW9uLnVwX3JpZ2h0IDogZGlyZWN0aW9uLTE7XHJcbiAgICB2YWxzWzFdID0gZGlyZWN0aW9uPT09ZGlyZWN0aW9ucy51cF9yaWdodCA/IGRpcmVjdGlvbnMucmlnaHQgOiBkaXJlY3Rpb24rMTtcclxuICAgIHJldHVybiB2YWxzO1xyXG59XHJcblxyXG4vKlJldHVybnMgdGhlIGRpYWdvbmFsIHZhbHVlIGZvciBpdHMgY29tcG9uZW50IGRpcmVjdGlvbnNcclxuRXhhbXBsZTogSW5wdXQ6IDYsIDAgKHVwLCByaWdodCkgLyBPdXRwdXQ6IDcgKHVwX3JpZ2h0KVxyXG5cclxuSW5wdXQ6IGRpcl8xLCBkaXJfMiBbbnVtYmVyXSAtIERpcmVjdGlvbiB2YWx1ZXNcclxuXHJcbk91dHB1dDogW251bWJlcl0gLSBEaWFnb25hbCBkaXJlY3Rpb24gdmFsdWVcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGpvaW5fZGlyZWN0aW9ucyhkaXJfMSwgZGlyXzIpIHtcclxuICAgIGRpcl8yID0gZGlyXzEgPT09IGRpcmVjdGlvbnMudXAgJiYgZGlyXzIgPT09IGRpcmVjdGlvbnMucmlnaHQgPyBkaXJlY3Rpb25zX2NvdW50IDogZGlyXzI7XHJcbiAgICByZXR1cm4gTWF0aC5taW4oZGlyXzEsZGlyXzIpKzE7XHJcbn1cclxuXHJcbi8qUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgKDAsNClcclxuXHJcbk91dHB1dDogW251bWJlcl0gLSBSYW5kb20gbnVtYmVyIGZyb20gMCB0byA0Ki9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhdGlvbigpIHtcclxuICAgIHJldHVybiBfLnJhbmRvbSgwLCA0KTtcclxufVxyXG5cclxuLypQbGFjZXMgdGhlIGFuZ2xlIChyYWRpYW5zKSBpbiB0aGUgWzAsMipQSV0gcmFuZ2VcclxuXHJcbklucHV0OiBhbmdsZSBbbnVtYmVyXSAtIEFuZ2xlIGluIHJhZGlhbnNcclxuT3V0cHV0OiBbbnVtYmVyXSAtIEFuZ2xlIGluIHRoZSBbMCwyKlBJXSByYW5nZSovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5nZV8zNjAoYW5nbGUpIHtcclxuICAgIGFuZ2xlID0gYW5nbGUgJSBudW1iZXJzLmRlZ3JlZTM2MDtcclxuICAgIGFuZ2xlID0gYW5nbGUgPCAwID8gYW5nbGUgKyBudW1iZXJzLmRlZ3JlZTM2MCA6IGFuZ2xlO1xyXG4gICAgcmV0dXJuIGFuZ2xlO1xyXG59XHJcblxyXG4vKkNoZWNrcyBwcm94aW1pdHkgaW4gZ2l2ZW4gcXVhZHJhbnRzXHJcblxyXG5JbnB1dDogcXVhZHJhbnRzIFthcnJheV0gLSBRdWFkcmFudHMgdG8gY2hlY2sgKGFycmF5IG9mIG51bWJlcilcclxuICAgICAgIHJhZGl1cyBbbnVtYmVyXSAtIFJhZGl1cyBvZiB0aGUgYm9keVxyXG4gICAgICAgcmFuZ2VfZmFjdG9yIFtudW1iZXJdIC0gQWRkaXRpb25hbCByYW5nZSBmYWN0b3JcclxuICAgICAgIHgsIHkgW251bWJlcl0gLSBUaGUgYm9keSdzIGNvb3JkaW5hdGVzXHJcbiAgICAgICB0YXJnZXRfeCwgdGFyZ2V0X3kgW251bWJlcl0gLSBUaGUgdGFyZ2V0J3MgY29vcmRpbmF0ZXNcclxuXHJcbk91dHB1dDogW2Jvb2xlYW5dKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzX2luc2lkZV9zZWN0b3IocXVhZHJhbnRzLCByYWRpdXMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KSB7XHJcbiAgICBjb25zdCByYW5nZV9yYWRpdXNfc3F1YXJlZCA9IChyYWRpdXMgKiByYW5nZV9mYWN0b3IpICogKHJhZGl1cyAqIHJhbmdlX2ZhY3Rvcik7XHJcbiAgICBjb25zdCB0YXJnZXRfcmFkaXVzX3NxdWFyZWQgPSBNYXRoLnBvdyh0YXJnZXRfeCAtIHgsIDIpICsgTWF0aC5wb3codGFyZ2V0X3kgLSB5LCAyKTtcclxuICAgIGNvbnN0IHRhcmdldF9hbmdsZSA9IHJhbmdlXzM2MChNYXRoLmF0YW4yKHkgLSB0YXJnZXRfeSwgdGFyZ2V0X3ggLSB4KSk7XHJcbiAgICBjb25zdCBhbmdsZXMgPSBbMCwgbnVtYmVycy5kZWdyZWU5MCwgTWF0aC5QSSwgbnVtYmVycy5kZWdyZWUyNzAsIG51bWJlcnMuZGVncmVlMzYwXTtcclxuICAgIGxldCBiZXR3ZWVuX2FuZ2xlcyA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFkcmFudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBsZXQgcXVhZHJhbnQgPSBxdWFkcmFudHNbaV07XHJcbiAgICAgICAgbGV0IHN0YXJ0X2FuZ2xlID0gYW5nbGVzW3F1YWRyYW50IC0gMV07XHJcbiAgICAgICAgbGV0IGVuZF9hbmdsZSA9IGFuZ2xlc1txdWFkcmFudF07XHJcbiAgICAgICAgYmV0d2Vlbl9hbmdsZXMgPSBlbmRfYW5nbGUgPj0gdGFyZ2V0X2FuZ2xlICYmIHRhcmdldF9hbmdsZSA+PSBzdGFydF9hbmdsZTtcclxuICAgICAgICBpZiAoYmV0d2Vlbl9hbmdsZXMpIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXRfcmFkaXVzX3NxdWFyZWQgPD0gcmFuZ2VfcmFkaXVzX3NxdWFyZWQgJiYgYmV0d2Vlbl9hbmdsZXM7XHJcbn1cclxuXHJcbi8qQ2hlY2tzIHByb3hpbWl0eSBiYXNlZCBvbiBjdXJyZW50IGRpcmVjdGlvblxyXG5cclxuSW5wdXQ6IGN1cnJlbnRfZGlyZWN0aW9uIFtudW1iZXJdIC0gVGhlIGN1cnJlbnQgZGlyZWN0aW9uXHJcbiAgICAgICB4LCB5IFtudW1iZXJdIC0gVGhlIGJvZHkncyBjb29yZGluYXRlc1xyXG4gICAgICAgdGFyZ2V0X3gsIHRhcmdldF95IFtudW1iZXJdIC0gVGhlIHRhcmdldCdzIGNvb3JkaW5hdGVzXHJcbiAgICAgICByYW5nZV9mYWN0b3IgW251bWJlcl0gLSBBZGRpdGlvbmFsIHJhbmdlIGZhY3RvclxyXG5cclxuT3V0cHV0OiBbYm9vbGVhbl0qL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNfY2xvc2UoY3VycmVudF9kaXJlY3Rpb24sIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSwgcmFuZ2VfZmFjdG9yKSB7XHJcbiAgICBzd2l0Y2ggKGN1cnJlbnRfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxyXG4gICAgICAgICAgICByZXR1cm4gaXNfaW5zaWRlX3NlY3RvcihbMSwgMl0sIG51bWJlcnMuSEVST19CT0RZX1JBRElVUywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpO1xyXG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cF9yaWdodDpcclxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzFdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcclxuICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsxLCA0XSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XHJcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd25fcmlnaHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFs0XSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XHJcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XHJcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFszLCA0XSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XHJcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd25fbGVmdDpcclxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzNdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcclxuICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcclxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzIsIDNdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcclxuICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXBfbGVmdDpcclxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzJdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qRGlyZWN0aW9uIHRyYW5zaXRpb25zXHJcblVzZWQgYmVpbmcgZm9yY2VkIHRvIGNoYW5nZSBkaXJlY3Rpb25zKi9cclxuZXhwb3J0IGNvbnN0IHRyYW5zaXRpb25zID0ge1xyXG4gICAgW2RpcmVjdGlvbnMudXBdIDoge1xyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXAsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLnVwX3JpZ2h0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF0gOiBkaXJlY3Rpb25zLmxlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy51cCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwXHJcbiAgICB9LFxyXG4gICAgW2RpcmVjdGlvbnMuZG93bl0gOiB7XHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dIDogZGlyZWN0aW9ucy5kb3duLFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdIDogZGlyZWN0aW9ucy5kb3duX3JpZ2h0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF0gOiBkaXJlY3Rpb25zLmRvd24sXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd24sXHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfbGVmdF0gOiBkaXJlY3Rpb25zLmxlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy5yaWdodFxyXG4gICAgfSxcclxuICAgIFtkaXJlY3Rpb25zLmxlZnRdIDoge1xyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0XSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XSA6IGRpcmVjdGlvbnMuZG93bixcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwXHJcbiAgICB9LFxyXG4gICAgW2RpcmVjdGlvbnMucmlnaHRdIDoge1xyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF0gOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF0gOiBkaXJlY3Rpb25zLmRvd24sXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy51cCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0XHJcbiAgICB9LFxyXG4gICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IHtcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF0gOiBkaXJlY3Rpb25zLnVwX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0XSA6IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd24sXHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfbGVmdF0gOiBkaXJlY3Rpb25zLmxlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy51cFxyXG4gICAgfSxcclxuICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdIDoge1xyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF0gOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bixcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XSA6IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0XHJcbiAgICB9LFxyXG4gICAgW2RpcmVjdGlvbnMudXBfbGVmdF0gOiB7XHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF0gOiBkaXJlY3Rpb25zLnVwX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdIDogZGlyZWN0aW9ucy51cF9yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdIDogZGlyZWN0aW9ucy5yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwXHJcbiAgICB9LFxyXG4gICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDoge1xyXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF0gOiBkaXJlY3Rpb25zLnVwX2xlZnQsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdIDogZGlyZWN0aW9ucy51cF9yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxyXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdIDogZGlyZWN0aW9ucy5yaWdodCxcclxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IGRpcmVjdGlvbnMudXAsXHJcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy51cF9yaWdodFxyXG4gICAgfSxcclxufTtcclxuXHJcbi8qUmV0dXJucyB0aGUgb3Bwb3NpdGUgb2YgdGhlIGdpdmVuIGRpcmVjdGlvblxyXG5cclxuSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIERpcmVjdGlvbiB2YWx1ZVxyXG5cclxuT3V0cHV0OiBbbnVtYmVyXSAtIE9wcG9zaXRlIGRpcmVjdGlvbiB2YWx1ZSovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uKGRpcmVjdGlvbikge1xyXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6IHJldHVybiBkaXJlY3Rpb25zLmRvd247XHJcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246IHJldHVybiBkaXJlY3Rpb25zLnVwO1xyXG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OiByZXR1cm4gZGlyZWN0aW9ucy5yaWdodDtcclxuICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6IHJldHVybiBkaXJlY3Rpb25zLmxlZnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qQXBwbHkgdGhlIHRyYW5zaXRpb24gZGlyZWN0aW9uc1xyXG5Vc2VkIHdoZW4gYmVpbmcgZm9yY2VkIHRvIGZhY2UgYSBkaWZmZXJlbnQgZGlyZWN0aW9uXHJcblxyXG5JbnB1dDogY3VycmVudF9kaXJlY3Rpb24gW251bWJlcl0gLSBDdXJyZW50IGRpcmVjdGlvbiB2YWx1ZVxyXG4gICAgICAgZGVzaXJlZF9kaXJlY3Rpb24gW251bWJlcl0gLSBEZXNpcmVkIGRpcmVjdGlvbiB2YWx1ZVxyXG5cclxuT3V0cHV0OiBbbnVtYmVyXSAtIFRoZSBkaXJlY3Rpb24gdmFsdWUgdG8gYXBwbHkqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucyhjdXJyZW50X2RpcmVjdGlvbiwgZGVzaXJlZF9kaXJlY3Rpb24pe1xyXG4gICAgcmV0dXJuIHRyYW5zaXRpb25zW2Rlc2lyZWRfZGlyZWN0aW9uXVtjdXJyZW50X2RpcmVjdGlvbl07XHJcbn1cclxuXHJcbi8qT2J0YWlucyB0aGUgdGV4dCB3aWR0aCBpbiBwaXhlbHMgKElORUZGSUNJRU5UKVxyXG5cclxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxyXG4gICAgICAgdGV4dCBbc3RyaW5nXSAtIFRleHQgc3RyaW5nKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldF90ZXh0X3dpZHRoKGdhbWUsIHRleHQsIGl0YWxpYyA9IGZhbHNlKSB7IC8vZ2V0IHRleHQgd2lkdGggaW4gcHggKGRpcnR5IHdheSlcclxuICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/ICdncy1pdGFsaWMtYm1wLWZvbnQnIDogJ2dzLWJtcC1mb250JztcclxuICAgIGxldCB0ZXh0X3Nwcml0ZSA9IGdhbWUuYWRkLmJpdG1hcFRleHQoMCwgMCwgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XHJcbiAgICBjb25zdCB0ZXh0X3dpZHRoID0gdGV4dF9zcHJpdGUud2lkdGg7XHJcbiAgICB0ZXh0X3Nwcml0ZS5kZXN0cm95KCk7XHJcbiAgICByZXR1cm4gdGV4dF93aWR0aDtcclxufVxyXG5cclxuLypSZXR1cm5zIHRoZSBzdXJyb3VuZGluZyBwb3NpdGlvbnNcclxuRGlhZ29uYWxzIGFyZSBvcHRpb25hbFxyXG5cclxuSW5wdXQ6IHgseSBbbnVtYmVyXSAtIFRoZSBib2R5J3MgcG9zaXRpb25cclxuICAgICAgIHdpdGhfZGlhZ29uYWxzIFtib29sZWFuXSAtIElmIHRydWUsIGluY2x1ZGVzIGRpYWdvbmFsc1xyXG4gICAgICAgc2hpZnQgW251bWJlcl0gLSBEaXN0YW5jZSB0byBjaGVjayovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3Vycm91bmRpbmdzKHgsIHksIHdpdGhfZGlhZ29uYWxzID0gZmFsc2UsIHNoaWZ0ID0gMSkge1xyXG4gICAgbGV0IHN1cnJvdW5kaW5ncyA9IFtcclxuICAgICAgICB7eDogeCAtIHNoaWZ0LCB5OiB5LCBkaWFnOiBmYWxzZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmxlZnR9LFxyXG4gICAgICAgIHt4OiB4ICsgc2hpZnQsIHk6IHksIGRpYWc6IGZhbHNlLCBkaXJlY3Rpb246IGRpcmVjdGlvbnMucmlnaHR9LFxyXG4gICAgICAgIHt4OiB4LCB5OiB5IC0gc2hpZnQsIGRpYWc6IGZhbHNlLCBkaXJlY3Rpb246IGRpcmVjdGlvbnMudXB9LFxyXG4gICAgICAgIHt4OiB4LCB5OiB5ICsgc2hpZnQsIGRpYWc6IGZhbHNlLCBkaXJlY3Rpb246IGRpcmVjdGlvbnMuZG93bn0sXHJcbiAgICBdO1xyXG4gICAgaWYgKHdpdGhfZGlhZ29uYWxzKSB7XHJcbiAgICAgICAgc3Vycm91bmRpbmdzID0gc3Vycm91bmRpbmdzLmNvbmNhdChbXHJcbiAgICAgICAgICAgIHt4OiB4IC0gc2hpZnQsIHk6IHkgLSBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLnVwX2xlZnR9LFxyXG4gICAgICAgICAgICB7eDogeCArIHNoaWZ0LCB5OiB5IC0gc2hpZnQsIGRpYWc6IHRydWUsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy51cF9yaWdodH0sXHJcbiAgICAgICAgICAgIHt4OiB4IC0gc2hpZnQsIHk6IHkgKyBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmRvd25fbGVmdH0sXHJcbiAgICAgICAgICAgIHt4OiB4ICsgc2hpZnQsIHk6IHkgKyBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmRvd25fcmlnaHR9LFxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1cnJvdW5kaW5ncztcclxufTtcclxuXHJcbi8qTGlzdHMgYWxsIGRpcmVjdGlvbnMsIGRpYWdvbmFscyBvcHRpb25hbFxyXG5cclxuSW5wdXQ6IHdpdGhfZGlhZ29uYWxzIFtib29sZWFuXSAtIElmIHRydWUsIGluY2x1ZGVzIGRpYWdvbmFscyovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfZGlyZWN0aW9ucyh3aXRoX2RpYWdvbmFscyA9IGZhbHNlKSB7XHJcbiAgICBsZXQgZGlycyA9IFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd24sIGRpcmVjdGlvbnMubGVmdCwgZGlyZWN0aW9ucy5yaWdodF07XHJcbiAgICBpZiAod2l0aF9kaWFnb25hbHMpIHtcclxuICAgICAgICBkaXJzLnB1c2goLi4uW2RpcmVjdGlvbnMudXBfbGVmdCwgZGlyZWN0aW9ucy51cF9yaWdodCwgZGlyZWN0aW9ucy5kb3duX2xlZnQsIGRpcmVjdGlvbnMuZG93bl9yaWdodF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRpcnM7XHJcbn1cclxuXHJcbi8qQ2FwaXRhbGl6ZXMgdGhlIGdpdmVuIHRleHRcclxuXHJcbklucHV0OiB0ZXh0IFtzdHJpbmddIC0gVGV4dCB0byBjaGFuZ2VcclxuICAgICAgIGxvd2VyIFtib29sZWFuXSAtIFdoZXRoZXIgdGhlIGZ1bGwgdGV4dCBzaG91bGQgYmUgbG93ZXJjYXNlZFxyXG5cclxuT3V0cHV0OiBbc3RyaW5nXSAtIENhcGl0YWxpemVkIHRleHQqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZSh0ZXh0LCBsb3dlciA9IGZhbHNlKXtcclxuICAgIHJldHVybiAobG93ZXIgPyB0ZXh0LnRvTG93ZXJDYXNlKCkgOiB0ZXh0KS5yZXBsYWNlKC8oPzpefFxcc3xbXCInKFt7XSkrXFxTL2csIG1hdGNoID0+IG1hdGNoLnRvVXBwZXJDYXNlKCkpO1xyXG59XHJcblxyXG4vKkNoYW5nZXMgdGhlIGJyaWdodG5lc3Mgb2YgYSBnaXZlbiBjb2xvciBjb2RlXHJcblxyXG5JbnB1dDogaGV4IFtudW1iZXJdIC0gSW5wdXQgY29sb3JcclxuICAgICAgIHBlcmNlbnQgW251bWJlcl0gLSBCcmlnaHRuZXNzIGZhY3RvclxyXG5cclxuT3V0cHV0IFtudW1iZXJdIC0gT3V0cHV0IGNvbG9yKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZV9icmlnaHRuZXNzKGhleCwgcGVyY2VudCkge1xyXG4gICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2UoL15cXHMqI3xcXHMqJC9nLCAnJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhleCA9IGhleC50b1N0cmluZygxNik7XHJcbiAgICB9XHJcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PSAzKSB7XHJcbiAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2UoLyguKS9nLCAnJDEkMScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBoZXggPSAoXCIwMDAwMDBcIiArIGhleCkuc2xpY2UoLTYpO1xyXG4gICAgfVxyXG4gICAgbGV0IHIgPSBwYXJzZUludChoZXguc3Vic3RyKDAsIDIpLCAxNik7XHJcbiAgICBsZXQgZyA9IHBhcnNlSW50KGhleC5zdWJzdHIoMiwgMiksIDE2KTtcclxuICAgIGxldCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cig0LCAyKSwgMTYpO1xyXG5cclxuICAgIGxldCBoLCBzLCB2O1xyXG4gICAgW2gsIHMsIHZdID0gcmdiMmhzdihyLCBnLCBiKTtcclxuICAgIHYgPSAodiAqIHBlcmNlbnQpIHwgMDtcclxuICAgIFtyLCBnLCBiXSA9IGhzdjJyZ2IoaCwgcywgdik7XHJcblxyXG4gICAgaGV4ID0gKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KGhleCwgMTYpO1xyXG59XHJcblxyXG4vKlRyYW5zZm9ybSBSR0IgY29sb3IgaW50byBIU1YgY29sb3JcclxuXHJcbklucHV0OiByLGcsYiBbbnVtYmVyXSAtIFJlZCwgR3JlZW4sIEJsdWUgY2hhbm5lbHNcclxuXHJcbk91dHB1dCBbYXJyYXldIC0gSHVlLCBTYXR1cmF0aW9uLCBWYWx1ZSBjaGFubmVscyAoYXJyYXkgb2YgbnVtYmVyKSovXHJcbmV4cG9ydCBmdW5jdGlvbiByZ2IyaHN2KHIsZyxiKSB7XHJcbiAgICBsZXQgdiA9IE1hdGgubWF4KHIsZyxiKSwgbiA9IHYtTWF0aC5taW4ocixnLGIpO1xyXG4gICAgbGV0IGggPSBuICYmICgodiA9PT0gcikgPyAoZy1iKS9uIDogKCh2ID09PSBnKSA/IDIrKGItcikvbiA6IDQrKHItZykvbikpOyBcclxuICAgIHJldHVybiBbNjAqKGg8MD9oKzY6aCksIHYmJm4vdiwgdl07XHJcbn1cclxuXHJcbi8qVHJhbnNmb3JtIEhTViBjb2xvciBpbnRvIFJHQiBjb2xvclxyXG5cclxuSW5wdXQ6IGgscyx2IFtudW1iZXJdIC0gSHVlLCBTYXR1cmF0aW9uLCBWYWx1ZSBjaGFubmVsc1xyXG5cclxuT3V0cHV0IFthcnJheV0gLSBSZWQsIEdyZWVuLCBCbHVlIChhcnJheSBvZiBudW1iZXIpKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhzdjJyZ2IoaCxzLHYpIHtcclxuICAgIGxldCBmID0gKG4saz0obitoLzYwKSU2KSA9PiB2IC0gdipzKk1hdGgubWF4KCBNYXRoLm1pbihrLDQtaywxKSwgMCk7XHJcbiAgICByZXR1cm4gW2YoNSksZigzKSxmKDEpXTtcclxufVxyXG5cclxuLypEZWZpbmVzIHRoZSBjb2xsaXNpb24gcG9seWdvblxyXG5cclxuSW5wdXQ6IHdpZHRoIFtudW1iZXJdIC0gV2lkdGggb2YgdGhlIGJvZHlcclxuICAgICAgIHNoaWZ0IFtudW1iZXJdIC0gU2hpZnQgdmFsdWVcclxuICAgICAgIGJldmVsIFtudW1iZXJdIC0gQm9keSdzIGJldmVsIHZhbHVlXHJcblxyXG5PdXRwdXQ6IFthcnJheV0gLSBNdWx0aWRpbWVuc2lvbmFsIGFycmF5IHdpdGggcG9pbnRzKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1vdW50X2NvbGxpc2lvbl9wb2x5Z29uKHdpZHRoLCBzaGlmdCwgYmV2ZWwpIHtcclxuICAgIGlmIChiZXZlbCA9PT0gdW5kZWZpbmVkKSBiZXZlbCA9IDA7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIFtiZXZlbCArIHNoaWZ0LCBzaGlmdF0sXHJcbiAgICAgICAgLi4uIGJldmVsID09PSAwID8gW10gOiBbW3dpZHRoIC0gYmV2ZWwgKyBzaGlmdCwgc2hpZnRdXSxcclxuICAgICAgICBbd2lkdGggKyBzaGlmdCwgYmV2ZWwgKyBzaGlmdF0sXHJcbiAgICAgICAgLi4uIGJldmVsID09PSAwID8gW10gOiBbW3dpZHRoICsgc2hpZnQsIHdpZHRoIC0gYmV2ZWwgKyBzaGlmdF1dLFxyXG4gICAgICAgIFt3aWR0aCAtIGJldmVsICsgc2hpZnQsIHdpZHRoICsgc2hpZnRdLFxyXG4gICAgICAgIC4uLiBiZXZlbCA9PT0gMCA/IFtdIDogW1tiZXZlbCArIHNoaWZ0LCB3aWR0aCArIHNoaWZ0XV0sXHJcbiAgICAgICAgW3NoaWZ0LCB3aWR0aCAtIGJldmVsICsgc2hpZnRdLFxyXG4gICAgICAgIC4uLiBiZXZlbCA9PT0gMCA/IFtdIDogW1tzaGlmdCwgYmV2ZWwgKyBzaGlmdF1dXHJcbiAgICBdO1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBHQU1FX1dJRFRIID0gMjQwO1xyXG5leHBvcnQgY29uc3QgR0FNRV9IRUlHSFQgPSAxNjA7XHJcbmV4cG9ydCBjb25zdCBUQVJHRVRfRlBTID0gNjA7XHJcbmV4cG9ydCBjb25zdCBIRVJPX0JPRFlfUkFESVVTID0gNy4wO1xyXG5leHBvcnQgY29uc3QgSU5WX1NRUlQyID0gMS9NYXRoLnNxcnQoMik7XHJcbmV4cG9ydCBjb25zdCBERUxUQV9USU1FX0ZBQ1RPUiA9IDUwLjAvMy4wO1xyXG5leHBvcnQgY29uc3QgTUFQX0RBTVBJTkcgPSAxO1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9XSU5ET1dfQ09MT1IgPSAweDAwNjA4MDtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRk9OVF9DT0xPUiA9IDB4RjhGOEY4O1xyXG5leHBvcnQgY29uc3QgWUVMTE9XX0ZPTlRfQ09MT1IgPSAweEY4Rjg0MDtcclxuZXhwb3J0IGNvbnN0IFJFRF9GT05UX0NPTE9SID0gMHhGODAwMDA7XHJcbmV4cG9ydCBjb25zdCBCTFVFX0ZPTlRfQ09MT1IgPSAweDAwMDBGODtcclxuZXhwb3J0IGNvbnN0IFBVUlBMRV9GT05UX0NPTE9SID0gMHhFMDcwQjA7XHJcbmV4cG9ydCBjb25zdCBGT05UX1NJWkUgPSA4O1xyXG5leHBvcnQgY29uc3QgSU5TSURFX0JPUkRFUl9XSURUSCA9IDM7XHJcbmV4cG9ydCBjb25zdCBPVVRTSURFX0JPUkRFUl9XSURUSCA9IDE7XHJcbmV4cG9ydCBjb25zdCBXSU5ET1dfUEFERElOR19IID0gNDtcclxuZXhwb3J0IGNvbnN0IFdJTkRPV19QQURESU5HX1RPUCA9IDg7XHJcbmV4cG9ydCBjb25zdCBXSU5ET1dfUEFERElOR19CT1RUT00gPSA0O1xyXG5leHBvcnQgY29uc3QgU1BBQ0VfQkVUV0VFTl9MSU5FUyA9IDU7XHJcbmV4cG9ydCBjb25zdCBNQVhfRElBR19XSU5fV0lEVEggPSAxODA7XHJcbmV4cG9ydCBjb25zdCBNQVhfTElORVNfUEVSX0RJQUdfV0lOID0gMztcclxuZXhwb3J0IGNvbnN0IE1BWF9ESUFHX1dJTl9IRUlHSFQgPSBGT05UX1NJWkUqTUFYX0xJTkVTX1BFUl9ESUFHX1dJTitTUEFDRV9CRVRXRUVOX0xJTkVTKihNQVhfTElORVNfUEVSX0RJQUdfV0lOLTEpK1dJTkRPV19QQURESU5HX1RPUCtXSU5ET1dfUEFERElOR19CT1RUT007XHJcbmV4cG9ydCBjb25zdCBQVVNIX1RJTUUgPSA4NTA7XHJcbmV4cG9ydCBjb25zdCBJQ09OX1dJRFRIID0gMTQ7XHJcbmV4cG9ydCBjb25zdCBJQ09OX0hFSUdIVCA9IDE0O1xyXG5leHBvcnQgY29uc3QgZGVncmVlMTUgPSAxNSAqIE1hdGguUEkvMTgwO1xyXG5leHBvcnQgY29uc3QgZGVncmVlMzAgPSAzMCAqIE1hdGguUEkvMTgwO1xyXG5leHBvcnQgY29uc3QgZGVncmVlNjAgPSA2MCAqIE1hdGguUEkvMTgwO1xyXG5leHBvcnQgY29uc3QgZGVncmVlOTAgPSBNYXRoLlBJLzI7XHJcbmV4cG9ydCBjb25zdCBkZWdyZWUxODAgPSBNYXRoLlBJO1xyXG5leHBvcnQgY29uc3QgZGVncmVlMjcwID0gMyAqIE1hdGguUEkvMjtcclxuZXhwb3J0IGNvbnN0IGRlZ3JlZTM2MCA9IDIgKiBNYXRoLlBJO1xyXG5leHBvcnQgY29uc3QgZGVncmVlNTQwID0gMyAqIE1hdGguUEk7XHJcbmV4cG9ydCBjb25zdCBDQU1FUkFfTEVSUCA9IDAuMTU7XHJcbmV4cG9ydCBjb25zdCBFTEVNX0FUVFJfTUlOID0gLTIwMDtcclxuZXhwb3J0IGNvbnN0IEVMRU1fQVRUUl9NQVggPSAyMDA7XHJcbmV4cG9ydCBjb25zdCBBVkFUQVJfU0laRSA9IDMyOyIsImltcG9ydCB7IHZhcmlhdGlvbiwgZWxlbWVudHMgfSBmcm9tIFwiLi91dGlscy5qc1wiXHJcblxyXG5leHBvcnQgY29uc3QgZWZmZWN0X3R5cGVzID0ge1xyXG4gICAgTUFYX0hQOiBcIm1heF9ocFwiLFxyXG4gICAgTUFYX1BQOiBcIm1heF9wcFwiLFxyXG4gICAgQVRUQUNLOiBcImF0dGFja1wiLFxyXG4gICAgREVGRU5TRTogXCJkZWZlbnNlXCIsXHJcbiAgICBBR0lMSVRZOiBcImFnaWxpdHlcIixcclxuICAgIExVQ0s6IFwibHVja1wiLFxyXG4gICAgUE9XRVI6IFwicG93ZXJcIixcclxuICAgIFJFU0lTVDogXCJyZXNpc3RcIixcclxuICAgIENVUlJFTlRfSFA6IFwiY3VycmVudF9ocFwiLFxyXG4gICAgQ1VSUkVOVF9QUDogXCJjdXJyZW50X3BwXCIsXHJcbiAgICBIUF9SRUNPVkVSWTogXCJocF9yZWNvdmVyeVwiLFxyXG4gICAgUFBfUkVDT1ZFUlk6IFwicHBfcmVjb3ZlcnlcIixcclxuICAgIENSSVRJQ0FMUzogXCJjcml0aWNhbHNcIixcclxuICAgIENPVU5URVJfU1RSSUtFOiBcImNvdW50ZXJfc3RyaWtlXCIsXHJcbiAgICBURU1QT1JBUllfU1RBVFVTOiBcInRlbXBvcmFyeV9zdGF0dXNcIixcclxuICAgIFBFUk1BTkVOVF9TVEFUVVM6IFwicGVybWFuZW50X3N0YXR1c1wiLFxyXG4gICAgVFVSTlM6IFwidHVybnNcIixcclxuICAgIEVOQ09VTlRFUlM6IFwiZW5jb3VudGVyc1wiLFxyXG4gICAgRkxFRTogXCJmbGVlXCIsXHJcbiAgICBFTkRfVEhFX1JPVU5EOiBcImVuZF90aGVfcm91bmRcIixcclxuICAgIEFCSUxJVFlfUE9XRVI6IFwiYWJpbGl0eV9wb3dlclwiLFxyXG4gICAgU0VUX0RKSU5OOiBcInNldF9kamlublwiLFxyXG4gICAgREFNQUdFX01PRElGSUVSOiBcImRhbWFnZV9tb2RpZmllclwiLFxyXG4gICAgREFNQUdFX0lOUFVUOiBcImRhbWFnZV9pbnB1dFwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWZmZWN0X3R5cGVfc3RhdCA9IHtcclxuICAgIFtlZmZlY3RfdHlwZXMuTUFYX0hQXTogXCJtYXhfaHBcIixcclxuICAgIFtlZmZlY3RfdHlwZXMuTUFYX1BQXTogXCJtYXhfcHBcIixcclxuICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogXCJhdGtcIixcclxuICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IFwiZGVmXCIsXHJcbiAgICBbZWZmZWN0X3R5cGVzLkFHSUxJVFldOiBcImFnaVwiLFxyXG4gICAgW2VmZmVjdF90eXBlcy5MVUNLXTogXCJsdWtcIixcclxuICAgIFtlZmZlY3RfdHlwZXMuQ1VSUkVOVF9IUF06IFwiY3VycmVudF9ocFwiLFxyXG4gICAgW2VmZmVjdF90eXBlcy5DVVJSRU5UX1BQXTogXCJjdXJyZW50X3BwXCJcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVmZmVjdF9uYW1lcyA9IHtcclxuICAgIFtlZmZlY3RfdHlwZXMuTUFYX0hQXTogXCJIUFwiLFxyXG4gICAgW2VmZmVjdF90eXBlcy5NQVhfUFBdOiBcIlBQXCIsXHJcbiAgICBbZWZmZWN0X3R5cGVzLkFUVEFDS106IFwiQXR0YWNrXCIsXHJcbiAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiBcIkRlZmVuc2VcIixcclxuICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IFwiQWdpbGl0eVwiLFxyXG4gICAgW2VmZmVjdF90eXBlcy5MVUNLXTogXCJMdWNrXCIsXHJcbiAgICBbZWZmZWN0X3R5cGVzLlBPV0VSXTogXCJQb3dlclwiLFxyXG4gICAgW2VmZmVjdF90eXBlcy5SRVNJU1RdOiBcIlJlc2lzdFwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWZmZWN0X29wZXJhdG9ycyA9IHtcclxuICAgIFBMVVM6IFwicGx1c1wiLFxyXG4gICAgTUlOVVM6IFwibWludXNcIixcclxuICAgIFRJTUVTOiBcInRpbWVzXCIsXHJcbiAgICBESVZJREU6IFwiZGl2aWRlXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlZmZlY3RfdXNhZ2VzID0ge1xyXG4gICAgTk9UX0FQUExZOiBcIm5vdF9hcHBseVwiLFxyXG4gICAgT05fVVNFOiBcIm9uX3VzZVwiLFxyXG4gICAgT05fVEFLRTogXCJvbl90YWtlXCIsXHJcbiAgICBCQVRUTEVfUk9VTkRfU1RBUlQ6IFwiYmF0dGxlX3JvdW5kX3N0YXJ0XCIsXHJcbiAgICBCQVRUTEVfUk9VTkRfRU5EOiBcImJhdHRsZV9yb3VuZF9lbmRcIixcclxuICAgIFBMQVlFUl9UVVJOX1NUQVJUOiBcInBsYXllcl90dXJuX3N0YXJ0XCIsXHJcbiAgICBQTEFZRVJfVFVSTl9FTkQ6IFwicGxheWVyX3R1cm5fZW5kXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlZmZlY3RfbXNnID0ge1xyXG4gICAgYXVyYTogdGFyZ2V0ID0+IGBBIHByb3RlY3RpdmUgYXVyYSBlbmNpcmNsZXMgJHt0YXJnZXQubmFtZX0hYCxcclxuICAgIGRvdWJsZTogKCkgPT4gYEFuZCBpdCBnb3QgZG91YmxlZCFgLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEVmZmVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgIG9wZXJhdG9yLFxyXG4gICAgICAgIGVmZmVjdF9vd25lcl9pbnN0YW5jZSxcclxuICAgICAgICBxdWFudGl0eV9pc19hYnNvbHV0ZSwgLy9kZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIHJhdGUsIC8vZGVmYXVsdDogMS4wXHJcbiAgICAgICAgY2hhbmNlLCAvL2RlZmF1bHQ6IDEuMFxyXG4gICAgICAgIGF0dHJpYnV0ZSwgLy9kZWZhdWx0OiBub19lbGVtZW50XHJcbiAgICAgICAgYWRkX3N0YXR1cywgLy9ib29sZWFuLiBJZiBmYWxzZSwgcmVtb3ZlIHN0YXR1c1xyXG4gICAgICAgIHN0YXR1c19rZXlfbmFtZSxcclxuICAgICAgICB0dXJuc19xdWFudGl0eSxcclxuICAgICAgICB2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0LFxyXG4gICAgICAgIGRhbWFnZV9mb3JtdWxhX2tleV9uYW1lLCAvL2luc3RlYWQgb2YgdXNpbmcgdGhlIG9wZXJhdG9yLCB1c2VzIGEgZGFtYWdlIGZvcm11bGEuIFJldHVybiB2YWx1ZSBpcyBub3QgdXNlZC5cclxuICAgICAgICB1c2FnZSxcclxuICAgICAgICBvbl9jYXN0ZXIsIC8vYm9vbGVhbi4gZGVmYXVsdCBmYWxzZS4gSWYgdHJ1ZSwgdGhlIGNhc3RlciB3aWxsIHRha2UgdGhlIGVmZmVjdC5cclxuICAgICAgICByZWxhdGl2ZV90b19wcm9wZXJ0eSwgLy9tYWtlIHRoZSBjYWxjdWxhdGlvbiBiYXNlZCBvbiBhIHBsYXllciBwcm9wZXJ0eVxyXG4gICAgICAgIHN1Yl9lZmZlY3QsXHJcbiAgICAgICAgZWZmZWN0X21zZyxcclxuICAgICAgICBzaG93X21zZyxcclxuICAgICAgICBjaGFyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMucXVhbnRpdHkgPSBxdWFudGl0eTtcclxuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcbiAgICAgICAgdGhpcy5lZmZlY3Rfb3duZXJfaW5zdGFuY2UgPSBlZmZlY3Rfb3duZXJfaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5xdWFudGl0eV9pc19hYnNvbHV0ZSA9IHF1YW50aXR5X2lzX2Fic29sdXRlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHF1YW50aXR5X2lzX2Fic29sdXRlO1xyXG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGUgPT09IHVuZGVmaW5lZCA/IDEuMCA6IHJhdGU7XHJcbiAgICAgICAgdGhpcy5jaGFuY2UgPSBjaGFuY2UgPT09IHVuZGVmaW5lZCA/IDEuMCA6IGNoYW5jZTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkID8gZWxlbWVudHMuTk9fRUxFTUVOVCA6IGF0dHJpYnV0ZTtcclxuICAgICAgICB0aGlzLmFkZF9zdGF0dXMgPSBhZGRfc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzX2tleV9uYW1lID0gc3RhdHVzX2tleV9uYW1lO1xyXG4gICAgICAgIHRoaXMudHVybnNfcXVhbnRpdHkgPSB0dXJuc19xdWFudGl0eTtcclxuICAgICAgICB0aGlzLnR1cm5fY291bnQgPSB0dXJuc19xdWFudGl0eTtcclxuICAgICAgICB0aGlzLnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQgPSB2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ7XHJcbiAgICAgICAgdGhpcy5kYW1hZ2VfZm9ybXVsYV9rZXlfbmFtZSA9IGRhbWFnZV9mb3JtdWxhX2tleV9uYW1lO1xyXG4gICAgICAgIHRoaXMudXNhZ2UgPSB1c2FnZSA9PT0gdW5kZWZpbmVkID8gZWZmZWN0X3VzYWdlcy5OT1RfQVBQTFkgOiB1c2FnZTtcclxuICAgICAgICB0aGlzLm9uX2Nhc3RlciA9IG9uX2Nhc3RlciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvbl9jYXN0ZXI7XHJcbiAgICAgICAgdGhpcy5yZWxhdGl2ZV90b19wcm9wZXJ0eSA9IHJlbGF0aXZlX3RvX3Byb3BlcnR5O1xyXG4gICAgICAgIHRoaXMuZWZmZWN0X21zZyA9IGVmZmVjdF9tc2c7XHJcbiAgICAgICAgdGhpcy5zaG93X21zZyA9IHNob3dfbXNnID09PSB1bmRlZmluZWQgPyB0cnVlIDogc2hvd19tc2c7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QgPSBzdWJfZWZmZWN0O1xyXG4gICAgICAgIGlmICh0aGlzLnN1Yl9lZmZlY3QgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRfc3ViX2VmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXBwbHlfb3BlcmF0b3IoYSwgYiwgb3BlcmF0b3IpIHtcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5QTFVTOiByZXR1cm4gYSArIGI7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5NSU5VUzogcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuVElNRVM6IHJldHVybiBhICogYjtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLkRJVklERTogcmV0dXJuIGEgLyBiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0X3N1Yl9lZmZlY3QoKSB7XHJcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LnF1YW50aXR5X2lzX2Fic29sdXRlID0gdGhpcy5zdWJfZWZmZWN0LnF1YW50aXR5X2lzX2Fic29sdXRlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRoaXMuc3ViX2VmZmVjdC5xdWFudGl0eV9pc19hYnNvbHV0ZTtcclxuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QucmF0ZSA9IHRoaXMuc3ViX2VmZmVjdC5yYXRlID09PSB1bmRlZmluZWQgPyAxLjAgOiB0aGlzLnN1Yl9lZmZlY3QucmF0ZTtcclxuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QuY2hhbmNlID0gdGhpcy5zdWJfZWZmZWN0LmNoYW5jZSA9PT0gdW5kZWZpbmVkID8gMS4wIDogdGhpcy5zdWJfZWZmZWN0LmNoYW5jZTtcclxuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QuYXR0cmlidXRlID0gdGhpcy5zdWJfZWZmZWN0LmF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkID8gZWxlbWVudHMuTk9fRUxFTUVOVCA6IHRoaXMuc3ViX2VmZmVjdC5hdHRyaWJ1dGU7XHJcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQgPSB0aGlzLnN1Yl9lZmZlY3QudmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0aGlzLnN1Yl9lZmZlY3QudmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdDtcclxuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QudXNhZ2UgPSB0aGlzLnN1Yl9lZmZlY3QudXNhZ2UgPT09IHVuZGVmaW5lZCA/IGVmZmVjdF91c2FnZXMuTk9UX0FQUExZIDogdGhpcy5zdWJfZWZmZWN0LnVzYWdlO1xyXG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC5vbl9jYXN0ZXIgPSB0aGlzLnN1Yl9lZmZlY3Qub25fY2FzdGVyID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRoaXMuc3ViX2VmZmVjdC5vbl9jYXN0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlfZ2VuZXJhbF92YWx1ZShwcm9wZXJ0eSwgZGlyZWN0X3ZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgYmVmb3JlX3ZhbHVlID0gcHJvcGVydHkgIT09IHVuZGVmaW5lZCA/IHRoaXMuY2hhcltwcm9wZXJ0eV0gOiBkaXJlY3RfdmFsdWU7XHJcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPj0gdGhpcy5jaGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlX3ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IGJlZm9yZV92YWx1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYWZ0ZXJfdmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMucXVhbnRpdHlfaXNfYWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcltwcm9wZXJ0eV0gPSB0aGlzLnF1YW50aXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFmdGVyX3ZhbHVlID0gdGhpcy5xdWFudGl0eTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnF1YW50aXR5O1xyXG4gICAgICAgICAgICB2YWx1ZSAqPSB0aGlzLnJhdGU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlICs9IHZhcmlhdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZV90b191c2U7XHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZV90b191c2UgPSB0aGlzLmNoYXJbdGhpcy5yZWxhdGl2ZV90b19wcm9wZXJ0eSAhPT0gdW5kZWZpbmVkID8gdGhpcy5yZWxhdGl2ZV90b19wcm9wZXJ0eSA6IHByb3BlcnR5XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlX3RvX3VzZSA9IGRpcmVjdF92YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBFZmZlY3QuYXBwbHlfb3BlcmF0b3IodmFsdWVfdG9fdXNlLCB2YWx1ZSwgdGhpcy5vcGVyYXRvcikgfCAwO1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW3Byb3BlcnR5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZnRlcl92YWx1ZSA9IHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiBiZWZvcmVfdmFsdWUsXHJcbiAgICAgICAgICAgIGFmdGVyOiBhZnRlcl92YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlfc3ViZWZmZWN0KHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgdGhpcy5zdWJfZWZmZWN0LmNoYW5jZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdWJfZWZmZWN0LnF1YW50aXR5X2lzX2Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSAqPSB0aGlzLnN1Yl9lZmZlY3QucmF0ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN1Yl9lZmZlY3QudmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHZhcmlhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW3Byb3BlcnR5XSA9IEVmZmVjdC5hcHBseV9vcGVyYXRvcih0aGlzLmNoYXJbcHJvcGVydHldLCB2YWx1ZSwgdGhpcy5zdWJfZWZmZWN0Lm9wZXJhdG9yKSB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcltwcm9wZXJ0eV07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXZpZXdfdmFsdWVfYXBwbGllZChlZmZlY3Rfb2JqLCBiYXNlX3ZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGVmZmVjdF9vYmoucXVhbnRpdHlfaXNfYWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdF9vYmoucXVhbnRpdHk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gZWZmZWN0X29iai5xdWFudGl0eTtcclxuICAgICAgICAgICAgaWYgKCFlZmZlY3Rfb2JqLnJhdGUpIHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdF9vYmoucmF0ZSA9IDEuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZSAqPSBlZmZlY3Rfb2JqLnJhdGU7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgfCAwO1xyXG4gICAgICAgICAgICByZXR1cm4gRWZmZWN0LmFwcGx5X29wZXJhdG9yKGJhc2VfdmFsdWUsIHZhbHVlLCBlZmZlY3Rfb2JqLm9wZXJhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tfY2FwcyhjdXJyZW50X3Byb3AsIG1heF9wcm9wLCBtaW5fdmFsdWUsIHJlc3VsdF9vYmopIHtcclxuICAgICAgICBpZiAodGhpcy5jaGFyW2N1cnJlbnRfcHJvcF0gPiB0aGlzLmNoYXJbbWF4X3Byb3BdKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHRfb2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRfb2JqLmFmdGVyID0gdGhpcy5jaGFyW21heF9wcm9wXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA9IHRoaXMuY2hhclttYXhfcHJvcF07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA8IG1pbl92YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0X29iaikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0X29iai5hZnRlciA9IG1pbl92YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA9IG1pbl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlfZWZmZWN0KGRpcmVjdF92YWx1ZSkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKGVmZmVjdF90eXBlX3N0YXRbdGhpcy50eXBlXSk7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkhQX1JFQ09WRVJZOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlfZ2VuZXJhbF92YWx1ZShcImhwX3JlY292ZXJ5XCIpO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QUF9SRUNPVkVSWTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJwcF9yZWNvdmVyeVwiKTtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9IUDpcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdF9jdXJyZW50X2hwID0gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKFwiY3VycmVudF9ocFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfY2FwcyhcImN1cnJlbnRfaHBcIiwgXCJtYXhfaHBcIiwgMCwgcmVzdWx0X2N1cnJlbnRfaHApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF9jdXJyZW50X2hwXHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkNVUlJFTlRfUFA6XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRfY3VycmVudF9wcCA9IHRoaXMuYXBwbHlfZ2VuZXJhbF92YWx1ZShcImN1cnJlbnRfcHBcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX2NhcHMoXCJjdXJyZW50X3BwXCIsIFwibWF4X3BwXCIsIDAsIHJlc3VsdF9jdXJyZW50X3BwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfY3VycmVudF9wcFxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUodGhpcy5hdHRyaWJ1dGUgKyBcIl9wb3dlcl9jdXJyZW50XCIpO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHRoaXMuYXR0cmlidXRlICsgXCJfcmVzaXN0X2N1cnJlbnRcIik7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRVUk5TOlxyXG4gICAgICAgICAgICAgICAgdGhpcy50dXJuX2NvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJ0dXJuc1wiKTtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUEVSTUFORU5UX1NUQVRVUzpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFkZF9zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIuYWRkX3Blcm1hbmVudF9zdGF0dXModGhpcy5zdGF0dXNfa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIucmVtb3ZlX3Blcm1hbmVudF9zdGF0dXModGhpcy5zdGF0dXNfa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkX3N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5hZGRfdGVtcG9yYXJ5X3N0YXR1cyh0aGlzLnN0YXR1c19rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfdGVtcG9yYXJ5X3N0YXR1cyh0aGlzLnN0YXR1c19rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRBTUFHRV9NT0RJRklFUjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUodW5kZWZpbmVkLCBkaXJlY3RfdmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5EQU1BR0VfSU5QVVQ6XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHVuZGVmaW5lZCwgZGlyZWN0X3ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBlZmZlY3RfdHlwZV9zdGF0W3RoaXMuc3ViX2VmZmVjdC50eXBlXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5iZWZvcmUgPSB0aGlzLmNoYXJbc3RhdF07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYWZ0ZXIgPSB0aGlzLmFwcGx5X3N1YmVmZmVjdChzdGF0LCByZXN1bHQuYWZ0ZXIpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHRoaXMuc3ViX2VmZmVjdC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9IUDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKFwiY3VycmVudF9ocFwiLCBcIm1heF9ocFwiLCAwLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX1BQOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX2NhcHMoXCJjdXJyZW50X3BwXCIsIFwibWF4X3BwXCIsIDAsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkamlubl9zdGF0dXMgPSB7XHJcbiAgICBTRVQ6IFwic2V0XCIsXHJcbiAgICBTVEFOREJZOiBcInN0YW5kYnlcIixcclxuICAgIFJFQ09WRVJZOiBcInJlY292ZXJ5XCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkamlubl9mb250X2NvbG9ycz0ge1xyXG4gICAgW2RqaW5uX3N0YXR1cy5SRUNPVkVSWV06IG51bWJlcnMuWUVMTE9XX0ZPTlRfQ09MT1IsXHJcbiAgICBbZGppbm5fc3RhdHVzLlNUQU5EQlldOiBudW1iZXJzLlJFRF9GT05UX0NPTE9SLFxyXG4gICAgW2RqaW5uX3N0YXR1cy5TRVRdOiBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUlxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIERqaW5uIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGtleV9uYW1lLFxyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgZWxlbWVudCxcclxuICAgICAgICBhYmlsaXR5X2tleV9uYW1lLFxyXG4gICAgICAgIGhwX2Jvb3N0LFxyXG4gICAgICAgIHBwX2Jvb3N0LFxyXG4gICAgICAgIGF0a19ib29zdCxcclxuICAgICAgICBkZWZfYm9vc3QsXHJcbiAgICAgICAgYWdpX2Jvb3N0LFxyXG4gICAgICAgIGx1a19ib29zdCxcclxuICAgICAgICBpbmRleFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5hYmlsaXR5X2tleV9uYW1lID0gYWJpbGl0eV9rZXlfbmFtZTtcclxuICAgICAgICB0aGlzLmhwX2Jvb3N0ID0gaHBfYm9vc3Q7XHJcbiAgICAgICAgdGhpcy5wcF9ib29zdCA9IHBwX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuYXRrX2Jvb3N0ID0gYXRrX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuZGVmX2Jvb3N0ID0gZGVmX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuYWdpX2Jvb3N0ID0gYWdpX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMubHVrX2Jvb3N0ID0gbHVrX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gZGppbm5fc3RhdHVzLlNFVDtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5yZWNvdmVyeV90dXJuID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfc3RhdHVzKHN0YXR1cywgY2hhcikge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIGNoYXIudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgY2hhci51cGRhdGVfY2xhc3MoKTtcclxuICAgICAgICBjaGFyLnVwZGF0ZV9hdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgY2hhci51cGRhdGVfYWJpbGl0aWVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhhc19zdGFuZGJ5X2RqaW5uKGRqaW5uaV9saXN0LCBtZW1iZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIF8uc29tZShtZW1iZXJzLm1hcChjaGFyID0+IGNoYXIuZGppbm5pKS5tYXAoZGppbm5fa2V5cyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBkamlubl9rZXlzLmZpbHRlcihrZXkgPT4gZGppbm5pX2xpc3Rba2V5XS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZKS5sZW5ndGg7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRfc3RhbmRieV9kamlubmkoZGppbm5pX2xpc3QsIG1lbWJlcnMpIHtcclxuICAgICAgICBsZXQgc3RhbmRieV9kamlubmkgPSBfLm1hcFZhbHVlcyhfLmdyb3VwQnkobWVtYmVycy5tYXAoYyA9PiBjLmRqaW5uaSkuZmxhdCgpLCBrZXkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZGppbm5pX2xpc3Rba2V5XS5lbGVtZW50O1xyXG4gICAgICAgIH0pLCBkamlubmlfa2V5cyA9PiBkamlubmlfa2V5cy5maWx0ZXIoa2V5ID0+IGRqaW5uaV9saXN0W2tleV0uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSkubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIGlmICghKGVsZW1lbnQgaW4gc3RhbmRieV9kamlubmkpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFuZGJ5X2RqaW5uaVtlbGVtZW50XSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YW5kYnlfZGppbm5pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXRfdG9fcmVjb3ZlcnkoZGppbm5pX2xpc3QsIG1lbWJlcnMsIHJlcXVpcmVtZW50cykge1xyXG4gICAgICAgIGxldCByZXFfY291bnRlciA9IE9iamVjdC5hc3NpZ24oe30sIHJlcXVpcmVtZW50cyk7XHJcbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbWJlcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbWVtYmVyc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyX2RqaW5uaSA9IHBsYXllci5kamlubmk7XHJcbiAgICAgICAgICAgIGxldCByZWNvdmVyeV9jb3VudGVyID0gMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwbGF5ZXJfZGppbm5pLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkamlubiA9IGRqaW5uaV9saXN0W3BsYXllcl9kamlubmlbal1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRqaW5uLnN0YXR1cyAhPT0gZGppbm5fc3RhdHVzLlNUQU5EQlkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcV9jb3VudGVyW2RqaW5uLmVsZW1lbnRdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRqaW5uLnJlY292ZXJ5X3R1cm4gPSByZWNvdmVyeV9jb3VudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICsrcmVjb3ZlcnlfY291bnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBkamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5SRUNPVkVSWSwgcGxheWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAtLXJlcV9jb3VudGVyW2RqaW5uLmVsZW1lbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghXy5zb21lKHJlcV9jb3VudGVyLCBCb29sZWFuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkb25lKSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBnZXRfZGlyZWN0aW9ucywgc3BsaXRfZGlyZWN0aW9uIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZXZlbnRfdHlwZXMgPSB7XHJcbiAgICBDTElNQjogXCJjbGltYlwiLFxyXG4gICAgU1BFRUQ6IFwic3BlZWRcIixcclxuICAgIFRFTEVQT1JUOiBcInRlbGVwb3J0XCIsXHJcbiAgICBKVU1QOiBcImp1bXBcIixcclxuICAgIFNURVA6IFwic3RlcFwiLFxyXG4gICAgQ09MTElTSU9OOiBcImNvbGxpc2lvblwiXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHR5cGUsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMubG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBUaWxlRXZlbnQuaWRfaW5jcmVtZW50ZXIrKztcclxuICAgICAgICB0aGlzLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IEFycmF5LmlzQXJyYXkoYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzKSA/IGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFthY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnNdO1xyXG4gICAgICAgIGlmIChhY3RpdmF0aW9uX2RpcmVjdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMgPSBnZXRfZGlyZWN0aW9ucyh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnMgPSBBcnJheS5pc0FycmF5KGFjdGl2YXRpb25fZGlyZWN0aW9ucykgPyBhY3RpdmF0aW9uX2RpcmVjdGlvbnMgOiBbYWN0aXZhdGlvbl9kaXJlY3Rpb25zXTtcclxuICAgICAgICB0aGlzLmR5bmFtaWMgPSBkeW5hbWljO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gQXJyYXkuaXNBcnJheShhY3RpdmUpID8gYWN0aXZlIDogbmV3IEFycmF5KHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmxlbmd0aCkuZmlsbChhY3RpdmUpO1xyXG4gICAgICAgIHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QgPSBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0O1xyXG4gICAgICAgIFRpbGVFdmVudC5ldmVudHNbdGhpcy5pZF0gPSB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGlzX2FjdGl2ZShkaXJlY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBwb3NzaWJsZV9kaXJlY3Rpb25zID0gc3BsaXRfZGlyZWN0aW9uKGRpcmVjdGlvbik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NzaWJsZV9kaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVt0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmRleE9mKHBvc3NpYmxlX2RpcmVjdGlvbnNbaV0pXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlX2F0KGRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlW3RoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluZGV4T2YoZGlyZWN0aW9uKV0gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYWN0aXZhdGVfYXQoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVbdGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnMuaW5kZXhPZihkaXJlY3Rpb24pXSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUubWFwKCgpID0+IHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLmFjdGl2ZS5tYXAoKCkgPT4gZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zID09PSB0aGlzLnggJiYgdGhpcy5kYXRhLmhlcm8udGlsZV95X3BvcyA9PT0gdGhpcy55O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRfbG9jYXRpb25fa2V5KHgsIHkpIHtcclxuICAgICAgICByZXR1cm4geC50b1N0cmluZygpICsgXCJfXCIgKyB5LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldF9ldmVudF9ieV9pZChldmVudHMsIGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIF8uZmluZChldmVudHMsIHtpZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0X2V2ZW50KGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIFRpbGVFdmVudC5ldmVudHNbaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZXNldCgpIHtcclxuICAgICAgICBUaWxlRXZlbnQuaWRfaW5jcmVtZW50ZXIgPSAwO1xyXG4gICAgICAgIFRpbGVFdmVudC5ldmVudHMgPSB7fTtcclxuICAgIH1cclxufVxyXG5cclxuVGlsZUV2ZW50LnJlc2V0KCk7XHJcbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XHJcblxyXG5jb25zdCBQQUdFX05VTUJFUl9XSURUSCA9IDg7XHJcbmNvbnN0IFBBR0VfTlVNQkVSX0hFSUdIVCA9IDg7XHJcbmNvbnN0IFBBR0VfSU5ESUNBVE9SX0FSUk9XX1kgPSAwO1xyXG5cclxuLypBIGJhc2ljIHdpbmRvdyB0ZW1wbGF0ZSB1c2VkIGluIG1vc3QgbWVudXNcclxuQ3JlYXRlcyB0aGUgYmFja2dyb3VuZCBhbmQgYm9yZGVyc1xyXG5TdXBwb3J0cyB0aGUgYWRkaXRpb24gb2Ygc3ByaXRlcyBhbmQgdGV4dFxyXG5cclxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxyXG4gICAgICAgeCx5IFtudW1iZXJdIC0gVGhlIHdpbmRvdydzIHBvc2l0aW9uXHJcbiAgICAgICB3aWR0aCwgaGVpZ2h0IFtudW1iZXJdIC0gVGhlIHdpbmRvdydzIHdpZHRoICYgaGVpZ2h0XHJcbiAgICAgICBuZWVkX3Bvc191cGRhdGUgW2Jvb2xlYW5dIC0gRmxhZyB0byBlbmFibGUgYW4gYXV0b21hdGljIHBvc2l0aW9uIHVwZGF0ZVxyXG4gICAgICAgY29sb3IgW251bWJlcl0gLSBUaGUgd2luZG93J3MgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICAgZm9udF9jb2xvciBbbnVtYmVyXSAtIFRoZSB3aW5kb3cncyBkZWZhdWx0IGZvbnQgY29sb3IqL1xyXG5leHBvcnQgY2xhc3MgV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIG5lZWRfcG9zX3VwZGF0ZSA9IHRydWUsIGNvbG9yID0gbnVtYmVycy5ERUZBVUxUX1dJTkRPV19DT0xPUiwgZm9udF9jb2xvciA9IG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLmZvbnRfY29sb3IgPSBmb250X2NvbG9yO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgIHRoaXMuc2VwYXJhdG9yc19ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd19iYWNrZ3JvdW5kKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3X2JvcmRlcnMoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0aGlzLmdyYXBoaWNzKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MpO1xyXG5cclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gMDtcclxuICAgICAgICB0aGlzLmdyb3VwLmhlaWdodCA9IDA7XHJcbiAgICAgICAgdGhpcy5ncm91cC53aW5kb3dfb2JqZWN0ID0gdGhpcztcclxuICAgICAgICB0aGlzLm5lZWRfcG9zX3VwZGF0ZSA9IG5lZWRfcG9zX3VwZGF0ZTtcclxuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxpbmVzX3Nwcml0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5leHRyYV9zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cHMgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVhbF94KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLng7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlYWxfeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ncm91cC55O1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmVtb3ZlcyBleGlzdGluZyBzZXBhcmF0b3IgZ3JhcGhpY3MqL1xyXG4gICAgY2xlYXJfc2VwYXJhdG9ycygpIHtcclxuICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKkRyYXdzIHNlcGFyYXRvciBncmFwaGljc1xyXG4gICAgVGhlc2UgYXJlIGNyZWF0ZWQgYnkgY2hhbmdpbmcgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGJhY2tncm91bmQqL1xyXG4gICAgZHJhd19zZXBhcmF0b3IoeF8wLCB5XzAsIHhfMSwgeV8xLCB2ZXJ0aWNhbCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBsaWdodGVyID0gdXRpbHMuY2hhbmdlX2JyaWdodG5lc3ModGhpcy5jb2xvciwgMS4zKTtcclxuICAgICAgICBjb25zdCBkYXJrZXIgPSB1dGlscy5jaGFuZ2VfYnJpZ2h0bmVzcyh0aGlzLmNvbG9yLCAwLjgwKTtcclxuICAgICAgICBjb25zdCBtZWRpdW0gPSB1dGlscy5jaGFuZ2VfYnJpZ2h0bmVzcyh0aGlzLmNvbG9yLCAwLjkwKTtcclxuICAgICAgICBjb25zdCBjb2xvcnMgPSBbbWVkaXVtLCBkYXJrZXIsIGxpZ2h0ZXJdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29sb3JzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGkgLSAxO1xyXG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MubGluZVN0eWxlKDEsIGNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JzX2dyYXBoaWNzLm1vdmVUbyh4XzAgKyBzaGlmdCAqICt2ZXJ0aWNhbCwgeV8wICsgc2hpZnQgKiArKCF2ZXJ0aWNhbCkpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MubGluZVRvKHhfMSArIHNoaWZ0ICogK3ZlcnRpY2FsLCB5XzEgKyBzaGlmdCAqICsoIXZlcnRpY2FsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qQ3JlYXRlcyB0aGUgYmFja2dyb3VuZFxyXG4gICAgRmlsbHMgdGhlIHdpbmRvdydzIHNwYWNlIHdpdGggdGhlIGRlZmF1bHQgd2luZG93IGNvbG9yKi9cclxuICAgIGRyYXdfYmFja2dyb3VuZCgpIHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmJlZ2luRmlsbCh0aGlzLmNvbG9yLCAxKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KDIsIDIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmVuZEZpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKkRyYXdzIHRoZSB3aW5kb3cgYm9yZGVyc1xyXG4gICAgTGluZXMgYXJlIGRyYXduIHRvIGNyZWF0ZSB0aGUgYm9yZGVycywgaW5jbHVkaW5nIGNvcm5lcnNcclxuICAgIFxyXG4gICAgQ29sb3JzIHVzZWQ6XHJcbiAgICAweEZGRkZGRiA9IFdoaXRlXHJcbiAgICAweEE1QTVBNSA9IEdyYXkgKExpZ2h0ZXIpXHJcbiAgICAweDUyNTI1MiA9IEdyYXkgKERhcmtlcilcclxuICAgIDB4MTExMTExID0gQmxhY2tcclxuICAgICovXHJcbiAgICBkcmF3X2JvcmRlcnMoKSB7XHJcbiAgICAgICAgLy9MZWZ0XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDAsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDAsIHRoaXMuaGVpZ2h0ICsgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4RkZGRkZGKVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDEsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDEsIHRoaXMuaGVpZ2h0ICsgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4QTVBNUE1KVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDIsIHRoaXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgMyk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMywgdGhpcy5oZWlnaHQgLSAxKTtcclxuXHJcbiAgICAgICAgLy9SaWdodFxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGgsIDIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweEE1QTVBNSlcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMiwgMSk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhGRkZGRkYpXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCArIDEsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAxLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCArIDMsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCB0aGlzLmhlaWdodCArIDEpO1xyXG5cclxuICAgICAgICAvL1VwXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMiwgMCk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIDApO1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweEZGRkZGRilcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygyLCAxKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMiwgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4QTVBNUE1KVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIDIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAxLCAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgMyk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCwgMyk7XHJcblxyXG4gICAgICAgIC8vRG93blxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4RkZGRkZGKVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMSk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4QTVBNUE1KVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMik7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMik7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMyk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMyk7XHJcblxyXG4gICAgICAgIC8vQ29ybmVyc1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygxLCAxKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygyLCAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDEsIHRoaXMuaGVpZ2h0ICsgMik7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMiwgdGhpcy5oZWlnaHQgKyAzKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggKyAyLCB0aGlzLmhlaWdodCArIDIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCB0aGlzLmhlaWdodCArIDMpO1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCArIDIsIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDQsIDQpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDUsIDUpO1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgMyk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oNCwgNCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoIC0gMSwgdGhpcy5oZWlnaHQgLSAxKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoIC0gMSwgNCk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCwgNSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyg0LCB0aGlzLmhlaWdodCAtIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDUsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNoYW5nZXMgdGhlIHdpbmRvdydzIHNpemUgYW5kIHJlZHJhd3MgaXRcclxuXHJcbiAgICBJbnB1dDogbmV3X3NpemUgW29iamVjdF0gLSBDb250YWlucyB0aGUgd2lkdGggYW5kIGhlaWdodCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICB3aWR0aCBbbnVtYmVyXSAtIFRoZSBuZXcgd2lkdGhcclxuICAgICAgICAgICAgICAgIGhlaWdodCBbbnVtYmVyXSAtIFRoZSBuZXcgaGVpZ2h0Ki9cclxuICAgIHVwZGF0ZV9zaXplKG5ld19zaXplKSB7XHJcbiAgICAgICAgaWYgKG5ld19zaXplLndpZHRoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IG5ld19zaXplLndpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV3X3NpemUuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBuZXdfc2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmRyYXdfYmFja2dyb3VuZCgpO1xyXG4gICAgICAgIHRoaXMuZHJhd19ib3JkZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDaGFuZ2VzIHRoZSB3aW5kb3cncyBwb3NpdGlvblxyXG5cclxuICAgIElucHV0OiBuZXdfcG9zaXRpb24gW2FycmF5XSAtIENvbnRhaW5zIHRoZSBwb3NpdGlvbidzIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgIHggW251bWJlcl0gLSBUaGUgbmV3IHggdmFsdWVcclxuICAgICAgICAgICAgICAgIHggW251bWJlcl0gLSBUaGUgbmV3IHkgdmFsdWVcclxuICAgICAgICAgICByZWxhdGl2ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBtb3ZlcyB0aGUgd2luZG93IGJ5IHRoZSB4IGFuZCB5IG9mZnNldCB2YWx1ZXMqL1xyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKG5ld19wb3NpdGlvbiwgcmVsYXRpdmUgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKG5ld19wb3NpdGlvbi54ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gbmV3X3Bvc2l0aW9uLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZXdfcG9zaXRpb24ueSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IG5ld19wb3NpdGlvbi55O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdyb3VwLnggPSAocmVsYXRpdmUgPyB0aGlzLmdhbWUuY2FtZXJhLnggOiAwKSArIHRoaXMueDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSAocmVsYXRpdmUgPyB0aGlzLmdhbWUuY2FtZXJhLnkgOiAwKSArIHRoaXMueTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNyZWF0ZXMgYW4gaW50ZXJuYWwgZ3JvdXBcclxuICAgIFRoaXMgaXMgdXNlZCB0byBhdHRhY2ggb3RoZXIgc3ByaXRlIGdyb3VwcyB0byB0aGUgd2luZG93XHJcbiAgICBcclxuICAgIElucHV0OiBrZXkgW3N0cmluZ10gLSBUaGUgZ3JvdXAncyBrZXlcclxuICAgICAgICAgICBwb3NpdGlvbiBbYXJyYXldIC0gQ29udGFpbnMgdGhlIG5ldyBncm91cCdzIHggYW5kIHkgKE9wdGlvbmFsKVxyXG4gICAgICAgICAgICAgICAgeCBbbnVtYmVyXSAtIFRoZSBuZXcgZ3JvdXAncyB4XHJcbiAgICAgICAgICAgICAgICB5IFtudW1iZXJdIC0gVGhlIG5ldyBncm91cCdzIHlcclxuICAgIFxyXG4gICAgT3V0cHV0OiBbUGhhc2VyOkdyb3VwXSovXHJcbiAgICBkZWZpbmVfaW50ZXJuYWxfZ3JvdXAoa2V5LCBwb3NpdGlvbiA9IHt9KSB7XHJcbiAgICAgICAgbGV0IGludGVybmFsX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveV9pbnRlcm5hbF9ncm91cChrZXkpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXBzW2tleV0gPSBpbnRlcm5hbF9ncm91cDtcclxuICAgICAgICBpZiAocG9zaXRpb24ueCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGludGVybmFsX2dyb3VwLnggPSBwb3NpdGlvbi54O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zaXRpb24ueSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGludGVybmFsX2dyb3VwLnkgPSBwb3NpdGlvbi55O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdyb3VwLmFkZChpbnRlcm5hbF9ncm91cCk7XHJcbiAgICAgICAgcmV0dXJuIGludGVybmFsX2dyb3VwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgY2hvc2VuIGludGVybmFsIGdyb3VwXHJcblxyXG4gICAgSW5wdXQ6IGtleSBbc3RyaW5nXSAtIFRoZSBncm91cCdzIGtleVxyXG4gICAgXHJcbiAgICBPdXRwdXQ6IFtQaGFzZXI6R3JvdXBdKi9cclxuICAgIGdldF9pbnRlcm5hbF9ncm91cChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XTtcclxuICAgIH1cclxuXHJcbiAgICAvKkFkZHMgYSBzcHJpdGUgdG8gYW4gaW50ZXJuYWwgZ3JvdXBcclxuXHJcbiAgICBJbnB1dDoga2V5IFtzdHJpbmddIC0gVGhlIGdyb3VwJ3Mga2V5XHJcbiAgICAgICAgICAgc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYWRkXHJcbiAgICAgICAgICAgXHJcbiAgICBPdXRwdXQ6IFtib29sZWFuXSAtIFRydWUgaWYgdGhlIGdyb3VwIGV4aXN0cywgZmFsc2Ugb3RoZXJ3aXNlKi9cclxuICAgIGFkZF90b19pbnRlcm5hbF9ncm91cChrZXksIHNwcml0ZSkge1xyXG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5pbnRlcm5hbF9ncm91cHMpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XS5hZGQoc3ByaXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKkRlc3Ryb3lzIGFuIGludGVybmFsIGdyb3VwIGFuZCBpdHMgZWxlbWVudHNcclxuICAgIFxyXG4gICAgSW5wdXQ6IGtleSBbc3RyaW5nXSAtIFRoZSBncm91cCdzIGtleXMqL1xyXG4gICAgZGVzdHJveV9pbnRlcm5hbF9ncm91cChrZXkpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHRoaXMuaW50ZXJuYWxfZ3JvdXBzICYmIHRoaXMuaW50ZXJuYWxfZ3JvdXBzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qRGlzcGxheXMgdGhpcyB3aW5kb3dcclxuXHJcbiAgICBJbnB1dDogc2hvd19jYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKVxyXG4gICAgICAgICAgIGFuaW1hdGUgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgcGxheXMgYW4gYW5pbWF0aW9uXHJcbiAgICAgICAgICAgY2xvc2VfY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbCkqL1xyXG4gICAgc2hvdyhzaG93X2NhbGxiYWNrLCBhbmltYXRlID0gdHJ1ZSwgY2xvc2VfY2FsbGJhY2sgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xyXG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfaXNfc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uX3RpbWUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUi80O1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZ3JvdXApLnRvKFxyXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogdGhpcy5ncmFwaGljcy53aWR0aCwgaGVpZ2h0OiB0aGlzLmdyYXBoaWNzLmhlaWdodCB9LFxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uX3RpbWUsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd19jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBzaG93X2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAud2lkdGggPSB0aGlzLmdyYXBoaWNzLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLmhlaWdodCA9IHRoaXMuZ3JhcGhpY3MuaGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoc2hvd19jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBzaG93X2NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qVXBkYXRlcyB0aGUgd2luZG93IHBvc2l0aW9uIGlmIG5lY2Vzc2FyeVxyXG4gICAgXHJcbiAgICBJbnB1dDogZm9yY2UgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgZm9yY2VzIGFuIHVwZGF0ZSovXHJcbiAgICB1cGRhdGUoZm9yY2UgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLm5lZWRfcG9zX3VwZGF0ZSB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypBZGRzIGEgc3ByaXRlIHRvIHRoZSBncm91cFxyXG4gICAgXHJcbiAgICBJbnB1dDogc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYmUgYWRkZWQqL1xyXG4gICAgYWRkX3Nwcml0ZV90b19ncm91cChzcHJpdGUsIGludGVybmFsX2dyb3VwX2tleSkge1xyXG4gICAgICAgIGxldCBncm91cCA9IHRoaXMuZ3JvdXA7XHJcbiAgICAgICAgaWYgKGludGVybmFsX2dyb3VwX2tleSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVybmFsX2dyb3VwID0gdGhpcy5nZXRfaW50ZXJuYWxfZ3JvdXAoaW50ZXJuYWxfZ3JvdXBfa2V5KTtcclxuICAgICAgICAgICAgaWYgKGludGVybmFsX2dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBncm91cCA9IGludGVybmFsX2dyb3VwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyb3VwLmFkZChzcHJpdGUpO1xyXG4gICAgICAgIHRoaXMuZXh0cmFfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDcmVhdGVzIGEgbmV3IHNwcml0ZSBhdCB0aGUgZ3JvdXBcclxuICAgIFxyXG4gICAgSW5wdXQ6IHgsIHkgW251bWJlcl0gPSBUaGUgc3ByaXRlJ3MgcG9zaXRpb25cclxuICAgICAgICAgICBrZXkgW3N0cmluZ10gPSBUaGUga2V5IGZvciB0aGUgc3ByaXRlXHJcbiAgICAgICAgICAgY29sb3IgW251bWJlcl0gPSBUaGUgY29sb3IgcGFsZXR0ZSB0byBiZSB1c2VkXHJcbiAgICAgICAgICAgZnJhbWUgW3N0cmluZ3xudW1iZXJdID0gVGhlIGZyYW1lIHZhbHVlIChzcHJpdGVzaGVldHMgb25seSkqL1xyXG4gICAgY3JlYXRlX2F0X2dyb3VwKHgsIHksIGtleSwgY29sb3IsIGZyYW1lLCBpbnRlcm5hbF9ncm91cF9rZXkpIHtcclxuICAgICAgICBsZXQgZ3JvdXAgPSB0aGlzLmdyb3VwO1xyXG4gICAgICAgIGlmIChpbnRlcm5hbF9ncm91cF9rZXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbF9ncm91cCA9IHRoaXMuZ2V0X2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSk7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbF9ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXAgPSBpbnRlcm5hbF9ncm91cDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3ByaXRlID0gZ3JvdXAuY3JlYXRlKHgsIHksIGtleSwgZnJhbWUpO1xyXG4gICAgICAgIGlmIChjb2xvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNwcml0ZS50aW50ID0gY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXh0cmFfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgcmV0dXJuIHNwcml0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKlNlbmRzIHRoaXMgd2luZG93IHRvIHRoZSBmcm9udCBvZiB0aGUgc2NyZWVuKi9cclxuICAgIHNlbmRfdG9fZnJvbnQoKXtcclxuICAgICAgICB0aGlzLmdyb3VwLnBhcmVudC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmVtb3ZlcyBhIHNwcml0ZSBmcm9tIHRoZSBncm91cFxyXG4gICAgXHJcbiAgICBJbnB1dDogc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgIGRlc3Ryb3kgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgdGhlIHNwcml0ZSBpcyBkZXN0cm95ZWQqL1xyXG4gICAgcmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCBkZXN0cm95ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChzcHJpdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLnJlbW92ZShzcHJpdGUsIGRlc3Ryb3kpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5leHRyYV9zcHJpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLnJlbW92ZSh0aGlzLmV4dHJhX3Nwcml0ZXNbaV0sIGRlc3Ryb3kpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qUmVtb3ZlcyBzbW9vdGhpbmcgZWZmZWN0IGZyb20gYSB0ZXh0IHNwcml0ZVxyXG5cclxuICAgIElucHV0OiB0ZXh0X3Nwcml0ZSBbUGhhc2VyOlNwcml0ZV0gLSBUZXh0IHNwcml0ZSB0byByZW1vdmUgdGhlIGVmZmVjdCBmcm9tKi9cclxuICAgIHJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGUpIHtcclxuICAgICAgICB0ZXh0X3Nwcml0ZS5zbW9vdGhlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRleHRfc3ByaXRlLmF1dG9Sb3VuZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLypDcmVhdGVzIGEgc3ByaXRlIHRvIHJlcHJlc2VudCB0aGUgZ2l2ZW4gbGluZXMgb2YgdGV4dFxyXG5cclxuICAgIElucHV0OiBsaW5lcyBbYXJyYXldIC0gVGhlIHRleHQgbGluZXMgKGFycmF5IG9mIHN0cmluZylcclxuICAgICAgICAgICBwYWRkaW5nX3ggW251bWJlcl0gLSBQYWRkaW5nIG9uIHRoZSB4IGF4aXNcclxuICAgICAgICAgICBwYWRkaW5nX3kgW251bWJlcl0gLSBQYWRkaW5nIG9uIHRoZSB5IGF4aXNcclxuICAgICAgICAgICBzcGFjZV9iZXd0ZWVuIGxpbmVzIFtudW1iZXJdIC0gT2Zmc2V0IGJldHdlZW4gbGluZXMqL1xyXG4gICAgc2V0X3RleHQobGluZXMsIHBhZGRpbmdfeCwgcGFkZGluZ195LCBzcGFjZV9iZXR3ZWVuX2xpbmVzLCBpdGFsaWMgPSBmYWxzZSwgYW5pbWF0ZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpbmVzX3Nwcml0ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5saW5lc19zcHJpdGVzW2ldLnRleHQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVzX3Nwcml0ZXNbaV0uc2hhZG93LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saW5lc19zcHJpdGVzID0gW107XHJcbiAgICAgICAgY29uc3QgdG9wX3NoaWZ0ID0gaXRhbGljID8gLTIgOiAwO1xyXG4gICAgICAgIGNvbnN0IHhfcG9zID0gcGFkZGluZ194ID09PSB1bmRlZmluZWQgPyBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyA0IDogcGFkZGluZ194O1xyXG4gICAgICAgIGxldCB5X3BvcyA9IHBhZGRpbmdfeSA9PT0gdW5kZWZpbmVkID8gbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgKyB0b3Bfc2hpZnQgOiBwYWRkaW5nX3k7XHJcbiAgICAgICAgY29uc3QgZm9udF9uYW1lID0gaXRhbGljID8gJ2dzLWl0YWxpYy1ibXAtZm9udCcgOiAnZ3MtYm1wLWZvbnQnO1xyXG5cclxuICAgICAgICBsZXQgbGluZXNfcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBsZXQgYW5pbV9wcm9taXNlO1xyXG4gICAgICAgIGxldCBhbmltX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICBhbmltX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGFuaW1fcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgbGV0IHRleHRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zLCB5X3BvcywgZm9udF9uYW1lLCBhbmltYXRlID8gJycgOiBsaW5lLCBudW1iZXJzLkZPTlRfU0laRSk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0X3Nwcml0ZV9zaGFkb3cgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MrMSwgeV9wb3MrMSwgZm9udF9uYW1lLCBhbmltYXRlID8gJycgOiBsaW5lLCBudW1iZXJzLkZPTlRfU0laRSk7XHJcblxyXG4gICAgICAgICAgICB5X3BvcyArPSBudW1iZXJzLkZPTlRfU0laRSArIChzcGFjZV9iZXR3ZWVuX2xpbmVzID09PSB1bmRlZmluZWQgPyBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMgOiBzcGFjZV9iZXR3ZWVuX2xpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSB0aGlzLmZvbnRfY29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZV9zaGFkb3cpO1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cudGludCA9IDB4MDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmltYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IGxpbmUuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgIGxldCB3b3Jkc19pbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZV9wcm9taXNlX3Jlc29sdmU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXBlYXRlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMucmVwZWF0KDI1LCB3b3Jkcy5sZW5ndGgsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zcHJpdGUudGV4dCArPSB3b3Jkc1t3b3Jkc19pbmRleF0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy50ZXh0ICs9IHdvcmRzW3dvcmRzX2luZGV4XSArICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyt3b3Jkc19pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmRzX2luZGV4ID09PSB3b3Jkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVfcHJvbWlzZV9yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVzX3Byb21pc2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzX3Byb21pc2VzLnBvcCgpLnRoZW4ocmVwZWF0ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGluZXNfcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShyZXNvbHZlID0+IGxpbmVfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZV9zaGFkb3cpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGluZXNfc3ByaXRlcy5wdXNoKHt0ZXh0OiB0ZXh0X3Nwcml0ZSwgc2hhZG93OiB0ZXh0X3Nwcml0ZV9zaGFkb3d9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFByb21pc2UuYWxsKGxpbmVzX3Byb21pc2VzKS50aGVuKGFuaW1fcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICByZXR1cm4gYW5pbV9wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qQ3JlYXRlcyBhIHNwcml0ZSB0byByZXByZXNlbnQgdGhlIGdpdmVuIHRleHRcclxuICAgIFRoaXMgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBsZWZ0IGJ5IGRlZmF1bHRcclxuXHJcbiAgICBJbnB1dDogdGV4dCBbc3RyaW5nXSAtIFRoZSB0ZXh0IHRvIGRpc3BsYXlcclxuICAgICAgICAgICByaWdodF9hbGlnbiAtIElmIHRydWUsIGFsaWduIHRoZSB0ZXh0IHRvIHRoZSByaWdodCBpbnN0ZWFkXHJcbiAgICAgICAgICAgXHJcbiAgICBPdXRwdXQ6IHRleHQgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQgc3ByaXRlXHJcbiAgICAgICAgICAgIHNoYWRvdyBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgdGV4dCdzIHNoYWRvd1xyXG4gICAgICAgICAgICByaWdodF9hbGlnbiBbYm9vbGVhbl0gLSBUaGUgaW5wdXQgdmFsdWVcclxuICAgICAgICAgICAgaW5pdGlhbF94IFtudW1iZXJdIC0gVGhlIHRleHQncyB4IHZhbHVlKi9cclxuICAgIHNldF9zaW5nbGVfbGluZV90ZXh0KHRleHQsIHJpZ2h0X2FsaWduID0gZmFsc2UsIGl0YWxpYyA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgeF9wb3MgPSBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyA0O1xyXG4gICAgICAgIGxldCB5X3BvcyA9IG51bWJlcnMuV0lORE9XX1BBRERJTkdfVE9QO1xyXG4gICAgICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/ICdncy1pdGFsaWMtYm1wLWZvbnQnIDogJ2dzLWJtcC1mb250JztcclxuICAgICAgICBsZXQgdGV4dF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MsIHlfcG9zLCBmb250X25hbWUsIHRleHQsIG51bWJlcnMuRk9OVF9TSVpFKTtcclxuICAgICAgICBsZXQgdGV4dF9zcHJpdGVfc2hhZG93ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zKzEsIHlfcG9zKzEsIGZvbnRfbmFtZSwgdGV4dCwgbnVtYmVycy5GT05UX1NJWkUpO1xyXG4gICAgICAgIGlmIChyaWdodF9hbGlnbikge1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZS54IC09IHRleHRfc3ByaXRlLndpZHRoO1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cueCAtPSB0ZXh0X3Nwcml0ZV9zaGFkb3cud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGUpO1xyXG4gICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSB0aGlzLmZvbnRfY29sb3I7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVfc21vb3RoKHRleHRfc3ByaXRlX3NoYWRvdyk7XHJcbiAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LnRpbnQgPSAweDA7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlX3NoYWRvdyk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGV4dF9zcHJpdGUpO1xyXG5cclxuICAgICAgICByZXR1cm4ge3RleHQ6IHRleHRfc3ByaXRlLCBzaGFkb3c6IHRleHRfc3ByaXRlX3NoYWRvdywgcmlnaHRfYWxpZ246IHJpZ2h0X2FsaWduLCBpbml0aWFsX3g6IHhfcG9zfTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNyZWF0ZXMgYSBzcHJpdGUgdG8gcmVwcmVzZW50IGEgc2luZ2xlIGxpbmUgb2YgdGV4dCBhdCBhIGdpdmVuIGxvY2F0aW9uXHJcblxyXG4gICAgSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBUaGUgdGV4dCB0byBkaXNwbGF5XHJcbiAgICAgICAgICAgeF9wb3MsIHlfcG9zIFtudW1iZXJdIC0gVGhlIGRlc2lyZWQgcG9zaXRpb24ncyB4IGFuZCB5XHJcbiAgICAgICAgICAgcmlnaHRfYWxpZ24gW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgdGhlIHRleHQgd2lsbCBiZSByaWdodC1hbGlnbmVkXHJcbiAgICAgICAgICAgaXNfY2VudGVyX3BvcyBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgdGV4dCB3aWxsIGJlIGNlbnRlcmVkXHJcbiAgICAgICAgICAgY29sb3IgW251bWJlcl0gLSBUaGUgdGV4dCdzIGRlc2lyZWQgY29sb3JcclxuICAgICAgICAgICB3aXRoX2JnIFtib29sZWFuXSAtIElmIHRydWUsIGdpdmVzIHRoZSB0ZXh0IGEgYmFja2dyb3VuZFxyXG4gICAgICAgICAgIGludGVybmFsX2dyb3VwX2tleSBbc3RyaW5nXSAtIElmIHRoaXMgZXhpc3RzLCB0aGUgdGV4dCB3aWxsIGJlbG9uZyB0byB0aGF0IGdyb3VwXHJcblxyXG4gICAgT3V0cHV0OiB0ZXh0IFtQaGFzZXI6U3ByaXRlXSAtIFRoZSB0ZXh0IHNwcml0ZVxyXG4gICAgICAgICAgICBzaGFkb3cgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQncyBzaGFkb3dcclxuICAgICAgICAgICAgcmlnaHRfYWxpZ24gW2Jvb2xlYW5dIC0gVGhlIGlucHV0IHZhbHVlXHJcbiAgICAgICAgICAgIGluaXRpYWxfeCBbbnVtYmVyXSAtIFRoZSB0ZXh0J3MgeCB2YWx1ZVxyXG4gICAgICAgICAgICB0ZXh0X2JnIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSB0ZXh0J3MgYmFja2dyb3VuZCovXHJcbiAgICBzZXRfdGV4dF9pbl9wb3NpdGlvbih0ZXh0LCB4X3BvcywgeV9wb3MsIHJpZ2h0X2FsaWduID0gZmFsc2UsIGlzX2NlbnRlcl9wb3MgPSBmYWxzZSwgY29sb3IgPSB0aGlzLmZvbnRfY29sb3IsIHdpdGhfYmcgPSBmYWxzZSwgaW50ZXJuYWxfZ3JvdXBfa2V5ID0gdW5kZWZpbmVkLCBpdGFsaWMgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/ICdncy1pdGFsaWMtYm1wLWZvbnQnIDogJ2dzLWJtcC1mb250JztcclxuICAgICAgICBsZXQgdGV4dF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MsIHlfcG9zLCBmb250X25hbWUsIHRleHQsIG51bWJlcnMuRk9OVF9TSVpFKTtcclxuICAgICAgICBsZXQgdGV4dF9zcHJpdGVfc2hhZG93ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zKzEsIHlfcG9zKzEsIGZvbnRfbmFtZSwgdGV4dCwgbnVtYmVycy5GT05UX1NJWkUpO1xyXG4gICAgICAgIGlmIChpc19jZW50ZXJfcG9zKSB7XHJcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLmNlbnRlclggPSB4X3BvcztcclxuICAgICAgICAgICAgdGV4dF9zcHJpdGUuY2VudGVyWSA9IHlfcG9zO1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cuY2VudGVyWCA9IHhfcG9zICsgMTtcclxuICAgICAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LmNlbnRlclkgPSB5X3BvcyArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodF9hbGlnbikge1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZS54IC09IHRleHRfc3ByaXRlLndpZHRoO1xyXG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cueCAtPSB0ZXh0X3Nwcml0ZV9zaGFkb3cud2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0ZXh0X2JnO1xyXG4gICAgICAgIGlmICh3aXRoX2JnKSB7XHJcbiAgICAgICAgICAgIHRleHRfYmcgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKHRleHRfc3ByaXRlLnggLSAxLCB0ZXh0X3Nwcml0ZS55KTtcclxuICAgICAgICAgICAgdGV4dF9iZy5iZWdpbkZpbGwodGhpcy5jb2xvciwgMSk7XHJcbiAgICAgICAgICAgIHRleHRfYmcuZHJhd1JlY3QoMCwgMCwgdGV4dF9zcHJpdGUud2lkdGggKyAzLCBudW1iZXJzLkZPTlRfU0laRSk7XHJcbiAgICAgICAgICAgIHRleHRfYmcuZW5kRmlsbCgpO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXBfa2V5ID09PSB1bmRlZmluZWQgfHwgIXRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9iZykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfYmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGUpO1xyXG4gICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGVfc2hhZG93KTtcclxuICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cudGludCA9IDB4MDtcclxuXHJcbiAgICAgICAgbGV0IGFkZGVkX3RvX2ludGVybmFsID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGludGVybmFsX2dyb3VwX2tleSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGFkZGVkX3RvX2ludGVybmFsID0gdGhpcy5hZGRfdG9faW50ZXJuYWxfZ3JvdXAoaW50ZXJuYWxfZ3JvdXBfa2V5LCB0ZXh0X3Nwcml0ZV9zaGFkb3cpICYmIHRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9zcHJpdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFkZGVkX3RvX2ludGVybmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlX3NoYWRvdyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7dGV4dDogdGV4dF9zcHJpdGUsIHNoYWRvdzogdGV4dF9zcHJpdGVfc2hhZG93LCByaWdodF9hbGlnbjogcmlnaHRfYWxpZ24sIGluaXRpYWxfeDogeF9wb3MsIHRleHRfYmc6IHRleHRfYmd9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qQ2hhbmdlcyB0aGUgdGV4dCBhbmQgcmVwb3NpdGlvbnMgaXRcclxuXHJcbiAgICBJbnB1dDogbmV3X3RleHQgW2FycmF5XSAtIFRoZSBuZXcgdGV4dCB0byBzaG93IChhcnJheSBvZiBzdHJpbmcpXHJcbiAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcclxuICAgICAgICAgICAgICAgIHRleHQgLSBUaGUgdGV4dCB0byBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHRcclxuICAgICAgICAgICAgbmV3X3gsIG5ld195IFtudW1iZXJdIC0gVGhlIHggYW5kIHkgZm9yIHRoZSBuZXcgcG9zaXRpb24qL1xyXG4gICAgdXBkYXRlX3RleHQobmV3X3RleHQsIHRleHRfc2hhZG93X3BhaXIsIG5ld194LCBuZXdfeSkge1xyXG4gICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dC5zZXRUZXh0KG5ld190ZXh0KTtcclxuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy5zZXRUZXh0KG5ld190ZXh0KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBuZXdfeCwgeTogbmV3X3l9LCB0ZXh0X3NoYWRvd19wYWlyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNoYW5nZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBnaXZlbiB0ZXh0XHJcblxyXG4gICAgSW5wdXQ6IG5ld19wb3NpdGlvbiBbYXJyYXldIC0gVGhlIGRlc2lyZWQgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgIHggLSBUaGUgbmV3IHhcclxuICAgICAgICAgICAgICAgIHkgLSBUaGUgbmV3IHlcclxuICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyIFthcnJheV0gLSBDb250YWlucyB0aGUgdGV4dCBhbmQgaXRzIHNoYWRvd1xyXG4gICAgICAgICAgICAgICAgdGV4dCAtIFRoZSB0ZXh0IHRvIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgc2hhZG93IC0gVGhlIHNoYWRvdyBvZiB0aGUgdGV4dCovXHJcbiAgICB1cGRhdGVfdGV4dF9wb3NpdGlvbihuZXdfcG9zaXRpb24sIHRleHRfc2hhZG93X3BhaXIpIHtcclxuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQueCA9IG5ld19wb3NpdGlvbi54O1xyXG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy54ID0gbmV3X3Bvc2l0aW9uLnggKyAxO1xyXG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLmluaXRpYWxfeCA9IG5ld19wb3NpdGlvbi54O1xyXG4gICAgICAgICAgICBpZiAodGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcueCA9IHRleHRfc2hhZG93X3BhaXIudGV4dC54IC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQueSA9IG5ld19wb3NpdGlvbi55O1xyXG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy55ID0gbmV3X3Bvc2l0aW9uLnkgKyAxO1xyXG4gICAgICAgICAgICBpZiAodGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcueSA9IHRleHRfc2hhZG93X3BhaXIudGV4dC55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnJpZ2h0X2FsaWduKSB7XHJcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dC54ID0gdGV4dF9zaGFkb3dfcGFpci5pbml0aWFsX3ggLSB0ZXh0X3NoYWRvd19wYWlyLnRleHQud2lkdGg7XHJcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LnggPSB0ZXh0X3NoYWRvd19wYWlyLmluaXRpYWxfeCAtIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LndpZHRoICsgMTtcclxuICAgICAgICAgICAgaWYgKHRleHRfc2hhZG93X3BhaXIudGV4dF9iZykge1xyXG4gICAgICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnLnggPSB0ZXh0X3NoYWRvd19wYWlyLnRleHQueCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypDaGFuZ2VzIHRoZSBjb2xvciBvZiB0aGUgZ2l2ZW4gdGV4dFxyXG5cclxuICAgIElucHV0OiBjb2xvciBbbnVtYmVyXSAtIFRoZSBuZXcgY29sb3IgdG8gc2V0XHJcbiAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcclxuICAgICAgICAgICAgICAgIHRleHQgLSBUaGUgdGV4dCB0byBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHQqL1xyXG4gICAgdXBkYXRlX3RleHRfY29sb3IoY29sb3IsIHRleHRfc2hhZG93X3BhaXIpIHtcclxuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQudGludCA9IGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmVtb3ZlcyBhIHRleHQgYW5kIGl0cyBzaGFkb3dcclxuXHJcbiAgICBJbnB1dDogdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcclxuICAgICAgICAgICAgICAgIHRleHQgLSBUaGUgdGV4dCB0byByZW1vdmVcclxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHQqL1xyXG4gICAgcmVtb3ZlX3RleHQodGV4dF9zaGFkb3dfcGFpcikge1xyXG4gICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dC5kZXN0cm95KCk7XHJcbiAgICAgICAgdGV4dF9zaGFkb3dfcGFpci5zaGFkb3cuZGVzdHJveSgpO1xyXG4gICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcpIHtcclxuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhlIHdpbmRvd1xyXG5cclxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKVxyXG4gICAgICAgICAgIGFuaW1hdGUgW2Jvb2xlYW5dIC0gUGxheXMgYSBmYWRpbmcgYW5pbWF0aW9uIGlmIHRydWUqL1xyXG4gICAgY2xvc2UoY2FsbGJhY2ssIGFuaW1hdGUgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmdyb3VwKS50byhcclxuICAgICAgICAgICAgICAgIHsgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uX3RpbWUsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRpY2F0b3JfaXNfc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlX2luZGljYXRvcl9pc19zZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypEZXN0cm95cyB0aGUgbWFpbiBncm91cCBvZiB0aGUgd2luZG93XHJcblxyXG4gICAgSW5wdXQ6IGFuaW1hdGUgW2Jvb2xlYW5dIC0gUGxheXMgYSBmYWRpbmcgYW5pbWF0aW9uIGlmIHRydWVcclxuICAgICAgICAgICBkZXN0cm95X2NhbGxiY2FrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cclxuICAgIGRlc3Ryb3koYW5pbWF0ZSwgZGVzdHJveV9jYWxsYmFjaykge1xyXG4gICAgICAgIGxldCBvbl9kZXN0cm95ID0gKCkgPT4geyBcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRpY2F0b3JfaXNfc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X3BhZ2VfaW5kaWNhdG9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXBzID0ge307XHJcbiAgICAgICAgICAgIGlmIChkZXN0cm95X2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIGRlc3Ryb3lfY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmdyb3VwKS50byhcclxuICAgICAgICAgICAgICAgIHsgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uX3RpbWUsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZShvbl9kZXN0cm95KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvbl9kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qRW5hYmxlcyB0aGUgcGFnZSBpbmRpY2F0b3JzIHRvIGJlIHNob3duIGFuZCBwcmVwYXJlcyB0aGUgc3BhY2UgYWNjb3JkaW5nbHlcclxuICAgIFVzZWQgaW4gdGhlIFBzeW5lcmd5IGFuZCBJdGVtcyBtZW51Ki9cclxuICAgIGluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCkge1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMucGFnZV9udW1iZXJfYmFyKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5iZWdpbkZpbGwodGhpcy5jb2xvciwgMSk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuZHJhd1JlY3QoMCwgMCwgUEFHRV9OVU1CRVJfV0lEVEgsIFBBR0VfTlVNQkVSX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuZW5kRmlsbCgpO1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0KTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYmVnaW5GaWxsKHRoaXMuY29sb3IsIDEpO1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC5kcmF3UmVjdCgwLCAwLCBQQUdFX05VTUJFUl9XSURUSCwgUEFHRV9OVU1CRVJfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuZW5kRmlsbCgpO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JzID0gW107XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdyA9IHRoaXMuY3JlYXRlX2F0X2dyb3VwKCh0aGlzLndpZHRoIC0gMyksIFBBR0VfSU5ESUNBVE9SX0FSUk9XX1ksIFwicGFnZV9hcnJvd1wiKTtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LnNjYWxlLnggPSAtMTtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LnggLT0gdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy53aWR0aDtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cgPSB0aGlzLmNyZWF0ZV9hdF9ncm91cCgwLCBQQUdFX0lORElDQVRPUl9BUlJPV19ZLCBcInBhZ2VfYXJyb3dcIik7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdGhlIGN1cnJlbnQgcGFnZSBpbiB0aGUgd2luZG93XHJcbiAgICBcclxuICAgIElucHV0OiBwYWdlX251bWJlciBbbnVtYmVyXSAtIFRoZSBudW1iZXIgb2YgcGFnZXNcclxuICAgICAgICAgICBwYWdlX2luZGV4IFtudW1iZXJdIC0gVGhlIGN1cnJlbnQgcGFnZSBiZWluZyBzaG93biovXHJcbiAgICBzZXRfcGFnZV9pbmRpY2F0b3IocGFnZV9udW1iZXIsIHBhZ2VfaW5kZXgpIHtcclxuICAgICAgICBpZiAocGFnZV9udW1iZXIgPD0gMSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyLndpZHRoID0gcGFnZV9udW1iZXIgKiBQQUdFX05VTUJFUl9XSURUSDtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci54ID0gdGhpcy53aWR0aCAtIHRoaXMucGFnZV9udW1iZXJfYmFyLndpZHRoIC0gNTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcGFnZV9udW1iZXI7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5wYWdlX251bWJlcl9iYXIueCArIFBBR0VfTlVNQkVSX1dJRFRIICogKGkgLSAxKSArIChQQUdFX05VTUJFUl9XSURUSCA+PiAxKTtcclxuICAgICAgICAgICAgY29uc3QgeSA9IFBBR0VfTlVNQkVSX0hFSUdIVCA+PiAxO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9ycy5wdXNoKHRoaXMuc2V0X3RleHRfaW5fcG9zaXRpb24oaS50b1N0cmluZygpLCB4LCB5LCBmYWxzZSwgdHJ1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfaW5kaWNhdG9yX2hpZ2hsaWdodChwYWdlX251bWJlciwgcGFnZV9pbmRleCk7XHJcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9pbmRpY2F0b3JfYXJyb3cocGFnZV9udW1iZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB0aGUgcGFnZSBpbmRpY2F0b3IgaGlnaGxpZ2h0IGluIHRoZSB3aW5kb3dcclxuICAgIFxyXG4gICAgSW5wdXQ6IHBhZ2VfbnVtYmVyIFtudW1iZXJdIC0gVGhlIG51bWJlciBvZiBwYWdlc1xyXG4gICAgICAgICAgIHBhZ2VfaW5kZXggW251bWJlcl0gLSBUaGUgY3VycmVudCBwYWdlIGJlaW5nIHNob3duKi9cclxuICAgIHNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQocGFnZV9udW1iZXIsIHBhZ2VfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQueCA9IHRoaXMud2lkdGggLSA1IC0gKHBhZ2VfbnVtYmVyIC0gcGFnZV9pbmRleCkgKiBQQUdFX05VTUJFUl9XSURUSDtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdGhlIHBhZ2UgaW5kaWNhdG9yIGFycm93cyBpbiB0aGUgd2luZG93XHJcblxyXG4gICAgSW5wdXQ6IHBhZ2VfbnVtYmVyIFtudW1iZXJdIC0gVGhlIG51bWJlciBvZiBwYWdlcyovXHJcbiAgICBzZXRfcGFnZV9pbmRpY2F0b3JfYXJyb3cocGFnZV9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3ggPSB0aGlzLndpZHRoIC0gNSAtIHBhZ2VfbnVtYmVyICogUEFHRV9OVU1CRVJfV0lEVEggLSB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cud2lkdGggLSAyO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy54ID0gdGhpcy5jYWxjdWxhdGVkX2Fycm93X2xlZnRfeDtcclxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5ydW5uaW5nICYmIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIucGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIucmVzdW1lKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5sb29wKFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDEsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy54ID0gdGhpcy5jYWxjdWxhdGVkX2Fycm93X2xlZnRfeCArIH4oLXRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy54JTIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy54ID0gKHRoaXMud2lkdGggLSAzKSAtIH4oLXRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cueCUyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cueCAtPSB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LndpZHRoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKlJlbW92ZXMgdGhlIHBhZ2UgaW5kaWNhdG9yIGZyb20gdGhlIHdpbmRvdyovXHJcbiAgICB1bnNldF9wYWdlX2luZGljYXRvcigpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlX2luZGljYXRvcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVfdGV4dCh0aGlzLnBhZ2VfaW5kaWNhdG9yc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JzID0gW107XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5wYXVzZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEVmZmVjdCwgZWZmZWN0X3R5cGVzIH0gZnJvbSBcIi4vRWZmZWN0LmpzXCI7XHJcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZpZ2h0ZXJfdHlwZXMgPSB7XHJcbiAgICBBTExZOiAxLFxyXG4gICAgRU5FTVk6IDIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdGVtcG9yYXJ5X3N0YXR1cyA9IHtcclxuICAgIERFTFVTSU9OOiBcImRlbHVzaW9uXCIsXHJcbiAgICBTVFVOOiBcInN0dW5cIixcclxuICAgIFNMRUVQOiBcInNsZWVwXCIsXHJcbiAgICBTRUFMOiBcInNlYWxcIixcclxuICAgIERFQVRIX0NVUlNFOiBcImRlYXRoX2N1cnNlXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBwZXJtYW5lbnRfc3RhdHVzID0ge1xyXG4gICAgRE9XTkVEOiBcImRvd25lZFwiLFxyXG4gICAgUE9JU09OOiBcInBvaXNvblwiLFxyXG4gICAgVkVOT006IFwidmVub21cIixcclxuICAgIEVRVUlQX0NVUlNFOiBcImVxdWlwX2N1cnNlXCIsXHJcbiAgICBIQVVOVDogXCJoYXVudFwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb25fY2F0Y2hfc3RhdHVzX21zZyA9IHtcclxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLkRFTFVTSU9OXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBpcyB3cmFwcGVkIGluIGRlbHVzaW9uIWAsXHJcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBoYXMgYmVlbiBzdHVubmVkIWAsXHJcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TTEVFUF06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gZmFsbHMgYXNsZWVwIWAsXHJcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TRUFMXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSdzIFBzeW5lcmd5IGhhcyBiZWVuIHNlYWxlZCFgLFxyXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VdOiB0YXJnZXQgPT4gYFRoZSBTcGlyaXQgb2YgRGVhdGggZW1icmFjZXMgJHt0YXJnZXQubmFtZX0hYCxcclxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLkRPV05FRF06IHRhcmdldCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWSA/IGAke3RhcmdldC5uYW1lfSB3YXMgZG93bmVkLi4uYCA6IGBZb3UgZmVsbGVkICR7dGFyZ2V0Lm5hbWV9IWA7XHJcbiAgICB9LFxyXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuUE9JU09OXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBpcyBpbmZlY3RlZCB3aXRoIHBvaXNvbiFgLFxyXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuVkVOT01dOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9IGlzIGluZmVjdGVkIHdpdGggZGVhZGx5IHBvaXNvbiFgLFxyXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuSEFVTlRdOiB0YXJnZXQgPT4gYEFuIGV2aWwgc3Bpcml0IGdyaXBzICR7dGFyZ2V0Lm5hbWV9IWBcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbl9yZW1vdmVfc3RhdHVzX21zZyA9IHtcclxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLkRFTFVTSU9OXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBzZWVzIGNsZWFybHkgb25jZSBhZ2FpbiFgLFxyXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuU1RVTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgbm8gbG9uZ2VyIHN0dW5uZWQhYCxcclxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSB3YWtlcyBmcm9tIHNsdW1iZXIhYCxcclxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNFQUxdOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9J3MgUHN5bmVyZ3kgc2VhbCBpcyBnb25lIWAsXHJcbiAgICBbcGVybWFuZW50X3N0YXR1cy5ET1dORURdOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9J3MgaGFzIGJlZW4gcmV2aXZlZCFgLFxyXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuUE9JU09OXTogdGFyZ2V0ID0+IGBUaGUgcG9pc29uIGlzIHB1cmdlZCBmcm9tICR7dGFyZ2V0Lm5hbWV9IWAsXHJcbiAgICBbcGVybWFuZW50X3N0YXR1cy5WRU5PTV06IHRhcmdldCA9PiBgVGhlIHZlbm9tIGlzIHB1cmdlZCBmcm9tICR7dGFyZ2V0Lm5hbWV9IWBcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXIge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5X25hbWUsIG5hbWUpIHtcclxuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5wZXJtYW5lbnRfc3RhdHVzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaW5pdF9lZmZlY3RfdHVybnNfY291bnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0X2VmZmVjdF90dXJuc19jb3VudCgpIHtcclxuICAgICAgICB0aGlzLmVmZmVjdF90dXJuc19jb3VudCA9IHtcclxuICAgICAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuREVMVVNJT05dOiAwLFxyXG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogMCxcclxuICAgICAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuU0xFRVBdOiAwLFxyXG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TRUFMXTogMCxcclxuICAgICAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VdOiAwLFxyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLk1BWF9IUF06IDAsXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuTUFYX1BQXTogMCxcclxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiAwLFxyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiAwLFxyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkFHSUxJVFldOiAwLFxyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiAwLFxyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLlBPV0VSXToge30sXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuUkVTSVNUXToge30sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF90eXBlcy5QT1dFUl1bZWxlbWVudF0gPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3RfdHlwZXMuUkVTSVNUXVtlbGVtZW50XSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldF9lZmZlY3RfdHVybnNfa2V5KGVmZmVjdCkge1xyXG4gICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBlZmZlY3Quc3RhdHVzX2tleV9uYW1lO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfSFA6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdC50eXBlO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUkVTSVNUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdC50eXBlICsgXCJfXCIgKyBlZmZlY3QuYXR0cmlidXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfZWZmZWN0X3R1cm5zX2NvdW50KGVmZmVjdCkge1xyXG4gICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3Quc3RhdHVzX2tleV9uYW1lXTtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3QudHlwZV07XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBPV0VSOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdW2VmZmVjdC5hdHRyaWJ1dGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfZWZmZWN0X3R1cm5zX2NvdW50KGVmZmVjdCwgdmFsdWUgPSAtMSwgcmVsYXRpdmUgPSB0cnVlKSB7XHJcbiAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnN0YXR1c19rZXlfbmFtZV0gPSByZWxhdGl2ZSA/IHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC5zdGF0dXNfa2V5X25hbWVdICsgdmFsdWUgOiB2YWx1ZTtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3QudHlwZV0gPSByZWxhdGl2ZSA/IHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXSArIHZhbHVlIDogdmFsdWU7O1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUkVTSVNUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXVtlZmZlY3QuYXR0cmlidXRlXSA9IHJlbGF0aXZlID8gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdW2VmZmVjdC5hdHRyaWJ1dGVdICsgdmFsdWUgOiB2YWx1ZTs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZF9lZmZlY3QoZWZmZWN0X29iaiwgZWZmZWN0X293bmVyX2luc3RhbmNlLCBhcHBseSA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IGVmZmVjdCA9IG5ldyBFZmZlY3QoXHJcbiAgICAgICAgICAgIGVmZmVjdF9vYmoudHlwZSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai5xdWFudGl0eSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai5vcGVyYXRvcixcclxuICAgICAgICAgICAgZWZmZWN0X293bmVyX2luc3RhbmNlLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnF1YW50aXR5X2lzX2Fic29sdXRlLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnJhdGUsXHJcbiAgICAgICAgICAgIGVmZmVjdF9vYmouY2hhbmNlLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai5hZGRfc3RhdHVzLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnN0YXR1c19rZXlfbmFtZSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai50dXJuc19xdWFudGl0eSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0LFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmRhbWFnZV9mb3JtdWxhX2tleV9uYW1lLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnVzYWdlLFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLm9uX2Nhc3RlcixcclxuICAgICAgICAgICAgZWZmZWN0X29iai5yZWxhdGl2ZV90b19wcm9wZXJ0eSxcclxuICAgICAgICAgICAgZWZmZWN0X29iai5zdWJfZWZmZWN0LFxyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmVmZmVjdF9tc2csXHJcbiAgICAgICAgICAgIGVmZmVjdF9vYmouc2hvd19tc2csXHJcbiAgICAgICAgICAgIHRoaXNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cy5wdXNoKGVmZmVjdCk7XHJcbiAgICAgICAgbGV0IGNoYW5nZXM7XHJcbiAgICAgICAgaWYgKGFwcGx5KSB7XHJcbiAgICAgICAgICAgIGNoYW5nZXMgPSBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGVmZmVjdDogZWZmZWN0LFxyXG4gICAgICAgICAgICBjaGFuZ2VzOiBjaGFuZ2VzXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVfZWZmZWN0KGVmZmVjdF90b19yZW1vdmUsIGFwcGx5ID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmVmZmVjdHMgPSB0aGlzLmVmZmVjdHMuZmlsdGVyKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlZmZlY3QgIT09IGVmZmVjdF90b19yZW1vdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGFwcGx5KSB7XHJcbiAgICAgICAgICAgIGVmZmVjdF90b19yZW1vdmUuYXBwbHlfZWZmZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZF9wZXJtYW5lbnRfc3RhdHVzKHN0YXR1cykge1xyXG4gICAgICAgIHRoaXMucGVybWFuZW50X3N0YXR1cy5hZGQoc3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVfcGVybWFuZW50X3N0YXR1cyhzdGF0dXMpIHtcclxuICAgICAgICB0aGlzLnBlcm1hbmVudF9zdGF0dXMuZGVsZXRlKHN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFzX3Blcm1hbmVudF9zdGF0dXMoc3RhdHVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGVybWFuZW50X3N0YXR1cy5oYXMoc3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfdGVtcG9yYXJ5X3N0YXR1cyhzdGF0dXMpIHtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuYWRkKHN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlX3RlbXBvcmFyeV9zdGF0dXMoc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wb3Jhcnlfc3RhdHVzLmRlbGV0ZShzdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc190ZW1wb3Jhcnlfc3RhdHVzKHN0YXR1cykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNfcGFyYWx5emVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU0xFRVApIHx8IHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TVFVOKTtcclxuICAgIH1cclxuXHJcbiAgICBpc19wb2lzb25lZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBlcm1hbmVudF9zdGF0dXMuUE9JU09OO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhwZXJtYW5lbnRfc3RhdHVzLlZFTk9NKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGVybWFuZW50X3N0YXR1cy5WRU5PTVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY29uc3QgaXRlbV90eXBlcyA9IHtcclxuICAgIFdFQVBPTlM6IFwid2VhcG9uc1wiLFxyXG4gICAgQVJNT1I6IFwiYXJtb3JcIixcclxuICAgIENIRVNUX1BST1RFQ1RPUjogXCJjaGVzdF9wcm90ZWN0b3JcIixcclxuICAgIEhFQURfUFJPVEVDVE9SOiBcImhlYWRfcHJvdGVjdG9yXCIsXHJcbiAgICBMRUdfUFJPVEVDVE9SOiBcImxlZ19wcm90ZWN0b3JcIixcclxuICAgIEFCSUxJVFlfR1JBTlRPUjogXCJhYmlsaXR5X2dyYW50b3JcIixcclxuICAgIExVQ0tZX0NIQVJNOiBcImx1Y2t5X2NoYXJtXCIsXHJcbiAgICBSSU5HOiBcInJpbmdcIixcclxuICAgIFVOREVSV0VBUjogXCJ1bmRlcndlYXJcIixcclxuICAgIEdFTkVSQUxfSVRFTTogXCJnZW5lcmFsX2l0ZW1cIixcclxuICAgIFNISVJUOiBcInNoaXJ0XCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VfdHlwZXMgPSB7XHJcbiAgICBNVUxUSVBMRV9VU0VTOiBcIm11bHRpcGxlX3VzZXNcIixcclxuICAgIFNJTkdMRV9VU0U6IFwic2luZ2xlX3VzZVwiLFxyXG4gICAgQlJFQUtTX1dIRU5fVVNFOiBcImJyZWFrc193aGVuX3VzZVwiLFxyXG4gICAgTk9fVVNFOiBcIm5vX3VzZVwiXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGtleV9uYW1lLFxyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBkZXNjcmlwdGlvbixcclxuICAgICAgICB1c2VfdHlwZSxcclxuICAgICAgICBjdXJzZXNfd2hlbl9lcXVpcHBlZCxcclxuICAgICAgICBjYW50X2JlX3JlbW92ZWQsXHJcbiAgICAgICAgcmFyZV9pdGVtLFxyXG4gICAgICAgIGltcG9yYW50X2l0ZW0sXHJcbiAgICAgICAgY2FycnlfdXBfdG9fMzAsXHJcbiAgICAgICAgZWZmZWN0cyxcclxuICAgICAgICBhdHRyaWJ1dGUsXHJcbiAgICAgICAgdW5sZWFzaF9hYmlsaXR5LFxyXG4gICAgICAgIHVubGVhc2hfcmF0ZSxcclxuICAgICAgICB1c2VfYWJpbGl0eSxcclxuICAgICAgICBlcXVpcGFibGVfY2hhcnMsXHJcbiAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgZ3JhbnRlZF9hYmlsaXR5LFxyXG4gICAgICAgIGljb25fcGF0aFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy51c2VfdHlwZSA9IHVzZV90eXBlO1xyXG4gICAgICAgIHRoaXMuY3Vyc2VzX3doZW5fZXF1aXBwZWQgPSBjdXJzZXNfd2hlbl9lcXVpcHBlZDtcclxuICAgICAgICB0aGlzLmNhbnRfYmVfcmVtb3ZlZCA9IGNhbnRfYmVfcmVtb3ZlZDtcclxuICAgICAgICB0aGlzLnJhcmVfaXRlbSA9IHJhcmVfaXRlbTtcclxuICAgICAgICB0aGlzLmltcG9yYW50X2l0ZW0gPSBpbXBvcmFudF9pdGVtO1xyXG4gICAgICAgIHRoaXMuY2FycnlfdXBfdG9fMzAgPSBjYXJyeV91cF90b18zMDtcclxuICAgICAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlO1xyXG4gICAgICAgIHRoaXMudW5sZWFzaF9hYmlsaXR5ID0gdW5sZWFzaF9hYmlsaXR5O1xyXG4gICAgICAgIHRoaXMudW5sZWFzaF9yYXRlID0gdW5sZWFzaF9yYXRlO1xyXG4gICAgICAgIHRoaXMudXNlX2FiaWxpdHkgPSB1c2VfYWJpbGl0eTtcclxuICAgICAgICB0aGlzLmVxdWlwYWJsZV9jaGFycyA9IGVxdWlwYWJsZV9jaGFycztcclxuICAgICAgICB0aGlzLnByaWNlID0gcHJpY2U7XHJcbiAgICAgICAgdGhpcy5ncmFudGVkX2FiaWxpdHkgPSBncmFudGVkX2FiaWxpdHk7XHJcbiAgICAgICAgdGhpcy5pY29uX3BhdGggPSBpY29uX3BhdGg7XHJcbiAgICAgICAgdGhpcy5icm9rZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVxdWlwYWJsZSA9IHRoaXMudHlwZSA9PT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0gPyBmYWxzZSA6IHRydWU7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY29uc3QgYWJpbGl0eV90eXBlcyA9IHtcclxuICAgIEhFQUxJTkc6IFwiaGVhbGluZ1wiLFxyXG4gICAgRUZGRUNUX09OTFk6IFwiZWZmZWN0X29ubHlcIixcclxuICAgIEFEREVEX0RBTUFHRTogXCJhZGRlZF9kYW1hZ2VcIixcclxuICAgIE1VTFRJUExJRVI6IFwibXVsdGlwbGllclwiLFxyXG4gICAgQkFTRV9EQU1BR0U6IFwiYmFzZV9kYW1hZ2VcIixcclxuICAgIFNVTU1PTjogXCJzdW1tb25cIixcclxuICAgIFVUSUxJVFk6IFwidXRpbGl0eVwiLFxyXG4gICAgRElSRUNUX0RBTUFHRTogXCJkaXJlY3RfZGFtYWdlXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhYmlsaXR5X21zZ190eXBlcyA9IHtcclxuICAgIENBU1Q6IFwiY2FzdFwiLFxyXG4gICAgQVRUQUNLOiBcImF0dGFja1wiLFxyXG4gICAgVVNFOiBcInVzZVwiLFxyXG4gICAgU1VNTU9OOiBcInN1bW1vblwiLFxyXG4gICAgVU5MRUFTSDogXCJ1bmxlYXNoXCIsXHJcbiAgICBERUZFTkQ6IFwiZGVmZW5kXCIsXHJcbiAgICBJVEVNX1VOTEVBU0g6IFwiaXRlbV91bmxlYXNoXCIsXHJcbiAgICBTRVRfREpJTk46IFwic2V0X2RqaW5uXCIsXHJcbiAgICBOT19NU0c6IFwibm9fbXNnXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhYmlsaXR5X3RhcmdldF90eXBlcyA9IHtcclxuICAgIE5PX1RBUkdFVDogXCJub190YXJnZXRcIixcclxuICAgIEFMTFk6IFwiYWxseVwiLFxyXG4gICAgRU5FTVk6IFwiZW5lbXlcIixcclxuICAgIFVTRVI6IFwidXNlclwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYWJpbGl0eV9jYXRlZ29yaWVzID0ge1xyXG4gICAgUFNZTkVSR1k6IFwicHN5bmVyZ3lcIixcclxuICAgIERKSU5OOiBcImRqaW5uXCIsXHJcbiAgICBTVU1NT046IFwic3VtbW9uXCIsXHJcbiAgICBJVEVNOiBcIml0ZW1cIixcclxuICAgIFdFQVBPTl9VTkxFQVNIOiBcIndlYXBvbl91bmxlYXNoXCIsXHJcbiAgICBOT1JNQUw6IFwibm9ybWFsXCJcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRpbWluaXNoaW5nX3JhdGlvcyA9IHtcclxuICAgIFNUQU5EQVJEOiB7XHJcbiAgICAgICAgMTE6IC4xLFxyXG4gICAgICAgIDk6IC4yLFxyXG4gICAgICAgIDc6IC40LFxyXG4gICAgICAgIDU6IC42LFxyXG4gICAgICAgIDM6IC44LFxyXG4gICAgICAgIDE6IDFcclxuICAgIH0sXHJcbiAgICBTVU1NT046IHtcclxuICAgICAgICAxMTogLjEsXHJcbiAgICAgICAgOTogLjIsXHJcbiAgICAgICAgNzogLjMsXHJcbiAgICAgICAgNTogLjQsXHJcbiAgICAgICAgMzogLjcsXHJcbiAgICAgICAgMTogMVxyXG4gICAgfSxcclxuICAgIERJTUlOSVNIOiB7XHJcbiAgICAgICAgMTE6IC4xLFxyXG4gICAgICAgIDk6IC4xLFxyXG4gICAgICAgIDc6IC4xLFxyXG4gICAgICAgIDU6IC4zLFxyXG4gICAgICAgIDM6IC41LFxyXG4gICAgICAgIDE6IDFcclxuICAgIH0sXHJcbiAgICBTVEFUVVM6IHtcclxuICAgICAgICAxMTogLjMsXHJcbiAgICAgICAgOTogLjMsXHJcbiAgICAgICAgNzogLjMsXHJcbiAgICAgICAgNTogLjMsXHJcbiAgICAgICAgMzogLjYsXHJcbiAgICAgICAgMTogMVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWJpbGl0eSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBrZXlfbmFtZSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgZWxlbWVudCxcclxuICAgICAgICBiYXR0bGVfdGFyZ2V0LFxyXG4gICAgICAgIHJhbmdlLFxyXG4gICAgICAgIHBwX2Nvc3QsXHJcbiAgICAgICAgYWJpbGl0eV9wb3dlcixcclxuICAgICAgICBlZmZlY3RzX291dHNpZGVfYmF0dGxlLFxyXG4gICAgICAgIGlzX2JhdHRsZV9hYmlsaXR5LFxyXG4gICAgICAgIGlzX2ZpZWxkX3BzeW5lcmd5LFxyXG4gICAgICAgIGVmZmVjdHMsXHJcbiAgICAgICAgYWJpbGl0eV9jYXRlZ29yeSxcclxuICAgICAgICBiYXR0bGVfYW5pbWF0aW9uX2tleSxcclxuICAgICAgICBwcmlvcml0eV9tb3ZlLFxyXG4gICAgICAgIGhhc19jcml0aWNhbCxcclxuICAgICAgICBjcml0X211bHRfZmFjdG9yLFxyXG4gICAgICAgIGNhbl9zd2l0Y2hfdG9fdW5sZWFzaCxcclxuICAgICAgICBjYW5fYmVfZXZhZGVkLFxyXG4gICAgICAgIHVzZV9kaW1pbmlzaGluZ19yYXRpbyxcclxuICAgICAgICBtc2dfdHlwZSxcclxuICAgICAgICBhZmZlY3RzX3BwLFxyXG4gICAgICAgIGhhc19hbmltYXRpb25fdmFyaWF0aW9uXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX3RhcmdldCA9IGJhdHRsZV90YXJnZXQ7XHJcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xyXG4gICAgICAgIHRoaXMucHBfY29zdCA9IHBwX2Nvc3Q7XHJcbiAgICAgICAgdGhpcy5hYmlsaXR5X3Bvd2VyID0gYWJpbGl0eV9wb3dlcjtcclxuICAgICAgICB0aGlzLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUgPSBlZmZlY3RzX291dHNpZGVfYmF0dGxlO1xyXG4gICAgICAgIHRoaXMuaXNfYmF0dGxlX2FiaWxpdHkgPSBpc19iYXR0bGVfYWJpbGl0eTtcclxuICAgICAgICB0aGlzLmlzX2ZpZWxkX3BzeW5lcmd5ID0gaXNfZmllbGRfcHN5bmVyZ3k7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RzID0gZWZmZWN0cztcclxuICAgICAgICB0aGlzLmFiaWxpdHlfY2F0ZWdvcnkgPSBhYmlsaXR5X2NhdGVnb3J5O1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2FuaW1hdGlvbl9rZXkgPSBiYXR0bGVfYW5pbWF0aW9uX2tleTtcclxuICAgICAgICB0aGlzLnByaW9yaXR5X21vdmUgPSBwcmlvcml0eV9tb3ZlID8gcHJpb3JpdHlfbW92ZSA6IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGFzX2NyaXRpY2FsID0gaGFzX2NyaXRpY2FsID8gaGFzX2NyaXRpY2FsIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jcml0X211bHRfZmFjdG9yID0gY3JpdF9tdWx0X2ZhY3RvciAhPT0gdW5kZWZpbmVkID8gY3JpdF9tdWx0X2ZhY3RvciA6IDE7XHJcbiAgICAgICAgdGhpcy5jYW5fc3dpdGNoX3RvX3VubGVhc2ggPSBjYW5fc3dpdGNoX3RvX3VubGVhc2ggPyBjYW5fc3dpdGNoX3RvX3VubGVhc2ggOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmNhbl9iZV9ldmFkZWQgPSBjYW5fYmVfZXZhZGVkID8gY2FuX2JlX2V2YWRlZCA6IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudXNlX2RpbWluaXNoaW5nX3JhdGlvID0gdXNlX2RpbWluaXNoaW5nX3JhdGlvID8gdXNlX2RpbWluaXNoaW5nX3JhdGlvIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tc2dfdHlwZSA9IG1zZ190eXBlID09PSB1bmRlZmluZWQgPyBhYmlsaXR5X21zZ190eXBlcy5DQVNUIDogbXNnX3R5cGU7XHJcbiAgICAgICAgdGhpcy5hZmZlY3RzX3BwID0gYWZmZWN0c19wcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhZmZlY3RzX3BwO1xyXG4gICAgICAgIHRoaXMuaGFzX2FuaW1hdGlvbl92YXJpYXRpb24gPSBoYXNfYW5pbWF0aW9uX3ZhcmlhdGlvbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBoYXNfYW5pbWF0aW9uX3ZhcmlhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0X2RpbWluaXNoaW5nX3JhdGlvcyhhYmlsaXR5X3R5cGUsIHVzZV9kaW1pbmlzaGluZ19yYXRpbykge1xyXG4gICAgICAgIGlmICh1c2VfZGltaW5pc2hpbmdfcmF0aW8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRpbWluaXNoaW5nX3JhdGlvcy5ESU1JTklTSDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChhYmlsaXR5X3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLlNVTU1PTjogcmV0dXJuIGRpbWluaXNoaW5nX3JhdGlvcy5TVU1NT047XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBkaW1pbmlzaGluZ19yYXRpb3MuU1RBTkRBUkQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiY29uc3QgQkFDS1dBUkQgPSAtMTtcclxuY29uc3QgRk9SV0FSRCA9IDE7XHJcbmNvbnN0IENVUlNPUl9ERUxUQSA9IDQ7XHJcbmNvbnN0IElOREVYX0NIQU5HRV9USU1FID0gUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMTtcclxuY29uc3QgQ1VSU09SX1RXRUVOX1RJTUUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1cnNvckNvbnRyb2wge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgZ2FtZSxcclxuICAgICAgICBpc19yaWdodF9sZWZ0LFxyXG4gICAgICAgIGlzX3VwX2Rvd24sXHJcbiAgICAgICAgbWF4X3JpZ2h0X2xlZnRfZ2V0dGVyLFxyXG4gICAgICAgIG1heF91cF9kb3duX2dldHRlcixcclxuICAgICAgICBiYXNlX2dyb3VwLFxyXG4gICAgICAgIG9uX3JpZ2h0X2xlZnRfY2hhbmdlLFxyXG4gICAgICAgIG9uX3VwX2Rvd25fY2hhbmdlLFxyXG4gICAgICAgIHJpZ2h0X2xlZnRfaW5kZXhfZ2V0dGVyLFxyXG4gICAgICAgIHJpZ2h0X2xlZnRfaW5kZXhfc2V0dGVyLFxyXG4gICAgICAgIHVwX2Rvd25faW5kZXhfZ2V0dGVyLFxyXG4gICAgICAgIHVwX2Rvd25faW5kZXhfc2V0dGVyLFxyXG4gICAgICAgIG9wZW5fY2hlY2tlcixcclxuICAgICAgICBhY3RpdmVfY2hlY2tlcixcclxuICAgICAgICBjdXJzb3JfYmFzZV94X2dldHRlcixcclxuICAgICAgICBjdXJzb3JfYmFzZV95X2dldHRlclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmlzX3JpZ2h0X2xlZnQgPSBpc19yaWdodF9sZWZ0O1xyXG4gICAgICAgIHRoaXMuaXNfdXBfZG93biA9IGlzX3VwX2Rvd247XHJcbiAgICAgICAgdGhpcy5tYXhfcmlnaHRfbGVmdF9nZXR0ZXIgPSBtYXhfcmlnaHRfbGVmdF9nZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5tYXhfdXBfZG93bl9nZXR0ZXIgPSBtYXhfdXBfZG93bl9nZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5iYXNlX2dyb3VwID0gYmFzZV9ncm91cDtcclxuICAgICAgICB0aGlzLm9uX3JpZ2h0X2xlZnRfY2hhbmdlID0gb25fcmlnaHRfbGVmdF9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fcmlnaHRfbGVmdF9jaGFuZ2U7XHJcbiAgICAgICAgdGhpcy5vbl91cF9kb3duX2NoYW5nZSA9IG9uX3VwX2Rvd25fY2hhbmdlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX3VwX2Rvd25fY2hhbmdlO1xyXG4gICAgICAgIHRoaXMucmlnaHRfbGVmdF9pbmRleF9nZXR0ZXIgPSByaWdodF9sZWZ0X2luZGV4X2dldHRlcjtcclxuICAgICAgICB0aGlzLnJpZ2h0X2xlZnRfaW5kZXhfc2V0dGVyID0gcmlnaHRfbGVmdF9pbmRleF9zZXR0ZXI7XHJcbiAgICAgICAgdGhpcy51cF9kb3duX2luZGV4X2dldHRlciA9IHVwX2Rvd25faW5kZXhfZ2V0dGVyO1xyXG4gICAgICAgIHRoaXMudXBfZG93bl9pbmRleF9zZXR0ZXIgPSB1cF9kb3duX2luZGV4X3NldHRlcjtcclxuICAgICAgICB0aGlzLm9wZW5fY2hlY2tlciA9IG9wZW5fY2hlY2tlcjtcclxuICAgICAgICB0aGlzLmFjdGl2ZV9jaGVja2VyID0gYWN0aXZlX2NoZWNrZXI7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfYmFzZV94X2dldHRlciA9IGN1cnNvcl9iYXNlX3hfZ2V0dGVyO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2Jhc2VfeV9nZXR0ZXIgPSBjdXJzb3JfYmFzZV95X2dldHRlcjtcclxuICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudXBfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZG93bl9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbml0X2N1cnNvcigpO1xyXG4gICAgICAgIHRoaXMuaW5pdF9jdXJzb3JfdHdlZW4oKTtcclxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29udHJvbCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25Eb3duLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3Blbl9jaGVja2VyKCkgfHwgIXRoaXMuYWN0aXZlX2NoZWNrZXIoKSB8fCAhdGhpcy5pc19yaWdodF9sZWZ0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0X3ByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jaGFuZ2VfdGltZXJzKEZPUldBUkQsIHRydWUpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uVXAuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLnJpZ2h0X3ByZXNzZWQgfHwgIXRoaXMuaXNfcmlnaHRfbGVmdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLmlzX3JpZ2h0X2xlZnQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0X3ByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jaGFuZ2VfdGltZXJzKEJBQ0tXQVJELCB0cnVlKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uVXAuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLmxlZnRfcHJlc3NlZCB8fCAhdGhpcy5pc19yaWdodF9sZWZ0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVVApLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5fY2hlY2tlcigpIHx8ICF0aGlzLmFjdGl2ZV9jaGVja2VyKCkgfHwgIXRoaXMuaXNfdXBfZG93bikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG93bl9wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3duX3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwX3ByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhCQUNLV0FSRCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVVApLm9uVXAuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLnVwX3ByZXNzZWQgfHwgIXRoaXMuaXNfdXBfZG93bikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5ET1dOKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLmlzX3VwX2Rvd24pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwX3ByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwX3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fcHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jaGFuZ2VfdGltZXJzKEZPUldBUkQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkRPV04pLm9uVXAuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLmRvd25fcHJlc3NlZCB8fCAhdGhpcy5pc191cF9kb3duKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NoYW5nZV90aW1lcnMoc3RlcCwgcmlnaHRfbGVmdCkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlX2luZGV4KHN0ZXAsIHJpZ2h0X2xlZnQpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmFkZChQaGFzZXIuVGltZXIuUVVBUlRFUiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQubG9vcChJTkRFWF9DSEFOR0VfVElNRSwgdGhpcy5jaGFuZ2VfaW5kZXguYmluZCh0aGlzLCBzdGVwLCByaWdodF9sZWZ0KSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX2luZGV4KHN0ZXAsIHJpZ2h0X2xlZnQpIHtcclxuICAgICAgICBjb25zdCBnZXR0ZXIgPSByaWdodF9sZWZ0ID8gdGhpcy5yaWdodF9sZWZ0X2luZGV4X2dldHRlciA6IHRoaXMudXBfZG93bl9pbmRleF9nZXR0ZXI7XHJcbiAgICAgICAgY29uc3Qgc2V0dGVyID0gcmlnaHRfbGVmdCA/IHRoaXMucmlnaHRfbGVmdF9pbmRleF9zZXR0ZXIgOiB0aGlzLnVwX2Rvd25faW5kZXhfc2V0dGVyO1xyXG4gICAgICAgIGNvbnN0IG9uX2NoYW5nZSA9IHJpZ2h0X2xlZnQgPyB0aGlzLm9uX3JpZ2h0X2xlZnRfY2hhbmdlIDogdGhpcy5vbl91cF9kb3duX2NoYW5nZTtcclxuICAgICAgICBjb25zdCBtYXggPSByaWdodF9sZWZ0ID8gdGhpcy5tYXhfcmlnaHRfbGVmdF9nZXR0ZXIgOiB0aGlzLm1heF91cF9kb3duX2dldHRlcjtcclxuICAgICAgICBjb25zdCBiZWZvcmVfaW5kZXggPSBnZXR0ZXIoKTtcclxuICAgICAgICBzZXR0ZXIoKGdldHRlcigpICsgc3RlcCkgJSBtYXgoKSk7XHJcbiAgICAgICAgaWYgKGdldHRlcigpIDwgMCkge1xyXG4gICAgICAgICAgICBzZXR0ZXIobWF4KCkgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgb25fY2hhbmdlKGJlZm9yZV9pbmRleCwgZ2V0dGVyKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3BfdGltZXJzKCkge1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0b3AoKTtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQuc3RvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRfY3Vyc29yKCkge1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2Jhc2VfeCA9IC01O1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3JfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiY3Vyc29yXCIpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmJhc2VfZ3JvdXAuYWRkKHRoaXMuY3Vyc29yX2dyb3VwKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC54ID0gdGhpcy5jdXJzb3JfYmFzZV94X2dldHRlcigpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLnkgPSB0aGlzLmN1cnNvcl9iYXNlX3lfZ2V0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4gPSB0aGlzLmdhbWUudHdlZW5zLmNyZWF0ZSh0aGlzLmN1cnNvcik7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdF9jdXJzb3JfdHdlZW4oKSB7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4udG8oXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHg6IHRoaXMuY3Vyc29yLnggLSBDVVJTT1JfREVMVEEsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmN1cnNvci55ICsgQ1VSU09SX0RFTFRBXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIENVUlNPUl9UV0VFTl9USU1FLFxyXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgLTEsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jdXJzb3JfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3R3ZWVuLmlzUnVubmluZyAmJiB0aGlzLmN1cnNvcl90d2Vlbi5pc1BhdXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnNvcl90d2Vlbi5yZXN1bWUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmN1cnNvcl90d2Vlbi5pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4uc3RhcnQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3R3ZWVuLmlzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcl90d2Vlbi5yZXN1bWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC54ID0gdGhpcy5jdXJzb3JfYmFzZV94X2dldHRlcigpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLnkgPSB0aGlzLmN1cnNvcl9iYXNlX3lfZ2V0dGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy51cF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kb3duX3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVhY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX3R3ZWVuLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5mb3JFYWNoKHNpZ25hbF9iaW5kaW5nID0+IHtcclxuICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLmRlc3Ryb3koKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBTcHJpdGVCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yIChrZXlfbmFtZSwgYWN0aW9ucykge1xyXG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcclxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbnNbaV1dID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLCBkaXJlY3Rpb25zLCBmcmFtZV9jb3VudHMpIHtcclxuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zID0gbmV3IEFycmF5KGRpcmVjdGlvbnMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9jb3VudHMgPSBuZXcgQXJyYXkoZGlyZWN0aW9ucy5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IGZyYW1lX2NvdW50X2lzX2FycmF5ID0gQXJyYXkuaXNBcnJheShmcmFtZV9jb3VudHMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBmcmFtZV9jb3VudCA9IGZyYW1lX2NvdW50X2lzX2FycmF5ID8gZnJhbWVfY291bnRzW2ldIDogZnJhbWVfY291bnRzO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zW2ldID0gZGlyZWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfY291bnRzW2ldID0gZnJhbWVfY291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24sIGZyYW1lX3JhdGUpIHtcclxuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9yYXRlID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGxldCB0aGlzX2ZyYW1lX3JhdGU7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZyYW1lX3JhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVfcmF0ZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzX2ZyYW1lX3JhdGUgPSBmcmFtZV9yYXRlWzBdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzX2ZyYW1lX3JhdGUgPSBmcmFtZV9yYXRlW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpc19mcmFtZV9yYXRlID0gZnJhbWVfcmF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9yYXRlW2RpcmVjdGlvbl0gPSB0aGlzX2ZyYW1lX3JhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGlvbkxvb3AoYWN0aW9uLCBsb29wKSB7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0ubG9vcCA9IGxvb3A7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QWN0aW9uU3ByaXRlc2hlZXQoYWN0aW9uLCBzcHJpdGVzaGVldF9pbWFnZV91cmwsIHNwcml0ZXNoZWV0X2pzb25fdXJsKSB7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uc3ByaXRlc2hlZXQgPSB7XHJcbiAgICAgICAgICAgIHNwcml0ZXNoZWV0X2ltYWdlX3VybCA6IHNwcml0ZXNoZWV0X2ltYWdlX3VybCxcclxuICAgICAgICAgICAgc3ByaXRlc2hlZXRfanNvbl91cmwgOiBzcHJpdGVzaGVldF9qc29uX3VybFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFNwcml0ZXNoZWV0cyhnYW1lLCBmb3JjZV9sb2FkLCBvbl9sb2FkX2NvbXBsZXRlKSB7XHJcbiAgICAgICAgZm9yKGxldCBhY3Rpb24gaW4gdGhpcy5hY3Rpb25zKXtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlc2hlZXQgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5zcHJpdGVzaGVldDtcclxuICAgICAgICAgICAgbGV0IGxvYWRlciA9IGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlfbmFtZSArIFwiX1wiICsgYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgc3ByaXRlc2hlZXQuc3ByaXRlc2hlZXRfaW1hZ2VfdXJsLFxyXG4gICAgICAgICAgICAgICAgc3ByaXRlc2hlZXQuc3ByaXRlc2hlZXRfanNvbl91cmxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKGZvcmNlX2xvYWQpIHtcclxuICAgICAgICAgICAgICAgIGxvYWRlci5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKG9uX2xvYWRfY29tcGxldGUsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZS5sb2FkLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVGcmFtZU5hbWVzKGFjdGlvbiwgZGlyZWN0aW9uLCBzdGFydCwgc3RvcCwgc3VmZml4LCB6ZXJvUGFkKSB7XHJcbiAgICAgICAgaWYgKCEoYWN0aW9uIGluIHRoaXMuYW5pbWF0aW9ucykpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zW2FjdGlvbl0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2FjdGlvbl1bZGlyZWN0aW9uXSA9IFBoYXNlci5BbmltYXRpb24uZ2VuZXJhdGVGcmFtZU5hbWVzKFxyXG4gICAgICAgICAgICBgJHthY3Rpb259LyR7ZGlyZWN0aW9ufS9gLFxyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgc3RvcCxcclxuICAgICAgICAgICAgc3VmZml4LFxyXG4gICAgICAgICAgICB6ZXJvUGFkXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBbmltYXRpb24oc3ByaXRlLCBhY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9ucztcclxuICAgICAgICBjb25zdCBsb29wID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0ubG9vcCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHRoaXMuYWN0aW9uc1thY3Rpb25dLmxvb3A7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lX3JhdGUgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9yYXRlW2RpcmVjdGlvbl07XHJcbiAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmFkZChcclxuICAgICAgICAgICAgICAgIGFjdGlvbiArIFwiX1wiICsgZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zW2FjdGlvbl1bZGlyZWN0aW9uXSxcclxuICAgICAgICAgICAgICAgIGZyYW1lX3JhdGUsXHJcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGxvb3ApID8gbG9vcFtpXSA6IGxvb3AsXHJcbiAgICAgICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2VuZXJhdGVBbGxGcmFtZXMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYWN0aW9uIGluIHRoaXMuYWN0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9ucztcclxuICAgICAgICAgICAgY29uc3QgZnJhbWVfY291bnRzID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfY291bnRzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGlvbnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnJhbWVOYW1lcyhhY3Rpb24sIGRpcmVjdGlvbiwgMCwgZnJhbWVfY291bnRzW2ldIC0gMSwgJycsIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEZyYW1lTmFtZShhY3Rpb24sIGRpcmVjdGlvbiwgaW5kZXgpIHtcclxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRfaW5kZXggPSBpbmRleC50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7bWluaW11bUludGVnZXJEaWdpdHM6IDIsIHVzZUdyb3VwaW5nOiBmYWxzZX0pO1xyXG4gICAgICAgIHJldHVybiBgJHthY3Rpb259LyR7ZGlyZWN0aW9ufS8ke2Zvcm1hdHRlZF9pbmRleH1gO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFjdGlvbktleShhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXlfbmFtZSArIFwiX1wiICsgYWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFuaW1hdGlvbktleShhY3Rpb24sIGRpcmVjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gKyBcIl9cIiArIGRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTcHJpdGVBY3Rpb24oc3ByaXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNwcml0ZS5rZXkuc3BsaXQoXCJfXCIpWzFdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZXZlbnRfdHlwZXMsIFRpbGVFdmVudCB9IGZyb20gXCIuL1RpbGVFdmVudC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBnZXRfc3Vycm91bmRpbmdzLCBnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uLCBkaXJlY3Rpb25zLCBzcGxpdF9kaXJlY3Rpb24sIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuXHJcbmNvbnN0IEpVTVBfT0ZGU0VUID0gMzA7XHJcbmNvbnN0IEpVTVBfRFVSQVRJT04gPSAxNTA7XHJcblxyXG5leHBvcnQgY2xhc3MgSnVtcEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIGlzX3NldCkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGV2ZW50X3R5cGVzLkpVTVAsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuaXNfc2V0ID0gaXNfc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIGZpcmUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZyB8fCAhdGhpcy5jaGVja19wb3NpdGlvbigpIHx8IHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpIHx8IHRoaXMuZGF0YS5tZW51X29wZW4gfHwgdGhpcy5kYXRhLmluX2JhdHRsZSB8fCB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGp1bXBfb2Zmc2V0ID0gSlVNUF9PRkZTRVQ7XHJcbiAgICAgICAgbGV0IGRpcmVjdGlvbjtcclxuICAgICAgICBsZXQganVtcF9kaXJlY3Rpb247XHJcbiAgICAgICAgbGV0IG5leHRfcG9zaXRpb24gPSB7eDogdGhpcy54LCB5OiB0aGlzLnl9O1xyXG4gICAgICAgIGxldCBzaWRlX3Bvc2l0aW9uID0ge3g6IHRoaXMueCwgeTogdGhpcy55fTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMubGVmdCkge1xyXG4gICAgICAgICAgICBqdW1wX29mZnNldCA9IC1qdW1wX29mZnNldDtcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJ4XCI7XHJcbiAgICAgICAgICAgIG5leHRfcG9zaXRpb24ueCAtPSAyO1xyXG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnggLT0gMTtcclxuICAgICAgICAgICAganVtcF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5yaWdodCkge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcclxuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi54ICs9IDI7XHJcbiAgICAgICAgICAgIHNpZGVfcG9zaXRpb24ueCArPSAxO1xyXG4gICAgICAgICAgICBqdW1wX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cCkge1xyXG4gICAgICAgICAgICBqdW1wX29mZnNldCA9IC1qdW1wX29mZnNldDtcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJ5XCI7XHJcbiAgICAgICAgICAgIG5leHRfcG9zaXRpb24ueSAtPSAyO1xyXG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnkgLT0gMTtcclxuICAgICAgICAgICAganVtcF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMuZG93bikge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBcInlcIjtcclxuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi55ICs9IDI7XHJcbiAgICAgICAgICAgIHNpZGVfcG9zaXRpb24ueSArPSAxO1xyXG4gICAgICAgICAgICBqdW1wX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGp1bXBfZGlyZWN0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2lkZV9wb3Nfa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkoc2lkZV9wb3NpdGlvbi54LCBzaWRlX3Bvc2l0aW9uLnkpO1xyXG4gICAgICAgIGlmIChzaWRlX3Bvc19rZXkgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLmV2ZW50c1tzaWRlX3Bvc19rZXldLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuZGF0YS5tYXAuZXZlbnRzW3NpZGVfcG9zX2tleV1baV07XHJcbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJhY3RhYmxlX29iamVjdF9mb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGUgc2lkZSBwb3NpdGlvbiBoYXMgYSBpbnRlcmFjdGFibGUgb2JqZWN0LCBpdCBkb2VzIG5vdCBjYW5jZWwgdGhpcyBqdW1wIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyICE9PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlkZXJfbGF5ZXIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC54ID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCAmJiBldmVudC55ID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0YWJsZV9vYmplY3RfZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2FuY2VsIGp1bXBpbmcgaWYgdGhlIG5leHQgc2lkZSBldmVudCBpcyBhbHNvIGEganVtcFxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVAgJiYgZXZlbnQuaXNfc2V0ICYmIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5leHRfcG9zX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KG5leHRfcG9zaXRpb24ueCwgbmV4dF9wb3NpdGlvbi55KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tpXTtcclxuICAgICAgICAgICAgaWYgKG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggIT09IG5leHRfcG9zaXRpb24ueCB8fCBuZXh0X2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICE9PSBuZXh0X3Bvc2l0aW9uLnkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgIT09IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5iYXNlX2NvbGxpZGVyX2xheWVyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV4dF9wb3Nfa2V5IGluIHRoaXMuZGF0YS5tYXAuZXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCBhY3RpdmVfanVtcF9ldmVudF9mb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuZXZlbnRzW25leHRfcG9zX2tleV0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5kYXRhLm1hcC5ldmVudHNbbmV4dF9wb3Nfa2V5XVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QICYmIGV2ZW50LmlzX2FjdGl2ZShnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uKGp1bXBfZGlyZWN0aW9uKSkgJiYgZXZlbnQuaXNfc2V0ICYmIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVfanVtcF9ldmVudF9mb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSnVtcEV2ZW50LnNldF9qdW1wX2NvbGxpc2lvbih0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEp1bXBFdmVudC51bnNldF9zZXRfanVtcF9jb2xsaXNpb24odGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVfanVtcF9ldmVudF9mb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEuaGVyby5qdW1waW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcclxuICAgICAgICBsZXQgdHdlZW5fb2JqID0ge307XHJcbiAgICAgICAgdHdlZW5fb2JqW2RpcmVjdGlvbl0gPSB0aGlzLmRhdGEuaGVyby5zcHJpdGVbZGlyZWN0aW9uXSArIGp1bXBfb2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IGhlcm9feCA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCAqIChuZXh0X3Bvc2l0aW9uLnggKyAwLjUpO1xyXG4gICAgICAgIGNvbnN0IGhlcm9feSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiAobmV4dF9wb3NpdGlvbi55ICsgMC41KTtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInhcIikge1xyXG4gICAgICAgICAgICB0d2Vlbl9vYmoueSA9IFtoZXJvX3kgLSA1LCBoZXJvX3kgLSA4LCBoZXJvX3kgLSA1LCBoZXJvX3ldO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHR3ZWVuX29iai54ID0gaGVyb194O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoXCJqdW1wXCIsIHJldmVyc2VfZGlyZWN0aW9uc1tqdW1wX2RpcmVjdGlvbl0pO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy54ID0gaGVyb194O1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueSA9IGhlcm9feTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSkudG8oIFxyXG4gICAgICAgICAgICAgICAgdHdlZW5fb2JqLFxyXG4gICAgICAgICAgICAgICAgSlVNUF9EVVJBVElPTixcclxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnJldmVyc2VPbmNlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KFwianVtcF9cIiArIHJldmVyc2VfZGlyZWN0aW9uc1tqdW1wX2RpcmVjdGlvbl0sIHRoaXMuZGF0YS5oZXJvLnNwcml0ZV9pbmZvLmFjdGlvbnNbXCJqdW1wXCJdLmZyYW1lX3JhdGUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uanVtcGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBqdW1wX25lYXJfY29sbGlzaW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRfcG9zX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MsIHRoaXMuZGF0YS5oZXJvLnRpbGVfeV9wb3MpO1xyXG4gICAgICAgIGxldCBjdXJyZW50X3BvcyA9IHt4OiB0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zLCB5OiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zfTtcclxuICAgICAgICBsZXQgc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhjdXJyZW50X3Bvcy54LCBjdXJyZW50X3Bvcy55LCB0cnVlKTtcclxuICAgICAgICBsZXQgcmlnaHRfZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHBvc3NpYmxlX2RpcmVjdGlvbnMgPSBzcGxpdF9kaXJlY3Rpb24odGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zc2libGVfZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICByaWdodF9kaXJlY3Rpb24gPSByaWdodF9kaXJlY3Rpb24gfHwgdGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnMuaW5jbHVkZXMocG9zc2libGVfZGlyZWN0aW9uc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgbGV0IGNsZWFyX2JvZGllcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllc1tqXS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IGNvbmNhdF9rZXlzID0gY3VycmVudF9wb3Nfa2V5O1xyXG4gICAgICAgIGxldCBib2RpZXNfcG9zaXRpb25zID0gW107XHJcbiAgICAgICAgbGV0IGF0X2xlYXN0X29uZV9keW5hbWljX2FuZF9ub3RfZGlhZyA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vycm91bmRpbmdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHN1cnJvdW5kaW5nc1tpXS54LCBzdXJyb3VuZGluZ3NbaV0ueSk7XHJcbiAgICAgICAgICAgIGlmIChzdXJyb3VuZGluZ19rZXkgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLm1hcC5ldmVudHNbc3Vycm91bmRpbmdfa2V5XS5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nX2V2ZW50ID0gdGhpcy5kYXRhLm1hcC5ldmVudHNbc3Vycm91bmRpbmdfa2V5XVtqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vycm91bmRpbmdfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJiByaWdodF9kaXJlY3Rpb24gJiYgc3Vycm91bmRpbmdfZXZlbnQuaXNfc2V0ICYmIHN1cnJvdW5kaW5nX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChzdXJyb3VuZGluZ19ldmVudC5keW5hbWljIHx8IHRoaXMuZHluYW1pYykgJiYgIXN1cnJvdW5kaW5nc1tpXS5kaWFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdF9sZWFzdF9vbmVfZHluYW1pY19hbmRfbm90X2RpYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZGVfZXZlbnRfc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9kaWVzX3Bvc2l0aW9ucy5wdXNoKHNpZGVfZXZlbnRfc3Vycm91bmRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uY2F0X2tleXMgKz0gXCItXCIgKyBzdXJyb3VuZGluZ19rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuaGFzKGNvbmNhdF9rZXlzKSAmJiBhdF9sZWFzdF9vbmVfZHluYW1pY19hbmRfbm90X2RpYWcpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgY2xlYXJfYm9kaWVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLmFkZChjb25jYXRfa2V5cyk7XHJcbiAgICAgICAgICAgIGxldCBib2RpZXNfcG9zaXRpb24gPSBuZXcgU2V0KChzdXJyb3VuZGluZ3MuY29uY2F0KC4uLmJvZGllc19wb3NpdGlvbnMpKS5tYXAocG9zID0+IHBvcy54ICsgXCJfXCIgKyBwb3MueSkpO1xyXG4gICAgICAgICAgICBjb25jYXRfa2V5cy5zcGxpdChcIi1cIikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYm9kaWVzX3Bvc2l0aW9uLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGJvZGllc19wb3NpdGlvbi5mb3JFYWNoKHBvc2l0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc19hcnJheSA9IHBvc2l0aW9uLnNwbGl0KFwiX1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gKChwb3NfYXJyYXlbMF0gfCAwKSArIC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gKChwb3NfYXJyYXlbMV0gfCAwKSArIC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgYm9keSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUJvZHkoeF9wb3MsIHlfcG9zLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcclxuICAgICAgICAgICAgICAgIGJvZHkuc2V0UmVjdGFuZ2xlKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCwgdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICBib2R5LnNldENvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICAgICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgICAgICAgICBib2R5LmFuZ3VsYXJEYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcclxuICAgICAgICAgICAgICAgIGJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYm9keS5keW5hbWljID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBib2R5LnN0YXRpYyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBib2R5LmRlYnVnID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWc7XHJcbiAgICAgICAgICAgICAgICBib2R5LmNvbGxpZGVzKHRoaXMuZGF0YS5jb2xsaXNpb24uaGVyb19jb2xsaXNpb25fZ3JvdXApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5wdXNoKGJvZHkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmR5bmFtaWMgJiYgIXJpZ2h0X2RpcmVjdGlvbiAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5zaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIGNsZWFyX2JvZGllcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2V0X2p1bXBfY29sbGlzaW9uKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMgPSBbXTtcclxuICAgICAgICBkYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuY2xlYXIoKTtcclxuICAgICAgICBkYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAoZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XHJcbiAgICAgICAgZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKGRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcclxuICAgICAgICBmb3IgKGxldCBldmVudF9rZXkgaW4gZGF0YS5tYXAuZXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF0YS5tYXAuZXZlbnRzW2V2ZW50X2tleV0ubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW2V2ZW50X2tleV1bal07XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJiBldmVudC5keW5hbWljICYmIGV2ZW50LmlzX3NldCAmJiBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXMoZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdXJyb3VuZGluZ3MgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54IC0gMSwgeTogZXZlbnQueX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54ICsgMSwgeTogZXZlbnQueX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54LCB5OiBldmVudC55IC0gMX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54LCB5OiBldmVudC55ICsgMX0sXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1cnJvdW5kaW5ncy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vycm91bmRpbmdfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGR5bmFtaWNfZm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV0ubGVuZ3RoOyArK2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2V2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV1ba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNfZXZlbnQuZHluYW1pYyAmJiB0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVAgJiYgdGhpc19ldmVudC5pc19zZXQgJiYgdGhpc19ldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXMoZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljX2ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNfZm91bmQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4X3BvcyA9IChzdXJyb3VuZGluZ3NbaV0ueCArIC41KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5X3BvcyA9IChzdXJyb3VuZGluZ3NbaV0ueSArIC41KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IGdhbWUucGh5c2ljcy5wMi5jcmVhdGVCb2R5KHhfcG9zLCB5X3BvcywgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUoZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCwgZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldENvbGxpc2lvbkdyb3VwKGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldFplcm9Sb3RhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zdGF0aWMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmRlYnVnID0gZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmRlYnVnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmNvbGxpZGVzKGRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMucHVzaChib2R5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyB1bnNldF9zZXRfanVtcF9jb2xsaXNpb24oZGF0YSkge1xyXG4gICAgICAgIGRhdGEuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyhkYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICBkYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXMoZGF0YS5jb2xsaXNpb24uaGVyb19jb2xsaXNpb25fZ3JvdXApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXNbaV0uZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoZGF0YSwgc3Vycm91bmRpbmdzLCB0YXJnZXRfbGF5ZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1cnJvdW5kaW5ncy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZyA9IHN1cnJvdW5kaW5nc1tqXTtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZy54LCBzdXJyb3VuZGluZy55KTtcclxuICAgICAgICAgICAgaWYgKHRoaXNfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBkYXRhLm1hcC5ldmVudHNbdGhpc19rZXldLmxlbmd0aDsgKytrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Vycl9ldmVudCA9IGRhdGEubWFwLmV2ZW50c1t0aGlzX2tleV1ba107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1cnJfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vycl9ldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXModGFyZ2V0X2xheWVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1cnJfZXZlbnQuZHluYW1pYyA9PT0gZmFsc2UgJiYgc3Vycl9ldmVudC5pc19zZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJyX2V2ZW50LmFjdGl2YXRlX2F0KGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24oc3Vycm91bmRpbmcuZGlyZWN0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTcHJpdGVCYXNlIH0gZnJvbSAnLi9TcHJpdGVCYXNlLmpzJztcclxuaW1wb3J0IHsgY2hvb3NlX3JpZ2h0X2NsYXNzIH0gZnJvbSAnLi9DbGFzc2VzLmpzJztcclxuaW1wb3J0IHsgZGppbm5fc3RhdHVzIH0gZnJvbSAnLi9Eamlubi5qcyc7XHJcbmltcG9ydCB7IEVmZmVjdCwgZWZmZWN0X3R5cGVzIH0gZnJvbSAnLi9FZmZlY3QuanMnO1xyXG5pbXBvcnQgeyBpdGVtX3R5cGVzIH0gZnJvbSAnLi9JdGVtLmpzJztcclxuaW1wb3J0IHsgUGxheWVyLCBmaWdodGVyX3R5cGVzLCBwZXJtYW5lbnRfc3RhdHVzIH0gZnJvbSAnLi9QbGF5ZXIuanMnO1xyXG5pbXBvcnQgeyBlbGVtZW50cywgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBFTEVNX0FUVFJfTUlOLCBFTEVNX0FUVFJfTUFYIH0gZnJvbSAnLi9tYWdpY19udW1iZXJzLmpzJztcclxuXHJcbmNvbnN0IEVMRU1fTFZfREVMVEEgPSAxO1xyXG5jb25zdCBFTEVNX1BPV0VSX0RFTFRBID0gNTtcclxuY29uc3QgRUxFTV9SRVNJU1RfREVMVEEgPSA1O1xyXG5cclxuZXhwb3J0IGNsYXNzIE1haW5DaGFyQmFzZSBleHRlbmRzIFNwcml0ZUJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IgKFxyXG4gICAgICAgIGtleV9uYW1lLFxyXG4gICAgICAgIGFjdGlvbnMsXHJcbiAgICAgICAgd2Fsa19zcGVlZCxcclxuICAgICAgICBkYXNoX3NwZWVkLFxyXG4gICAgICAgIGNsaW1iX3NwZWVkLFxyXG4gICAgICAgIHB1c2hfc3BlZWRcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGtleV9uYW1lLCBhY3Rpb25zKTtcclxuICAgICAgICB0aGlzLndhbGtfc3BlZWQgPSB3YWxrX3NwZWVkO1xyXG4gICAgICAgIHRoaXMuZGFzaF9zcGVlZCA9IGRhc2hfc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5jbGltYl9zcGVlZCA9IGNsaW1iX3NwZWVkO1xyXG4gICAgICAgIHRoaXMucHVzaF9zcGVlZCA9IHB1c2hfc3BlZWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNYWluQ2hhciBleHRlbmRzIFBsYXllciB7XHJcbiAgICBjb25zdHJ1Y3RvciAoXHJcbiAgICAgICAga2V5X25hbWUsXHJcbiAgICAgICAgaW5mbyxcclxuICAgICAgICBzcHJpdGVfYmFzZSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGhwX2N1cnZlLFxyXG4gICAgICAgIHBwX2N1cnZlLFxyXG4gICAgICAgIGF0a19jdXJ2ZSxcclxuICAgICAgICBkZWZfY3VydmUsXHJcbiAgICAgICAgYWdpX2N1cnZlLFxyXG4gICAgICAgIGx1a19jdXJ2ZSxcclxuICAgICAgICBleHBfY3VydmUsXHJcbiAgICAgICAgc3RhcnRpbmdfbGV2ZWwsXHJcbiAgICAgICAgY2xhc3NfdGFibGUsXHJcbiAgICAgICAgYmF0dGxlX3NjYWxlLFxyXG4gICAgICAgIHZlbnVzX2xldmVsX2Jhc2UsXHJcbiAgICAgICAgbWVyY3VyeV9sZXZlbF9iYXNlLFxyXG4gICAgICAgIG1hcnNfbGV2ZWxfYmFzZSxcclxuICAgICAgICBqdXBpdGVyX2xldmVsX2Jhc2UsXHJcbiAgICAgICAgdmVudXNfcG93ZXJfYmFzZSxcclxuICAgICAgICBtZXJjdXJ5X3Bvd2VyX2Jhc2UsXHJcbiAgICAgICAgbWFyc19wb3dlcl9iYXNlLFxyXG4gICAgICAgIGp1cGl0ZXJfcG93ZXJfYmFzZSxcclxuICAgICAgICB2ZW51c19yZXNpc3RfYmFzZSxcclxuICAgICAgICBtZXJjdXJ5X3Jlc2lzdF9iYXNlLFxyXG4gICAgICAgIG1hcnNfcmVzaXN0X2Jhc2UsXHJcbiAgICAgICAganVwaXRlcl9yZXNpc3RfYmFzZSxcclxuICAgICAgICBpbm5hdGVfYWJpbGl0aWVzLFxyXG4gICAgICAgIGluX3BhcnR5LFxyXG4gICAgICAgIGRqaW5uaSxcclxuICAgICAgICBpdGVtcyxcclxuICAgICAgICBiYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihrZXlfbmFtZSwgbmFtZSk7XHJcbiAgICAgICAgdGhpcy5pbmZvID0gaW5mbztcclxuICAgICAgICB0aGlzLnNwcml0ZV9iYXNlID0gc3ByaXRlX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydGluZ19sZXZlbCA9IHN0YXJ0aW5nX2xldmVsO1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSB0aGlzLnN0YXJ0aW5nX2xldmVsO1xyXG4gICAgICAgIHRoaXMuY2xhc3NfdGFibGUgPSBjbGFzc190YWJsZTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zY2FsZSA9IGJhdHRsZV9zY2FsZTtcclxuICAgICAgICB0aGlzLmV4cF9jdXJ2ZSA9IGV4cF9jdXJ2ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfZXhwID0gdGhpcy5leHBfY3VydmVbdGhpcy5sZXZlbCAtIDFdO1xyXG4gICAgICAgIHRoaXMudmVudXNfbGV2ZWxfYmFzZSA9IHZlbnVzX2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2Jhc2UgPSBtZXJjdXJ5X2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5tYXJzX2xldmVsX2Jhc2UgPSBtYXJzX2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5qdXBpdGVyX2xldmVsX2Jhc2UgPSBqdXBpdGVyX2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy52ZW51c19wb3dlcl9iYXNlID0gdmVudXNfcG93ZXJfYmFzZTtcclxuICAgICAgICB0aGlzLm1lcmN1cnlfcG93ZXJfYmFzZSA9IG1lcmN1cnlfcG93ZXJfYmFzZTtcclxuICAgICAgICB0aGlzLm1hcnNfcG93ZXJfYmFzZSA9IG1hcnNfcG93ZXJfYmFzZTtcclxuICAgICAgICB0aGlzLmp1cGl0ZXJfcG93ZXJfYmFzZSA9IGp1cGl0ZXJfcG93ZXJfYmFzZTtcclxuICAgICAgICB0aGlzLnZlbnVzX3Jlc2lzdF9iYXNlID0gdmVudXNfcmVzaXN0X2Jhc2U7XHJcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Jlc2lzdF9iYXNlID0gbWVyY3VyeV9yZXNpc3RfYmFzZTtcclxuICAgICAgICB0aGlzLm1hcnNfcmVzaXN0X2Jhc2UgPSBtYXJzX3Jlc2lzdF9iYXNlO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9yZXNpc3RfYmFzZSA9IGp1cGl0ZXJfcmVzaXN0X2Jhc2U7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50X2FmaW5pdHkgPSBfLm1heEJ5KFtcclxuICAgICAgICAgICAge2VsZW1lbnQ6IGVsZW1lbnRzLlZFTlVTLCBsZXZlbDogdGhpcy52ZW51c19sZXZlbF9iYXNlfSxcclxuICAgICAgICAgICAge2VsZW1lbnQ6IGVsZW1lbnRzLk1FUkNVUlksIGxldmVsOiB0aGlzLm1lcmN1cnlfbGV2ZWxfYmFzZX0sXHJcbiAgICAgICAgICAgIHtlbGVtZW50OiBlbGVtZW50cy5NQVJTLCBsZXZlbDogdGhpcy5tYXJzX2xldmVsX2Jhc2V9LFxyXG4gICAgICAgICAgICB7ZWxlbWVudDogZWxlbWVudHMuSlVQSVRFUiwgbGV2ZWw6IHRoaXMuanVwaXRlcl9sZXZlbF9iYXNlfSxcclxuICAgICAgICBdLCBlbGVtZW50ID0+IGVsZW1lbnQubGV2ZWwpLmVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy52ZW51c19kamlubmkgPSBbXTtcclxuICAgICAgICB0aGlzLm1lcmN1cnlfZGppbm5pID0gW107XHJcbiAgICAgICAgdGhpcy5tYXJzX2RqaW5uaSA9IFtdO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9kamlubmkgPSBbXTtcclxuICAgICAgICB0aGlzLmluaXRfZGppbm5pKGRqaW5uaSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfY2xhc3MoKTtcclxuICAgICAgICB0aGlzLmhwX2N1cnZlID0gaHBfY3VydmU7XHJcbiAgICAgICAgdGhpcy5wcF9jdXJ2ZSA9IHBwX2N1cnZlO1xyXG4gICAgICAgIHRoaXMuYXRrX2N1cnZlID0gYXRrX2N1cnZlO1xyXG4gICAgICAgIHRoaXMuZGVmX2N1cnZlID0gZGVmX2N1cnZlO1xyXG4gICAgICAgIHRoaXMuYWdpX2N1cnZlID0gYWdpX2N1cnZlO1xyXG4gICAgICAgIHRoaXMubHVrX2N1cnZlID0gbHVrX2N1cnZlO1xyXG4gICAgICAgIHRoaXMuaHBfZXh0cmEgPSAwO1xyXG4gICAgICAgIHRoaXMucHBfZXh0cmEgPSAwO1xyXG4gICAgICAgIHRoaXMuYXRrX2V4dHJhID0gMDtcclxuICAgICAgICB0aGlzLmRlZl9leHRyYSA9IDA7XHJcbiAgICAgICAgdGhpcy5hZ2lfZXh0cmEgPSAwO1xyXG4gICAgICAgIHRoaXMubHVrX2V4dHJhID0gMDtcclxuICAgICAgICB0aGlzLmhwX3JlY292ZXJ5ID0gMDtcclxuICAgICAgICB0aGlzLnBwX3JlY292ZXJ5ID0gMDtcclxuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgdGhpcy5lcXVpcF9zbG90cyA9IHtcclxuICAgICAgICAgICAgd2VhcG9uOiBudWxsLFxyXG4gICAgICAgICAgICBoZWFkOiBudWxsLFxyXG4gICAgICAgICAgICBjaGVzdDogbnVsbCxcclxuICAgICAgICAgICAgYm9keTogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmlubmF0ZV9hYmlsaXRpZXMgPSBpbm5hdGVfYWJpbGl0aWVzO1xyXG4gICAgICAgIHRoaXMuaW5pdF9pdGVtcygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xyXG4gICAgICAgIHRoaXMuaW5fcGFydHkgPSBpbl9wYXJ0eTtcclxuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IFtdO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2FiaWxpdGllcygpO1xyXG4gICAgICAgIHRoaXMudHVybnMgPSAxO1xyXG4gICAgICAgIHRoaXMuZmlnaHRlcl90eXBlID0gZmlnaHRlcl90eXBlcy5BTExZO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkamlubmkoKSB7XHJcbiAgICAgICAgbGV0IHRoaXNfZGppbm5pX2xpc3QgPSB0aGlzLnZlbnVzX2RqaW5uaS5jb25jYXQodGhpcy5tZXJjdXJ5X2RqaW5uaSwgdGhpcy5tYXJzX2RqaW5uaSwgdGhpcy5qdXBpdGVyX2RqaW5uaSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNfZGppbm5pX2xpc3Quc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2FdLmluZGV4IC0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2JdLmluZGV4O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9jbGFzcygpIHtcclxuICAgICAgICB0aGlzLmNsYXNzID0gY2hvb3NlX3JpZ2h0X2NsYXNzKFxyXG4gICAgICAgICAgICB0aGlzLmluZm8uY2xhc3Nlc19saXN0LFxyXG4gICAgICAgICAgICB0aGlzLmNsYXNzX3RhYmxlLFxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfYWZpbml0eSxcclxuICAgICAgICAgICAgdGhpcy52ZW51c19sZXZlbF9jdXJyZW50LFxyXG4gICAgICAgICAgICB0aGlzLm1lcmN1cnlfbGV2ZWxfY3VycmVudCxcclxuICAgICAgICAgICAgdGhpcy5tYXJzX2xldmVsX2N1cnJlbnQsXHJcbiAgICAgICAgICAgIHRoaXMuanVwaXRlcl9sZXZlbF9jdXJyZW50XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfZXhwKHZhbHVlKSB7XHJcbiAgICAgICAgbGV0IHJldHVybl9kYXRhID0ge1xyXG4gICAgICAgICAgICBiZWZvcmU6IHtcclxuICAgICAgICAgICAgICAgIGxldmVsOiB0aGlzLmxldmVsLFxyXG4gICAgICAgICAgICAgICAgYWJpbGl0aWVzOiB0aGlzLmFiaWxpdGllcy5zbGljZSgpLFxyXG4gICAgICAgICAgICAgICAgc3RhdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7bWF4X2hwOiB0aGlzLm1heF9ocH0sXHJcbiAgICAgICAgICAgICAgICAgICAge21heF9wcDogdGhpcy5tYXhfcHB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHthdGs6IHRoaXMuYXRrfSxcclxuICAgICAgICAgICAgICAgICAgICB7ZGVmOiB0aGlzLmRlZn0sXHJcbiAgICAgICAgICAgICAgICAgICAge2FnaTogdGhpcy5hZ2l9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtsdWs6IHRoaXMubHVrfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfZXhwICs9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSBfLmZpbmRJbmRleCh0aGlzLmV4cF9jdXJ2ZSwgZXhwID0+IGV4cCA+IHRoaXMuY3VycmVudF9leHApO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2FsbCgpO1xyXG4gICAgICAgIHJldHVybl9kYXRhLmFmdGVyID0ge1xyXG4gICAgICAgICAgICBsZXZlbDogdGhpcy5sZXZlbCxcclxuICAgICAgICAgICAgYWJpbGl0aWVzOiB0aGlzLmFiaWxpdGllcy5zbGljZSgpLFxyXG4gICAgICAgICAgICBzdGF0czogW1xyXG4gICAgICAgICAgICAgICAge21heF9ocDogdGhpcy5tYXhfaHB9LFxyXG4gICAgICAgICAgICAgICAge21heF9wcDogdGhpcy5tYXhfcHB9LFxyXG4gICAgICAgICAgICAgICAge2F0azogdGhpcy5hdGt9LFxyXG4gICAgICAgICAgICAgICAge2RlZjogdGhpcy5kZWZ9LFxyXG4gICAgICAgICAgICAgICAge2FnaTogdGhpcy5hZ2l9LFxyXG4gICAgICAgICAgICAgICAge2x1azogdGhpcy5sdWt9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXR1cm5fZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0X2l0ZW1zKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbV9vYmosIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW1fb2JqLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGlmIChpdGVtX29iai5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcXVpcF9pdGVtKGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZF9pdGVtKGl0ZW1fa2V5X25hbWUsIHF1YW50aXR5LCBlcXVpcCkge1xyXG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmluZm8uaXRlbXNfbGlzdFtpdGVtX2tleV9uYW1lXS50eXBlID09PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbV9vYmogPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmtleV9uYW1lID09PSBpdGVtX2tleV9uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fb2JqLnF1YW50aXR5ICs9IHF1YW50aXR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAga2V5X25hbWU6IGl0ZW1fa2V5X25hbWUsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBxdWFudGl0eSxcclxuICAgICAgICAgICAgZXF1aXBwZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbmRleDogdGhpcy5pdGVtcy5sZW5ndGhcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZXF1aXApIHtcclxuICAgICAgICAgICAgdGhpcy5lcXVpcF9pdGVtKHRoaXMuaXRlbXMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZV9pdGVtKGl0ZW1fb2JqX3RvX3JlbW92ZSwgcXVhbnRpdHkpIHtcclxuICAgICAgICBsZXQgYWRqdXN0X2luZGV4ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtX29iaiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW1fb2JqX3RvX3JlbW92ZS5rZXlfbmFtZSA9PT0gaXRlbV9vYmoua2V5X25hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtX29iai5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5lcXVpcF9pdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtX29iai5xdWFudGl0eSAtIHF1YW50aXR5ID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtX29iai5xdWFudGl0eSA9IGl0ZW1fb2JqLnF1YW50aXR5IC0gcXVhbnRpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhZGp1c3RfaW5kZXggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhZGp1c3RfaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIC0taXRlbV9vYmouaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXF1aXBfaXRlbShpbmRleCwgaW5pdGlhbGl6ZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IGl0ZW1fb2JqID0gdGhpcy5pdGVtc1tpbmRleF07XHJcbiAgICAgICAgaWYgKGl0ZW1fb2JqLmVxdWlwcGVkICYmICFpbml0aWFsaXplKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaW5mby5pdGVtc19saXN0W2l0ZW1fb2JqLmtleV9uYW1lXTtcclxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLldFQVBPTlMgJiYgdGhpcy5lcXVpcF9zbG90cy53ZWFwb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90cy53ZWFwb24uaW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SICYmIHRoaXMuZXF1aXBfc2xvdHMuaGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuZXF1aXBfaXRlbSh0aGlzLmVxdWlwX3Nsb3RzLmhlYWQuaW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkNIRVNUX1BST1RFQ1RPUiAmJiB0aGlzLmVxdWlwX3Nsb3RzLmNoZXN0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5lcXVpcF9pdGVtKHRoaXMuZXF1aXBfc2xvdHMuY2hlc3QuaW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFSTU9SICYmIHRoaXMuZXF1aXBfc2xvdHMuYm9keSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuZXF1aXBfaXRlbSh0aGlzLmVxdWlwX3Nsb3RzLmJvZHkuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuV0VBUE9OUzogdGhpcy5lcXVpcF9zbG90cy53ZWFwb24gPSBpdGVtX29iajsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5IRUFEX1BST1RFQ1RPUjogdGhpcy5lcXVpcF9zbG90cy5oZWFkID0gaXRlbV9vYmo7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuQ0hFU1RfUFJPVEVDVE9SOiB0aGlzLmVxdWlwX3Nsb3RzLmNoZXN0ID0gaXRlbV9vYmo7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuQVJNT1I6IHRoaXMuZXF1aXBfc2xvdHMuYm9keSA9IGl0ZW1fb2JqOyBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaXRlbV9vYmouZXF1aXBwZWQgPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS5lZmZlY3RzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkX2VmZmVjdChpdGVtLmVmZmVjdHNbaV0sIGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZV9hdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcclxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xyXG4gICAgICAgICAgICB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcy5wdXNoKGl0ZW0uZ3JhbnRlZF9hYmlsaXR5KTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVfYWJpbGl0aWVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuZXF1aXBfaXRlbShpbmRleCkge1xyXG4gICAgICAgIGxldCBpdGVtX29iaiA9IHRoaXMuaXRlbXNbaW5kZXhdO1xyXG4gICAgICAgIGlmICghaXRlbV9vYmouZXF1aXBwZWQpIHJldHVybjtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pbmZvLml0ZW1zX2xpc3RbaXRlbV9vYmoua2V5X25hbWVdO1xyXG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuV0VBUE9OUyAmJiB0aGlzLmVxdWlwX3Nsb3RzLndlYXBvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzLndlYXBvbiA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuSEVBRF9QUk9URUNUT1IgJiYgdGhpcy5lcXVpcF9zbG90cy5oZWFkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMuaGVhZCA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQ0hFU1RfUFJPVEVDVE9SICYmIHRoaXMuZXF1aXBfc2xvdHMuY2hlc3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5lcXVpcF9zbG90cy5jaGVzdCA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQVJNT1IgJiYgdGhpcy5lcXVpcF9zbG90cy5ib2R5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMuYm9keSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGl0ZW1fb2JqLmVxdWlwcGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcclxuICAgICAgICAgICAgaWYgKGVmZmVjdC5lZmZlY3Rfb3duZXJfaW5zdGFuY2UgPT09IGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX2VmZmVjdChlZmZlY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfYXR0cmlidXRlcygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMgPSB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcy5maWx0ZXIoYWJpbGl0eSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eSAhPT0gaXRlbS5ncmFudGVkX2FiaWxpdHk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdF9kamlubmkoZGppbm5pKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkamlubmkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGRqaW5uID0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2RqaW5uaVtpXV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZlbnVzX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lcmN1cnlfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NQVJTOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFyc19kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5qdXBpdGVyX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZF9kamlubihkamlubl9rZXlfbmFtZSkge1xyXG4gICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFtkamlubl9rZXlfbmFtZV07XHJcbiAgICAgICAgc3dpdGNoIChkamlubi5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuVkVOVVM6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlbnVzX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1FUkNVUlk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lcmN1cnlfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUFSUzpcclxuICAgICAgICAgICAgICAgIHRoaXMubWFyc19kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5KVVBJVEVSOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5qdXBpdGVyX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZV9hbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVfZGppbm4oZGppbm5fa2V5X25hbWUpIHtcclxuICAgICAgICBsZXQgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbZGppbm5fa2V5X25hbWVdO1xyXG4gICAgICAgIGxldCB0aGlzX2RqaW5uaV9saXN0O1xyXG4gICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLlZFTlVTOlxyXG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMudmVudXNfZGppbm5pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTpcclxuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pX2xpc3QgPSB0aGlzLm1lcmN1cnlfZGppbm5pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUFSUzpcclxuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pX2xpc3QgPSB0aGlzLm1hcnNfZGppbm5pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuSlVQSVRFUjpcclxuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pX2xpc3QgPSB0aGlzLmp1cGl0ZXJfZGppbm5pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpc19kamlubmlfbGlzdC5pbmRleE9mKGRqaW5uX2tleV9uYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB0aGlzX2RqaW5uaV9saXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfYWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZV9kamlubihvbGRfZGppbm5fa2V5X25hbWUsIG5ld19kamlubl9rZXlfbmFtZSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlX2RqaW5uKG9sZF9kamlubl9rZXlfbmFtZSk7XHJcbiAgICAgICAgdGhpcy5hZGRfZGppbm4obmV3X2RqaW5uX2tleV9uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcmV2aWV3X2RqaW5uX2NoYW5nZShzdGF0cywgZGppbm5pX2tleV9uYW1lLCBkamlubmlfbmV4dF9zdGF0dXMsIGFjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHByZXZpb3VzX2NsYXNzID0gdGhpcy5jbGFzcztcclxuICAgICAgICBsZXQgdmVudXNfbHYgPSB0aGlzLnZlbnVzX2xldmVsX2N1cnJlbnQ7XHJcbiAgICAgICAgbGV0IG1lcmN1cnlfbHYgPSB0aGlzLm1lcmN1cnlfbGV2ZWxfY3VycmVudDtcclxuICAgICAgICBsZXQgbWFyc19sdiA9IHRoaXMubWFyc19sZXZlbF9jdXJyZW50O1xyXG4gICAgICAgIGxldCBqdXBpdGVyX2x2ID0gdGhpcy5qdXBpdGVyX2xldmVsX2N1cnJlbnQ7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkamlubmlfa2V5X25hbWUubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbZGppbm5pX2tleV9uYW1lW2ldXTtcclxuICAgICAgICAgICAgbGV0IGx2X3NoaWZ0O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRqaW5uaV9uZXh0X3N0YXR1c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOiBsdl9zaGlmdCA9IEVMRU1fTFZfREVMVEE7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiaXJyZWxldmFudFwiOiBsdl9zaGlmdCA9IDA7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbHZfc2hpZnQgPSAtRUxFTV9MVl9ERUxUQTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzd2l0Y2ggKGRqaW5uLmVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuVkVOVVM6IHZlbnVzX2x2ICs9IGx2X3NoaWZ0OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTogbWVyY3VyeV9sdiArPSBsdl9zaGlmdDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1BUlM6IG1hcnNfbHYgKz0gbHZfc2hpZnQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5KVVBJVEVSOiBqdXBpdGVyX2x2ICs9IGx2X3NoaWZ0OyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsYXNzID0gY2hvb3NlX3JpZ2h0X2NsYXNzKHRoaXMuaW5mby5jbGFzc2VzX2xpc3QsIHRoaXMuY2xhc3NfdGFibGUsIHRoaXMuZWxlbWVudF9hZmluaXR5LCB2ZW51c19sdiwgbWVyY3VyeV9sdiwgbWFyc19sdiwganVwaXRlcl9sdik7XHJcbiAgICAgICAgbGV0IHJldHVybl9vYmogPSB7XHJcbiAgICAgICAgICAgIGNsYXNzX25hbWU6IHRoaXMuY2xhc3MubmFtZSxcclxuICAgICAgICAgICAgY2xhc3Nfa2V5X25hbWU6IHRoaXMuY2xhc3Mua2V5X25hbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybl9vYmouYWJpbGl0aWVzID0gdGhpcy5pbm5hdGVfYWJpbGl0aWVzLmNvbmNhdCh0aGlzLmNsYXNzLmFiaWxpdHlfbGV2ZWxfcGFpcnMuZmlsdGVyKHBhaXIgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFpci5sZXZlbCA8PSB0aGlzLmxldmVsICYmICF0aGlzLmlubmF0ZV9hYmlsaXRpZXMuaW5jbHVkZXMocGFpci5hYmlsaXR5KTtcclxuICAgICAgICB9KS5tYXAocGFpciA9PiBwYWlyLmFiaWxpdHkpLCB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcyk7XHJcbiAgICAgICAgZGppbm5pX25leHRfc3RhdHVzID0gZGppbm5pX25leHRfc3RhdHVzLm1hcChzdGF0dXMgPT4gc3RhdHVzID09PSBcImlycmVsZXZhbnRcIiA/IGRqaW5uX3N0YXR1cy5TVEFOREJZIDogc3RhdHVzKTtcclxuICAgICAgICBzdGF0cy5mb3JFYWNoKHN0YXQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm5fb2JqW3N0YXRdID0gdGhpcy5wcmV2aWV3X3N0YXRzX2J5X2RqaW5uKHN0YXQsIGRqaW5uaV9rZXlfbmFtZSwgZGppbm5pX25leHRfc3RhdHVzLCBhY3Rpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xhc3MgPSBwcmV2aW91c19jbGFzcztcclxuICAgICAgICByZXR1cm4gcmV0dXJuX29iajtcclxuICAgIH1cclxuXHJcbiAgICBwcmV2aWV3X3N0YXRzX2J5X2RqaW5uKHN0YXQsIGRqaW5uaV9rZXlfbmFtZSwgZGppbm5pX25leHRfc3RhdHVzLCBhY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBwcmV2aWV3X29iaiA9IHtcclxuICAgICAgICAgICAgZGppbm5pX2tleV9uYW1lOiBkamlubmlfa2V5X25hbWUsXHJcbiAgICAgICAgICAgIGRqaW5uaV9uZXh0X3N0YXR1czogZGppbm5pX25leHRfc3RhdHVzLFxyXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3dpdGNoIChzdGF0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtYXhfaHBcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImhwXCIsIHRydWUsIHByZXZpZXdfb2JqKTtcclxuICAgICAgICAgICAgY2FzZSBcIm1heF9wcFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwicHBcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIFwiYXRrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJhdGtcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVmXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJkZWZcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIFwiYWdpXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJhZ2lcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIFwibHVrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJsdWtcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcmV2aWV3X3N0YXRzX2J5X2VmZmVjdChlZmZlY3RfdHlwZSwgZWZmZWN0X29iaiwgaXRlbV9rZXlfbmFtZSkge1xyXG4gICAgICAgIGNvbnN0IHByZXZpZXdfb2JqID0ge1xyXG4gICAgICAgICAgICBlZmZlY3Rfb2JqOiBlZmZlY3Rfb2JqLFxyXG4gICAgICAgICAgICBpdGVtX2tleV9uYW1lLCBpdGVtX2tleV9uYW1lXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoZWZmZWN0X3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwiaHBcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJwcFwiLCB0cnVlLCBwcmV2aWV3X29iaik7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImF0a1wiLCB0cnVlLCBwcmV2aWV3X29iaik7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJkZWZcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwiYWdpXCIsIHRydWUsIHByZXZpZXdfb2JqKTtcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImx1a1wiLCB0cnVlLCBwcmV2aWV3X29iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9tYXhfc3RhdChzdGF0LCBwcmV2aWV3ID0gZmFsc2UsIHByZXZpZXdfb2JqID0ge30pIHtcclxuICAgICAgICBjb25zdCBzdGF0X2tleSA9IFtcImhwXCIsIFwicHBcIl0uaW5jbHVkZXMoc3RhdCkgPyBcIm1heF9cIiArIHN0YXQgOiBzdGF0O1xyXG4gICAgICAgIGNvbnN0IGN1cnJldF9rZXkgPSBcImN1cnJlbnRfXCIgKyBzdGF0O1xyXG4gICAgICAgIGNvbnN0IGJvb3N0X2tleSA9IHN0YXQgKyBcIl9ib29zdFwiO1xyXG4gICAgICAgIGNvbnN0IGN1cnZlX2tleSA9IHN0YXQgKyBcIl9jdXJ2ZVwiO1xyXG4gICAgICAgIGNvbnN0IGV4dHJhX2tleSA9IHN0YXQgKyBcIl9leHRyYVwiO1xyXG4gICAgICAgIGNvbnN0IHByZXZpb3VzX3ZhbHVlID0gdGhpc1tzdGF0X2tleV07XHJcbiAgICAgICAgdGhpc1tzdGF0X2tleV0gPSAodGhpc1tjdXJ2ZV9rZXldW3RoaXMubGV2ZWxdICogdGhpcy5jbGFzc1tib29zdF9rZXldICsgdGhpc1tleHRyYV9rZXldKSB8IDA7XHJcbiAgICAgICAgbGV0IHRoaXNfZGppbm5pID0gdGhpcy5kamlubmk7XHJcbiAgICAgICAgaWYgKHByZXZpZXcpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZpZXdfb2JqLmFjdGlvbiA9PT0gXCJUcmFkZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdF9pbmRleCA9IHRoaXNfZGppbm5pLmluZGV4T2YocHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdF9pbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19kamlubmlbZmlyc3RfaW5kZXhdID0gcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzFdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaVt0aGlzX2RqaW5uaS5pbmRleE9mKHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZVsxXSldID0gcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpZXdfb2JqLmFjdGlvbiA9PT0gXCJHaXZlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pLnB1c2gocHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXNfZGppbm5pLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBkamlubl9rZXlfbmFtZSA9IHRoaXNfZGppbm5pW2ldO1xyXG4gICAgICAgICAgICBsZXQgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbZGppbm5fa2V5X25hbWVdO1xyXG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gZGppbm4uc3RhdHVzO1xyXG4gICAgICAgICAgICBpZiAocHJldmlldyAmJiBwcmV2aWV3X29iai5kamlubmlfa2V5X25hbWUgJiYgcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lLmluY2x1ZGVzKGRqaW5uX2tleV9uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzID0gcHJldmlld19vYmouZGppbm5pX25leHRfc3RhdHVzW3ByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZS5pbmRleE9mKGRqaW5uX2tleV9uYW1lKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gZGppbm5fc3RhdHVzLlNFVCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHRoaXNbc3RhdF9rZXldICs9IGRqaW5uW2Jvb3N0X2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWZmZWN0cy5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2aWV3ICYmIGVmZmVjdC5lZmZlY3Rfb3duZXJfaW5zdGFuY2UgJiYgcHJldmlld19vYmouaXRlbV9rZXlfbmFtZSA9PT0gZWZmZWN0LmVmZmVjdF9vd25lcl9pbnN0YW5jZS5rZXlfbmFtZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBsZXQgZWZmZWN0X3R5cGU7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImhwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTUFYX0hQO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInBwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTUFYX1BQO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImF0a1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLkFUVEFDSztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJkZWZcIjpcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfdHlwZSA9IGVmZmVjdF90eXBlcy5ERUZFTlNFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImFnaVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLkFHSUxJVFk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibHVrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTFVDSztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocHJldmlldykge1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlID0gcHJldmlld19vYmouZWZmZWN0X29iaiA/IEVmZmVjdC5wcmV2aWV3X3ZhbHVlX2FwcGxpZWQocHJldmlld19vYmouZWZmZWN0X29iaiwgdGhpc1tzdGF0X2tleV0pIDogdGhpc1tzdGF0X2tleV07XHJcbiAgICAgICAgICAgIHRoaXNbc3RhdF9rZXldID0gcHJldmlvdXNfdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2aWV3X3ZhbHVlO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgaWYgKHRoaXNbY3VycmV0X2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzW2N1cnJldF9rZXldID0gdGhpc1tzdGF0X2tleV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpc1tjdXJyZXRfa2V5XSA9IE1hdGgucm91bmQodGhpc1tjdXJyZXRfa2V5XSAqIHRoaXNbc3RhdF9rZXldL3ByZXZpb3VzX3ZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2F0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfbWF4X3N0YXQoXCJocFwiKTtcclxuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChcInBwXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KFwiYXRrXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KFwiZGVmXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KFwiYWdpXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KFwibHVrXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZF9leHRyYV9tYXhfaHAoYW1vdW50KSB7XHJcbiAgICAgICAgdGhpcy5ocF9leHRyYSArPSBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkX2V4dHJhX21heF9wcChhbW91bnQpIHtcclxuICAgICAgICB0aGlzLnBwX2V4dHJhICs9IGFtb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfZXh0cmFfbWF4X2F0ayhhbW91bnQpIHtcclxuICAgICAgICB0aGlzLmF0a19leHRyYSArPSBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkX2V4dHJhX21heF9kZWYoYW1vdW50KSB7XHJcbiAgICAgICAgdGhpcy5kZWZfZXh0cmEgKz0gYW1vdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZF9leHRyYV9tYXhfYWdpKGFtb3VudCkge1xyXG4gICAgICAgIHRoaXMuYWdpX2V4dHJhICs9IGFtb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfZXh0cmFfbWF4X2x1ayhhbW91bnQpIHtcclxuICAgICAgICB0aGlzLmx1a19leHRyYSArPSBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdF9lbGVtZW50YWxfYXR0cmlidXRlcygpIHtcclxuICAgICAgICB0aGlzLnZlbnVzX2xldmVsX2N1cnJlbnQgPSB0aGlzLnZlbnVzX2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfbGV2ZWxfYmFzZTtcclxuICAgICAgICB0aGlzLm1hcnNfbGV2ZWxfY3VycmVudCA9IHRoaXMubWFyc19sZXZlbF9iYXNlO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9sZXZlbF9jdXJyZW50ID0gdGhpcy5qdXBpdGVyX2xldmVsX2Jhc2U7XHJcbiAgICAgICAgdGhpcy52ZW51c19wb3dlcl9jdXJyZW50ID0gdGhpcy52ZW51c19wb3dlcl9iYXNlO1xyXG4gICAgICAgIHRoaXMubWVyY3VyeV9wb3dlcl9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X3Bvd2VyX2Jhc2U7XHJcbiAgICAgICAgdGhpcy5tYXJzX3Bvd2VyX2N1cnJlbnQgPSB0aGlzLm1hcnNfcG93ZXJfYmFzZTtcclxuICAgICAgICB0aGlzLmp1cGl0ZXJfcG93ZXJfY3VycmVudCA9IHRoaXMuanVwaXRlcl9wb3dlcl9iYXNlO1xyXG4gICAgICAgIHRoaXMudmVudXNfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLnZlbnVzX3Jlc2lzdF9iYXNlO1xyXG4gICAgICAgIHRoaXMubWVyY3VyeV9yZXNpc3RfY3VycmVudCA9IHRoaXMubWVyY3VyeV9yZXNpc3RfYmFzZTtcclxuICAgICAgICB0aGlzLm1hcnNfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLm1hcnNfcmVzaXN0X2Jhc2U7XHJcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5qdXBpdGVyX3Jlc2lzdF9iYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpIHtcclxuICAgICAgICB0aGlzLmluaXRfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5pLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVtpXV07XHJcbiAgICAgICAgICAgIGlmIChkamlubi5zdGF0dXMgIT09IGRqaW5uX3N0YXR1cy5TRVQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB0aGlzW2RqaW5uLmVsZW1lbnQgKyBcIl9sZXZlbF9jdXJyZW50XCJdICs9IEVMRU1fTFZfREVMVEE7XHJcbiAgICAgICAgICAgIHRoaXNbZGppbm4uZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIl0gKz0gRUxFTV9QT1dFUl9ERUxUQTtcclxuICAgICAgICAgICAgdGhpc1tkamlubi5lbGVtZW50ICsgXCJfcmVzaXN0X2N1cnJlbnRcIl0gKz0gRUxFTV9SRVNJU1RfREVMVEE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWZmZWN0cy5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLlBPV0VSIHx8IGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuUkVTSVNUKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHBvd2VyX2tleSA9IGVsZW1lbnQgKyBcIl9wb3dlcl9jdXJyZW50XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2lzdF9rZXkgPSBlbGVtZW50ICsgXCJfcmVzaXN0X2N1cnJlbnRcIjtcclxuICAgICAgICAgICAgdGhpc1twb3dlcl9rZXldID0gXy5jbGFtcCh0aGlzW3Bvd2VyX2tleV0sIEVMRU1fQVRUUl9NSU4sIEVMRU1fQVRUUl9NQVgpO1xyXG4gICAgICAgICAgICB0aGlzW3Jlc2lzdF9rZXldID0gXy5jbGFtcCh0aGlzW3Jlc2lzdF9rZXldLCBFTEVNX0FUVFJfTUlOLCBFTEVNX0FUVFJfTUFYKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2FiaWxpdGllcygpIHtcclxuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHRoaXMuaW5uYXRlX2FiaWxpdGllcy5jb25jYXQodGhpcy5jbGFzcy5hYmlsaXR5X2xldmVsX3BhaXJzLmZpbHRlcihwYWlyID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhaXIubGV2ZWwgPD0gdGhpcy5sZXZlbCAmJiAhdGhpcy5pbm5hdGVfYWJpbGl0aWVzLmluY2x1ZGVzKHBhaXIuYWJpbGl0eSk7XHJcbiAgICAgICAgfSkubWFwKHBhaXIgPT4gcGFpci5hYmlsaXR5KSwgdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9hbGwoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9jbGFzcygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0X2FjdGl2ZV9wbGF5ZXJzKHBhcnR5X2RhdGEsIG1heCkge1xyXG4gICAgICAgIHJldHVybiBwYXJ0eV9kYXRhLm1lbWJlcnMuc2xpY2UoMCwgbWF4KS5maWx0ZXIoY2hhciA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGV2ZW50X3R5cGVzID0ge1xyXG4gICAgQkFUVExFOiBcImJhdHRsZVwiXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHR5cGUpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmlkID0gR2FtZUV2ZW50LmlkX2luY3JlbWVudGVyKys7XHJcbiAgICAgICAgR2FtZUV2ZW50LmV2ZW50c1t0aGlzLmlkXSA9IHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldF9ldmVudChpZCkge1xyXG4gICAgICAgIHJldHVybiBHYW1lRXZlbnQuZXZlbnRzW2lkXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVzZXQoKSB7XHJcbiAgICAgICAgR2FtZUV2ZW50LmlkX2luY3JlbWVudGVyID0gMDtcclxuICAgICAgICBHYW1lRXZlbnQuZXZlbnRzID0ge307XHJcbiAgICB9XHJcbn1cclxuXHJcbkdhbWVFdmVudC5yZXNldCgpOyIsIlxyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyByYW5nZV8zNjAgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcbmltcG9ydCB7IGFiaWxpdHlfdGFyZ2V0X3R5cGVzIH0gZnJvbSAnLi4vQWJpbGl0eS5qcyc7XHJcbmltcG9ydCB7IGZpZ2h0ZXJfdHlwZXMsIHBlcm1hbmVudF9zdGF0dXMgfSBmcm9tICcuLi9QbGF5ZXIuanMnO1xyXG5cclxuY29uc3QgU0NBTEVfRkFDVE9SID0gMC44MzM0O1xyXG5jb25zdCBCR19YID0gMDtcclxuY29uc3QgQkdfWSA9IDE3O1xyXG5jb25zdCBCR19IRUlHSFQgPSAxMjA7XHJcbmNvbnN0IENFTlRFUl9YID0gbnVtYmVycy5HQU1FX1dJRFRIID4+IDE7XHJcbmNvbnN0IENFTlRFUl9ZID0gbnVtYmVycy5HQU1FX0hFSUdIVCAtIDM1O1xyXG5jb25zdCBDQU1FUkFfU1BFRUQgPSAwLjAwOSAqIE1hdGguUEk7XHJcbmNvbnN0IEJHX1NQRUVEID0gMi40O1xyXG5jb25zdCBCR19TUElOX1NQRUVEID0gMC40O1xyXG5jb25zdCBTUEFDRV9CRVRXRUVOX0NIQVJTID0gMzU7XHJcbmNvbnN0IFNFTUlfTUFKT1JfQVhJUyA9IG51bWJlcnMuR0FNRV9XSURUSC8yIC0gNTA7XHJcbmNvbnN0IFNFTUlfTUlOT1JfQVhJUyA9IG51bWJlcnMuR0FNRV9IRUlHSFQvNTA7XHJcbmNvbnN0IElOSVRfVElNRSA9IDE1MDA7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1BPU19BTkdMRSA9IDAuNzU1MTMyNztcclxuY29uc3QgSU5JVElBTF9QT1NfQU5HTEUgPSAtMi4xMjA1NzU7XHJcbmNvbnN0IElOSVRJQUxfU0NBTEUgPSAxLjI7XHJcbmNvbnN0IEJHX0RFRkFVTFRfU0NBTEUgPSAxLjA7XHJcbmNvbnN0IEFDVElPTl9QT1NfQkdfU0NBTEUgPSAyO1xyXG5jb25zdCBBQ1RJT05fUE9TX0FMTFlfWCA9IDg4O1xyXG5jb25zdCBBQ1RJT05fUE9TX0VORU1ZX0NFTlRFUl9YID0gMTA2O1xyXG5jb25zdCBBQ1RJT05fQUxMWV9ZID0gMTYwO1xyXG5jb25zdCBBQ1RJT05fRU5FTVlfWSA9IDk4O1xyXG5jb25zdCBBQ1RJT05fUE9TX1NQQUNFX0JFVFdFRU4gPSA0MDtcclxuY29uc3QgQUNUSU9OX1BPU19TQ0FMRV9BREQgPSAwLjI7XHJcbmNvbnN0IENIT09TRV9UQVJHRVRfRU5FTVlfU0hJRlQgPSAxNTtcclxuY29uc3QgQ0hPT1NFX1RBUkdFVF9BTExZX1NISUZUID0gLTM7XHJcbmNvbnN0IENIT09TRV9UQVJHRVRfUklHSFQgPSAxO1xyXG5jb25zdCBDSE9PU0VfVEFSR0VUX0xFRlQgPSAtMTtcclxuY29uc3QgUkFOR0VTID0gWzExLDksNyw1LDMsMSwzLDUsNyw5LDExXTtcclxuY29uc3QgQkFUVExFX0NVUlNPUl9TQ0FMRVMgPSBbLjEsLjIsLjMsLjQsLjYsMSwuNiwuNCwuMywuMiwuMV07XHJcbmNvbnN0IENIT09TSU5HX1RBUkdFVF9TQ1JFRU5fU0hJRlRfVElNRSA9IDE1MDtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXR0bGVTdGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBiYWNrZ3JvdW5kX2tleSwgYWxsaWVzX2luZm8sIGVuZW1pZXNfaW5mbywgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFfYW5nbGUgPSB7XHJcbiAgICAgICAgICAgIHJhZCA6IElOSVRJQUxfUE9TX0FOR0xFLFxyXG4gICAgICAgICAgICBzcGluaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcy5iaW5kKHRoaXMpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRfa2V5ID0gYmFja2dyb3VuZF9rZXk7XHJcbiAgICAgICAgdGhpcy5vbGRfY2FtZXJhX2FuZ2xlID0gdGhpcy5jYW1lcmFfYW5nbGUucmFkO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuY3JvcF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmdyb3VwX2VuZW1pZXMgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cF9hbGxpZXMgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5hbGxpZXNfaW5mbyA9IGFsbGllc19pbmZvO1xyXG4gICAgICAgIHRoaXMuZW5lbWllc19pbmZvID0gZW5lbWllc19pbmZvO1xyXG4gICAgICAgIHRoaXMuYWxsaWVzX2NvdW50ID0gYWxsaWVzX2luZm8ubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuZW5lbWllc19jb3VudCA9IGVuZW1pZXNfaW5mby5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9lbmVteSA9IFNQQUNFX0JFVFdFRU5fQ0hBUlMgKiB0aGlzLmVuZW1pZXNfY291bnQgKiAwLjU7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9hbGx5ID0gU1BBQ0VfQkVUV0VFTl9DSEFSUyAqIHRoaXMuYWxsaWVzX2NvdW50ICogMC41O1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAueCA9IHRoaXMueDtcclxuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC55ID0gdGhpcy55O1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnNjYWxlLnNldFRvKElOSVRJQUxfU0NBTEUsIElOSVRJQUxfU0NBTEUpO1xyXG4gICAgICAgIHRoaXMuY3JvcF9ncm91cC54ID0gdGhpcy54O1xyXG4gICAgICAgIHRoaXMuY3JvcF9ncm91cC55ID0gdGhpcy55O1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gdGhpcy5zZXRfY29udHJvbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jb250cm9sKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNob29zaW5nX3RhcmdldHMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF90YXJnZXRzKCk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpLFxyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hvb3NpbmdfdGFyZ2V0cykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHNfZmluaXNoZWQobnVsbCk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNob29zaW5nX3RhcmdldHMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRfcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoQ0hPT1NFX1RBUkdFVF9SSUdIVCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNob29zaW5nX3RhcmdldHMgfHwgIXRoaXMucmlnaHRfcHJlc3NlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaG9vc2luZ190YXJnZXRzKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodF9wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhDSE9PU0VfVEFSR0VUX0xFRlQpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTEVGVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNob29zaW5nX3RhcmdldHMgfHwgIXRoaXMubGVmdF9wcmVzc2VkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3RhcmdldHMoKSB7XHJcbiAgICAgICAgbGV0IHBhcnR5X2NvdW50LCBwYXJ0eV9pbmZvO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy50YXJnZXRfdHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkFMTFk6XHJcbiAgICAgICAgICAgICAgICBwYXJ0eV9jb3VudCA9IHRoaXMuYWxsaWVzX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgcGFydHlfaW5mbyA9IHRoaXMuYWxsaWVzX2luZm87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3RhcmdldF90eXBlcy5FTkVNWTpcclxuICAgICAgICAgICAgICAgIHBhcnR5X2NvdW50ID0gdGhpcy5lbmVtaWVzX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgcGFydHlfaW5mbyA9IHRoaXMuZW5lbWllc19pbmZvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90YXJnZXRfdHlwZXMuVVNFUjpcclxuICAgICAgICAgICAgICAgIHBhcnR5X2NvdW50ID0gdGhpcy5hYmlsaXR5X2Nhc3Rlci5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWSA/IHRoaXMuYWxsaWVzX2NvdW50IDogdGhpcy5lbmVtaWVzX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgcGFydHlfaW5mbyA9IHRoaXMuYWJpbGl0eV9jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkVORU1ZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBfLnppcFdpdGgoXHJcbiAgICAgICAgICAgIFJBTkdFUy5zbGljZSh0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiAtIChwYXJ0eV9jb3VudD4+MSksIHRoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uICsgKHBhcnR5X2NvdW50Pj4xKSArIDEpLnJldmVyc2UoKSxcclxuICAgICAgICAgICAgcGFydHlfaW5mbyxcclxuICAgICAgICAgICAgKG1hZ25pdHVkZSwgdGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge21hZ25pdHVkZTogbWFnbml0dWRlID4gdGhpcy5hYmlsaXR5X3JhbmdlID8gbnVsbCA6IG1hZ25pdHVkZSwgdGFyZ2V0OiB0YXJnZXR9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuVVNFUikge1xyXG4gICAgICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHNfY2FsbGJhY2sodGFyZ2V0cyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzX2ZpbmlzaGVkKHRhcmdldHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdG9wX3RpbWVycygpIHtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY2hhbmdlX3RpbWVycyhzdGVwKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VfdGFyZ2V0KHN0ZXApO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmFkZChQaGFzZXIuVGltZXIuUVVBUlRFUiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQubG9vcChQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLCB0aGlzLmNoYW5nZV90YXJnZXQuYmluZCh0aGlzLCBzdGVwKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX3RhcmdldChzdGVwLCB0d2Vlbl90b19wb3MgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkVORU1ZKSB7XHJcbiAgICAgICAgICAgIHN0ZXAgKj0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGdyb3VwX2luZm8gPSB0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xyXG4gICAgICAgIGNvbnN0IGdyb3VwX2xlbmd0aCA9IGdyb3VwX2luZm8ubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGdyb3VwX2hhbGZfbGVuZ3RoID0gZ3JvdXBfbGVuZ3RoICUgMiA/IGdyb3VwX2xlbmd0aCA+PiAxIDogKGdyb3VwX2xlbmd0aCA+PiAxKSAtIDE7XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXRfc3ByaXRlX2luZGV4O1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gKz0gc3RlcDtcclxuICAgICAgICAgICAgaWYgKHN0ZXAgPT09IDApIHN0ZXAgPSBDSE9PU0VfVEFSR0VUX0xFRlQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlcl9zaGlmdCA9IHRoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uIC0gKFJBTkdFUy5sZW5ndGggPj4gMSk7XHJcbiAgICAgICAgICAgIHRhcmdldF9zcHJpdGVfaW5kZXggPSBncm91cF9oYWxmX2xlbmd0aCArIGNlbnRlcl9zaGlmdDtcclxuICAgICAgICAgICAgaWYgKHRhcmdldF9zcHJpdGVfaW5kZXggPj0gZ3JvdXBfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiA9IChSQU5HRVMubGVuZ3RoID4+IDEpIC0gZ3JvdXBfaGFsZl9sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfc3ByaXRlX2luZGV4ID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRfc3ByaXRlX2luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gPSAoUkFOR0VTLmxlbmd0aCA+PiAxKSArIGdyb3VwX2hhbGZfbGVuZ3RoICsgIShncm91cF9sZW5ndGggJSAyKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldF9zcHJpdGVfaW5kZXggPSBncm91cF9sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoZ3JvdXBfaW5mb1t0YXJnZXRfc3ByaXRlX2luZGV4XS5pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpO1xyXG5cclxuICAgICAgICB0aGlzLnNldF9iYXR0bGVfY3Vyc29yc19wb3NpdGlvbih0d2Vlbl90b19wb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVfc3ByaXRlcygpIHtcclxuICAgICAgICB0aGlzLmJsYWNrX2JnID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5ibGFja19iZyk7XHJcbiAgICAgICAgdGhpcy5ibGFja19iZy5iZWdpbkZpbGwoMHgwLCAxKTtcclxuICAgICAgICB0aGlzLmJsYWNrX2JnLmRyYXdSZWN0KDAsIDAsIG51bWJlcnMuR0FNRV9XSURUSCwgbnVtYmVycy5HQU1FX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5ibGFja19iZy5lbmRGaWxsKCk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcgPSB0aGlzLmdhbWUuYWRkLnRpbGVTcHJpdGUoQkdfWCwgQkdfWSwgbnVtYmVycy5HQU1FX1dJRFRILCBCR19IRUlHSFQsIFwiYmF0dGxlX2JhY2tncm91bmRzXCIsIHRoaXMuYmFja2dyb3VuZF9rZXkpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMiA9IHRoaXMuZ2FtZS5hZGQudGlsZVNwcml0ZShCR19YLCBCR19ZLCBudW1iZXJzLkdBTUVfV0lEVEgsIEJHX0hFSUdIVCwgXCJiYXR0bGVfYmFja2dyb3VuZHNcIiwgdGhpcy5iYWNrZ3JvdW5kX2tleSk7XHJcbiAgICAgICAgdGhpcy5iZ19oZWlnaHQgPSB0aGlzLmJhdHRsZV9iZy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcuc2NhbGUuc2V0VG8oQkdfREVGQVVMVF9TQ0FMRSk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnNjYWxlLnNldFRvKEJHX0RFRkFVTFRfU0NBTEUpO1xyXG4gICAgICAgIGNvbnN0IHNldF9zcHJpdGUgPSAoZ3JvdXAsIGluZm8sIGlzX2FsbHksIGFuaW1hdGlvbiwgbGlzdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBncm91cC5jcmVhdGUoMCwgMCwgaW5mby5zcHJpdGVfa2V5KTtcclxuICAgICAgICAgICAgc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oaW5mby5zY2FsZSwgaW5mby5zY2FsZSk7XHJcbiAgICAgICAgICAgIHNwcml0ZS5lbGxpcHNlc19zZW1pX21ham9yID0gU0VNSV9NQUpPUl9BWElTO1xyXG4gICAgICAgICAgICBzcHJpdGUuZWxsaXBzZXNfc2VtaV9taW5vciA9IFNFTUlfTUlOT1JfQVhJUztcclxuICAgICAgICAgICAgc3ByaXRlLmlzX2FsbHkgPSBpc19hbGx5O1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBpbmZvLnNwcml0ZV9rZXkuc2xpY2UoMCwgaW5mby5zcHJpdGVfa2V5Lmxhc3RJbmRleE9mKFwiX1wiKSk7XHJcbiAgICAgICAgICAgIGxpc3Rba2V5XS5zZXRBbmltYXRpb24oc3ByaXRlLCBcImJhdHRsZVwiKTtcclxuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChzcHJpdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3ByaXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hbGxpZXNfaW5mby5mb3JFYWNoKGluZm8gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBzZXRfc3ByaXRlKHRoaXMuZ3JvdXBfYWxsaWVzLCBpbmZvLCB0cnVlLCBcImJhdHRsZV9iYWNrXCIsIF8ubWFwVmFsdWVzKHRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0LCBjaGFyID0+IGNoYXIuc3ByaXRlX2Jhc2UpKTtcclxuICAgICAgICAgICAgaW5mby5zcHJpdGUgPSBzcHJpdGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8uZm9yRWFjaChpbmZvID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gc2V0X3Nwcml0ZSh0aGlzLmdyb3VwX2VuZW1pZXMsIGluZm8sIGZhbHNlLCBcImJhdHRsZV9mcm9udFwiLCB0aGlzLmRhdGEuaW5mby5lbmVtaWVzX2xpc3QpO1xyXG4gICAgICAgICAgICBpbmZvLnNwcml0ZSA9IHNwcml0ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpcnN0X2FsbHlfY2hhciA9IHRoaXMuZ3JvdXBfYWxsaWVzLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgIHRoaXMubGFzdF9hbGx5X2NoYXIgPSB0aGlzLmdyb3VwX2FsbGllcy5jaGlsZHJlblt0aGlzLmFsbGllc19jb3VudCAtIDFdO1xyXG4gICAgICAgIHRoaXMuZmlyc3RfZW5lbXlfY2hhciA9IHRoaXMuZ3JvdXBfZW5lbWllcy5jaGlsZHJlblswXTtcclxuICAgICAgICB0aGlzLmxhc3RfZW5lbXlfY2hhciA9IHRoaXMuZ3JvdXBfZW5lbWllcy5jaGlsZHJlblt0aGlzLmVuZW1pZXNfY291bnQgLSAxXTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRpYWxpemVfY3JvcF9yZWN0YW5nbGVzKCkge1xyXG4gICAgICAgIGNvbnN0IHVwcGVyX3ggPSAwO1xyXG4gICAgICAgIGNvbnN0IHVwcGVyX3kgPSAwO1xyXG4gICAgICAgIHRoaXMudXBwZXJfcmVjdCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3ModXBwZXJfeCwgdXBwZXJfeSk7XHJcbiAgICAgICAgdGhpcy5jcm9wX2dyb3VwLmFkZCh0aGlzLnVwcGVyX3JlY3QpO1xyXG4gICAgICAgIHRoaXMudXBwZXJfcmVjdC5iZWdpbkZpbGwoMHgwLCAxKTtcclxuICAgICAgICB0aGlzLnVwcGVyX3JlY3QuZHJhd1JlY3QoMCwgMCwgbnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUID4+IDEpO1xyXG4gICAgICAgIHRoaXMudXBwZXJfcmVjdC5lbmRGaWxsKCk7XHJcbiAgICAgICAgY29uc3QgbG93ZXJfeCA9IDA7XHJcbiAgICAgICAgY29uc3QgbG93ZXJfeSA9IEJHX1kgKyAodGhpcy5iZ19oZWlnaHQgPj4gMSkgKyAyO1xyXG4gICAgICAgIHRoaXMubG93ZXJfcmVjdCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MobG93ZXJfeCwgbG93ZXJfeSk7XHJcbiAgICAgICAgdGhpcy5jcm9wX2dyb3VwLmFkZCh0aGlzLmxvd2VyX3JlY3QpO1xyXG4gICAgICAgIHRoaXMubG93ZXJfcmVjdC5iZWdpbkZpbGwoMHgwLCAxKTtcclxuICAgICAgICB0aGlzLmxvd2VyX3JlY3QuZHJhd1JlY3QoMCwgMCwgbnVtYmVycy5HQU1FX1dJRFRILCAobnVtYmVycy5HQU1FX0hFSUdIVCA+PiAxKSArIDIpO1xyXG4gICAgICAgIHRoaXMubG93ZXJfcmVjdC5lbmRGaWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZV9zdGFnZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfYWN0aW9ucyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0cyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplX3Nwcml0ZXMoKTtcclxuICAgICAgICB0aGlzLmludGlhbGl6ZV9jcm9wX3JlY3RhbmdsZXMoKTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5iYXR0bGVfYmcpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmJhdHRsZV9iZzIpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmdyb3VwX2VuZW1pZXMpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmdyb3VwX2FsbGllcyk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLnVwcGVyX3JlY3QpLnRvKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiBCR19ZXHJcbiAgICAgICAgfSwgSU5JVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMubG93ZXJfcmVjdCkudG8oe1xyXG4gICAgICAgICAgICB5OiBCR19ZICsgdGhpcy5iZ19oZWlnaHQgLSAxLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IG51bWJlcnMuR0FNRV9IRUlHSFQgLSB0aGlzLmJnX2hlaWdodCAtIEJHX1kgKyAxXHJcbiAgICAgICAgfSwgSU5JVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuY2FtZXJhX2FuZ2xlKS50byh7XHJcbiAgICAgICAgICAgIHJhZDogREVGQVVMVF9QT1NfQU5HTEVcclxuICAgICAgICB9LCBJTklUX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5iYXR0bGVfZ3JvdXAuc2NhbGUpLnRvKHtcclxuICAgICAgICAgICAgeDogMSwgeTogMVxyXG4gICAgICAgIH0sIElOSVRfVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0X3N0YWdlX2RlZmF1bHRfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgbGV0IHByb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmUgfSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmNhbWVyYV9hbmdsZSkudG8oe1xyXG4gICAgICAgICAgICByYWQ6IERFRkFVTFRfUE9TX0FOR0xFXHJcbiAgICAgICAgfSwgMzAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKS5vbkNvbXBsZXRlLmFkZE9uY2UocHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICBhd2FpdCBwcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jaG9vc2luZ19hY3Rpb25zID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9iZzIueCA9IDA7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnNjYWxlLnNldFRvKEFDVElPTl9QT1NfQkdfU0NBTEUsIEFDVElPTl9QT1NfQkdfU0NBTEUpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMi55ID0gLXRoaXMuYmF0dGxlX2JnLmhlaWdodCAqIChBQ1RJT05fUE9TX0JHX1NDQUxFIC0gMSkgKyBCR19ZIC0gQ0hPT1NFX1RBUkdFVF9BTExZX1NISUZUO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMuc3ByaXRlc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXhfc2hpZnRlZCA9IHNwcml0ZS5pc19hbGx5ID8gaSA6ICh0aGlzLmVuZW1pZXNfY291bnQgLSAxKSAtIChpIC0gdGhpcy5hbGxpZXNfY291bnQpO1xyXG4gICAgICAgICAgICBjb25zdCB4X3NoaWZ0ID0gc3ByaXRlLmlzX2FsbHkgPyBBQ1RJT05fUE9TX0FMTFlfWCA6IEFDVElPTl9QT1NfRU5FTVlfQ0VOVEVSX1ggLSAodGhpcy5lbmVtaWVzX2NvdW50ID4+IDEpICogQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOO1xyXG4gICAgICAgICAgICBjb25zdCBwb3NfeCA9IHhfc2hpZnQgKyBpbmRleF9zaGlmdGVkICogQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOO1xyXG4gICAgICAgICAgICBjb25zdCBwb3NfeSA9IHNwcml0ZS5pc19hbGx5ID8gQUNUSU9OX0FMTFlfWSA6IEFDVElPTl9FTkVNWV9ZO1xyXG4gICAgICAgICAgICBzcHJpdGUueCA9IHBvc194O1xyXG4gICAgICAgICAgICBzcHJpdGUueSA9IHBvc195O1xyXG4gICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlX3ggPSBzcHJpdGUuc2NhbGUueCArIE1hdGguc2lnbihzcHJpdGUuc2NhbGUueCkgKiBBQ1RJT05fUE9TX1NDQUxFX0FERDtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZV95ID0gc3ByaXRlLnNjYWxlLnkgKyBNYXRoLnNpZ24oc3ByaXRlLnNjYWxlLnkpICogQUNUSU9OX1BPU19TQ0FMRV9BREQ7XHJcbiAgICAgICAgICAgIHNwcml0ZS5zY2FsZS5zZXRUbyh0aGlzX3NjYWxlX3gsIHRoaXNfc2NhbGVfeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0X3Bvc2l0aW9ucygpIHtcclxuICAgICAgICB0aGlzLmJhdHRsZV9iZzIuc2NhbGUuc2V0VG8oQkdfREVGQVVMVF9TQ0FMRSwgQkdfREVGQVVMVF9TQ0FMRSk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnkgPSBCR19ZO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMuc3ByaXRlc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZV94ID0gc3ByaXRlLnNjYWxlLnggLSBNYXRoLnNpZ24oc3ByaXRlLnNjYWxlLngpICogQUNUSU9OX1BPU19TQ0FMRV9BREQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfc2NhbGVfeSA9IHNwcml0ZS5zY2FsZS55IC0gTWF0aC5zaWduKHNwcml0ZS5zY2FsZS55KSAqIEFDVElPTl9QT1NfU0NBTEVfQUREO1xyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8odGhpc19zY2FsZV94LCB0aGlzX3NjYWxlX3kpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfYmF0dGxlX2N1cnNvcnNfcG9zaXRpb24odHdlZW5fdG9fcG9zID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwX2luZm8gPSB0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xyXG4gICAgICAgIGNvbnN0IGdyb3VwX2hhbGZfbGVuZ3RoID0gZ3JvdXBfaW5mby5sZW5ndGggJSAyID8gZ3JvdXBfaW5mby5sZW5ndGggPj4gMSA6IChncm91cF9pbmZvLmxlbmd0aCA+PiAxKSAtIDE7XHJcbiAgICAgICAgY29uc3QgY2VudGVyX3NoaWZ0ID0gdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gLSAoUkFOR0VTLmxlbmd0aCA+PiAxKTtcclxuICAgICAgICB0aGlzLmN1cnNvcnMuZm9yRWFjaCgoY3Vyc29yX3Nwcml0ZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0X2luZGV4ID0gaSAtICgodGhpcy5jdXJzb3JzLmxlbmd0aCA+PiAxKSAtIGdyb3VwX2hhbGZfbGVuZ3RoKSArIGNlbnRlcl9zaGlmdDtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luZm8gPSBncm91cF9pbmZvW3RhcmdldF9pbmRleF07XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5mbyAmJiAhdGFyZ2V0X2luZm8uaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRfc3ByaXRlID0gdGFyZ2V0X2luZm8uc3ByaXRlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZSA9IEJBVFRMRV9DVVJTT1JfU0NBTEVTW3RoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uIC0gY2VudGVyX3NoaWZ0IC0gKHRoaXMuY3Vyc29ycy5sZW5ndGggPj4gMSkgKyBpXTtcclxuICAgICAgICAgICAgICAgIGN1cnNvcl9zcHJpdGUuc2NhbGUuc2V0VG8odGhpc19zY2FsZSwgdGhpc19zY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmFscGhhID0gMTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnNvcnNfdHdlZW5zW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzX3R3ZWVuc1tpXS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0X3ggPSB0YXJnZXRfc3ByaXRlLng7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0X3kgPSB0YXJnZXRfc3ByaXRlLnkgLSB0YXJnZXRfc3ByaXRlLmhlaWdodCAtIDU7XHJcbiAgICAgICAgICAgICAgICBpZiAodHdlZW5fdG9fcG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2VlbihjdXJzb3Jfc3ByaXRlKS50byh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclg6IGRlc3RfeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZGVzdF95XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgODUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc190d2VlbnNbaV0gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKGN1cnNvcl9zcHJpdGUpLnRvKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGN1cnNvcl9zcHJpdGUueSAtIDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlLCAwLCAtMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcl9zcHJpdGUuY2VudGVyWCA9IGRlc3RfeDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLnkgPSBkZXN0X3k7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzX3R3ZWVuc1tpXSA9IHRoaXMuZ2FtZS5hZGQudHdlZW4oY3Vyc29yX3Nwcml0ZSkudG8oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjdXJzb3Jfc3ByaXRlLnkgLSA0XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlLCAwLCAtMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmFscGhhID0gMDtcclxuICAgICAgICAgICAgICAgIHRhcmdldF9pbmRleCA9IHRhcmdldF9pbmRleCA8IDAgPyAwIDogZ3JvdXBfaW5mby5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X3Nwcml0ZSA9IGdyb3VwX2luZm9bdGFyZ2V0X2luZGV4XS5zcHJpdGU7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmNlbnRlclggPSB0YXJnZXRfc3ByaXRlLng7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLnkgPSB0YXJnZXRfc3ByaXRlLnkgLSB0YXJnZXRfc3ByaXRlLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0X2JhdHRsZV9jdXJzb3JzKCkge1xyXG4gICAgICAgIHRoaXMuY3Vyc29ycy5mb3JFYWNoKChzcHJpdGUsIGkpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yc190d2VlbnNbaV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc190d2VlbnNbaV0uc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNob29zZV90YXJnZXRzKHJhbmdlLCB0YXJnZXRfdHlwZSwgYWJpbGl0eV90eXBlLCBhYmlsaXR5X2Nhc3RlciwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHNfY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiA9IFJBTkdFUy5sZW5ndGggPj4gMTtcclxuICAgICAgICB0aGlzLmFiaWxpdHlfcmFuZ2UgPSByYW5nZSA9PT0gXCJhbGxcIiA/IFJBTkdFU1swXSA6IHJhbmdlO1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eV90eXBlID0gYWJpbGl0eV90eXBlO1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eV9jYXN0ZXIgPSBhYmlsaXR5X2Nhc3RlcjtcclxuICAgICAgICB0aGlzLnRhcmdldF90eXBlID0gdGFyZ2V0X3R5cGU7XHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLlVTRVIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfdGFyZ2V0cygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5iYXR0bGVfZ3JvdXApLnRvKHtcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMuYmF0dGxlX2dyb3VwLnkgKyAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuQUxMWSA/IENIT09TRV9UQVJHRVRfQUxMWV9TSElGVCA6IENIT09TRV9UQVJHRVRfRU5FTVlfU0hJRlQpXHJcbiAgICAgICAgICAgIH0sIENIT09TSU5HX1RBUkdFVF9TQ1JFRU5fU0hJRlRfVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvcl9jb3VudCA9IHRoaXMuYWJpbGl0eV9yYW5nZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29ycyA9IG5ldyBBcnJheShjdXJzb3JfY291bnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzX3R3ZWVucyA9IG5ldyBBcnJheShjdXJzb3JfY291bnQpLmZpbGwobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnNvcl9jb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzW2ldID0gdGhpcy5iYXR0bGVfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiYmF0dGxlX2N1cnNvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNbaV0uYW5pbWF0aW9ucy5hZGQoXCJhbmltXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc1tpXS5hbmltYXRpb25zLnBsYXkoXCJhbmltXCIsIDQwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV90YXJnZXQoMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hvb3NpbmdfdGFyZ2V0c19maW5pc2hlZCh0YXJnZXRzKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmJhdHRsZV9ncm91cCkudG8oe1xyXG4gICAgICAgICAgICB5OiB0aGlzLmJhdHRsZV9ncm91cC55IC0gKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkFMTFkgPyBDSE9PU0VfVEFSR0VUX0FMTFlfU0hJRlQgOiBDSE9PU0VfVEFSR0VUX0VORU1ZX1NISUZUKVxyXG4gICAgICAgIH0sIENIT09TSU5HX1RBUkdFVF9TQ1JFRU5fU0hJRlRfVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51bnNldF9iYXR0bGVfY3Vyc29ycygpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19jYWxsYmFjayh0YXJnZXRzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcmV2ZW50X2NhbWVyYV9hbmdsZV9vdmVyZmxvdygpIHtcclxuICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgPSByYW5nZV8zNjAodGhpcy5jYW1lcmFfYW5nbGUucmFkKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfc3RhZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfYWN0aW9ucykgcmV0dXJuO1xyXG4gICAgICAgIGlmICghdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuUEFHRV9VUCkgJiYgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuUEFHRV9ET1dOKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgLT0gQ0FNRVJBX1NQRUVEO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZy54IC09IEJHX1NQRUVEXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5QQUdFX1VQKSAmJiAhdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuUEFHRV9ET1dOKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgKz0gQ0FNRVJBX1NQRUVEO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZy54ICs9IEJHX1NQRUVEXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSByYW5nZV8zNjAodGhpcy5jYW1lcmFfYW5nbGUucmFkKSAtIHJhbmdlXzM2MCh0aGlzLm9sZF9jYW1lcmFfYW5nbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZy54ICs9IEJHX1NQSU5fU1BFRUQgKiB0aGlzLmJhdHRsZV9iZy53aWR0aCAqIGRlbHRhOyAvL3RpZSBiZyB4IHBvc2l0aW9uIHdpdGggY2FtZXJhIGFuZ2xlIHdoZW4gc3BpbmluZ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vbGRfY2FtZXJhX2FuZ2xlID0gdGhpcy5jYW1lcmFfYW5nbGUucmFkO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5iYXR0bGVfYmcueCA+IHRoaXMuYmF0dGxlX2JnLndpZHRoIHx8IHRoaXMuYmF0dGxlX2JnLnggPCAtdGhpcy5iYXR0bGVfYmcud2lkdGgpIHsgLy9jaGVjayBiZyB4IHBvc2l0aW9uIHN1cnBsdXNcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcueCA9IHRoaXMuYmF0dGxlX2JnMi54O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYmF0dGxlX2JnLnggPiAwKSB7IC8vbWFrZSBiZzIgZm9sbG93IGRlZmF1bHQgYmdcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnggPSB0aGlzLmJhdHRsZV9iZy54IC0gdGhpcy5iYXR0bGVfYmcud2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJhdHRsZV9iZy54IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZzIueCA9IHRoaXMuYmF0dGxlX2JnLnggKyB0aGlzLmJhdHRsZV9iZy53aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChNYXRoLnNpbih0aGlzLmNhbWVyYV9hbmdsZS5yYWQpID4gMCAmJiB0aGlzLmJhdHRsZV9ncm91cC5nZXRDaGlsZEluZGV4KHRoaXMuZ3JvdXBfYWxsaWVzKSA8IHRoaXMuYmF0dGxlX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5ncm91cF9lbmVtaWVzKSkgeyAvL2NoZWNrIHBhcnR5IGFuZCBlbmVteSB6IGluZGV4XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnN3YXBDaGlsZHJlbih0aGlzLmdyb3VwX2VuZW1pZXMsIHRoaXMuZ3JvdXBfYWxsaWVzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguc2luKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPCAwICYmIHRoaXMuYmF0dGxlX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5ncm91cF9hbGxpZXMpID4gdGhpcy5iYXR0bGVfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmdyb3VwX2VuZW1pZXMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnN3YXBDaGlsZHJlbih0aGlzLmdyb3VwX2VuZW1pZXMsIHRoaXMuZ3JvdXBfYWxsaWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChNYXRoLmNvcyh0aGlzLmNhbWVyYV9hbmdsZS5yYWQpIDwgMCAmJiB0aGlzLmZpcnN0X2FsbHlfY2hhci56ID4gdGhpcy5sYXN0X2FsbHlfY2hhci56KSB7IC8vY2hlY2sgYWxseSB6IGluZGV4IG9yZGVyXHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBfYWxsaWVzLnJldmVyc2UoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguY29zKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPiAwICYmIHRoaXMuZmlyc3RfYWxseV9jaGFyLnogPCB0aGlzLmxhc3RfYWxseV9jaGFyLnopIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cF9hbGxpZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5jb3ModGhpcy5jYW1lcmFfYW5nbGUucmFkKSA8IDAgJiYgdGhpcy5maXJzdF9lbmVteV9jaGFyLnogPCB0aGlzLmxhc3RfZW5lbXlfY2hhci56KSB7IC8vY2hlY2sgZW5lbXkgeiBpbmRleCBvcmRlclxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwX2VuZW1pZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5jb3ModGhpcy5jYW1lcmFfYW5nbGUucmFkKSA+IDAgJiYgdGhpcy5maXJzdF9lbmVteV9jaGFyLnogPiB0aGlzLmxhc3RfZW5lbXlfY2hhci56KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBfZW5lbWllcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ByaXRlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSB0aGlzLnNwcml0ZXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX2FuZ2xlID0gc3ByaXRlLmlzX2FsbHkgPyB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgOiB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgKyBNYXRoLlBJO1xyXG4gICAgICAgICAgICBjb25zdCBhbmdsZV9wb3NpdGlvbiA9IEJhdHRsZVN0YWdlLmdldF9hbmdsZShyZWxhdGl2ZV9hbmdsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc194ID0gQmF0dGxlU3RhZ2UuZWxsaXBzZV9wb3NpdGlvbihzcHJpdGUsIGFuZ2xlX3Bvc2l0aW9uLCB0cnVlKTtcclxuICAgICAgICAgICAgY29uc3QgcG9zX3kgPSBCYXR0bGVTdGFnZS5lbGxpcHNlX3Bvc2l0aW9uKHNwcml0ZSwgYW5nbGVfcG9zaXRpb24sIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3Qgc2hpZnRfZnJvbV9taWRkbGUgPSBzcHJpdGUuaXNfYWxseSA/IHRoaXMuc2hpZnRfZnJvbV9taWRkbGVfYWxseSA6IHRoaXMuc2hpZnRfZnJvbV9taWRkbGVfZW5lbXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4X3NoaWZ0ZWQgPSBzcHJpdGUuaXNfYWxseSA/IGkgOiBpIC0gdGhpcy5hbGxpZXNfY291bnQ7XHJcbiAgICAgICAgICAgIHNwcml0ZS54ID0gcG9zX3ggKyAoKFNQQUNFX0JFVFdFRU5fQ0hBUlMgKiBpbmRleF9zaGlmdGVkIC0gc2hpZnRfZnJvbV9taWRkbGUpICsgKFNQQUNFX0JFVFdFRU5fQ0hBUlMgPj4gMSkpICogTWF0aC5zaW4ocmVsYXRpdmVfYW5nbGUpOyAvL3NoaWZ0IHBhcnR5IHBsYXllcnMgZnJvbSBiYXNlIHBvaW50XHJcbiAgICAgICAgICAgIHNwcml0ZS55ID0gcG9zX3k7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBzcHJpdGUuaXNfYWxseSA/IHRoaXMuYWxsaWVzX2luZm9baW5kZXhfc2hpZnRlZF0gOiB0aGlzLmVuZW1pZXNfaW5mb1tpbmRleF9zaGlmdGVkXTtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBCYXR0bGVTdGFnZS5nZXRfc2NhbGUoaW5mby5zY2FsZSwgcmVsYXRpdmVfYW5nbGUpO1xyXG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcclxuICAgICAgICAgICAgaWYgKE1hdGguc2luKHJlbGF0aXZlX2FuZ2xlKSA+IDAgJiYgIXNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm5hbWUuZW5kc1dpdGgoJ2JhY2snKSkgeyAvL2NoYW5nZSB0ZXh0dXJlIGluIGZ1bmN0aW9uIG9mIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm5hbWUucmVwbGFjZSgnZnJvbnQnLCAnYmFjaycpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLnNpbihyZWxhdGl2ZV9hbmdsZSkgPD0gMCAmJiAhc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5lbmRzV2l0aCgnZnJvbnQnKSkge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShzcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5uYW1lLnJlcGxhY2UoJ2JhY2snLCAnZnJvbnQnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKE1hdGguY29zKHJlbGF0aXZlX2FuZ2xlKSA+IDAgJiYgc3ByaXRlLnNjYWxlLnggPCAwKSB7IC8vY2hhbmdlIHNpZGUgaW4gZnVuY3Rpb24gb2YgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgIHNwcml0ZS5zY2FsZS5zZXRUbyhzcHJpdGUuc2NhbGUueCwgc3ByaXRlLnNjYWxlLnkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguY29zKHJlbGF0aXZlX2FuZ2xlKSA8PSAwICYmIHNwcml0ZS5zY2FsZS54ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKC1zcHJpdGUuc2NhbGUueCwgc3ByaXRlLnNjYWxlLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0X3N0YWdlKG9uX2ZhZGVfY29tcGxldGUsIG9uX2ZsYXNoX2NvbXBsZXRlKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5mYWRlKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5vbkZhZGVDb21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9uX2ZhZGVfY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIG9uX2ZhZGVfY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5mb3JFYWNoKHNpZ25hbF9iaW5kaW5nID0+IHtcclxuICAgICAgICAgICAgICAgIHNpZ25hbF9iaW5kaW5nLmRldGFjaCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBwZXJfcmVjdC5oZWlnaHQgPSB0aGlzLmxvd2VyX3JlY3QuaGVpZ2h0ID0gbnVtYmVycy5HQU1FX0hFSUdIVCA+PiAxO1xyXG4gICAgICAgICAgICB0aGlzLnVwcGVyX3JlY3QueSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubG93ZXJfcmVjdC55ID0gbnVtYmVycy5HQU1FX0hFSUdIVCA+PiAxO1xyXG4gICAgICAgICAgICBjb25zdCBmYWRlX3RpbWUgPSAzMDA7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEucmVzZXRGWCgpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMudXBwZXJfcmVjdCkudG8oe1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwXHJcbiAgICAgICAgICAgIH0sIGZhZGVfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvbl9mbGFzaF9jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uX2ZsYXNoX2NvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyb3BfZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvd2VyX3JlY3QpLnRvKHtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMCwgeTogbnVtYmVycy5HQU1FX0hFSUdIVFxyXG4gICAgICAgICAgICB9LCBmYWRlX3RpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBlbGxpcHNlKGFuZ2xlLCBhLCBiKSB7IC8vZWxsaXBzZSBmb3JtdWxhXHJcbiAgICAgICAgYSA9IGEgPT09IHVuZGVmaW5lZCA/IFNFTUlfTUFKT1JfQVhJUyA6IGE7XHJcbiAgICAgICAgYiA9IGIgPT09IHVuZGVmaW5lZCA/IFNFTUlfTUlOT1JfQVhJUyA6IGI7XHJcbiAgICAgICAgcmV0dXJuIGEqYi9NYXRoLnNxcnQoTWF0aC5wb3coYipNYXRoLmNvcyhhbmdsZSksIDIpICsgTWF0aC5wb3coYSpNYXRoLnNpbihhbmdsZSksIDIpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIGVsbGlwc2VfcG9zaXRpb24oc3ByaXRlLCBhbmdsZSwgaXNfeCkge1xyXG4gICAgICAgIGlmIChpc194KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBzcHJpdGUuZWxsaXBzZXNfc2VtaV9tYWpvcjtcclxuICAgICAgICAgICAgcmV0dXJuIENFTlRFUl9YICsgQmF0dGxlU3RhZ2UuZWxsaXBzZShhbmdsZSwgYSwgU0VNSV9NSU5PUl9BWElTKSAqIE1hdGguY29zKGFuZ2xlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBiID0gc3ByaXRlLmVsbGlwc2VzX3NlbWlfbWlub3I7XHJcbiAgICAgICAgICAgIHJldHVybiBDRU5URVJfWSArIEJhdHRsZVN0YWdlLmVsbGlwc2UoYW5nbGUsIFNFTUlfTUFKT1JfQVhJUywgYikgKiBNYXRoLnNpbihhbmdsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgZ2V0X2FuZ2xlKGFuZ2xlKSB7IC8vZXF1aWRpc3RhbnQgZWxsaXBzZSBhbmdsZSBmb3JtdWxhOiBodHRwczovL21hdGguc3RhY2tleGNoYW5nZS5jb20vYS8xMTIzNDQ4LzIwMjQzNVxyXG4gICAgICAgIHJldHVybiBhbmdsZSArIE1hdGguYXRhbigoKFNFTUlfTUlOT1JfQVhJUyAtIFNFTUlfTUFKT1JfQVhJUykgKiBNYXRoLnRhbihhbmdsZSkpLyhTRU1JX01BSk9SX0FYSVMgKyBTRU1JX01JTk9SX0FYSVMqTWF0aC5wb3coTWF0aC50YW4oYW5nbGUpLCAyKSkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgZ2V0X3NjYWxlKGRlZmF1bHRfc2NhbGUsIGFuZ2xlKSB7XHJcbiAgICAgICAgcmV0dXJuIChNYXRoLnNpbihhbmdsZSkvNyArIFNDQUxFX0ZBQ1RPUikgKiBkZWZhdWx0X3NjYWxlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgYWJpbGl0eV9tc2dfdHlwZXMgfSBmcm9tICcuLi9BYmlsaXR5LmpzJztcclxuaW1wb3J0IHsgZWZmZWN0X25hbWVzLCBlZmZlY3RfdHlwZXMgfSBmcm9tICcuLi9FZmZlY3QuanMnO1xyXG5pbXBvcnQgeyBlbGVtZW50X25hbWVzIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBvbl9yZW1vdmVfc3RhdHVzX21zZyB9IGZyb20gJy4uL1BsYXllci5qcyc7XHJcblxyXG5jb25zdCBMT0dfWCA9IDM7XHJcbmNvbnN0IExPR19PVVRfWSA9IDEyNztcclxuY29uc3QgTE9HXzFfWSA9IDEzOTtcclxuY29uc3QgTE9HXzJfWSA9IDE1MTtcclxuY29uc3QgQU5JTV9EVVJBVElPTiA9IDUwO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhdHRsZUxvZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLnggPSBnYW1lLmNhbWVyYS54O1xyXG4gICAgICAgIHRoaXMueSA9IGdhbWUuY2FtZXJhLnk7XHJcbiAgICAgICAgdGhpcy5sb2dzID0gW107XHJcbiAgICAgICAgdGhpcy5sb2dzLnB1c2godGhpcy5jcmVhdGUodGhpcy55ICsgTE9HXzFfWSkpO1xyXG4gICAgICAgIHRoaXMubG9ncy5wdXNoKHRoaXMuY3JlYXRlKHRoaXMueSArIExPR18yX1kpKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUoeV9wb3MpIHtcclxuICAgICAgICBjb25zdCBsb2dfdGV4dCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dCh0aGlzLnggKyBMT0dfWCwgeV9wb3MsICdncy1ibXAtZm9udCcsIFwiXCIsIG51bWJlcnMuRk9OVF9TSVpFKTtcclxuICAgICAgICBsb2dfdGV4dC50aW50ID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1I7XHJcbiAgICAgICAgbG9nX3RleHQuc21vb3RoZWQgPSBmYWxzZTtcclxuICAgICAgICBsb2dfdGV4dC5hdXRvUm91bmQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBsb2dfdGV4dFxyXG4gICAgfVxyXG5cclxuICAgIGFkZCh0ZXh0KSB7XHJcbiAgICAgICAgbGV0IHJlc29sdmVfYW5pbTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfYW5pbSA9IHJlc29sdmU7IH0pXHJcbiAgICAgICAgaWYgKHRoaXMubG9nc1swXS50ZXh0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nc1swXS5zZXRUZXh0KHRleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dChcIlwiKTtcclxuICAgICAgICAgICAgcmVzb2x2ZV9hbmltKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxvZ3NbMV0udGV4dCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dCh0ZXh0KTtcclxuICAgICAgICAgICAgcmVzb2x2ZV9hbmltKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvZ3NbMF0pLnRvKHtcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMueSArIExPR19PVVRfWVxyXG4gICAgICAgICAgICB9LCBBTklNX0RVUkFUSU9OLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvZ3NbMV0pLnRvKHtcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMueSArIExPR18xX1lcclxuICAgICAgICAgICAgfSwgQU5JTV9EVVJBVElPTiwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nc1swXS55ID0gdGhpcy55ICsgTE9HXzJfWTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nc1swXS5zZXRUZXh0KHRleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dzLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWRkX2FiaWxpdHkoY2FzdGVyLCBhYmlsaXR5LCBpdGVtX25hbWUsIGRqaW5uX25hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKGFiaWxpdHkubXNnX3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5BVFRBQ0s6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gYXR0YWNrcyFgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLkNBU1Q6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gY2FzdHMgJHthYmlsaXR5Lm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuVU5MRUFTSDpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSB1bmxlYXNoZXMgJHthYmlsaXR5Lm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuU1VNTU9OOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IHN1bW1vbnMgJHthYmlsaXR5Lm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuVVNFOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IHVzZXMgJHthYmlsaXR5Lm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuREVGRU5EOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IGlzIGRlZmVuZGluZyFgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLklURU1fVU5MRUFTSDpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSdzICR7aXRlbV9uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYGxldHMgb3V0IGEgaG93bCEgJHthYmlsaXR5Lm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuU0VUX0RKSU5OOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7ZGppbm5fbmFtZX0gaXMgc2V0IHRvICR7Y2FzdGVyLm5hbWV9IWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhZGRfcmVjb3Zlcl9lZmZlY3QoZWZmZWN0KSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyID0gZWZmZWN0LmNoYXI7XHJcbiAgICAgICAgc3dpdGNoKGVmZmVjdC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtwbGF5ZXIubmFtZX0ncyAke2VmZmVjdF9uYW1lc1tlZmZlY3QudHlwZV19IHJldHVybnMgdG8gbm9ybWFsIWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBPV0VSOlxyXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtwbGF5ZXIubmFtZX0ncyAke2VsZW1lbnRfbmFtZXNbZWZmZWN0LmF0dHJpYnV0ZV19ICR7ZWZmZWN0X25hbWVzW2VmZmVjdC50eXBlXX0gcmV0dXJucyB0byBub3JtYWwhYCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcclxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUEVSTUFORU5UX1NUQVRVUzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKG9uX3JlbW92ZV9zdGF0dXNfbXNnW2VmZmVjdC5zdGF0dXNfa2V5X25hbWVdKHBsYXllcikpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXQsIHBwX2RhbWFnZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdF9zdHIgPSBwcF9kYW1hZ2UgPyBcIlBQXCIgOiBcIkhQXCI7XHJcbiAgICAgICAgY29uc3QgY3VycmVudF9wcm9wZXJ0eSA9IHBwX2RhbWFnZSA/IFwiY3VycmVudF9wcFwiIDogXCJjdXJyZW50X2hwXCI7XHJcbiAgICAgICAgY29uc3QgbWF4X3Byb3BlcnR5ID0gcHBfZGFtYWdlID8gXCJtYXhfcHBcIiA6IFwibWF4X2hwXCI7XHJcbiAgICAgICAgaWYgKGRhbWFnZSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRbY3VycmVudF9wcm9wZXJ0eV0gLSBkYW1hZ2UgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBkYW1hZ2UgPSB0YXJnZXRbY3VycmVudF9wcm9wZXJ0eV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7dGFyZ2V0Lm5hbWV9IHRha2VzICR7ZGFtYWdlLnRvU3RyaW5nKCl9IGRhbWFnZSFgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0W2N1cnJlbnRfcHJvcGVydHldID49IHRhcmdldFttYXhfcHJvcGVydHldKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHt0YXJnZXQubmFtZX0ncyAke3N0YXRfc3RyfSBpcyBmdWxseSByZXN0b3JlZGApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7dGFyZ2V0Lm5hbWV9IHJlY292ZXJzICR7TWF0aC5hYnMoZGFtYWdlKS50b1N0cmluZygpfSAke3N0YXRfc3RyfSFgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmxvZ3NbMF0uc2V0VGV4dChcIlwiKTtcclxuICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dChcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMubG9nc1swXS5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5sb2dzWzFdLmRlc3Ryb3koKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3cuanNcIjtcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMjM2O1xyXG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAyODtcclxuY29uc3QgQkFTRV9XSU5fWCA9IDA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcclxuY29uc3QgQkFTRV9XSU5fVE9QX1kgPSAzMjtcclxuY29uc3QgREVTQ1JJUFRJT05fWCA9IDg7XHJcbmNvbnN0IERFU0NSSVBUSU9OX1kgPSAxMjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZXNjcmlwdGlvbldpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERFU0NSSVBUSU9OX1gsIERFU0NSSVBUSU9OX1kpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9wb3NpdGlvbihvbl90b3ApIHtcclxuICAgICAgICBpZiAob25fdG9wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt5OiBCQVNFX1dJTl9UT1BfWX0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt5OiBCQVNFX1dJTl9ZfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9kZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoZGVzY3JpcHRpb24sIHRoaXMuZGVzY3JpcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4ob25fdG9wID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKG9uX3RvcCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sLmpzJztcclxuaW1wb3J0IHsgdGVtcG9yYXJ5X3N0YXR1cyB9IGZyb20gJy4uLy4uL1BsYXllci5qcyc7XHJcblxyXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDE2NDtcclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gODQ7XHJcbmNvbnN0IEJBU0VfV0lOX0VYUEFOREVEX0hFSUdIVCA9IDEwODtcclxuY29uc3QgQkFTRV9XSU5fWCA9IDcyO1xyXG5jb25zdCBCQVNFX1dJTl9ZID0gNzI7XHJcbmNvbnN0IEJBU0VfV0lOX0VYUEFOREVEX1ggPSAwO1xyXG5jb25zdCBCQVNFX1dJTl9FWFBBTkRFRF9ZID0gNDA7XHJcbmNvbnN0IEVMRU1fUEVSX1BBR0UgPSA1O1xyXG5jb25zdCBFTEVNX1BBRERJTkdfVE9QID0gNTtcclxuY29uc3QgRUxFTV9QQURESU5HX0xFRlQgPSAxMDtcclxuY29uc3QgU1BBQ0VfQkVUV0VFTl9JVEVNUyA9IDI7XHJcbmNvbnN0IFBQX1ggPSA5NjtcclxuY29uc3QgUFNZX1BQX1ggPSAxMjY7IC8vcmlnaHQgYWxpZ25cclxuY29uc3QgRUxFTV9OQU1FX0lDT05fU0hJRlQgPSA0O1xyXG5jb25zdCBQU1lfR0FJTl9DT0xPUiA9IG51bWJlcnMuWUVMTE9XX0ZPTlRfQ09MT1I7XHJcbmNvbnN0IFBTWV9MT1NUX0NPTE9SID0gbnVtYmVycy5SRURfRk9OVF9DT0xPUjtcclxuY29uc3QgUFNZX0lORk9fMV9ZID0gODk7XHJcbmNvbnN0IFBTWV9JTkZPX1ggPSA0MDtcclxuY29uc3QgUFNZX0lORk9fMl9ZID0gUFNZX0lORk9fMV9ZICsgMSArIG51bWJlcnMuRk9OVF9TSVpFO1xyXG5jb25zdCBCVVRUT05fWCA9IDQ4O1xyXG5jb25zdCBCVVRUT05fWSA9IDEzNjtcclxuY29uc3QgQ1VSU09SX1ggPSA2NjtcclxuY29uc3QgQ1VSU09SX1kgPSA4MztcclxuY29uc3QgQ1VSU09SX0VYUEFOREVEX1ggPSA2NjtcclxuY29uc3QgQ1VSU09SX0VYUEFOREVEX1kgPSA4MztcclxuY29uc3QgQ1VSU09SX1NISUZUID0gMTY7XHJcbmNvbnN0IFNUQVJUX1ggPSAxMjk7XHJcbmNvbnN0IFJBTkdFX1ggPSAxMzc7XHJcbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxNTI7XHJcbmNvbnN0IEhJR0hMSUdIVF9CQVJfSEVJR0hUID0gODtcclxuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcclxuXHJcbmV4cG9ydCBjbGFzcyBQc3luZXJneVdpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLm1pc2Nfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuaW5pdF9wYWdlX2luZGljYXRvcl9iYXIoKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5ncm91cC5jcmVhdGUoQlVUVE9OX1gsIEJVVFRPTl9ZLCBcImJ1dHRvbnNcIiwgXCJwc3luZXJneVwiKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfcGFnZXMuYmluZCh0aGlzKSwgdGhpcy5nZXRfbWF4X2VsZW1fb25fcGFnZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2FiaWxpdHkuYmluZCh0aGlzKSwgdGhpcy5nZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9wYWdlX2luZGV4LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X2FiaWxpdHlfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfYWJpbGl0eV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLmlzX29wZW4uYmluZCh0aGlzKSwgdGhpcy5pc19hY3RpdmUuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmhpZ2hsaWdodF9iYXIpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5iZWdpbkZpbGwodGhpcy5iYXNlX3dpbmRvdy5jb2xvciwgMSk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5lbmRGaWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2N1cnNvcl94KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4cGFuZGVkID8gQ1VSU09SX0VYUEFOREVEX1ggOiBDVVJTT1JfWDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfY3Vyc29yX3koKSB7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZXhwYW5kZWQgPyBDVVJTT1JfRVhQQU5ERURfWSA6IENVUlNPUl9ZO1xyXG4gICAgICAgIHJldHVybiB5ICsgKHRoaXMuYWJpbGl0eV9pbmRleCAqIENVUlNPUl9TSElGVCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNfb3BlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9wYWdlX2luZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2FiaWxpdHlfaW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWJpbGl0eV9pbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYWJpbGl0eV9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eV9pbmRleCA9IGluZGV4O1xyXG4gICAgfSBcclxuXHJcbiAgICBnZXRfbWF4X2VsZW1fb25fcGFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hYmlsaXRpZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9tYXhfcGFnZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9udW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgdGhpcy5leHBhbmRlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgdGhpcy5leHBhbmRlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9wYWdlX251bWJlcigpIHtcclxuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2FiaWxpdGllcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9IHBhcnNlSW50KChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpICsgMTtcclxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9wYWdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnNldF9hYmlsaXRpZXNfbGlzdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmFiaWxpdHlfaW5kZXggPj0gdGhpcy5hYmlsaXRpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9pbmRleCA9IHRoaXMuYWJpbGl0aWVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XV0uZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0KHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX2FiaWxpdHkoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLmFiaWxpdGllc1t0aGlzLmFiaWxpdHlfaW5kZXhdXS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IEVMRU1fUEFERElOR19UT1AgKyB0aGlzLmFiaWxpdHlfaW5kZXggKiAobnVtYmVycy5JQ09OX0hFSUdIVCArIFNQQUNFX0JFVFdFRU5fSVRFTVMpICsgNDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYWJpbGl0aWVzX2xpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKGZhbHNlKTtcclxuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHRoaXMuYWxsX2FiaWxpdGllcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWJpbGl0aWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleV9uYW1lID0gdGhpcy5hYmlsaXRpZXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBFTEVNX1BBRERJTkdfTEVGVDtcclxuICAgICAgICAgICAgY29uc3QgeSA9IEVMRU1fUEFERElOR19UT1AgKyBpICogKG51bWJlcnMuSUNPTl9IRUlHSFQgKyBTUEFDRV9CRVRXRUVOX0lURU1TKTtcclxuICAgICAgICAgICAgY29uc3QgaWNvbl94ID0geCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25feSA9IHkgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcclxuICAgICAgICAgICAgY29uc3QgeF9lbGVtX25hbWUgPSBFTEVNX1BBRERJTkdfTEVGVCArIG51bWJlcnMuSUNPTl9XSURUSCArIDI7XHJcbiAgICAgICAgICAgIGxldCBmb250X2NvbG9yID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBzeV9zZWFsZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBudW1iZXJzLlBVUlBMRV9GT05UX0NPTE9SO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY2hhci5jdXJyZW50X3BwIDwgdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLnBwX2Nvc3QpIHtcclxuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBudW1iZXJzLlJFRF9GT05UX0NPTE9SO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X25hbWVfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ubmFtZSwgeF9lbGVtX25hbWUsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCwgZmFsc2UsIGZhbHNlLCBmb250X2NvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2gocHN5bmVyZ3lfbmFtZV9zcHJpdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBwcF9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiUFBcIiwgUFBfWCwgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZULCBmYWxzZSwgZmFsc2UsIGZvbnRfY29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwcF9zcHJpdGUpO1xyXG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgXCJhYmlsaXRpZXNfaWNvbnNcIiwgdW5kZWZpbmVkLCBrZXlfbmFtZSkpO1xyXG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuICAgICAgICAgICAgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93LnB1c2godGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBUlRfWCwgeSArIDUsIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5lbGVtZW50ICsgXCJfc3RhclwiKSk7XHJcbiAgICAgICAgICAgIHRoaXMubWlzY19zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFJBTkdFX1gsIHkgKyA0LCBcInJhbmdlc1wiLCB1bmRlZmluZWQsIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5yYW5nZS50b1N0cmluZygpKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X2Nvc3Rfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucHBfY29zdCwgUFNZX1BQX1gsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCwgdHJ1ZSwgZmFsc2UsIGZvbnRfY29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwc3luZXJneV9jb3N0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmluY2x1ZGVzKGtleV9uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9jb3N0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgcHBfc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sb3N0X2FiaWxpdGllcy5pbmNsdWRlcyhrZXlfbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCBwc3luZXJneV9uYW1lX3Nwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgcHN5bmVyZ3lfY29zdF9zcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBwX3Nwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2FiaWxpdGllcygpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfYWJpbGl0aWVzID0gdGhpcy5jaGFyLmFiaWxpdGllcy5maWx0ZXIoa2V5X25hbWUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3QgJiYgdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLmlzX2JhdHRsZV9hYmlsaXR5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuY3VycmVudF9hYmlsaXRpZXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJldmlld192YWx1ZXMgPSB0aGlzLmNoYXIucHJldmlld19kamlubl9jaGFuZ2UoW10sIHRoaXMuZGppbm5pLm1hcChkID0+IGQua2V5X25hbWUpLCB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyk7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dF9hYmlsaXRpZXMgPSBwcmV2aWV3X3ZhbHVlcy5hYmlsaXRpZXMuZmlsdGVyKGtleV9uYW1lID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCAmJiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0uaXNfYmF0dGxlX2FiaWxpdHk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudF9zZXQgPSBuZXcgU2V0KHRoaXMuY3VycmVudF9hYmlsaXRpZXMpO1xyXG4gICAgICAgICAgICBsZXQgbmV4dF9zZXQgPSBuZXcgU2V0KHRoaXMubmV4dF9hYmlsaXRpZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmdhaW5lZF9hYmlsaXRpZXMgPSBbLi4ubmV4dF9zZXRdLmZpbHRlcih4ID0+ICFjdXJyZW50X3NldC5oYXMoeCkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvc3RfYWJpbGl0aWVzID0gWy4uLmN1cnJlbnRfc2V0XS5maWx0ZXIoeCA9PiAhbmV4dF9zZXQuaGFzKHgpKTtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzID0gWy4uLmN1cnJlbnRfc2V0XS5maWx0ZXIoeCA9PiBuZXh0X3NldC5oYXMoeCkpO1xyXG4gICAgICAgICAgICB0aGlzLmFsbF9hYmlsaXRpZXMgPSB0aGlzLmdhaW5lZF9hYmlsaXRpZXMuY29uY2F0KHRoaXMuaW50ZXJzZWN0aW9uX2FiaWxpdGllcywgdGhpcy5sb3N0X2FiaWxpdGllcyk7XHJcbiAgICAgICAgICAgIHRoaXMucHN5X2luZm9fMV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBQU1lfSU5GT19YLCBQU1lfSU5GT18xX1kpO1xyXG4gICAgICAgICAgICB0aGlzLnBzeV9pbmZvXzJfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUFNZX0lORk9fWCwgUFNZX0lORk9fMl9ZKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggPT09IDAgJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIE5vIGNoYW5nZVwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgTG9zdFwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgTG9zdFwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbW91bnRfd2luZG93KCkge1xyXG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllcygpO1xyXG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllc19saXN0KCk7XHJcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcclxuICAgICAgICBpZiAodGhpcy5leHBhbmRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9zaXplKHtoZWlnaHQ6IEJBU0VfV0lOX0VYUEFOREVEX0hFSUdIVH0pO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogQkFTRV9XSU5fRVhQQU5ERURfWCwgeTogQkFTRV9XSU5fRVhQQU5ERURfWX0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3NpemUoe2hlaWdodDogQkFTRV9XSU5fSEVJR0hUfSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiBCQVNFX1dJTl9YLCB5OiBCQVNFX1dJTl9ZfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3BhZ2VfaW5kaWNhdG9yKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJfc3ByaXRlcyhjbGVhcl9wc3lfZ2FpbiA9IHRydWUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3dbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xlYXJfcHN5X2dhaW4pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHN5X2luZm9fMV90ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMucHN5X2luZm9fMV90ZXh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHN5X2luZm9fMV90ZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wc3lfaW5mb18yX3RleHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5wc3lfaW5mb18yX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wc3lfaW5mb18yX3RleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2hhciwgY2xvc2VfY2FsbGJhY2ssIHNldF9kZXNjcmlwdGlvbiwgZXhwYW5kZWQgPSBmYWxzZSwgZGppbm4gPSBudWxsLCBuZXh0X2RqaW5uX3N0YXR1cyA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMucHN5X3NlYWxlZCA9IHRoaXMuY2hhci5oYXNfdGVtcG9yYXJ5X3N0YXR1cyh0ZW1wb3Jhcnlfc3RhdHVzLlNFQUwpO1xyXG4gICAgICAgIHRoaXMuZGppbm5pID0gW2RqaW5uXTtcclxuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IFtuZXh0X2RqaW5uX3N0YXR1c107XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmFiaWxpdHlfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5idXR0b24uYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLmFscGhhID0gMDtcclxuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuYWJpbGl0aWVzW3RoaXMuYWJpbGl0eV9pbmRleF1dLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5mb3JFYWNoKHNpZ25hbF9iaW5kaW5nID0+IHtcclxuICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlc3Ryb3koKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3cuanNcIjtcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVycy5qc1wiO1xyXG5cclxuY29uc3QgQkFTRV9XSU5fWCA9IDA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA2NDtcclxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxNTY7XHJcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDg0O1xyXG5jb25zdCBIUF9MQUJFTF9YID0gODtcclxuY29uc3QgSFBfTEFCRUxfWSA9IDE2O1xyXG5jb25zdCBDTEFTU19OQU1FX1kgPSA4O1xyXG5jb25zdCBBRlRFUl9DTEFTU19YID0gODg7XHJcbmNvbnN0IEJFRk9SRV9TVEFUX1ggPSA3ODtcclxuY29uc3QgQUZURVJfU1RBVF9YID0gMTI2O1xyXG5jb25zdCBDTEFTU19BUlJPV19YID0gODA7XHJcbmNvbnN0IENMQVNTX0FSUk9XX1kgPSAxNjtcclxuY29uc3Qgc3RhdHNfa2V5cyA9IFtcIm1heF9ocFwiLCBcIm1heF9wcFwiLCBcImF0a1wiLCBcImRlZlwiLCBcImFnaVwiLCBcImx1a1wiXTtcclxuY29uc3QgU1RBVF9BUlJPV19YID0gODA7XHJcbmNvbnN0IFNUQVRfQVJST1dfWSA9IDE1O1xyXG5jb25zdCBTSElGVF9CVVRUT05fWCA9IDMyO1xyXG5jb25zdCBTSElGVF9CVVRUT05fWSA9IDcyO1xyXG5jb25zdCBTSElGVF9ERVNDUklQVElPTl9YID0gNTU7XHJcbmNvbnN0IFNISUZUX0RFU0NSSVBUSU9OX1kgPSA3MjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEamlublN0YXRzV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICBjb25zdCBsYWJlbHMgPSBbXCJIUFwiLCBcIlBQXCIsIFwiQXR0YWNrXCIsIFwiRGVmZW5zZVwiLCBcIkFnaWxpdHlcIiwgXCJMdWNrXCJdO1xyXG4gICAgICAgIHRoaXMuYmVmb3JlX3N0YXRzID0ge307XHJcbiAgICAgICAgdGhpcy5hZnRlcl9zdGF0cyA9IHt9O1xyXG4gICAgICAgIHRoaXMudXBfYXJyb3dzID0ge307XHJcbiAgICAgICAgdGhpcy5kb3duX2Fycm93cyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdHNfa2V5cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGxhYmVsc1tpXSwgSFBfTEFCRUxfWCwgSFBfTEFCRUxfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlX3N0YXRzW3N0YXRzX2tleXNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBCRUZPUkVfU1RBVF9YLCBIUF9MQUJFTF9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5hZnRlcl9zdGF0c1tzdGF0c19rZXlzW2ldXSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQUZURVJfU1RBVF9YLCBIUF9MQUJFTF9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy51cF9hcnJvd3Nbc3RhdHNfa2V5c1tpXV0gPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFUX0FSUk9XX1gsIFNUQVRfQVJST1dfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSwgXCJzdGF0X3VwXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW3N0YXRzX2tleXNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBVF9BUlJPV19YLCBTVEFUX0FSUk9XX1kgKyBpICogbnVtYmVycy5GT05UX1NJWkUsIFwic3RhdF9kb3duXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XHJcbiAgICAgICAgdGhpcy5iZWZvcmVfY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgSFBfTEFCRUxfWCwgQ0xBU1NfTkFNRV9ZKTtcclxuICAgICAgICB0aGlzLmFmdGVyX2NsYXNzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIEFGVEVSX0NMQVNTX1gsIENMQVNTX05BTUVfWSk7XHJcbiAgICAgICAgbGV0IGFycm93X2NoYW5nZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKENMQVNTX0FSUk9XX1gsIENMQVNTX0FSUk9XX1ksIFwiYXJyb3dfY2hhbmdlXCIpO1xyXG4gICAgICAgIGFycm93X2NoYW5nZS5yb3RhdGlvbiA9IC1udW1iZXJzLmRlZ3JlZTkwO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNISUZUX0JVVFRPTl9YICsgMSwgU0hJRlRfQlVUVE9OX1kgKyAxLCBcInNoaWZ0X2tleWJvYXJkXCIsIDB4MCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfQlVUVE9OX1gsIFNISUZUX0JVVFRPTl9ZLCBcInNoaWZ0X2tleWJvYXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCI6IFBzeS4gR2FpbmVkXCIsIFNISUZUX0RFU0NSSVBUSU9OX1gsIFNISUZUX0RFU0NSSVBUSU9OX1kpO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlX2Fycm93cygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRzX2tleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5kb3duX2Fycm93c1tzdGF0c19rZXlzW2ldXS5hbHBoYSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW3N0YXRzX2tleXNbaV1dLmFscGhhID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3N0YXRzKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmNsYXNzLm5hbWUsIHRoaXMuYmVmb3JlX2NsYXNzX3RleHQpO1xyXG4gICAgICAgIGNvbnN0IHByZXZpZXdfdmFsdWVzID0gdGhpcy5jaGFyLnByZXZpZXdfZGppbm5fY2hhbmdlKHN0YXRzX2tleXMsIFt0aGlzLmRqaW5uLmtleV9uYW1lXSwgW3RoaXMubmV4dF9kamlubmlfc3RhdHVzXSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChwcmV2aWV3X3ZhbHVlcy5jbGFzc19uYW1lLCB0aGlzLmFmdGVyX2NsYXNzX3RleHQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdHNfa2V5cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0X2tleSA9IHN0YXRzX2tleXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfc3RhdCA9IHRoaXMuY2hhcltzdGF0X2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRfc3RhdCA9IHByZXZpZXdfdmFsdWVzW3N0YXRfa2V5XTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChjdXJyZW50X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5iZWZvcmVfc3RhdHNbc3RhdF9rZXldKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChuZXh0X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5hZnRlcl9zdGF0c1tzdGF0X2tleV0pO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudF9zdGF0ID4gbmV4dF9zdGF0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW3N0YXRfa2V5XS5hbHBoYSA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudF9zdGF0IDwgbmV4dF9zdGF0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tzdGF0X2tleV0uYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9kamlubihkamlubiwgbmV4dF9kamlubmlfc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy5kamlubiA9IGRqaW5uO1xyXG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuaGlkZV9hcnJvd3MoKTtcclxuICAgICAgICB0aGlzLnNldF9zdGF0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2hhcikge1xyXG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XHJcbiAgICAgICAgdGhpcy5kamlubiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGlkZV9hcnJvd3MoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvdy5qc1wiO1xyXG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbC5qcyc7XHJcbmltcG9ydCB7IGRqaW5uX3N0YXR1cywgZGppbm5fZm9udF9jb2xvcnMgfSBmcm9tIFwiLi4vLi4vRGppbm4uanNcIjtcclxuaW1wb3J0IHsgRGppbm5TdGF0c1dpbmRvdyB9IGZyb20gXCIuL0RqaW5uU3RhdHNXaW5kb3cuanNcIjtcclxuXHJcbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxNjA7XHJcbmNvbnN0IEJBU0VfV0lORE9XX1kgPSA3MjtcclxuY29uc3QgQkFTRV9XSU5ET1dfV0lEVEggPSA3NjtcclxuY29uc3QgQkFTRV9XSU5ET1dfSEVJR0hUID0gODQ7XHJcbmNvbnN0IEVMRU1fUEVSX1BBR0UgPSA1O1xyXG5jb25zdCBUT1BfUEFERElORyA9IDg7XHJcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSA4O1xyXG5jb25zdCBISUdITElHSFRfQkFSX1dJRFRIID0gNjQ7XHJcbmNvbnN0IEhJR0hMSUdIVF9CQVJfSEVJR0hUID0gODtcclxuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcclxuY29uc3QgQlVUVE9OX1ggPSAxNDA7XHJcbmNvbnN0IEJVVFRPTl9ZID0gMTM2O1xyXG5jb25zdCBTVEFSX1ggPSA5O1xyXG5jb25zdCBESklOTl9OQU1FX1ggPSAxNztcclxuY29uc3QgQ1VSU09SX1ggPSAxNTQ7XHJcbmNvbnN0IENVUlNPUl9ZID0gODQ7XHJcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xyXG5jb25zdCBSRUNPVkVSWV9OVU1CRVJfWCA9IDY3O1xyXG5cclxuZXhwb3J0IGNsYXNzIERqaW5uV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTkRPV19YLCBCQVNFX1dJTkRPV19ZLCBCQVNFX1dJTkRPV19XSURUSCwgQkFTRV9XSU5ET1dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cgPSBuZXcgRGppbm5TdGF0c1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwiZGppbm5pXCIpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5kcmF3UmVjdChISUdITElHSFRfQkFSX1gsIDAsIEhJR0hMSUdIVF9CQVJfV0lEVEgsIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gdGhpcy5zZXRfY29udHJvbCgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXJzX3Nwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfcGFnZXMuYmluZCh0aGlzKSwgdGhpcy5nZXRfbWF4X2VsZW1fb25fcGFnZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2RqaW5uLmJpbmQodGhpcyksIHRoaXMuZ2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdldF9kamlubl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9kamlubl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLmlzX29wZW4uYmluZCh0aGlzKSwgdGhpcy5pc19hY3RpdmUuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc19kamlubi5zdGF0dXMgIT09IGRqaW5uX3N0YXR1cy5SRUNPVkVSWSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpc19kamlubi5hYmlsaXR5X2tleV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSksXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zaGlmdF9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNoaWZ0X2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3cub3Blbih0aGlzLmNoYXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlLCB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV0sIHRoaXMuZ2V0X25leHRfc3RhdHVzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkpLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5TSElGVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgIXRoaXMucHN5bmVyZ3lfd2luZG93X29wZW4pIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfY3Vyc29yX3goKSB7XHJcbiAgICAgICAgcmV0dXJuIENVUlNPUl9YO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJzb3JfeSgpIHtcclxuICAgICAgICByZXR1cm4gQ1VSU09SX1kgKyAodGhpcy5kamlubl9pbmRleCAqIENVUlNPUl9TSElGVCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNfb3BlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZSAmJiAhdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9wYWdlX2luZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2RqaW5uX2luZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRqaW5uX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9kamlubl9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuZGppbm5faW5kZXggPSBpbmRleDtcclxuICAgIH0gXHJcblxyXG4gICAgZ2V0X21heF9lbGVtX29uX3BhZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGppbm5pLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfbWF4X3BhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VfbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxfc2V0X2Rlc2NyaXB0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV07XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpc19kamlubi5zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzX2RqaW5uLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24oXCJSZWFkeSB0byBzdW1tb24uIENob29zZSB0byBzZXQgaXQgYWdhaW4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24oXCJUaGlzIERqaW5uIGlzIHN0aWxsIHJlY292ZXJpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9wYWdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ19wYWdlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGppbm5faW5kZXggPj0gdGhpcy5kamlubmkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGppbm5faW5kZXggPSB0aGlzLmRqaW5uaS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLnNldF9jdXJzb3JfcG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsX3NldF9kZXNjcmlwdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9kamlubihiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XHJcbiAgICAgICAgdGhpcy5jYWxsX3NldF9kZXNjcmlwdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci55ID0gVE9QX1BBRERJTkcgKyB0aGlzLmRqaW5uX2luZGV4ICogKFNQQUNFX0JFVFdFRU5fSVRFTVMgKyBISUdITElHSFRfQkFSX0hFSUdIVCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX3BhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5kamlubmkgPSB0aGlzLmFsbF9kamlubmkuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRqaW5uaS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBkamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW2ldXTtcclxuICAgICAgICAgICAgY29uc3QgYmFzZV95ID0gVE9QX1BBRERJTkcgKyBpICogKFNQQUNFX0JFVFdFRU5fSVRFTVMgKyBISUdITElHSFRfQkFSX0hFSUdIVCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX1gsIGJhc2VfeSArIDEsIGRqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJzX3Nwcml0ZXMucHVzaChzdGFyKTtcclxuICAgICAgICAgICAgbGV0IGNvbG9yO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRqaW5uLnN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TRVRdOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6IGNvbG9yID0gZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlNUQU5EQlldOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlJFQ09WRVJZOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5SRUNPVkVSWV07IGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGRqaW5uLm5hbWUsIERKSU5OX05BTUVfWCwgYmFzZV95LCBmYWxzZSwgZmFsc2UsIGNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY19udW1iZXIgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgIChkamlubi5yZWNvdmVyeV90dXJuICsgMSkudG9TdHJpbmcoKSwgUkVDT1ZFUllfTlVNQkVSX1gsIGJhc2VfeSwgdHJ1ZSwgZmFsc2UsIGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5SRUNPVkVSWV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKHJlY19udW1iZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9wYWdlX251bWJlcigpIHtcclxuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2RqaW5uaS5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9IHBhcnNlSW50KChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpICsgMTtcclxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldF9uZXh0X3N0YXR1cygpIHtcclxuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbdGhpcy5kamlubl9pbmRleF1dO1xyXG4gICAgICAgIGxldCBuZXh0X3N0YXR1cztcclxuICAgICAgICBzd2l0Y2ggKHRoaXNfZGppbm4uc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU1RBTkRCWTsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6IG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlNFVDsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlJFQ09WRVJZOiBuZXh0X3N0YXR1cyA9IGRqaW5uX3N0YXR1cy5SRUNPVkVSWTsgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0X3N0YXR1cztcclxuICAgIH1cclxuICAgIFxyXG4gICAgdXBkYXRlX3N0YXRzKCkge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV07XHJcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuc2V0X2RqaW5uKHRoaXNfZGppbm4sIHRoaXMuZ2V0X25leHRfc3RhdHVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdW50X3dpbmRvdygpIHtcclxuICAgICAgICB0aGlzLmFsbF9kamlubmkgPSB0aGlzLmNoYXIuZGppbm5pO1xyXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3IodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcclxuICAgICAgICB0aGlzLmNvbmZpZ19wYWdlKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfc3RhdHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcl9zcHJpdGVzKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRqaW5uX25hbWVzLmZvckVhY2godGV4dCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihjaGFyLCBjbG9zZV9jYWxsYmFjaywgc2V0X2Rlc2NyaXB0aW9uLCBwc3luZXJneV93aW5kb3cpIHtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbiA9IHNldF9kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdyA9IHBzeW5lcmd5X3dpbmRvdztcclxuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5kamlubl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5vcGVuKHRoaXMuY2hhcik7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5jYWxsX3NldF9kZXNjcmlwdGlvbigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93Lm9wZW4odGhpcy5jaGFyKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xyXG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlc3Ryb3koKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3cuanNcIjtcclxuaW1wb3J0IHsgQ3Vyc29yQ29udHJvbCB9IGZyb20gJy4uLy4uL3V0aWxzL0N1cnNvckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi8uLi9tYWdpY19udW1iZXJzLmpzXCJcclxuaW1wb3J0IHsgdXNlX3R5cGVzIH0gZnJvbSBcIi4uLy4uL0l0ZW0uanNcIjtcclxuXHJcbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxMjA7XHJcbmNvbnN0IEJBU0VfV0lORE9XX1kgPSA3MjtcclxuY29uc3QgQkFTRV9XSU5ET1dfV0lEVEggPSAxMTY7XHJcbmNvbnN0IEJBU0VfV0lORE9XX0hFSUdIVCA9IDg0O1xyXG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcclxuY29uc3QgVE9QX1BBRERJTkcgPSA4O1xyXG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gODtcclxuY29uc3QgSElHSExJR0hUX0JBUl9XSURUSCA9IDEwNDtcclxuY29uc3QgSElHSExJR0hUX0JBUl9IRUlHSFQgPSA4O1xyXG5jb25zdCBISUdITElHSFRfQkFSX1ggPSA4O1xyXG5jb25zdCBCVVRUT05fWCA9IDk2O1xyXG5jb25zdCBCVVRUT05fWSA9IDEzNjtcclxuY29uc3QgSVRFTV9OQU1FX1ggPSAyNjtcclxuY29uc3QgQ1VSU09SX1ggPSAxMTY7XHJcbmNvbnN0IENVUlNPUl9ZID0gODQ7XHJcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xyXG5jb25zdCBJVEVNX0lDT05fWCA9IDg7XHJcbmNvbnN0IFNVQl9JQ09OX1ggPSA3O1xyXG5jb25zdCBTVUJfSUNPTl9ZID0gODtcclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTkRPV19YLCBCQVNFX1dJTkRPV19ZLCBCQVNFX1dJTkRPV19XSURUSCwgQkFTRV9XSU5ET1dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwiaXRlbVwiKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaGlnaGxpZ2h0X2Jhcik7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZHJhd1JlY3QoSElHSExJR0hUX0JBUl9YLCAwLCBISUdITElHSFRfQkFSX1dJRFRILCBISUdITElHSFRfQkFSX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmVuZEZpbGwoKTtcclxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgICAgICB0aGlzLml0ZW1fbmFtZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfcGFnZXMuYmluZCh0aGlzKSwgdGhpcy5nZXRfbWF4X2VsZW1fb25fcGFnZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2l0ZW0uYmluZCh0aGlzKSwgdGhpcy5nZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9wYWdlX2luZGV4LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X2l0ZW1faW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfaXRlbV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLmlzX29wZW4uYmluZCh0aGlzKSwgdGhpcy5pc19hY3RpdmUuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc19pdGVtLnVzZV90eXBlICE9PSB1c2VfdHlwZXMuTk9fVVNFICYmIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXNfaXRlbS51c2VfYWJpbGl0eV0uaXNfYmF0dGxlX2FiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IHRoaXNfaXRlbS51c2VfYWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJzb3JfeCgpIHtcclxuICAgICAgICByZXR1cm4gQ1VSU09SX1g7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2N1cnNvcl95KCkge1xyXG4gICAgICAgIHJldHVybiBDVVJTT1JfWSArICh0aGlzLml0ZW1faW5kZXggKiBDVVJTT1JfU0hJRlQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzX29wZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XHJcbiAgICB9XHJcblxyXG4gICAgaXNfYWN0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19hY3RpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X3BhZ2VfaW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9pbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfcGFnZV9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9pdGVtX2luZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1faW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2l0ZW1faW5kZXgoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLml0ZW1faW5kZXggPSBpbmRleDtcclxuICAgIH0gXHJcblxyXG4gICAgZ2V0X21heF9lbGVtX29uX3BhZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9tYXhfcGFnZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9udW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX3BhZ2UoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcclxuICAgICAgICBpZiAodGhpcy5pdGVtX2luZGV4ID49IHRoaXMuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9pbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0KHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX2l0ZW0oYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2hpZ2hsaWdodF9iYXIoKSB7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLnkgPSBUT1BfUEFERElORyArIHRoaXMuaXRlbV9pbmRleCAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbmZpZ19wYWdlKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmFsbF9pdGVtcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtc1tpXS5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtX3kgPSBiYXNlX3kgLSA0O1xyXG4gICAgICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJVEVNX0lDT05fWCwgaXRlbV95LCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgdGhpcy5pdGVtc1tpXS5rZXlfbmFtZSkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLnB1c2godGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBpdGVtX3kgKyBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5xdWFudGl0eSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgaXRlbV95ICsgU1VCX0lDT05fWSwgJ2dzLWl0ZW0tYm1wLWZvbnQnLCB0aGlzLml0ZW1zW2ldLnF1YW50aXR5LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKGl0ZW1fY291bnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLnB1c2goaXRlbV9jb3VudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGNvbG9yID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1I7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnVzZV90eXBlID09PSB1c2VfdHlwZXMuTk9fVVNFIHx8ICF0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtpdGVtLnVzZV9hYmlsaXR5XS5pc19iYXR0bGVfYWJpbGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBudW1iZXJzLllFTExPV19GT05UX0NPTE9SO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGl0ZW0ubmFtZSwgSVRFTV9OQU1FX1gsIGJhc2VfeSwgZmFsc2UsIGZhbHNlLCBjb2xvcik7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9uYW1lcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdF9sZW5ndGggPSB0aGlzLmFsbF9pdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9IHBhcnNlSW50KChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpICsgMTtcclxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdW50X3dpbmRvdygpIHtcclxuICAgICAgICB0aGlzLmFsbF9pdGVtcyA9IHRoaXMuY2hhci5pdGVtcztcclxuICAgICAgICB0aGlzLmFsbF9pdGVtcyA9IF8uc29ydEJ5KHRoaXMuYWxsX2l0ZW1zLCBbaXRlbV9vYmogPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdGVtX29iai5rZXlfbmFtZV0udXNlX3R5cGUgPT09IHVzZV90eXBlcy5OT19VU0UgfHxcclxuICAgICAgICAgICAgICAgICF0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2l0ZW1fb2JqLmtleV9uYW1lXS51c2VfYWJpbGl0eV0uaXNfYmF0dGxlX2FiaWxpdHk7XHJcbiAgICAgICAgfV0pO1xyXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3IodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcclxuICAgICAgICB0aGlzLmNvbmZpZ19wYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJfc3ByaXRlcygpIHtcclxuICAgICAgICB0aGlzLml0ZW1fbmFtZXMuZm9yRWFjaCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0ZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihjaGFyLCBjbG9zZV9jYWxsYmFjaywgc2V0X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24gPSBzZXRfZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5pdGVtX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5LCB0aGlzLml0ZW1fb2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHksIHRoaXMuaXRlbV9vYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MuZm9yRWFjaChzaWduYWxfYmluZGluZyA9PiB7XHJcbiAgICAgICAgICAgIHNpZ25hbF9iaW5kaW5nLmRldGFjaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tIFwiLi4vLi4vV2luZG93LmpzXCI7XHJcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMuanNcIjtcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1ggPSAxNjA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA2NDtcclxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSA3NjtcclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMjA7XHJcbmNvbnN0IFNUQVJfTEVGVF9QQURESU5HID0gOTtcclxuY29uc3QgU1RBUl9UT1BfUEFERElORyA9IDk7XHJcbmNvbnN0IFRFWFRfTEVGVF9QQURESU5HID0gMjI7XHJcbmNvbnN0IFRFWFRfVE9QX1BBRERJTkcgPSA4O1xyXG5jb25zdCBTUEFDRV9CRVRXRUVOX1NUQVJTID0gMTY7XHJcbmNvbnN0IFNQQUNFX0JFVFdFRU5fVEVYVFMgPSAxNjtcclxuY29uc3QgSElHSExJR0hUX1dJRFRIID0gMTY7XHJcbmNvbnN0IEhJR0hMSUdIVF9IRUlHSFQgPSA4O1xyXG5jb25zdCBISUdITElHSFRfTEVGVF9QQURESU5HID0gODtcclxuY29uc3QgSElHSExJR0hUX1RPUF9QQURESU5HID0gODtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdW1tb25EamlublN0YW5kYnlXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLnRleHRzID0ge307XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcyA9IHt9O1xyXG4gICAgICAgIHRoaXMudGltZXJzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0xFRlRfUEFERElORyArIGkgKiBTUEFDRV9CRVRXRUVOX1NUQVJTLCBTVEFSX1RPUF9QQURESU5HLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0c1tlbGVtZW50XSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgVEVYVF9MRUZUX1BBRERJTkcgKyBpICogU1BBQ0VfQkVUV0VFTl9URVhUUywgVEVYVF9UT1BfUEFERElORywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0gPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5iZWdpbkZpbGwodGhpcy5iYXNlX3dpbmRvdy5jb2xvciwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uZHJhd1JlY3QoSElHSExJR0hUX0xFRlRfUEFERElORyArIGkgKiBISUdITElHSFRfV0lEVEgsIEhJR0hMSUdIVF9UT1BfUEFERElORywgSElHSExJR0hUX1dJRFRILCBISUdITElHSFRfSEVJR0hUKTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5lbmRGaWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBibGluayhlbGVtZW50LCBzcHJpdGUpIHtcclxuICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0ubG9vcCgxNTAsICgpID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gKyghc3ByaXRlLmFscGhhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XS5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9udW1iZXJzKHJlcXVpcmVtZW50cykge1xyXG4gICAgICAgIGZvciAobGV0IGVsZW1lbnQgaW4gcmVxdWlyZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX251bWJlciA9IHJlcXVpcmVtZW50c1tlbGVtZW50XTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZXJzW2VsZW1lbnRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRqaW5uX251bWJlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ibGluayhlbGVtZW50LCB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoZGppbm5fbnVtYmVyLnRvU3RyaW5nKCksIHRoaXMudGV4dHNbZWxlbWVudF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcGVuKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcclxuICAgICAgICBmb3IgKGxldCBlbGVtZW50IGluIHRoaXMudGltZXJzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvdy5qc1wiO1xyXG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbC5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnMuanNcIlxyXG5pbXBvcnQgeyBEamlubiB9IGZyb20gXCIuLi8uLi9Eamlubi5qc1wiO1xyXG5pbXBvcnQgeyBTdW1tb25EamlublN0YW5kYnlXaW5kb3cgfSBmcm9tIFwiLi9TdW1tb25EamlublN0YW5kYnlXaW5kb3cuanNcIjtcclxuaW1wb3J0IHsgTUFYX0NIQVJTX0lOX0JBVFRMRSB9IGZyb20gXCIuLi8uLi9iYXR0bGUvQmF0dGxlLmpzXCI7XHJcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSBcIi4uLy4uL01haW5DaGFyLmpzXCI7XHJcblxyXG5jb25zdCBCQVNFX1dJTkRPV19YID0gMTA0O1xyXG5jb25zdCBCQVNFX1dJTkRPV19ZID0gODg7XHJcbmNvbnN0IEJBU0VfV0lORE9XX1dJRFRIID0gMTMyO1xyXG5jb25zdCBCQVNFX1dJTkRPV19IRUlHSFQgPSA2ODtcclxuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDQ7XHJcbmNvbnN0IFRPUF9QQURESU5HID0gODtcclxuY29uc3QgU1BBQ0VfQkVUV0VFTl9JVEVNUyA9IDg7XHJcbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxMjA7XHJcbmNvbnN0IEhJR0hMSUdIVF9CQVJfSEVJR0hUID0gODtcclxuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcclxuY29uc3QgQlVUVE9OX1ggPSA4MDtcclxuY29uc3QgQlVUVE9OX1kgPSAxMzY7XHJcbmNvbnN0IFNVTU1PTl9OQU1FX1ggPSAyODtcclxuY29uc3QgQ1VSU09SX1ggPSA5ODtcclxuY29uc3QgQ1VSU09SX1kgPSAxMDA7XHJcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xyXG5jb25zdCBTVU1NT05fSUNPTl9YID0gMTA7XHJcblxyXG5leHBvcnQgY2xhc3MgU3VtbW9uV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTkRPV19YLCBCQVNFX1dJTkRPV19ZLCBCQVNFX1dJTkRPV19XSURUSCwgQkFTRV9XSU5ET1dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwic3VtbW9uXCIpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5kcmF3UmVjdChISUdITElHSFRfQkFSX1gsIDAsIEhJR0hMSUdIVF9CQVJfV0lEVEgsIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gdGhpcy5zZXRfY29udHJvbCgpO1xyXG4gICAgICAgIHRoaXMuc3VtbW9uX25hbWVzID0gW107XHJcbiAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbCA9IG5ldyBDdXJzb3JDb250cm9sKHRoaXMuZ2FtZSwgdHJ1ZSwgdHJ1ZSwgdGhpcy5nZXRfbWF4X3BhZ2VzLmJpbmQodGhpcyksIHRoaXMuZ2V0X21heF9lbGVtX29uX3BhZ2UuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5ncm91cCwgdGhpcy5jaGFuZ2VfcGFnZS5iaW5kKHRoaXMpLCB0aGlzLmNoYW5nZV9zdW1tb24uYmluZCh0aGlzKSwgdGhpcy5nZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9wYWdlX2luZGV4LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X3N1bW1vbl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9zdW1tb25faW5kZXguYmluZCh0aGlzKSwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X2N1cnNvcl94LmJpbmQodGhpcyksIHRoaXMuZ2V0X2N1cnNvcl95LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cgPSBuZXcgU3VtbW9uRGppbm5TdGFuZGJ5V2luZG93KGdhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jb250cm9sKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5rZXlfbmFtZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJzb3JfeCgpIHtcclxuICAgICAgICByZXR1cm4gQ1VSU09SX1g7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2N1cnNvcl95KCkge1xyXG4gICAgICAgIHJldHVybiBDVVJTT1JfWSArICh0aGlzLnN1bW1vbl9pbmRleCAqIENVUlNPUl9TSElGVCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNfb3BlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9wYWdlX2luZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X3N1bW1vbl9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdW1tb25faW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3N1bW1vbl9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc3VtbW9uX2luZGV4ID0gaW5kZXg7XHJcbiAgICB9IFxyXG5cclxuICAgIGdldF9tYXhfZWxlbV9vbl9wYWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1bW1vbnMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9tYXhfcGFnZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9udW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX3BhZ2UoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcclxuICAgICAgICBpZiAodGhpcy5zdW1tb25faW5kZXggPj0gdGhpcy5zdW1tb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnN1bW1vbl9pbmRleCA9IHRoaXMuc3VtbW9ucy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLnNldF9jdXJzb3JfcG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3BhZ2VfaW5kaWNhdG9yX2hpZ2hsaWdodCh0aGlzLnBhZ2VfbnVtYmVyLCB0aGlzLnBhZ2VfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuc2V0X251bWJlcnModGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5yZXF1aXJlbWVudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9zdW1tb24oYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLnN1bW1vbnNbdGhpcy5zdW1tb25faW5kZXhdLmtleV9uYW1lXS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LnNldF9udW1iZXJzKHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ucmVxdWlyZW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IFRPUF9QQURESU5HICsgdGhpcy5zdW1tb25faW5kZXggKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25maWdfcGFnZSgpIHtcclxuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcclxuICAgICAgICB0aGlzLnN1bW1vbnMgPSB0aGlzLmFsbF9zdW1tb25zLnNsaWNlKHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAqIEVMRU1fUEVSX1BBR0UpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdW1tb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLnN1bW1vbnNbaV0ua2V5X25hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBiYXNlX3kgPSBUT1BfUEFERElORyArIGkgKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcclxuICAgICAgICAgICAgY29uc3Qgc3VtbW9uX3kgPSBiYXNlX3kgLSAzO1xyXG4gICAgICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVU1NT05fSUNPTl9YLCBzdW1tb25feSwgXCJhYmlsaXRpZXNfaWNvbnNcIiwgdW5kZWZpbmVkLCB0aGlzLnN1bW1vbnNbaV0ua2V5X25hbWUpKTtcclxuICAgICAgICAgICAgbGV0IGNvbG9yID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1I7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdW1tb25zW2ldLmF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBudW1iZXJzLlJFRF9GT05UX0NPTE9SO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGFiaWxpdHkubmFtZSwgU1VNTU9OX05BTUVfWCwgYmFzZV95LCBmYWxzZSwgZmFsc2UsIGNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5zdW1tb25fbmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RfbGVuZ3RoID0gdGhpcy5hbGxfc3VtbW9ucy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9IHBhcnNlSW50KChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpICsgMTtcclxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdW50X3dpbmRvdygpIHtcclxuICAgICAgICB0aGlzLnN0YW5kYnlfZGppbm5pID0gRGppbm4uZ2V0X3N0YW5kYnlfZGppbm5pKHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LCBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgTUFYX0NIQVJTX0lOX0JBVFRMRSkpO1xyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gdGhpcy5zdGFuZGJ5X2RqaW5uaSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YW5kYnlfZGppbm5pW2VsZW1dIC09IHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZFtlbGVtXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hbGxfc3VtbW9ucyA9IF8ubWFwKHRoaXMuZGF0YS5kYnMuc3VtbW9uc19kYiwgc3VtbW9uID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlID0gXy5ldmVyeShzdW1tb24ucmVxdWlyZW1lbnRzLCAodmFsdWUsIGVsZW0pID0+IHZhbHVlIDw9IHRoaXMuc3RhbmRieV9kamlubmlbZWxlbV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3VtbW9uLCB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGU6IGF2YWlsYWJsZSxcclxuICAgICAgICAgICAgICAgIGluZGV4OiBhdmFpbGFibGUgPyAtc3VtbW9uLmluZGV4IDogc3VtbW9uLmluZGV4XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWxsX3N1bW1vbnMgPSBfLnNvcnRCeSh0aGlzLmFsbF9zdW1tb25zLCBbc3VtbW9uID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1bW1vbi5pbmRleDtcclxuICAgICAgICB9XSk7XHJcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcih0aGlzLnBhZ2VfbnVtYmVyLCB0aGlzLnBhZ2VfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcl9zcHJpdGVzKCkge1xyXG4gICAgICAgIHRoaXMuc3VtbW9uX25hbWVzLmZvckVhY2godGV4dCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cChzcHJpdGUsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2hhciwgY2xvc2VfY2FsbGJhY2ssIHNldF9kZXNjcmlwdGlvbiwgZGppbm5pX2FscmVhZHlfdXNlZCkge1xyXG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IGRqaW5uaV9hbHJlYWR5X3VzZWQ7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5zdW1tb25faW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcclxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LnNldF9udW1iZXJzKHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ucmVxdWlyZW1lbnRzKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xyXG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ2hhcnNTdGF0dXNXaW5kb3cgfSBmcm9tIFwiLi4vd2luZG93cy9DaGFyc1N0YXR1c1dpbmRvdy5qc1wiO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsTWVudSB9IGZyb20gXCIuLi9tZW51cy9Ib3Jpem9udGFsTWVudS5qc1wiO1xyXG5pbXBvcnQgeyBjYXBpdGFsaXplLCBvcmRlcmVkX2VsZW1lbnRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnMuanNcIjtcclxuaW1wb3J0IHsgRGppbm4sIGRqaW5uX3N0YXR1cyB9IGZyb20gXCIuLi9Eamlubi5qc1wiO1xyXG5pbXBvcnQgeyBEZXNjcmlwdGlvbldpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9EZXNjcmlwdGlvbldpbmRvdy5qc1wiXHJcbmltcG9ydCB7IFBzeW5lcmd5V2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL1BzeW5lcmd5V2luZG93LmpzXCJcclxuaW1wb3J0IHsgRGppbm5XaW5kb3cgfSBmcm9tIFwiLi4vd2luZG93cy9iYXR0bGUvRGppbm5XaW5kb3cuanNcIjtcclxuaW1wb3J0IHsgSXRlbVdpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9JdGVtV2luZG93LmpzXCI7XHJcbmltcG9ydCB7IFN1bW1vbldpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9TdW1tb25XaW5kb3cuanNcIjtcclxuaW1wb3J0IHsgTUFYX0NIQVJTX0lOX0JBVFRMRSB9IGZyb20gXCIuLi9iYXR0bGUvQmF0dGxlLmpzXCI7XHJcbmltcG9ydCB7IHBlcm1hbmVudF9zdGF0dXMgfSBmcm9tIFwiLi4vUGxheWVyLmpzXCI7XHJcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSBcIi4uL01haW5DaGFyLmpzXCI7XHJcblxyXG5jb25zdCBTVEFSVF9USVRMRV9XSU5ET1dfV0lEVEggPSA3NjtcclxuY29uc3QgSU5ORVJfVElUTEVfV0lORE9XX1dJRFRIID0gNjA7XHJcbmNvbnN0IEZPUldBUkQgPSAxO1xyXG5jb25zdCBCQUNLV0FSRCA9IC0xO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhdHRsZU1lbnVTY3JlZW4ge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgb25fYWJpbGl0aWVzX2Nob29zZSwgY2hvb3NlX3RhcmdldHMpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlID0gb25fYWJpbGl0aWVzX2Nob29zZTtcclxuICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzID0gY2hvb3NlX3RhcmdldHM7XHJcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93ID0gbmV3IENoYXJzU3RhdHVzV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnN0YXJ0X2J1dHRvbnNfa2V5cyA9IFtcImZpZ2h0XCIsIFwiZmxlZVwiLCBcInN0YXR1c1wiXTtcclxuICAgICAgICB0aGlzLnNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gMDtcclxuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUgPSBuZXcgSG9yaXpvbnRhbE1lbnUoXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcclxuICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0X2J1dHRvbnNfa2V5cyxcclxuICAgICAgICAgICAgdGhpcy5zdGFydF9idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBTVEFSVF9USVRMRV9XSU5ET1dfV0lEVEgsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzID0gW1wiYXR0YWNrXCIsIFwicHN5bmVyZ3lcIiwgXCJkamlubmlcIiwgXCJzdW1tb25cIiwgXCJpdGVtXCIsIFwiZGVmZW5kXCJdO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93ID0gbmV3IERlc2NyaXB0aW9uV2luZG93KHRoaXMuZ2FtZSk7XHJcbiAgICAgICAgdGhpcy5kamlubl93aW5kb3cgPSBuZXcgRGppbm5XaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEsIHRoaXMuc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93ID0gbmV3IFBzeW5lcmd5V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxKTtcclxuICAgICAgICB0aGlzLml0ZW1fd2luZG93ID0gbmV3IEl0ZW1XaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEpO1xyXG4gICAgICAgIHRoaXMuc3VtbW9uX3dpbmRvdyA9IG5ldyBTdW1tb25XaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfc3ByaXRlID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgbnVtYmVycy5HQU1FX0hFSUdIVCAtIG51bWJlcnMuQVZBVEFSX1NJWkUpO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX3Nwcml0ZS5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUgPSBuZXcgSG9yaXpvbnRhbE1lbnUoXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcclxuICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICB0aGlzLmlubmVyX2J1dHRvbnNfa2V5cyxcclxuICAgICAgICAgICAgdGhpcy5pbm5lcl9idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXHJcbiAgICAgICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksXHJcbiAgICAgICAgICAgIHRoaXMuaW5uZXJfbWVudV9jYW5jZWwuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksXHJcbiAgICAgICAgICAgIElOTkVSX1RJVExFX1dJTkRPV19XSURUSCxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnRfYnV0dG9uX3ByZXNzKGluZGV4KSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXJ0X2J1dHRvbnNfa2V5c1tpbmRleF0pIHtcclxuICAgICAgICAgICAgY2FzZSBcImZpZ2h0XCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkX2J1dHRvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICghRGppbm4uaGFzX3N0YW5kYnlfZGppbm4odGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3QsIE1haW5DaGFyLmdldF9hY3RpdmVfcGxheWVycyh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLCBNQVhfQ0hBUlNfSU5fQkFUVExFKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZF9idXR0b25zLnB1c2goXCJzdW1tb25cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfYnV0dG9ucyA9IHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzLmZpbHRlcihrZXkgPT4gIWZpbHRlcmVkX2J1dHRvbnMuaW5jbHVkZXMoa2V5KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5tb3VudF9idXR0b25zKGZpbHRlcmVkX2J1dHRvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5zbGljZSgwLCBNQVhfQ0hBUlNfSU5fQkFUVExFKS5mb3JFYWNoKGNoYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW2NoYXIua2V5X25hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IG9yZGVyZWRfZWxlbWVudHMucmVkdWNlKChhLGIpID0+IChhW2JdID0gMCwgYSksIHt9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51Lm9wZW4oKTtcclxuICAgICAgICAgICAgICAgIGxldCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXNfY2hhci5pc19wYXJhbHl6ZWQoKSB8fCB0aGlzX2NoYXIuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXNbdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZV0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICsrdGhpcy5jdXJyZW50X2NoYXJfaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPj0gTUFYX0NIQVJTX0lOX0JBVFRMRSB8fCB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlKHRoaXMuYWJpbGl0aWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYXZhdGFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlubmVyX2J1dHRvbl9wcmVzcyhpbmRleCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50X2J1dHRvbnNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhdHRhY2tcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzKFwiYXR0YWNrXCIsIFwiYXR0YWNrXCIsIHRhcmdldHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X25hbWU6IFwiYXR0YWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiB0YXJnZXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRhY2tcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VfY2hhcihGT1JXQVJEKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXR5X2Nob29zZSh0aGlzLnBzeW5lcmd5X3dpbmRvdywgZmFsc2UsIFwicHN5bmVyZ3lcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRqaW5uaVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXR5X2Nob29zZSh0aGlzLmRqaW5uX3dpbmRvdywgdHJ1ZSwgXCJkamlubmlcIiwgdGhpcy5wc3luZXJneV93aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBcInN1bW1vblwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXR5X2Nob29zZSh0aGlzLnN1bW1vbl93aW5kb3csIHRydWUsIFwic3VtbW9uXCIsIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCk7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlIFwiaXRlbVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXR5X2Nob29zZSh0aGlzLml0ZW1fd2luZG93LCBmYWxzZSwgXCJpdGVtXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBcImRlZmVuZFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuZGVhY3RpdmF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RhcmdldHMoXCJkZWZlbmRcIiwgXCJkZWZlbmRcIiwgdGFyZ2V0cyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXNbdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZV0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogXCJkZWZlbmRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRlZmVuZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9jaGFyKEZPUldBUkQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbl9hYmlsaXR5X2Nob29zZSh3aW5kb3csIGRlc2NyaXB0aW9uX29uX3RvcCwgYWN0aW9uX3R5cGUsIC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5kZWFjdGl2YXRlKHRydWUpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93Lm9wZW4oZGVzY3JpcHRpb25fb25fdG9wKTtcclxuICAgICAgICB3aW5kb3cub3Blbih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdLCAoYWJpbGl0eSwgaXRlbV9vYmopID0+IHtcclxuICAgICAgICAgICAgaWYgKGFiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkamlubl9rZXlfbmFtZTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25fdHlwZSA9PT0gXCJkamlubmlcIiAmJiB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFthYmlsaXR5XS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGppbm5fa2V5X25hbWUgPSBhYmlsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIGFiaWxpdHkgPSBcInNldF9kamlublwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb25fdHlwZSA9PT0gXCJzdW1tb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IHRoaXMuZGF0YS5kYnMuc3VtbW9uc19kYlthYmlsaXR5XS5yZXF1aXJlbWVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubmlfYWxyZWFkeV91c2VkID0gXy5tYXBWYWx1ZXModGhpcy5kamlubmlfYWxyZWFkeV91c2VkLCAodmFsdWUsIGVsZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICsgcmVxdWlyZW1lbnRzW2VsZW1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGFyZ2V0cyhhYmlsaXR5LCBhY3Rpb25fdHlwZSwgdGFyZ2V0cyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXNbdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZV0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogYWJpbGl0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhY3Rpb25fdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRqaW5uX2tleV9uYW1lOiBkamlubl9rZXlfbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoRk9SV0FSRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0sIGl0ZW1fb2JqKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaXNfb3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9kZXNjcmlwdGlvbi5iaW5kKHRoaXMuZGVzY3JpcHRpb25fd2luZG93KSwgLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlX2NoYXIoc3RlcCwgcG9wX2FiaWxpdHkgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGJlZm9yZV9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XTtcclxuICAgICAgICBjb25zdCBhYmlsaXRpZXNfY291bnQgPSB0aGlzLmFiaWxpdGllc1tiZWZvcmVfY2hhci5rZXlfbmFtZV0ubGVuZ3RoO1xyXG4gICAgICAgIGlmIChiZWZvcmVfY2hhci50dXJucyA9PT0gYWJpbGl0aWVzX2NvdW50IHx8ICFhYmlsaXRpZXNfY291bnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NoYXJfaW5kZXggKz0gc3RlcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID49IE1BWF9DSEFSU19JTl9CQVRUTEUgfHwgdGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPj0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMub25fYWJpbGl0aWVzX2Nob29zZSh0aGlzLmFiaWxpdGllcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgICAgIGlmIChwb3BfYWJpbGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWJpbGl0eV9pbmZvID0gdGhpcy5hYmlsaXRpZXNbbmV4dF9jaGFyLmtleV9uYW1lXS5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5X2luZm8udHlwZSA9PT0gXCJzdW1tb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IHRoaXMuZGF0YS5kYnMuc3VtbW9uc19kYlthYmlsaXR5X2luZm8ua2V5X25hbWVdLnJlcXVpcmVtZW50cztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQgPSBfLm1hcFZhbHVlcyh0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQsICh2YWx1ZSwgZWxlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSByZXF1aXJlbWVudHNbZWxlbV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG5leHRfY2hhci5pc19wYXJhbHl6ZWQoKSB8fCBuZXh0X2NoYXIuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9jaGFyKHN0ZXAsIHBvcF9hYmlsaXR5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2F2YXRhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW5uZXJfbWVudV9jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2F2YXRhcigpIHtcclxuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX3Nwcml0ZS5sb2FkVGV4dHVyZShcImF2YXRhcnNcIiwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZV9hdmF0YXIoKSB7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfc3ByaXRlLmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpbm5lcl9tZW51X2NhbmNlbCgpIHtcclxuICAgICAgICBjb25zdCBjaGFyX2tleV9uYW1lID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZTtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPiAwIHx8IHRoaXMuYWJpbGl0aWVzW2NoYXJfa2V5X25hbWVdLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZV9jaGFyKEJBQ0tXQVJELCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVfYXZhdGFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51Lm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfcG9zaXRpb24odHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54O1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlIHx8IHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW5fbWVudSgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUub3BlbigpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XHJcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZV9tZW51KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc19hY3RpdmUoKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuaGlkZV9hdmF0YXIoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveV9tZW51KCkge1xyXG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51LmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5kamlubl93aW5kb3cuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93LmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLml0ZW1fd2luZG93LmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLnN1bW1vbl93aW5kb3cuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3cuanNcIjtcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVycy5qc1wiO1xyXG5pbXBvcnQgeyBlbGVtZW50cywgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gXCIuLi8uLi91dGlscy5qc1wiO1xyXG5cclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMjA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSAxMzY7XHJcbmNvbnN0IEFCSUxJVFlfTkFNRV9ZID0gODtcclxuY29uc3QgSUNPTl9YID0gOTtcclxuY29uc3QgSUNPTl9ZID0gNTtcclxuXHJcbmNvbnN0IEFCSUxJVFlfTkFNRV9YID0gMjQ7XHJcbmNvbnN0IEFCSUxJVFlfTkFNRV9JVEVNX1ggPSAzMjtcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1hfQVRLID0gODg7XHJcbmNvbnN0IEJBU0VfV0lOX1dJRFRIX0FUSyA9IDg0O1xyXG5jb25zdCBCQVNFX1dJTl9YX1BTWSA9IDY0O1xyXG5jb25zdCBCQVNFX1dJTl9XSURUSF9QU1kgPSAxNDA7XHJcbmNvbnN0IEJBU0VfV0lOX1hfREpJTk4gPSA4ODtcclxuY29uc3QgQkFTRV9XSU5fV0lEVEhfREpJTk4gPSA3NjtcclxuY29uc3QgQkFTRV9XSU5fWF9TVU1NT04gPSA4MDtcclxuY29uc3QgQkFTRV9XSU5fV0lEVEhfU1VNTU9OID0gMTMyO1xyXG5jb25zdCBCQVNFX1dJTl9YX0lURU0gPSA3MjtcclxuY29uc3QgQkFTRV9XSU5fV0lEVEhfSVRFTSA9IDEyNDtcclxuY29uc3QgQlVUVE9OX1dJRFRIID0gMjQ7XHJcblxyXG5jb25zdCBTVEFSX1dJRFRIID0gNjtcclxuY29uc3QgU1RBUl9ZID0gOTtcclxuY29uc3QgU1RBUl9YX1BTWSA9IDEyOTtcclxuY29uc3QgU1RBUl9YX0RKSU5OID0gOTtcclxuY29uc3QgU1RBUl9YX1NVTU9PTl8xID0gOTc7XHJcbmNvbnN0IFNUQVJfWF9TVU1PT05fMiA9IDExMztcclxuXHJcbmNvbnN0IFBQX1ggPSAxMjM7XHJcbmNvbnN0IFBQX1kgPSA4O1xyXG5jb25zdCBQUF9URVhUX1ggPSA5NjtcclxuXHJcbmNvbnN0IFNVQl9JQ09OX1ggPSAwO1xyXG5jb25zdCBTVUJfSUNPTl9ZID0gMDtcclxuXHJcbmV4cG9ydCBjbGFzcyBDaG9vc2luZ1RhcmdldFdpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgMCwgQkFTRV9XSU5fWSwgMCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54O1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYnV0dG9uKCkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKHRoaXMueCAtIEJVVFRPTl9XSURUSCwgQkFTRV9XSU5fWSwgXCJidXR0b25zXCIsIHRoaXMuYWN0aW9uKTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChidXR0b24pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9pbmZvKCkge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuYWJpbGl0eV9uYW1lLCB0aGlzLmFiaWxpdHlfbmFtZV94LCBBQklMSVRZX05BTUVfWSk7XHJcbiAgICAgICAgdGhpcy50ZXh0cy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50ICE9PSBlbGVtZW50cy5OT19FTEVNRU5UICYmIHRoaXMuYWN0aW9uICE9PSBcInN1bW1vblwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh0aGlzLnN0YXJfeCwgU1RBUl9ZLCB0aGlzLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzLnB1c2goc3Rhcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmljb25fc3ByaXRlX3NoZWV0ICYmIHRoaXMuYWN0aW9uICE9PSBcIml0ZW1cIikge1xyXG4gICAgICAgICAgICBjb25zdCBpY29uID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSUNPTl9YLCBJQ09OX1ksIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQsIHVuZGVmaW5lZCwgdGhpcy5hYmlsaXR5X2tleV9uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKGljb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwicHN5bmVyZ3lcIikge1xyXG4gICAgICAgICAgICBjb25zdCBwcF92YWx1ZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5xdWFudGl0aWVzWzBdLnRvU3RyaW5nKCksIFBQX1gsIFBQX1ksIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRzLnB1c2gocHBfdmFsdWUpO1xyXG4gICAgICAgICAgICBjb25zdCBwcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIFBQX1RFWFRfWCwgUFBfWSk7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHMucHVzaChwcF90ZXh0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSBcInN1bW1vblwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXMgPSBfLnBpY2tCeSh0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbdGhpcy5hYmlsaXR5X2tleV9uYW1lXS5yZXF1aXJlbWVudHMsIHJlcSA9PiByZXEpO1xyXG4gICAgICAgICAgICBsZXQgY291bnRlciA9IDA7XHJcbiAgICAgICAgICAgIG9yZGVyZWRfZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghKGVsZW1lbnQgaW4gcmVxcykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJfeCA9IGNvdW50ZXIgPT09IDAgPyBTVEFSX1hfU1VNT09OXzEgOiBTVEFSX1hfU1VNT09OXzI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFyID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoc3Rhcl94LCBTVEFSX1ksIGVsZW1lbnQgKyBcIl9zdGFyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKHN0YXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHJlcXNbZWxlbWVudF0udG9TdHJpbmcoKSwgc3Rhcl94ICsgU1RBUl9XSURUSCArIDEsIEFCSUxJVFlfTkFNRV9ZKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dHMucHVzaChyZXFfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICArK2NvdW50ZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09IFwiaXRlbVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICAgICAgbGV0IGljb25fc3ByaXRlID0gdGhpcy5pY29uX2dyb3VwLmNyZWF0ZSgwLCAwLCB0aGlzLmljb25fc3ByaXRlX3NoZWV0LCB0aGlzLmFiaWxpdHlfa2V5X25hbWUpO1xyXG4gICAgICAgICAgICBpY29uX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLmNyZWF0ZShTVUJfSUNPTl9YLCBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1fY291bnQgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoU1VCX0lDT05fWCwgU1VCX0lDT05fWSwgJ2dzLWl0ZW0tYm1wLWZvbnQnLCB0aGlzLml0ZW1fb2JqLnF1YW50aXR5LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLmFkZChpdGVtX2NvdW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5pY29uX2dyb3VwKTtcclxuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLnggPSBJQ09OX1ggKyAobnVtYmVycy5JQ09OX1dJRFRIID4+IDEpO1xyXG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAueSA9IElDT05fWSArIChudW1iZXJzLklDT05fSEVJR0hUID4+IDEpO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzLnB1c2godGhpcy5pY29uX2dyb3VwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihhY3Rpb24sIGFiaWxpdHlfbmFtZSwgZWxlbWVudCwgYWJpbGl0eV9rZXlfbmFtZSwgcXVhbnRpdGllcywgaXRlbV9vYmopIHtcclxuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZSA9IGFiaWxpdHlfbmFtZTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSA9IGFiaWxpdHlfa2V5X25hbWU7XHJcbiAgICAgICAgdGhpcy5xdWFudGl0aWVzID0gcXVhbnRpdGllcztcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhdHRhY2tcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9BVEs7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX0FUSztcclxuICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9uYW1lX3ggPSBBQklMSVRZX05BTUVfWDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicHN5bmVyZ3lcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9QU1k7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX1BTWTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9uYW1lX3ggPSBBQklMSVRZX05BTUVfWDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Rhcl94ID0gU1RBUl9YX1BTWTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQgPSBcImFiaWxpdGllc19pY29uc1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkamlubmlcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9ESklOTjtcclxuICAgICAgICAgICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1hfREpJTk47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX1g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJfeCA9IFNUQVJfWF9ESklOTjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic3VtbW9uXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gQkFTRV9XSU5fV0lEVEhfU1VNTU9OO1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWF9TVU1NT047XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX1g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlX3NoZWV0ID0gXCJhYmlsaXRpZXNfaWNvbnNcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaXRlbVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IEJBU0VfV0lOX1dJRFRIX0lURU07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX0lURU07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX0lURU1fWDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQgPSBcIml0ZW1zX2ljb25zXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfc2l6ZSh7d2lkdGg6IHRoaXMud2lkdGh9KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogdGhpcy54fSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnRleHRzID0gW107XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcclxuICAgICAgICB0aGlzLnNldF9pbmZvKCk7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRleHRzLmZvckVhY2godGV4dCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy50ZXh0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaWNvbl9ncm91cCkge1xyXG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgICAgIGlmICh0aGlzLmljb25fZ3JvdXApIHtcclxuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLyBFbmVteSB0YXJnZXQgcm9sbGluZzogaHR0cDovL2ZvcnVtLmdvbGRlbnN1bmhhY2tpbmcubmV0L2luZGV4LnBocD90b3BpYz0yNzkzLjBcclxuXHJcbmltcG9ydCB7IHBlcm1hbmVudF9zdGF0dXMgfSBmcm9tIFwiLi4vUGxheWVyLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRW5lbXlBSSB7XHJcbiAgICBzdGF0aWMgcm9sbF9hY3Rpb24oY2FzdGVyLCBhbGxpZXMsIGVuZW1pZXMpIHsgLy9oYXJkIGNvZGVkIHRvIGF0dGFjayBvbmx5IHRoZSBmaXJzdCBjaGFyIGFsd2F5cy4gV0lQXHJcbiAgICAgICAgbGV0IGNoYXJfY2hvc2VuID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5X25hbWU6IFwiYXR0YWNrXCIsXHJcbiAgICAgICAgICAgIHRhcmdldHM6IGFsbGllcy5tYXAoKGFsbHksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXZhaWxhYmxlX3RhcmdldCA9IGFsbHkuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBtYWduaXR1ZGU6IGF2YWlsYWJsZV90YXJnZXQgJiYgIWNoYXJfY2hvc2VuID8gMSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBhdmFpbGFibGVfdGFyZ2V0ICYmICFjaGFyX2Nob3NlbiA/IGFsbHkgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImF0dGFja1wiXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZV90YXJnZXQgJiYgIWNoYXJfY2hvc2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcl9jaG9zZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldHM7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIi8vcGxlYXNlIGNoZWNrIGh0dHA6Ly9mb3J1bS5nb2xkZW5zdW5oYWNraW5nLm5ldC9pbmRleC5waHA/dG9waWM9MjQ2MFxyXG5cclxuaW1wb3J0IHsgZWxlbWVudHMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcclxuaW1wb3J0IHsgcGVybWFuZW50X3N0YXR1cyB9IGZyb20gXCIuLi9QbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgRUxFTV9BVFRSX01BWCwgRUxFTV9BVFRSX01JTiB9IGZyb20gXCIuLi9tYWdpY19udW1iZXJzLmpzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JJVElDQUxfQ0hBTkNFID0gMS8zMjtcclxuXHJcbi8vIDEvMzIgY2hhbmNlIHRvIG1pc3Mgd2l0aCBhIHN0YW5kYXJkIGF0dGFjaywgb3IgYSByb3VnaGx5IDY2JSBjaGFuY2UgdG8gbWlzcyB3aXRoIERlbHVzaW9uLlxyXG5leHBvcnQgY29uc3QgRVZBU0lPTl9DSEFOQ0UgPSAxLzMyO1xyXG5leHBvcnQgY29uc3QgREVMVVNJT05fTUlTU19DSEFOQ0UgPSA2Ni8xMDA7XHJcblxyXG5leHBvcnQgY2xhc3MgQmF0dGxlRm9ybXVsYXMge1xyXG4gICAgc3RhdGljIHBsYXllcl90dXJuX3NwZWVkKGFnaWxpdHksIHByaW9yaXR5X21vdmUgPSBmYWxzZSwgbXVsdGlfdHVybiA9IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIChhZ2lsaXR5ICsgKChhZ2lsaXR5ICogXy5yYW5kb20oMCwgNjU1MzUpKSA+PiAyMCkpICogKG11bHRpX3R1cm4gPyAwLjUgOiAxKSArIChwcmlvcml0eV9tb3ZlID8gMWU0IDogMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGVuZW15X3R1cm5fc3BlZWQoYWdpbGl0eSwgdHVybl9udW1iZXIsIHR1cm5fcXVhbnRpdHksIHByaW9yaXR5X21vdmUgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5ID0gcHJpb3JpdHlfbW92ZSA/IDFlNCA6IDA7XHJcbiAgICAgICAgaWYgKHR1cm5fbnVtYmVyID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhZ2lsaXR5ICsgcHJpb3JpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0dXJuX3F1YW50aXR5ID09PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHVybl9xdWFudGl0eSA9PT0gMykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR1cm5fbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBhZ2lsaXR5ICogMy80ICsgcHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0dXJuX3F1YW50aXR5ID09PSA0KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHVybl9udW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogYWdpbGl0eSAqIDUvNiArIHByaW9yaXR5O1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiBhZ2lsaXR5ICogNC82ICsgcHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IChhZ2lsaXR5ID4+IDEpICsgcHJpb3JpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChhZ2lsaXR5ID4+IDEpICsgcHJpb3JpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJhc2VfZGFtYWdlKGNhc3RlciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgcmVsYXRpdmVfYXRrID0gY2FzdGVyLmN1cnJlbnRfYXRrIC0gdGFyZ2V0LmN1cnJlbnRfZGVmO1xyXG4gICAgICAgIHJldHVybiAocmVsYXRpdmVfYXRrIDwgMCA/IDAgOiByZWxhdGl2ZV9hdGspLzIuMDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc3BlY2lhbF9waHlzaWNhbF9hdHRhY2soY2FzdGVyLCB0YXJnZXQsIG11bHRfbW9kLCBhZGRfbW9kKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZV9kYW1hZ2UoY2FzdGVyLCB0YXJnZXQpICogbXVsdF9tb2QgKyBhZGRfbW9kO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwb3dlcl9tdWx0aXBsaWVyKGNhc3RlciwgdGFyZ2V0LCBlbGVtZW50LCBpc19wc3luZXJneSA9IHRydWUpIHtcclxuICAgICAgICBsZXQgY2FzdGVyX3Bvd2VyID0gMTAwLjAsIHRhcmdldF9yZXNpc3QgPSAxMDAuMDtcclxuICAgICAgICBpZiAoZWxlbWVudCAhPT0gZWxlbWVudHMuTk9fRUxFTUVOVCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNpc3Rfa2V5ID0gZWxlbWVudCArIFwiX3Jlc2lzdF9jdXJyZW50XCI7XHJcbiAgICAgICAgICAgIHRhcmdldF9yZXNpc3QgPSB0YXJnZXRbcmVzaXN0X2tleV07XHJcbiAgICAgICAgICAgIGlmIChjYXN0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcclxuICAgICAgICAgICAgICAgIGNhc3Rlcl9wb3dlciA9IGNhc3Rlcltwb3dlcl9rZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlX3Bvd2VyID0gXy5jbGFtcChjYXN0ZXJfcG93ZXIgLSB0YXJnZXRfcmVzaXN0LCBFTEVNX0FUVFJfTUlOLCBFTEVNX0FUVFJfTUFYKTtcclxuICAgICAgICByZXR1cm4gMSArIChyZWxhdGl2ZV9wb3dlcikvKGlzX3BzeW5lcmd5ID8gMjAwLjAgOiA0MDAuMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBoeXNpY2FsX2F0dGFjayhjYXN0ZXIsIHRhcmdldCwgbXVsdF9tb2QsIGFkZF9tb2QsIGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcGVjaWFsX3BoeXNpY2FsX2F0dGFjayhjYXN0ZXIsIHRhcmdldCwgbXVsdF9tb2QsIGFkZF9tb2QpICogdGhpcy5wb3dlcl9tdWx0aXBsaWVyKGNhc3RlciwgdGFyZ2V0LCBlbGVtZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBzeW5lcmd5X2RhbWFnZShjYXN0ZXIsIHRhcmdldCwgcG93ZXIsIGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gcG93ZXIgKyB0aGlzLnBvd2VyX211bHRpcGxpZXIoY2FzdGVyLCB0YXJnZXQsIGVsZW1lbnQsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpdGVtX2RhbWFnZSh0YXJnZXQsIHBvd2VyLCBlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHBvd2VyICsgdGhpcy5wb3dlcl9tdWx0aXBsaWVyKHVuZGVmaW5lZCwgdGFyZ2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGVhbF9hYmlsaXR5KGNhc3RlciwgcG93ZXIsIGVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgY2FzdGVyX3Bvd2VyID0gMTAwLjA7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQgIT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcclxuICAgICAgICAgICAgY2FzdGVyX3Bvd2VyID0gY2FzdGVyW3Bvd2VyX2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwb3dlciAqIGNhc3Rlcl9wb3dlci8xMDAuMDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc3VtbW9uX2RhbWFnZSh0YXJnZXQsIHBvd2VyLCBkamlubmlfdXNlZCkge1xyXG4gICAgICAgIHJldHVybiBwb3dlciArIHRhcmdldC5tYXhfaHAgKiBkamlubmlfdXNlZCAqIDAuMDM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFpbG1lbnRfc3VjY2VzcyhjYXN0ZXIsIHRhcmdldCwgYmFzZV9jaGFuY2UsIG1hZ25pdHVkZSwgZWxlbWVudCwgdnVsbmVyYWJpdHkpIHtcclxuICAgICAgICBjb25zdCBsZXZlbF9rZXkgPSBlbGVtZW50ICsgXCJfbGV2ZWxfY3VycmVudFwiO1xyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlX2xldmVsID0gY2FzdGVyW2xldmVsX2tleV0gLSB0YXJnZXRbbGV2ZWxfa2V5XTtcclxuICAgICAgICBjb25zdCBsdWNrX2ZhY3RvciA9IHRhcmdldC5jdXJyZW50X2x1ayA+PiAxO1xyXG4gICAgICAgIHZ1bG5lcmFiaXR5ID0gdnVsbmVyYWJpdHkgPT09IHVuZGVmaW5lZCA/IDAgOiB2dWxuZXJhYml0eTtcclxuICAgICAgICBjb25zdCBjaGFuY2UgPSAoKHJlbGF0aXZlX2xldmVsIC0gbHVja19mYWN0b3IpICogMykvMTAwICsgYmFzZV9jaGFuY2UgKyB2dWxuZXJhYml0eSAqIG1hZ25pdHVkZTtcclxuICAgICAgICByZXR1cm4gY2hhbmNlID49IE1hdGgucmFuZG9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFpbG1lbnRfcmVjb3ZlcnkocGxheWVyLCB0dXJuX251bWJlciwgYmFzZV9jaGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gKCgocGxheWVyLmN1cnJlbnRfbHVrICogMykgLSAodHVybl9udW1iZXIgKiA1KSArIGJhc2VfY2hhbmNlICogMTAwKSAqIDY1NSkgPj0gXy5yYW5kb20oMCwgMHhGRkZGKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYmF0dGxlX3BvaXNvbl9kYW1hZ2UocGxheWVyLCBwb2lzb25fdHlwZSkge1xyXG4gICAgICAgIGxldCBwb2lzb25fZmFjdG9yID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHBvaXNvbl90eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgcGVybWFuZW50X3N0YXR1cy5QT0lTT046IHBvaXNvbl9mYWN0b3IgPSAxOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwZXJtYW5lbnRfc3RhdHVzLlZFTk9NOiBwb2lzb25fZmFjdG9yID0gMjsgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoKHBvaXNvbl9mYWN0b3IgKiBwbGF5ZXIubWF4X2hwKS8xMCkgfCAwO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzdW1tb25fcG93ZXIoZGppbm5fbnVtYmVyKSB7XHJcbiAgICAgICAgZGppbm5fbnVtYmVyID0gXy5jbGFtcChkamlubl9udW1iZXIsIDAsIDQpO1xyXG4gICAgICAgIHJldHVybiAoKGRqaW5uX251bWJlciAqIGRqaW5uX251bWJlcikgKyBkamlubl9udW1iZXIpICogNTtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnMuanNcIjtcclxuaW1wb3J0IHsgcmFuZ2VfMzYwIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7IERFRkFVTFRfUE9TX0FOR0xFIH0gZnJvbSBcIi4vQmF0dGxlU3RhZ2UuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXR0bGVBbmltYXRpb24ge1xyXG4gICAgLy90d2VlbiB0eXBlIGNhbiBiZSAnaW5pdGlhbCcgZm9yIGZpcnN0IHBvc2l0aW9uXHJcbiAgICAvL3Nwcml0ZV9pbmRleDogXCJ0YXJnZXRzXCIgaXMgdGhlIHRhcmdldCwgXCJjYXN0ZXJcIiBpcyB0aGUgY2FzdGVyLCBcImJhY2tncm91bmRcIiBpcyB0aGUgYmFja2dyb3VuZCBzcHJpdGUsIDAuLi5uIGlzIHRoZSBzcHJpdGVzX2tleV9uYW1lcyBpbmRleFxyXG4gICAgLy9wcm9wZXJ0eSBcInRvXCIgdmFsdWUgY2FuIGJlIFwidGFyZ2V0XCIgb3IgYW4gYWN0dWFsIHZhbHVlLiBJbiB0aGUgY2FzZSBvZiBcInRhcmdldFwiIGlzIHRoZSB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZS4gSW4gdGhlIGNhc2Ugb2YgdXNpbmcgXCJ0YXJnZXRcIiwgYSBcInNoaWZ0XCIgcHJvcGVydHkgaXMgYXZhaWxhYmxlIHRvIGJlIGFkZGVkIHRvIHRoZSByZXN1bHRpbmcgdmFsdWVcclxuICAgIC8vdmFsdWVzIGluIHJhZCBjYW4gaGF2ZSBcImRpcmVjdGlvblwiIHNldCB0byBcImNsb2Nrd2lzZVwiLCBcImNvdW50ZXJfY2xvY2t3aXNlXCIgb3IgXCJjbG9zZXN0XCIgaWYgXCJhYnNvbHV0ZVwiIGlzIHRydWVcclxuICAgIC8vaW4gc3ByaXRlX2tleXMsIHBvc2l0aW9uIGNhbiBiZTogXCJiZXR3ZWVuXCIsIFwib3ZlclwiIG9yIFwiYmVoaW5kXCJcclxuICAgIC8vXCJkdXJhdGlvblwiIHNldCB0byBcImluc3RhbnRseVwiIG11c3QgaGF2ZSB0aGUgXCJzdGFydF9kZWxheVwiIHZhbHVlIHNldCBhcyBhYnNvbHV0ZVxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgZ2FtZSxcclxuICAgICAgICBrZXlfbmFtZSxcclxuICAgICAgICBzcHJpdGVzX2tleXMsIC8ve2tleV9uYW1lOiBzdHJpbmcsIHBlcl90YXJnZXQ6IGJvb2wsIHBvc2l0aW9uOiB2YWx1ZX1cclxuICAgICAgICB4X3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cclxuICAgICAgICB5X3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cclxuICAgICAgICB4X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgZm9yY2Vfc3RhZ2VfdXBkYXRlOiBib29sLCBzaGlmdDogdmFsdWV9XHJcbiAgICAgICAgeV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIGZvcmNlX3N0YWdlX3VwZGF0ZTogYm9vbCwgc2hpZnQ6IHZhbHVlfVxyXG4gICAgICAgIHhfc2NhbGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxyXG4gICAgICAgIHlfc2NhbGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxyXG4gICAgICAgIHhfYW5jaG9yX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cclxuICAgICAgICB5X2FuY2hvcl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XHJcbiAgICAgICAgYWxwaGFfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxyXG4gICAgICAgIHJvdGF0aW9uX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIGRpcmVjdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cclxuICAgICAgICBzdGFnZV9hbmdsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgZHVyYXRpb246IHZhbHVlLCBkaXJlY3Rpb246IHZhbHVlfVxyXG4gICAgICAgIGh1ZV9hbmdsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBkaXJlY3Rpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XHJcbiAgICAgICAgdGludF9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB2YWx1ZTogJXJnYiBhcnJheX1cclxuICAgICAgICBncmF5c2NhbGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxyXG4gICAgICAgIGNvbG9yaXplX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHZhbHVlOiB2YWx1ZSwgY29sb3JpemVfaW50ZW5zaXR5OiB2YWx1ZX1cclxuICAgICAgICBjdXN0b21fZmlsdGVyX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIGZpbHRlcjoga2V5LCB2YWx1ZTogdmFsdWV9XHJcbiAgICAgICAgcGxheV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCByZXZlcnNlOiBib29sLCBmcmFtZV9yYXRlOiB2YWx1ZSwgcmVwZWF0OiBib29sLCBhbmltYXRpb25fa2V5OiBrZXksIHdhaXQ6IGJvb2wsIGhpZGVfb25fY29tcGxldGU6IGJvb2x9XHJcbiAgICAgICAgc2V0X2ZyYW1lX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIGZyYW1lOiBzdHJpbmcsIHNwcml0ZV9pbmRleDogaW5kZXh9XHJcbiAgICAgICAgYmxlbmRfbW9kZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBtb2RlOiB0eXBlLCBzcHJpdGVfaW5kZXg6IGluZGV4fVxyXG4gICAgICAgIGlzX3BhcnR5X2FuaW1hdGlvblxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzX2tleXMgPSBzcHJpdGVzX2tleXM7XHJcbiAgICAgICAgdGhpcy54X3NlcXVlbmNlID0geF9zZXF1ZW5jZTtcclxuICAgICAgICB0aGlzLnlfc2VxdWVuY2UgPSB5X3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMueF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlID0geF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMueV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlID0geV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMueF9zY2FsZV9zZXF1ZW5jZSA9IHhfc2NhbGVfc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy55X3NjYWxlX3NlcXVlbmNlID0geV9zY2FsZV9zZXF1ZW5jZTtcclxuICAgICAgICB0aGlzLnhfYW5jaG9yX3NlcXVlbmNlID0geF9hbmNob3Jfc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy55X2FuY2hvcl9zZXF1ZW5jZSA9IHlfYW5jaG9yX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMuYWxwaGFfc2VxdWVuY2UgPSBhbHBoYV9zZXF1ZW5jZTtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uX3NlcXVlbmNlID0gcm90YXRpb25fc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy5zdGFnZV9hbmdsZV9zZXF1ZW5jZSA9IHN0YWdlX2FuZ2xlX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMuaHVlX2FuZ2xlX3NlcXVlbmNlID0gaHVlX2FuZ2xlX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMudGludF9zZXF1ZW5jZSA9IHRpbnRfc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy5ncmF5c2NhbGVfc2VxdWVuY2UgPSBncmF5c2NhbGVfc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy5jb2xvcml6ZV9zZXF1ZW5jZSA9IGNvbG9yaXplX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZSA9IGN1c3RvbV9maWx0ZXJfc2VxdWVuY2U7XHJcbiAgICAgICAgdGhpcy5wbGF5X3NlcXVlbmNlID0gcGxheV9zZXF1ZW5jZTtcclxuICAgICAgICB0aGlzLnNldF9mcmFtZV9zZXF1ZW5jZSA9IHNldF9mcmFtZV9zZXF1ZW5jZTtcclxuICAgICAgICB0aGlzLmJsZW5kX21vZGVfc2VxdWVuY2UgPSBibGVuZF9tb2RlX3NlcXVlbmNlO1xyXG4gICAgICAgIHRoaXMuaXNfcGFydHlfYW5pbWF0aW9uID0gaXNfcGFydHlfYW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemUoc3ByaXRlX2tleSwgY2FzdGVyX3Nwcml0ZSwgdGFyZ2V0c19zcHJpdGVzLCBncm91cF9jYXN0ZXIsIGdyb3VwX2VuZW15LCBzdXBlcl9ncm91cCwgc3RhZ2VfY2FtZXJhLCBiYWNrZ3JvdW5kX3Nwcml0ZXMpIHtcclxuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgdGhpcy5zdGFnZV9wcmV2X3ZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMueDAgPSB0aGlzLmdhbWUuY2FtZXJhLng7XHJcbiAgICAgICAgdGhpcy55MCA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcclxuICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUgPSBjYXN0ZXJfc3ByaXRlO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0c19zcHJpdGVzID0gdGFyZ2V0c19zcHJpdGVzO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzID0gYmFja2dyb3VuZF9zcHJpdGVzO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBfY2FzdGVyID0gZ3JvdXBfY2FzdGVyO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBfZW5lbXkgPSBncm91cF9lbmVteTtcclxuICAgICAgICB0aGlzLnN1cGVyX2dyb3VwID0gc3VwZXJfZ3JvdXA7XHJcbiAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEgPSBzdGFnZV9jYW1lcmE7XHJcbiAgICAgICAgdGhpcy50cmFpbHNfb2JqcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzX2tleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlX2luZm8gPSB0aGlzLnNwcml0ZXNfa2V5c1tpXTtcclxuICAgICAgICAgICAgbGV0IHRyYWlsc19pbmZvO1xyXG4gICAgICAgICAgICBpZiAoc3ByaXRlX2luZm8udHJhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFpbHNfaW5mbyA9IHRoaXMuaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyhzcHJpdGVfaW5mby50cmFpbF9mcmFtZV9kaWZmLCBzcHJpdGVfaW5mby50cmFpbHNfbW9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzcHJpdGVfaW5mby5wZXJfdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IHNwcml0ZV9pbmZvLmNvdW50ID8gc3ByaXRlX2luZm8uY291bnQgOiAxO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHN5X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMueDAsIHRoaXMueTAsIHNwcml0ZV9rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBiYWNrX2dyb3VwLCBmcm9udF9ncm91cDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleChncm91cF9jYXN0ZXIpIDwgc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleChncm91cF9lbmVteSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja19ncm91cCA9IGdyb3VwX2Nhc3RlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRfZ3JvdXAgPSBncm91cF9lbmVteTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrX2dyb3VwID0gZ3JvdXBfZW5lbXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb250X2dyb3VwID0gZ3JvdXBfY2FzdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwib3ZlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkKHBzeV9zcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwiYmV0d2VlblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkQXQocHN5X3Nwcml0ZSwgc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleChmcm9udF9ncm91cCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwiYmVoaW5kXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJfZ3JvdXAuYWRkQ2hpbGRBdChwc3lfc3ByaXRlLCBzdXBlcl9ncm91cC5nZXRDaGlsZEluZGV4KGJhY2tfZ3JvdXApKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVzID0gUGhhc2VyLkFuaW1hdGlvbi5nZW5lcmF0ZUZyYW1lTmFtZXMoc3ByaXRlX2luZm8ua2V5X25hbWUgKyAnLycsIDEsIHBzeV9zcHJpdGUuYW5pbWF0aW9ucy5mcmFtZVRvdGFsLCAnJywgMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5hbmltYXRpb25zLmFkZChzcHJpdGVfaW5mby5rZXlfbmFtZSwgZnJhbWVzKTtcclxuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmFuaW1hdGlvbnMuZnJhbWVOYW1lID0gZnJhbWVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHBzeV9zcHJpdGUuYmF0dGxlX2luZGV4ID0gdGhpcy5zcHJpdGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLnRyYWlscyA9IHNwcml0ZV9pbmZvLnRyYWlscztcclxuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLnRyYWlsc19pbmZvID0gdHJhaWxzX2luZm87XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwcml0ZV9pbmZvLnRyYWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLnhfaGlzdG9yeSA9IG5ldyBBcnJheSh0cmFpbHNfaW5mby5mcmFtZV9kaWZmICsgMSkuZmlsbChwc3lfc3ByaXRlLnggLSB0aGlzLmdhbWUuY2FtZXJhLngpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLnlfaGlzdG9yeSA9IG5ldyBBcnJheSh0cmFpbHNfaW5mby5mcmFtZV9kaWZmICsgMSkuZmlsbChwc3lfc3ByaXRlLnkgLSB0aGlzLmdhbWUuY2FtZXJhLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChwc3lfc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldF9maWx0ZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyhmcmFtZV9kaWZmLCBibGVuZF9tb2RlKSB7XHJcbiAgICAgICAgc3dpdGNoIChibGVuZF9tb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzY3JlZW5cIjpcclxuICAgICAgICAgICAgICAgIGJsZW5kX21vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcclxuICAgICAgICAgICAgICAgIGJsZW5kX21vZGUgPSBQSVhJLmJsZW5kTW9kZXMuTk9STUFMO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRyYWlsX3RleHR1cmUgPSB0aGlzLmdhbWUuYWRkLnJlbmRlclRleHR1cmUobnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUKTtcclxuICAgICAgICBsZXQgdHJhaWxfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy5nYW1lLmNhbWVyYS54LCB0aGlzLmdhbWUuY2FtZXJhLnksIHRyYWlsX3RleHR1cmUpO1xyXG4gICAgICAgIHRyYWlsX3Nwcml0ZS5ibGVuZE1vZGUgPSBibGVuZF9tb2RlO1xyXG4gICAgICAgIHRyYWlsX3Nwcml0ZS5hbHBoYSA9IDAuNjtcclxuICAgICAgICBjb25zdCB0cmFpbF90ZXh0dXJlXzIgPSB0aGlzLmdhbWUuYWRkLnJlbmRlclRleHR1cmUobnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUKTtcclxuICAgICAgICBsZXQgdHJhaWxfc3ByaXRlXzIgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSh0aGlzLmdhbWUuY2FtZXJhLngsIHRoaXMuZ2FtZS5jYW1lcmEueSwgdHJhaWxfdGV4dHVyZV8yKTtcclxuICAgICAgICB0cmFpbF9zcHJpdGVfMi5ibGVuZE1vZGUgPSBibGVuZF9tb2RlO1xyXG4gICAgICAgIHRyYWlsX3Nwcml0ZV8yLmFscGhhID0gMC40O1xyXG4gICAgICAgIHRoaXMudHJhaWxzX29ianMgPSB0aGlzLnRyYWlsc19vYmpzLmNvbmNhdCh0cmFpbF90ZXh0dXJlLCB0cmFpbF90ZXh0dXJlXzIsIHRyYWlsX3Nwcml0ZSwgdHJhaWxfc3ByaXRlXzIpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRleHR1cmVfMTogdHJhaWxfdGV4dHVyZSxcclxuICAgICAgICAgICAgdGV4dHVyZV8yOiB0cmFpbF90ZXh0dXJlXzIsXHJcbiAgICAgICAgICAgIGZyYW1lX2RpZmY6IGZyYW1lX2RpZmZcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9maWx0ZXJzKCkge1xyXG4gICAgICAgIHRoaXMuY2FzdGVyX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcclxuICAgICAgICB0aGlzLnRhcmdldHNfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZF9maWx0ZXIgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcignQ29sb3JGaWx0ZXJzJyk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzX2ZpbHRlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUuZmlsdGVycyA9IFt0aGlzLmNhc3Rlcl9maWx0ZXJdO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0c19zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSBbdGhpcy50YXJnZXRzX2ZpbHRlcl07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICBzcHJpdGUuZmlsdGVycyA9IFt0aGlzLmJhY2tncm91bmRfZmlsdGVyXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaCgoc3ByaXRlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXNfZmlsdGVycy5wdXNoKHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKSk7XHJcbiAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzID0gW3RoaXMuc3ByaXRlc19maWx0ZXJzW2luZGV4XV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGxheShmaW5pc2hfY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucHJvbWlzZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9zZXF1ZW5jZSwgJ3gnKTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueV9zZXF1ZW5jZSwgJ3knKTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCAnZWxsaXBzZXNfc2VtaV9tYWpvcicpO1xyXG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy55X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsICdlbGxpcHNlc19zZW1pX21pbm9yJyk7XHJcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLmFscGhhX3NlcXVlbmNlLCAnYWxwaGEnKTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMucm90YXRpb25fc2VxdWVuY2UsICdyb3RhdGlvbicpO1xyXG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy54X3NjYWxlX3NlcXVlbmNlLCAneCcsICdzY2FsZScpO1xyXG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy55X3NjYWxlX3NlcXVlbmNlLCAneScsICdzY2FsZScpO1xyXG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy54X2FuY2hvcl9zZXF1ZW5jZSwgJ3gnLCAnYW5jaG9yJyk7XHJcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLnlfYW5jaG9yX3NlcXVlbmNlLCAneScsICdhbmNob3InKTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMuaHVlX2FuZ2xlX3NlcXVlbmNlLCAnaHVlX2FkanVzdCcsICdmaWx0ZXInKTtcclxuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMuZ3JheXNjYWxlX3NlcXVlbmNlLCAnZ3JheScsICdmaWx0ZXInKTtcclxuICAgICAgICB0aGlzLnBsYXlfc3ByaXRlX3NlcXVlbmNlKCk7XHJcbiAgICAgICAgdGhpcy5wbGF5X2JsZW5kX21vZGVzKCk7XHJcbiAgICAgICAgdGhpcy5wbGF5X2ZpbHRlcl9wcm9wZXJ0eSh0aGlzLnRpbnRfc2VxdWVuY2UsICd0aW50Jyk7XHJcbiAgICAgICAgdGhpcy5wbGF5X2ZpbHRlcl9wcm9wZXJ0eSh0aGlzLmNvbG9yaXplX3NlcXVlbmNlLCAnY29sb3JpemUnLCAnY29sb3JpemVfaW50ZW5zaXR5Jyk7XHJcbiAgICAgICAgdGhpcy5wbGF5X2ZpbHRlcl9wcm9wZXJ0eSh0aGlzLmN1c3RvbV9maWx0ZXJfc2VxdWVuY2UpO1xyXG4gICAgICAgIHRoaXMucGxheV9zdGFnZV9hbmdsZV9zZXF1ZW5jZSgpO1xyXG4gICAgICAgIHRoaXMudW5tb3VudF9hbmltYXRpb24oZmluaXNoX2NhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICB1bm1vdW50X2FuaW1hdGlvbihmaW5pc2hfY2FsbGJhY2spIHtcclxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnByb21pc2VzKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jYXN0ZXJfZmlsdGVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzX2ZpbHRlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZF9maWx0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXNfZmlsdGVycyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50cmFpbHNfb2Jqcy5mb3JFYWNoKG9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICBvYmouZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChmaW5pc2hfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZmluaXNoX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfc3ByaXRlcyhzZXEsIGlubmVyX3Byb3BlcnR5KSB7XHJcbiAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIGlmIChzZXEuc3ByaXRlX2luZGV4ID09PSBcImJhY2tncm91bmRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmJhY2tncm91bmRfZmlsdGVyXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHNwcml0ZVtpbm5lcl9wcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwiY2FzdGVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbm5lcl9wcm9wZXJ0eSA9PT0gXCJmaWx0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5jYXN0ZXJfZmlsdGVyXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNhc3Rlcl9zcHJpdGVbaW5uZXJfcHJvcGVydHldXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXEuc3ByaXRlX2luZGV4ID09PSBcInRhcmdldHNcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnRhcmdldHNfZmlsdGVyXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0c19zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHNwcml0ZVtpbm5lcl9wcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VxLnNwcml0ZV9pbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcS5zcHJpdGVfaW5kZXgubWFwKGluZGV4ID0+IHRoaXMuc3ByaXRlc19maWx0ZXJzW2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnNwcml0ZXNfZmlsdGVyc1tzZXEuc3ByaXRlX2luZGV4XV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXEuc3ByaXRlX2luZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VxLnNwcml0ZV9pbmRleC5tYXAoaW5kZXggPT4gdGhpcy5zcHJpdGVzW2luZGV4XVtpbm5lcl9wcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5zcHJpdGVzW3NlcS5zcHJpdGVfaW5kZXhdW2lubmVyX3Byb3BlcnR5XV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwiYmFja2dyb3VuZFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYWNrZ3JvdW5kX3Nwcml0ZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VxLnNwcml0ZV9pbmRleCA9PT0gXCJjYXN0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNhc3Rlcl9zcHJpdGVdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwidGFyZ2V0c1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRzX3Nwcml0ZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZXEuc3ByaXRlX2luZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcS5zcHJpdGVfaW5kZXgubWFwKGluZGV4ID0+IHRoaXMuc3ByaXRlc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnNwcml0ZXNbc2VxLnNwcml0ZV9pbmRleF1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHNlcXVlbmNlLCB0YXJnZXRfcHJvcGVydHksIGlubmVyX3Byb3BlcnR5KSB7XHJcbiAgICAgICAgbGV0IGNoYWluZWRfdHdlZW5zID0ge307XHJcbiAgICAgICAgbGV0IGF1dG9fc3RhcnRfdHdlZW4gPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcSA9IHNlcXVlbmNlW2ldO1xyXG4gICAgICAgICAgICBpZiAoIShzZXEuc3ByaXRlX2luZGV4IGluIGF1dG9fc3RhcnRfdHdlZW4pKSBhdXRvX3N0YXJ0X3R3ZWVuW3NlcS5zcHJpdGVfaW5kZXhdID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHNlcS5zcHJpdGVfaW5kZXggaW4gY2hhaW5lZF90d2VlbnMpIHtcclxuICAgICAgICAgICAgICAgIGF1dG9fc3RhcnRfdHdlZW5bc2VxLnNwcml0ZV9pbmRleF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3ByaXRlcyA9IHRoaXMuZ2V0X3Nwcml0ZXMoc2VxLCBpbm5lcl9wcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIGxldCBwcm9taXNlc19zZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKCh0aGlzX3Nwcml0ZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVuaXFfa2V5ID0gdGhpc19zcHJpdGUua2V5ICsgXCJfXCIgKyB0aGlzX3Nwcml0ZS5iYXR0bGVfaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9IHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXFfdG8gPSBBcnJheS5pc0FycmF5KHNlcS50bykgPyBzZXEudG9baW5kZXhdIDogc2VxLnRvO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvX3ZhbHVlID0gc2VxX3RvO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcV90byA9PT0gXCJ0YXJnZXRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gQXJyYXkuaXNBcnJheShzZXEuc2hpZnQpID8gc2VxLnNoaWZ0W2luZGV4XSA6IHNlcS5zaGlmdDtcclxuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA9IHRoaXMudGFyZ2V0c19zcHJpdGVzW3RoaXMudGFyZ2V0c19zcHJpdGVzLmxlbmd0aCA+PiAxXVt0YXJnZXRfcHJvcGVydHldICsgKHNoaWZ0ID09PSB1bmRlZmluZWQgPyAwIDogc2hpZnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKFtcInJvdGF0aW9uXCIsIFwiaHVlX2FkanVzdFwiXS5pbmNsdWRlcyh0YXJnZXRfcHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9IHJhbmdlXzM2MCh0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA9IEJhdHRsZUFuaW1hdGlvbi5nZXRfYW5nbGVfYnlfZGlyZWN0aW9uKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0sIHNlcV90bywgc2VxLmRpcmVjdGlvbiwgdGFyZ2V0X3Byb3BlcnR5ID09PSBcInJvdGF0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldIC0gdG9fdmFsdWUpID4gbnVtYmVycy5kZWdyZWUzNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9fdmFsdWUgLT0gTWF0aC5zaWduKHRvX3ZhbHVlKSAqIG51bWJlcnMuZGVncmVlMzYwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gc2VxLmlzX2Fic29sdXRlID8gdG9fdmFsdWUgOiB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldICsgc2VxX3RvO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzZXEueW95bykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0gPSB0b192YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzZXEudHdlZW4gPT09IFwiaW5pdGlhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSA9IHRvX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShzZXEuc3ByaXRlX2luZGV4IGluIGNoYWluZWRfdHdlZW5zKSkgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF0gPSB7IFtpbmRleF06IFtdIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaW5kZXggaW4gY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF0pKSBjaGFpbmVkX3R3ZWVuc1tzZXEuc3ByaXRlX2luZGV4XVtpbmRleF0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoc2VxLnN0YXJ0X2RlbGF5KSA/IHNlcS5zdGFydF9kZWxheVtpbmRleF0gOiBzZXEuc3RhcnRfZGVsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5kdXJhdGlvbiA9PT0gXCJpbnN0YW50bHlcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9taXNlc19zZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlc19zZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoc3RhcnRfZGVsYXksICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0gPSB0b192YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXEuZm9yY2Vfc3RhZ2VfdXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmlzX2Fic29sdXRlICYmIFtcInJvdGF0aW9uXCIsIFwiaHVlX2FkanVzdFwiXS5pbmNsdWRlcyh0YXJnZXRfcHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSA9IHJhbmdlXzM2MCh0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlX2Z1bmN0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzX3Nwcml0ZSkudG8oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFt0YXJnZXRfcHJvcGVydHldOiB0b192YWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShzZXEuZHVyYXRpb24pID8gc2VxLmR1cmF0aW9uW2luZGV4XSA6IHNlcS5kdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS50d2Vlbi5zcGxpdCgnLicpLnJlZHVjZSgocCwgcHJvcCkgPT4gcFtwcm9wXSwgUGhhc2VyLkVhc2luZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvX3N0YXJ0X3R3ZWVuW3NlcS5zcHJpdGVfaW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfZGVsYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxLnlveW8gPT09IHVuZGVmaW5lZCA/IGZhbHNlOiBzZXEueW95b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2VzX3NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGhpc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuY3Rpb24gPSByZXNvbHZlOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMucHVzaCh0aGlzX3Byb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW4ub25TdGFydC5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmZvcmNlX3N0YWdlX3VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5pc19hYnNvbHV0ZSAmJiBbXCJyb3RhdGlvblwiLCBcImh1ZV9hZGp1c3RcIl0uaW5jbHVkZXModGFyZ2V0X3Byb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gcmFuZ2VfMzYwKHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5mb3JjZV9zdGFnZV91cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEuc3BpbmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNfc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdW2NoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdW2luZGV4XS5sZW5ndGggLSAxXS5jaGFpbih0d2Vlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdLnB1c2godHdlZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlfc3ByaXRlX3NlcXVlbmNlKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbGF5X3NlcXVlbmNlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXlfc2VxID0gdGhpcy5wbGF5X3NlcXVlbmNlW2ldO1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlcyA9IHRoaXMuZ2V0X3Nwcml0ZXMocGxheV9zZXEpO1xyXG4gICAgICAgICAgICBzcHJpdGVzLmZvckVhY2goKHNwcml0ZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCByZXNvbHZlX2Z1bmN0aW9uO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTsgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0X2RlbGF5ID0gQXJyYXkuaXNBcnJheShwbGF5X3NlcS5zdGFydF9kZWxheSkgPyBwbGF5X3NlcS5zdGFydF9kZWxheVtpbmRleF0gOiBwbGF5X3NlcS5zdGFydF9kZWxheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoc3RhcnRfZGVsYXksICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGxheV9zZXEucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24ocGxheV9zZXEuYW5pbWF0aW9uX2tleSkucmV2ZXJzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihwbGF5X3NlcS5hbmltYXRpb25fa2V5KS5yZXZlcnNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHBsYXlfc2VxLmFuaW1hdGlvbl9rZXksIHBsYXlfc2VxLmZyYW1lX3JhdGUsIHBsYXlfc2VxLnJlcGVhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXlfc2VxLndhaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5X3NlcS5oaWRlX29uX2NvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGxheV9ibGVuZF9tb2RlcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmxlbmRfbW9kZV9zZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBibGVuZF9tb2RlX3NlcSA9IHRoaXMuYmxlbmRfbW9kZV9zZXF1ZW5jZVtpXTtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZXMgPSB0aGlzLmdldF9zcHJpdGVzKGJsZW5kX21vZGVfc2VxKTtcclxuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jdGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7IH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXkpID8gYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXlbaW5kZXhdIDogYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKHN0YXJ0X2RlbGF5LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChibGVuZF9tb2RlX3NlcS5tb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JlZW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuTk9STUFMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwbGF5X2ZpbHRlcl9wcm9wZXJ0eShzZXF1ZW5jZSwgcHJvcGVydHksIC4uLnNlY29uZGFyeV9wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJfc2VxID0gc2VxdWVuY2VbaV07XHJcbiAgICAgICAgICAgIGxldCBzcHJpdGVzID0gdGhpcy5nZXRfc3ByaXRlcyhmaWx0ZXJfc2VxKTtcclxuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jdGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7IH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoZmlsdGVyX3NlcS5zdGFydF9kZWxheSkgPyBmaWx0ZXJfc2VxLnN0YXJ0X2RlbGF5W2luZGV4XSA6IGZpbHRlcl9zZXEuc3RhcnRfZGVsYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKHN0YXJ0X2RlbGF5LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19wcm9wZXJ0eSA9IGZpbHRlcl9zZXEuZmlsdGVyICE9PSB1bmRlZmluZWQgPyBmaWx0ZXJfc2VxLmZpbHRlciA6IHByb3BlcnR5O1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzWzBdW3RoaXNfcHJvcGVydHldID0gZmlsdGVyX3NlcS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnlfcHJvcGVydGllcy5mb3JFYWNoKHNlY29uZGFyeV9wcm9wZXJ0eSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzWzBdW3NlY29uZGFyeV9wcm9wZXJ0eV0gPSBmaWx0ZXJfc2VxW3NlY29uZGFyeV9wcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlfc3RhZ2VfYW5nbGVfc2VxdWVuY2UoKSB7XHJcbiAgICAgICAgbGV0IGNoYWluZWRfdHdlZW5zID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YWdlX2FuZ2xlX3NlcXVlbmNlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWdlX2FuZ2xlX3NlcSA9IHRoaXMuc3RhZ2VfYW5nbGVfc2VxdWVuY2VbaV07XHJcbiAgICAgICAgICAgIGxldCB0b192YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX3ByZXZfdmFsdWUgPSB0aGlzLnN0YWdlX2NhbWVyYS5yYWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS50byA9PT0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gREVGQVVMVF9QT1NfQU5HTEU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhZ2VfYW5nbGVfc2VxLmlzX2Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9wcmV2X3ZhbHVlID0gcmFuZ2VfMzYwKHRoaXMuc3RhZ2VfcHJldl92YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEucmFkID0gdGhpcy5zdGFnZV9wcmV2X3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gQmF0dGxlQW5pbWF0aW9uLmdldF9hbmdsZV9ieV9kaXJlY3Rpb24odGhpcy5zdGFnZV9wcmV2X3ZhbHVlLCBzdGFnZV9hbmdsZV9zZXEudG8sIHN0YWdlX2FuZ2xlX3NlcS5kaXJlY3Rpb24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnN0YWdlX3ByZXZfdmFsdWUgLSB0b192YWx1ZSkgPiBudW1iZXJzLmRlZ3JlZTM2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSAtPSBNYXRoLnNpZ24odG9fdmFsdWUpICogbnVtYmVycy5kZWdyZWUzNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA9IHRoaXMuc3RhZ2VfcHJldl92YWx1ZSArIHN0YWdlX2FuZ2xlX3NlcS50bztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0YWdlX3ByZXZfdmFsdWUgPSB0b192YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS50d2VlbiA9PT0gXCJpbml0aWFsXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFnZV9hbmdsZV9zZXEuaXNfYWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5yYWQgPSB0b192YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEucmFkICs9IHRvX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuc3RhZ2VfY2FtZXJhKS50byhcclxuICAgICAgICAgICAgICAgICAgICB7IHJhZDogdG9fdmFsdWUgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdGFnZV9hbmdsZV9zZXEuZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2VfYW5nbGVfc2VxLnR3ZWVuLnNwbGl0KCcuJykucmVkdWNlKChwLCBwcm9wKSA9PiBwW3Byb3BdLCBQaGFzZXIuRWFzaW5nKSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFpbmVkX3R3ZWVucy5sZW5ndGggPT09IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2VfYW5nbGVfc2VxLnN0YXJ0X2RlbGF5XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhpc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuY3Rpb24gPSByZXNvbHZlOyB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMucHVzaCh0aGlzX3Byb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW4ub25TdGFydC5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhZ2VfYW5nbGVfc2VxLmlzX2Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnJhZCA9IHJhbmdlXzM2MCh0aGlzLnN0YWdlX2NhbWVyYS5yYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhaW5lZF90d2VlbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbY2hhaW5lZF90d2VlbnMubGVuZ3RoIC0gMV0uY2hhaW4odHdlZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnMucHVzaCh0d2Vlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBjbGVhciA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzcHJpdGUudHJhaWxzKSByZXR1cm47XHJcbiAgICAgICAgICAgIHNwcml0ZS54X2hpc3RvcnkudW5zaGlmdChzcHJpdGUueCk7XHJcbiAgICAgICAgICAgIHNwcml0ZS55X2hpc3RvcnkudW5zaGlmdChzcHJpdGUueSk7XHJcbiAgICAgICAgICAgIGlmIChjbGVhcikge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLnRyYWlsc19pbmZvLnRleHR1cmVfMS5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLnRyYWlsc19pbmZvLnRleHR1cmVfMi5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzcHJpdGUudHJhaWxzX2luZm8udGV4dHVyZV8xLnJlbmRlclhZKHNwcml0ZSwgc3ByaXRlLnhfaGlzdG9yeVtzcHJpdGUudHJhaWxzX2luZm8uZnJhbWVfZGlmZiA+PiAxXSwgc3ByaXRlLnlfaGlzdG9yeVtzcHJpdGUudHJhaWxzX2luZm8uZnJhbWVfZGlmZiA+PiAxXSk7XHJcbiAgICAgICAgICAgIHNwcml0ZS50cmFpbHNfaW5mby50ZXh0dXJlXzIucmVuZGVyWFkoc3ByaXRlLCBzcHJpdGUueF9oaXN0b3J5LnBvcCgpLCBzcHJpdGUueV9oaXN0b3J5LnBvcCgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0X2FuZ2xlX2J5X2RpcmVjdGlvbihjdXJyZW50X2FuZ2xlLCB0YXJnZXRfYW5nbGUsIGRpcmVjdGlvbiwgZm91cnRoX3F1YWRyYW50ID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgdGhpc19kaXJlY3Rpb247XHJcbiAgICAgICAgaWYgKGZvdXJ0aF9xdWFkcmFudCkge1xyXG4gICAgICAgICAgICB0YXJnZXRfYW5nbGUgPSBudW1iZXJzLmRlZ3JlZTM2MCAtIHRhcmdldF9hbmdsZTtcclxuICAgICAgICAgICAgdGhpc19kaXJlY3Rpb24gPSB0YXJnZXRfYW5nbGUgPCBjdXJyZW50X2FuZ2xlID8gXCJjb3VudGVyX2Nsb2Nrd2lzZVwiIDogXCJjbG9ja3dpc2VcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzX2RpcmVjdGlvbiA9IHRhcmdldF9hbmdsZSA+IGN1cnJlbnRfYW5nbGUgPyBcImNvdW50ZXJfY2xvY2t3aXNlXCIgOiBcImNsb2Nrd2lzZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpc19kaXJlY3Rpb24gPT09IGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0X2FuZ2xlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkaWZmID0gdGFyZ2V0X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjAgLSBjdXJyZW50X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjA7XHJcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBNYXRoLnNpZ24oZGlmZikgKiBudW1iZXJzLmRlZ3JlZTM2MCAtIGRpZmY7XHJcbiAgICAgICAgY29uc3QgbmV3X3RhcmdldCA9IGN1cnJlbnRfYW5nbGUgJSBudW1iZXJzLmRlZ3JlZTM2MCAtIHNoaWZ0O1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY2xvc2VzdFwiKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRfZGVsdGEsIG5ld190YXJnZXRfZGVsdGE7XHJcbiAgICAgICAgICAgIGlmIChuZXdfdGFyZ2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV3X3RhcmdldF9kZWx0YSA9IG5ld190YXJnZXQgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGVsdGEgPSBudW1iZXJzLmRlZ3JlZTM2MCAtIG5ld190YXJnZXRfZGVsdGE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGVsdGEgPSB0YXJnZXRfYW5nbGUgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XHJcbiAgICAgICAgICAgICAgICBuZXdfdGFyZ2V0X2RlbHRhID0gbnVtYmVycy5kZWdyZWUzNjAgLSB0YXJnZXRfZGVsdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldF9kZWx0YSkgPCBNYXRoLmFicyhuZXdfdGFyZ2V0X2RlbHRhKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldF9hbmdsZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhdHRsZUFuaW1hdGlvbiB9IGZyb20gXCIuL0JhdHRsZUFuaW1hdGlvbi5qc1wiO1xyXG5cclxuY29uc3QgQU5JTUFUSU9OU19CQVNFX1BBVEggPSBcImFzc2V0cy9pbWFnZXMvYWJpbGl0aWVzX2FuaW1hdGlvbnMvXCI7XHJcbmNvbnN0IEFOSU1BVElPTlNfREJfUEFUSCA9IFwiYXNzZXRzL2Ricy9hYmlsaXRpZXNfYW5pbWF0aW9ucy9cIjtcclxuY29uc3QgQU5JTUFUSU9OX1NVRkZJWCA9IFwiX2JhdHRsZV9hbmltYXRpb25cIjtcclxuY29uc3QgUkVDSVBFX1NVRkZJWCA9IFwiX2JhdHRsZV9yZWNpcGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXR0bGVBbmltYXRpb25NYW5hZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0ge307XHJcbiAgICAgICAgdGhpcy5ub3RfYXZhaWxhYmxlID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyX2Z1bmN0aW9uID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2FkX2FuaW1hdGlvbihiYXR0bGVfYW5pbV9rZXkpIHtcclxuICAgICAgICBpZiAoYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucyB8fCB0aGlzLm5vdF9hdmFpbGFibGUuaGFzKGJhdHRsZV9hbmltX2tleSkgfHwgYmF0dGxlX2FuaW1fa2V5ID09PSBcIm5vX2FuaW1hdGlvblwiKSByZXR1cm47XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IGJhdHRsZV9hbmltX2tleSArIEFOSU1BVElPTl9TVUZGSVg7XHJcbiAgICAgICAgY29uc3QgcmVjaXBlX2tleSA9IGJhdHRsZV9hbmltX2tleSArIFJFQ0lQRV9TVUZGSVg7XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2xvYWRlciA9IHRoaXMuZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goc3ByaXRlX2tleSwgYCR7QU5JTUFUSU9OU19CQVNFX1BBVEh9JHtiYXR0bGVfYW5pbV9rZXl9LnBuZ2AsIGAke0FOSU1BVElPTlNfQkFTRV9QQVRIfSR7YmF0dGxlX2FuaW1fa2V5fS5qc29uYCk7XHJcbiAgICAgICAgY29uc3QgcmVjaXBlX2xvYWRlciA9IHRoaXMuZ2FtZS5sb2FkLmpzb24ocmVjaXBlX2tleSwgYCR7QU5JTUFUSU9OU19EQl9QQVRIfSR7YmF0dGxlX2FuaW1fa2V5fV9kYi5qc29uYCk7XHJcblxyXG4gICAgICAgIGxldCBhbGxfc3VjY2VlZCA9IHRydWU7XHJcbiAgICAgICAgbGV0IHNwcml0ZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgICAgIGNvbnN0IHNwcml0ZV9sb2FkZXJfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmUgfSk7XHJcbiAgICAgICAgc3ByaXRlX2xvYWRlci5vbkZpbGVDb21wbGV0ZS5hZGRPbmNlKChwcm9ncmVzcywgZmlsZWtleSwgc3VjY2VzcykgPT4ge1xyXG4gICAgICAgICAgICBhbGxfc3VjY2VlZCA9IGFsbF9zdWNjZWVkICYmIHN1Y2Nlc3M7XHJcbiAgICAgICAgICAgIHNwcml0ZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgICAgIGNvbnN0IHJlY2lwZV9sb2FkZXJfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZWNpcGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmUgfSk7XHJcbiAgICAgICAgcmVjaXBlX2xvYWRlci5vbkZpbGVDb21wbGV0ZS5hZGRPbmNlKChwcm9ncmVzcywgZmlsZWtleSwgc3VjY2VzcykgPT4ge1xyXG4gICAgICAgICAgICBhbGxfc3VjY2VlZCA9IGFsbF9zdWNjZWVkICYmIHN1Y2Nlc3M7XHJcbiAgICAgICAgICAgIHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBsb2FkX2NvbXBsZXRlX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBsb2FkX2NvbXBsZXRlX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGxvYWRfY29tcGxldGVfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX2NvbXBsZXRlX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmxvYWQuc3RhcnQoKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbc3ByaXRlX2xvYWRlcl9wcm9taXNlLCByZWNpcGVfbG9hZGVyX3Byb21pc2UsIGxvYWRfY29tcGxldGVfcHJvbWlzZV0pO1xyXG4gICAgICAgIGlmIChhbGxfc3VjY2VlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25fcmVjaXBlID0gdGhpcy5nYW1lLmNhY2hlLmdldEpTT04oYmF0dGxlX2FuaW1fa2V5ICsgUkVDSVBFX1NVRkZJWCk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldID0gbmV3IEJhdHRsZUFuaW1hdGlvbihcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUua2V5X25hbWUsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnNwcml0ZXMsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnhfc2VxdWVuY2UsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnlfc2VxdWVuY2UsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS54X3NjYWxlX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS55X3NjYWxlX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS54X2FuY2hvcl9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueV9hbmNob3Jfc2VxdWVuY2UsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmFscGhhX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5yb3RhdGlvbl9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuc3RhZ2VfYW5nbGVfc2VxdWVuY2UsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmh1ZV9hbmdsZV9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUudGludF9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuZ3JheXNjYWxlX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5jb2xvcml6ZV9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUucGxheV9zZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuc2V0X2ZyYW1lX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5ibGVuZF9tb2RlX3NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5pc19wYXJ0eV9hbmltYXRpb25cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vdF9hdmFpbGFibGUuYWRkKGJhdHRsZV9hbmltX2tleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGlvbl9hdmFpbGFibGUoYmF0dGxlX2FuaW1fa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGJhdHRsZV9hbmltX2tleSBpbiB0aGlzLmFuaW1hdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcGxheShiYXR0bGVfYW5pbV9rZXksIGNhc3Rlcl9zcHJpdGUsIHRhcmdldHNfc3ByaXRlcywgZ3JvdXBfY2FzdGVyLCBncm91cF90YWtlciwgYmF0dGxlX3N0YWdlKSB7XHJcbiAgICAgICAgaWYgKCEoYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucykpIHJldHVybjtcclxuICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gYmF0dGxlX2FuaW1fa2V5ICsgQU5JTUFUSU9OX1NVRkZJWDtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnNbYmF0dGxlX2FuaW1fa2V5XS5pbml0aWFsaXplKFxyXG4gICAgICAgICAgICBzcHJpdGVfa2V5LFxyXG4gICAgICAgICAgICBjYXN0ZXJfc3ByaXRlLFxyXG4gICAgICAgICAgICB0YXJnZXRzX3Nwcml0ZXMsXHJcbiAgICAgICAgICAgIGdyb3VwX2Nhc3RlcixcclxuICAgICAgICAgICAgZ3JvdXBfdGFrZXIsXHJcbiAgICAgICAgICAgIGJhdHRsZV9zdGFnZS5iYXR0bGVfZ3JvdXAsXHJcbiAgICAgICAgICAgIGJhdHRsZV9zdGFnZS5jYW1lcmFfYW5nbGUsXHJcbiAgICAgICAgICAgIFtiYXR0bGVfc3RhZ2UuYmF0dGxlX2JnLCBiYXR0bGVfc3RhZ2UuYmF0dGxlX2JnMl1cclxuICAgICAgICApO1xyXG4gICAgICAgIGxldCBwbGF5X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBwbGF5X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcGxheV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlIH0pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyX2Z1bmN0aW9uID0gdGhpcy5hbmltYXRpb25zW2JhdHRsZV9hbmltX2tleV0ucmVuZGVyLmJpbmQodGhpcy5hbmltYXRpb25zW2JhdHRsZV9hbmltX2tleV0pO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldLnBsYXkocGxheV9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgICAgIGF3YWl0IHBsYXlfcHJvbWlzZTtcclxuICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlbmRlcl9mdW5jdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIGZvciAobGV0IGJhdHRsZV9hbmltX2tleSBpbiB0aGlzLmFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmNhY2hlLnJlbW92ZVRleHR1cmVBdGxhcyhiYXR0bGVfYW5pbV9rZXkgKyBBTklNQVRJT05fU1VGRklYKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmNhY2hlLnJlbW92ZUpTT04oYmF0dGxlX2FuaW1fa2V5ICsgUkVDSVBFX1NVRkZJWCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgcGVybWFuZW50X3N0YXR1cywgdGVtcG9yYXJ5X3N0YXR1cywgb25fY2F0Y2hfc3RhdHVzX21zZywgZmlnaHRlcl90eXBlcyB9IGZyb20gXCIuLi9QbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgQmF0dGxlU3RhZ2UgfSBmcm9tIFwiLi9CYXR0bGVTdGFnZS5qc1wiO1xyXG5pbXBvcnQgeyBCYXR0bGVMb2cgfSBmcm9tIFwiLi9CYXR0bGVMb2cuanNcIjtcclxuaW1wb3J0IHsgQmF0dGxlTWVudVNjcmVlbiB9IGZyb20gXCIuLi9zY3JlZW5zL2JhdHRsZV9tZW51cy5qc1wiO1xyXG5pbXBvcnQgeyBnZXRfZW5lbXlfaW5zdGFuY2UgfSBmcm9tIFwiLi4vRW5lbXkuanNcIjtcclxuaW1wb3J0IHsgYWJpbGl0eV90eXBlcywgQWJpbGl0eSwgZGltaW5pc2hpbmdfcmF0aW9zLCBhYmlsaXR5X2NhdGVnb3JpZXMgfSBmcm9tIFwiLi4vQWJpbGl0eS5qc1wiO1xyXG5pbXBvcnQgeyBDaG9vc2luZ1RhcmdldFdpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9DaG9vc2luZ1RhcmdldFdpbmRvdy5qc1wiO1xyXG5pbXBvcnQgeyBFbmVteUFJIH0gZnJvbSBcIi4vRW5lbXlBSS5qc1wiO1xyXG5pbXBvcnQgeyBCYXR0bGVGb3JtdWxhcywgQ1JJVElDQUxfQ0hBTkNFLCBFVkFTSU9OX0NIQU5DRSwgREVMVVNJT05fTUlTU19DSEFOQ0UgfSBmcm9tIFwiLi9CYXR0bGVGb3JtdWxhcy5qc1wiO1xyXG5pbXBvcnQgeyBlZmZlY3RfdHlwZXMsIEVmZmVjdCwgZWZmZWN0X3VzYWdlcywgZWZmZWN0X25hbWVzLCBlZmZlY3RfbXNnIH0gZnJvbSBcIi4uL0VmZmVjdC5qc1wiO1xyXG5pbXBvcnQgeyB2YXJpYXRpb24sIG9yZGVyZWRfZWxlbWVudHMsIGVsZW1lbnRfbmFtZXMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcclxuaW1wb3J0IHsgZGppbm5fc3RhdHVzLCBEamlubiB9IGZyb20gXCIuLi9Eamlubi5qc1wiO1xyXG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gXCIuLi9NYWluQ2hhci5qc1wiO1xyXG5pbXBvcnQgeyBCYXR0bGVBbmltYXRpb25NYW5hZ2VyIH0gZnJvbSBcIi4vQmF0dGxlQW5pbWF0aW9uTWFuYWdlci5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1BWF9DSEFSU19JTl9CQVRUTEUgPSA0O1xyXG5cclxuLyogQUNUSU9OUzpcclxuLSBBdHRhY2tcclxuLSBQc3luZXJneVxyXG4tIERqaW5uaSBVc2VcclxuLSBEamlubmkgUmVjb3ZlcnlcclxuLSBJdGVtXHJcbi0gRW5lbXkgQWN0aW9uXHJcbi0gRGVmZW5kXHJcbi0gVG90YWwgRGVmZW5zZSAoeWVzLCB0aGlzIGlzIGRlZmluZWQgZGlmZmVyZW50bHkgZnJvbSBEZWZlbmQgZm9yIHNvbWUgcmVhc29uKVxyXG4tIENvdW50ZXJhdHRhY2tcclxuLSBEYWVkYWx1c1xyXG4tIFJldHJlYXRcclxuKi9cclxuXHJcbmNvbnN0IGJhdHRsZV9waGFzZXMgPSB7XHJcbiAgICBOT05FOiAwLCAvLyAobm90IGluIGEgYmF0dGxlKVxyXG4gICAgU1RBUlQ6IDEsIC8vIFN0YXJ0IChjYW1lcmEgcGFuLCBzaG93cyBlbmVtaWVzLCBtb3ZlIHRvIG1lbnUpXHJcbiAgICBNRU5VOiAyLCAvLyAoaW5jbHVkZXMgc3VibWVudXMsIHRoaXMgcGhhc2UgZG9lc24ndCBlbmQgdW50aWwgdGhlIHBsYXllciBoYXMgZW50ZXJlZCB0aGVpciBmaW5hbCBjb21tYW5kKVxyXG4gICAgUk9VTkRfU1RBUlQ6IDMsIC8vIFN0YXJ0ICh0dXJuIG9yZGVyIGlzIGRldGVybWluZWQsIGVuZW1pZXMgbWF5IGNvbW1pdCB0byBjZXJ0YWluIGFjdGlvbnMpXHJcbiAgICBDT01CQVQ6IDQsIC8vIChhbGwgYWN0aW9ucyBhcmUgcXVldWVkIGFuZCB0YWtlIHBsYWNlIGhlcmUsIHlvdSBjb3VsZCBmdXJ0aGVyIGJyZWFrIHVwIGNvbWJhdCBhY3Rpb25zIGludG8gc3ViYWN0aW9ucywgd2hpY2ggc2hvdWxkIGJlIGdvdmVybmVkIGJ5IGEgc2VwYXJhdGUgc3ViLXN0YXRlIHZhcmlhYmxlKVxyXG4gICAgUk9VTkRfRU5EOiA1LCAvLyBFbmQgKGRqaW5uIHJlY292ZXJ5LCBzdGF0dXMvYnVmZi9kZWJ1ZmYgdGltZXJzIGRlY3JlbWVudClcclxuICAgIEVORDogNiAvLyBFbmQgKHRoZSBsYXN0IGVuZW15IGhhcyBmYWxsZW4sIGV4cC9nb2xkL2Ryb3BzIGFyZSBhd2FyZGVkKVxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhdHRsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBiYWNrZ3JvdW5kX2tleSwgZW5lbXlfcGFydHlfa2V5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuYWxsaWVzX2luZm8gPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuc2xpY2UoMCwgTUFYX0NIQVJTX0lOX0JBVFRMRSkubWFwKGNoYXIgPT4ge1xyXG4gICAgICAgICAgICBjaGFyLmluaXRfZWZmZWN0X3R1cm5zX2NvdW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGVfa2V5OiBjaGFyLmtleV9uYW1lICsgXCJfYmF0dGxlXCIsXHJcbiAgICAgICAgICAgICAgICBzY2FsZTogY2hhci5iYXR0bGVfc2NhbGUsXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogY2hhcixcclxuICAgICAgICAgICAgICAgIGVudGVyZWRfaW5fYmF0dGxlOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzX3BhcnR5X2RhdGEgPSB0aGlzLmRhdGEuZGJzLmVuZW1pZXNfcGFydGllc19kYltlbmVteV9wYXJ0eV9rZXldO1xyXG4gICAgICAgIHRoaXMuZW5lbWllc19pbmZvID0gW107XHJcbiAgICAgICAgdGhpcy50aGlzX2VuZW1pZXNfbGlzdCA9IHt9O1xyXG4gICAgICAgIGxldCBiYXR0bGVfa2V5c19jb3VudCA9IHt9O1xyXG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcclxuICAgICAgICB0aGlzLmVuZW1pZXNfcGFydHlfZGF0YS5tZW1iZXJzLmZvckVhY2gobWVtYmVyX2luZm8gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBxdGQgPSBfLnJhbmRvbShtZW1iZXJfaW5mby5taW4sIG1lbWJlcl9pbmZvLm1heCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXRkOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19pbmZvLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZV9rZXk6IG1lbWJlcl9pbmZvLmtleSArIFwiX2JhdHRsZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiB0aGlzLmRhdGEuaW5mby5lbmVtaWVzX2xpc3RbbWVtYmVyX2luZm8ua2V5XS5iYXR0bGVfc2NhbGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXkgaW4gYmF0dGxlX2tleXNfY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XSArPSAxO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgYmF0dGxlX2tleV9zdWZmaXggPSBcIlwiLCBuYW1lX3N1ZmZpeCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmF0dGxlX2tleXNfY291bnRbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc3ByaXRlX2tleV0gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlX2tleV9zdWZmaXggPSBcIl9cIiArIGJhdHRsZV9rZXlzX2NvdW50W3RoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZV9zdWZmaXggPSBcIiBcIiArIGJhdHRsZV9rZXlzX2NvdW50W3RoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5pbnN0YW5jZSA9IGdldF9lbmVteV9pbnN0YW5jZSh0aGlzLmRhdGEuaW5mby5lbmVtaWVzX2xpc3QsIG1lbWJlcl9pbmZvLmtleSwgbmFtZV9zdWZmaXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uYmF0dGxlX2tleSA9IHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXkgKyBiYXR0bGVfa2V5X3N1ZmZpeDtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhpc19lbmVtaWVzX2xpc3RbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uYmF0dGxlX2tleV0gPSB0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5pbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgICsrY291bnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gMDtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZSA9IG5ldyBCYXR0bGVTdGFnZSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgYmFja2dyb3VuZF9rZXksIHRoaXMuYWxsaWVzX2luZm8sIHRoaXMuZW5lbWllc19pbmZvLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSsrLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KyspO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2xvZyA9IG5ldyBCYXR0bGVMb2codGhpcy5nYW1lKTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9tZW51ID0gbmV3IEJhdHRsZU1lbnVTY3JlZW4odGhpcy5nYW1lLCB0aGlzLmRhdGEsICsrdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgKyt0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlLmJpbmQodGhpcyksIHRoaXMuY2hvb3NlX3RhcmdldHMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfd2luZG93ID0gbmV3IENob29zaW5nVGFyZ2V0V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyID0gbmV3IEJhdHRsZUFuaW1hdGlvbk1hbmFnZXIodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5OT05FO1xyXG4gICAgICAgIHRoaXMuY29udHJvbHNfZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWxsaWVzX2RlZmVhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzX2RlZmVhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgKyt0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5O1xyXG4gICAgICAgICsrdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfZmluaXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSB0aGlzLnNldF9jb250cm9scygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jb250cm9scygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmluX2JhdHRsZSB8fCAhdGhpcy5jb250cm9sc19lbmFibGVkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJhdHRsZV9waGFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5TVEFSVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc19lbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuTUVOVTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLkNPTUJBVDpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5FTkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFkdmFuY2VfbG9nX3Jlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZV9sb2dfcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlX2xvZ19yZXNvbHZlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0X2JhdHRsZSgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uX2FiaWxpdGllc19jaG9vc2UoYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJfYWJpbGl0aWVzID0gYWJpbGl0aWVzO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX21lbnUuY2xvc2VfbWVudSgpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnJlc2V0X3Bvc2l0aW9ucygpO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLmNob29zaW5nX2FjdGlvbnMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfU1RBUlQ7XHJcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjaG9vc2VfdGFyZ2V0cyhhYmlsaXR5X2tleSwgYWN0aW9uLCBjYWxsYmFjaywgY2FzdGVyLCBpdGVtX29iaikge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FiaWxpdHlfa2V5XTtcclxuICAgICAgICBsZXQgcXVhbnRpdGllcztcclxuICAgICAgICBpZiAoYWN0aW9uID09PSBcInBzeW5lcmd5XCIpIHtcclxuICAgICAgICAgICAgcXVhbnRpdGllcyA9IFt0aGlzX2FiaWxpdHkucHBfY29zdF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3Rpb24gIT09IFwiZGVmZW5kXCIpIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRfd2luZG93Lm9wZW4oYWN0aW9uLCB0aGlzX2FiaWxpdHkubmFtZSwgdGhpc19hYmlsaXR5LmVsZW1lbnQsIGFiaWxpdHlfa2V5LCBxdWFudGl0aWVzLCBpdGVtX29iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLmNob29zZV90YXJnZXRzKFxyXG4gICAgICAgICAgICB0aGlzX2FiaWxpdHkucmFuZ2UsXHJcbiAgICAgICAgICAgIHRoaXNfYWJpbGl0eS5iYXR0bGVfdGFyZ2V0LFxyXG4gICAgICAgICAgICB0aGlzX2FiaWxpdHkudHlwZSxcclxuICAgICAgICAgICAgY2FzdGVyLFxyXG4gICAgICAgICAgICB0YXJnZXRzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldF93aW5kb3cud2luZG93X29wZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF93aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRhcmdldHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja19wYXJ0aWVzKCkge1xyXG4gICAgICAgIHRoaXMuYWxsaWVzX2RlZmVhdGVkID0gdGhpcy5hbGxpZXNfaW5mby5ldmVyeShwbGF5ZXIgPT4gcGxheWVyLmluc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSk7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzX2RlZmVhdGVkID0gdGhpcy5lbmVtaWVzX2luZm8uZXZlcnkocGxheWVyID0+IHBsYXllci5pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpO1xyXG4gICAgICAgIGlmICh0aGlzLmFsbGllc19kZWZlYXRlZCB8fCB0aGlzLmVuZW1pZXNfZGVmZWF0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLkVORDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tfcGhhc2VzKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tfcGFydGllcygpO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5iYXR0bGVfcGhhc2UpIHtcclxuICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLk5PTkU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9ub25lKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLlNUQVJUOlxyXG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuTUVOVTpcclxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX21lbnUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuUk9VTkRfU1RBUlQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9yb3VuZF9zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5DT01CQVQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9jb21iYXQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2Vfcm91bmRfZW5kKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLkVORDpcclxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX2VuZCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJhdHRsZV9waGFzZV9ub25lKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLlNUQVJUO1xyXG4gICAgICAgIHRoaXMuZGF0YS5pbl9iYXR0bGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGF0YS5iYXR0bGVfaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQodGhpcy5lbmVtaWVzX3BhcnR5X2RhdGEubmFtZSArIFwiIGFwcGVhcmVkIVwiKTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5pbml0aWFsaXplX3N0YWdlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hbGxpZXNfbWFwX3Nwcml0ZSA9IF8ubWFwVmFsdWVzKF8ua2V5QnkodGhpcy5hbGxpZXNfaW5mbywgJ2luc3RhbmNlLmtleV9uYW1lJyksIGluZm8gPT4gaW5mby5zcHJpdGUpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZW1pZXNfbWFwX3Nwcml0ZSA9IF8ubWFwVmFsdWVzKF8ua2V5QnkodGhpcy5lbmVtaWVzX2luZm8sICdpbnN0YW5jZS5rZXlfbmFtZScpLCBpbmZvID0+IGluZm8uc3ByaXRlKTtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sc19lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBiYXR0bGVfcGhhc2VfbWVudSgpIHtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5zZXRfY2hvb3NpbmdfYWN0aW9uX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5vcGVuX21lbnUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgQXQgcm91bmQgc3RhcnQsIGlzIGNhbGN1bGF0ZWQgdGhlIHBsYXllcnMgYW5kIGVuZW1pZXMgc3BlZWRzLlxyXG4gICAgSWYgYSBjZXJ0YWluIHBsYXllciBzcGVlZCBpcyB0aGUgc2FtZSBvZiBhIGVuZW15LCBwbGF5ZXIgZ29lcyBmaXJzdC5cclxuICAgIElmIGFub3RoZXIgdGllLCB0aGUgbW9zdCBsZWZ0IGNoYXIgaGFzIHByaW9yaXR5LlxyXG4gICAgQXQgYSBzcGVjaWZpYyBlbmVteSB0dXJuIHN0YXJ0LCBJIHJvbGwgYW4gYWN0aW9uIGZvciB0aGF0IHR1cm4uXHJcbiAgICBUaGUgb25seSB0aGluZyBuZWVkZWQgdG8gY2hlY2sgYWJvdXQgZW5lbWllcyBhY3Rpb25zIGF0IHJvdW5kIHN0YXJ0IGlzOlxyXG4gICAgICAgIC0gUm9sbCB0aGVpciBhY3Rpb25zIGZvciBlYWNoIHR1cm4gYW5kIHNlZSBpZiBhbiBhYmlsaXR5IHdpdGggcHJpb3JpdHkgbW92ZSBpcyByb2xsZWQuXHJcbiAgICAgICAgLSBJZiB5ZXMsIHRoaXMgYWJpbGl0eSBpcyBmaXhlZCBmb3IgdGhhdCBjb3JyZXNwb25kaW5nIHR1cm4uXHJcbiAgICBGb3IgdGhlIG90aGVyIHR1cm5zLCBhbiBhY3Rpb24gaXMgcmUtcm9sbCBpbiB0aGUgdHVybiBzdGFydCB0byBiZSB1c2VkIG9uIGl0LlxyXG4gICAgKi9cclxuICAgIGFzeW5jIGJhdHRsZV9waGFzZV9yb3VuZF9zdGFydCgpIHtcclxuICAgICAgICBjb25zdCBlbmVteV9tZW1iZXJzID0gdGhpcy5lbmVtaWVzX2luZm8ubWFwKGluZm8gPT4gaW5mby5pbnN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllcyA9IE9iamVjdC5mcm9tRW50cmllcyhlbmVteV9tZW1iZXJzLm1hcCgoZW5lbXksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBhYmlsaXRpZXMgPSBuZXcgQXJyYXkoZW5lbXkudHVybnMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuZW15LnR1cm5zOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGFiaWxpdGllc1tpXSA9IEVuZW15QUkucm9sbF9hY3Rpb24oZW5lbXksIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycywgZW5lbXlfbWVtYmVycyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmVuZW1pZXNfaW5mb1tpbmRleF0uYmF0dGxlX2tleSwgYWJpbGl0aWVzXTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgZm9yIChsZXQgY2hhcl9rZXkgaW4gdGhpcy5wbGF5ZXJfYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0W2NoYXJfa2V5XTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsYXllcl9hYmlsaXRpZXNbY2hhcl9rZXldLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2FiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLnBsYXllcl9hYmlsaXRpZXNbY2hhcl9rZXldW2ldLmtleV9uYW1lXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5X21vdmUgPSB0aGlzX2FiaWxpdHkgIT09IHVuZGVmaW5lZCA/IHRoaXNfYWJpbGl0eS5wcmlvcml0eV9tb3ZlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllcl9hYmlsaXRpZXNbY2hhcl9rZXldW2ldLnNwZWVkID0gQmF0dGxlRm9ybXVsYXMucGxheWVyX3R1cm5fc3BlZWQodGhpc19jaGFyLmN1cnJlbnRfYWdpLCBwcmlvcml0eV9tb3ZlLCBpID4gMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllcl9hYmlsaXRpZXNbY2hhcl9rZXldW2ldLmNhc3RlciA9IHRoaXNfY2hhcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBiYXR0bGVfa2V5IGluIHRoaXMuZW5lbWllc19hYmlsaXRpZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19lbmVteSA9IHRoaXMudGhpc19lbmVtaWVzX2xpc3RbYmF0dGxlX2tleV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc19hYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XVtpXS5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmlvcml0eV9tb3ZlID0gdGhpc19hYmlsaXR5ICE9PSB1bmRlZmluZWQgPyB0aGlzX2FiaWxpdHkucHJpb3JpdHlfbW92ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XVtpXS5zcGVlZCA9IEJhdHRsZUZvcm11bGFzLmVuZW15X3R1cm5fc3BlZWQodGhpc19lbmVteS5jdXJyZW50X2FnaSwgaSArIDEsIHRoaXNfZW5lbXkudHVybnMsIHByaW9yaXR5X21vdmUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XVtpXS5jYXN0ZXIgPSB0aGlzX2VuZW15O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudHVybnNfYWN0aW9ucyA9IF8uc29ydEJ5KE9iamVjdC52YWx1ZXModGhpcy5wbGF5ZXJfYWJpbGl0aWVzKS5mbGF0KCkuY29uY2F0KE9iamVjdC52YWx1ZXModGhpcy5lbmVtaWVzX2FiaWxpdGllcykuZmxhdCgpKSwgYWN0aW9uID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5zcGVlZDsgLy9zdGlsbCBuZWVkIHRvIGFkZCBsZWZ0IG1vc3QgYW5kIHBsYXllciBwcmVmZXJlbmNlIGNyaXRlcmlhc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50dXJuc19hY3Rpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMudHVybnNfYWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgIGxldCBiYXR0bGVfYW5pbWF0aW9uX2tleSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV0uYmF0dGxlX2FuaW1hdGlvbl9rZXk7XHJcbiAgICAgICAgICAgIGlmIChhYmlsaXR5Lmhhc19hbmltYXRpb25fdmFyaWF0aW9uICYmIGFjdGlvbi5rZXlfbmFtZSBpbiBhY3Rpb24uY2FzdGVyLmJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGJhdHRsZV9hbmltYXRpb25fa2V5ID0gYWN0aW9uLmNhc3Rlci5iYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zW2FjdGlvbi5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uLmJhdHRsZV9hbmltYXRpb25fa2V5ID0gYmF0dGxlX2FuaW1hdGlvbl9rZXk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbWF0aW9uX21hbmFnZXIubG9hZF9hbmltYXRpb24oYmF0dGxlX2FuaW1hdGlvbl9rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuQ09NQkFUO1xyXG4gICAgICAgIHRoaXMuY29udHJvbHNfZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICB3YWl0X2Zvcl9rZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyB0aGlzLmFkdmFuY2VfbG9nX3Jlc29sdmUgPSByZXNvbHZlOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjaGVja19kb3duZWQodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKHRhcmdldC5jdXJyZW50X2hwID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5hZGRfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQob25fY2F0Y2hfc3RhdHVzX21zZ1twZXJtYW5lbnRfc3RhdHVzLkRPV05FRF0odGFyZ2V0KSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICBTdGFuZGFyZCBhdHRhY2s6XHJcbiAgICAxLiBVbmxlYXNoIGNoZWNrIChmb2xsb3dlZCBieSBhbm90aGVyIGNoZWNrIGZvciB1bmxlYXNoIHR5cGUgaWYgd2VhcG9uIGhhcyBtdWx0aXBsZSB1bmxlYXNoZXMpXHJcbiAgICAyLiBNaXNzIGNoZWNrXHJcbiAgICAzLiBDcml0IGNoZWNrIDEgICh1c2luZyBicm4gJSAzMilcclxuICAgIDQuIENyaXQgY2hlY2sgMiAodXNpbmcgdG90YWwgY3JpdCBjaGFuY2UgZnJvbSBlcXVpcG1lbnQsICgoZXF1aXBtZW50X2NoYW5jZS8yKSpyYW5kKDAsNjU1MzUpID4+IDE2KVxyXG4gICAgNS4gU3RhdHVzIGVmZmVjdCBjaGVja1xyXG4gICAgNi4gQWRkZWQgMC0zIGRhbWFnZVxyXG4gICAgSWYgYW55IG9mIGNoZWNrcyAxLTQgc3VjY2VlZCwgaXQgc2tpcHMgdG8gNVxyXG4gICAgKi9cclxuICAgIGFzeW5jIGJhdHRsZV9waGFzZV9jb21iYXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnR1cm5zX2FjdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5ST1VORF9FTkQ7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy50dXJuc19hY3Rpb25zLnBvcCgpO1xyXG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkgeyAvL2NoZWNrIHdoZXRoZXIgdGhpcyBjaGFyIGlzIGRvd25lZFxyXG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmlzX3BhcmFseXplZCgpKSB7IC8vY2hlY2sgd2hldGhlciB0aGlzIGNoYXIgaXMgcGFyYWx5emVkXHJcbiAgICAgICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU0xFRVApKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gaXMgYXNsZWVwIWApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5jYXN0ZXIudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TVFVOKSkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24uY2FzdGVyLm5hbWV9IGlzIHBhcmFseXplZCBhbmQgY2Fubm90IG1vdmUhYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuRU5FTVkgJiYgIXRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV0ucHJpb3JpdHlfbW92ZSkgeyAvL3Jlcm9sbCBlbmVteSBhYmlsaXR5XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYWN0aW9uLCBFbmVteUFJLnJvbGxfYWN0aW9uKGFjdGlvbi5jYXN0ZXIsIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycywgdGhpcy5lbmVtaWVzX2luZm8ubWFwKGluZm8gPT4gaW5mby5pbnN0YW5jZSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthY3Rpb24ua2V5X25hbWVdO1xyXG4gICAgICAgIGxldCBpdGVtX25hbWUgPSBcIlwiO1xyXG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5BTExZICYmIGFiaWxpdHkgIT09IHVuZGVmaW5lZCAmJiBhYmlsaXR5LmNhbl9zd2l0Y2hfdG9fdW5sZWFzaCkgeyAvL2NoYW5nZSB0aGUgY3VycmVudCBhYmlsaXR5IHRvIHVubGVhc2ggYWJpbGl0eSBmcm9tIHdlYXBvblxyXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5lcXVpcF9zbG90cy53ZWFwb24gJiYgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFthY3Rpb24uY2FzdGVyLmVxdWlwX3Nsb3RzLndlYXBvbi5rZXlfbmFtZV0udW5sZWFzaF9hYmlsaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2FjdGlvbi5jYXN0ZXIuZXF1aXBfc2xvdHMud2VhcG9uLmtleV9uYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgd2VhcG9uLnVubGVhc2hfcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fbmFtZSA9IHdlYXBvbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5rZXlfbmFtZSA9IHdlYXBvbi51bmxlYXNoX2FiaWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3dlYXBvbi51bmxlYXNoX2FiaWxpdHldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhYmlsaXR5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24ua2V5X25hbWV9IGFiaWxpdHkga2V5IG5vdCByZWdpc3RlcmVkLmApO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmhhc190ZW1wb3Jhcnlfc3RhdHVzKHRlbXBvcmFyeV9zdGF0dXMuU0VBTCkgJiYgYWJpbGl0eS5hYmlsaXR5X2NhdGVnb3J5ID09PSBhYmlsaXR5X2NhdGVnb3JpZXMuUFNZTkVSR1kpIHsgLy9jaGVjayBpZiBpcyBwb3NzaWJsZSB0byBjYXN0IGFiaWxpdHkgZHVlIHRvIHNlYWxcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgQnV0IHRoZSBQc3luZXJneSB3YXMgYmxvY2tlZCFgKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWJpbGl0eS5wcF9jb3N0ID4gYWN0aW9uLmNhc3Rlci5jdXJyZW50X3BwKSB7IC8vY2hlY2sgaWYgY2hhciBoYXMgZW5vdWdoIHBwIHRvIGNhc3QgYWJpbGl0eVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAuLi4gQnV0IGRvZXNuJ3QgaGF2ZSBlbm91Z2ggUFAhYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfcHAgLT0gYWJpbGl0eS5wcF9jb3N0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZGppbm5fbmFtZSA9IGFjdGlvbi5kamlubl9rZXlfbmFtZSA/IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2FjdGlvbi5kamlubl9rZXlfbmFtZV0ubmFtZSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkX2FiaWxpdHkoYWN0aW9uLmNhc3RlciwgYWJpbGl0eSwgaXRlbV9uYW1lLCBkamlubl9uYW1lKTtcclxuICAgICAgICBpZiAoYWJpbGl0eS5hYmlsaXR5X2NhdGVnb3J5ID09PSBhYmlsaXR5X2NhdGVnb3JpZXMuREpJTk4pIHtcclxuICAgICAgICAgICAgaWYgKGFiaWxpdHkuZWZmZWN0cy5zb21lKGVmZmVjdCA9PiBlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLlNFVF9ESklOTikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2FjdGlvbi5kamlubl9rZXlfbmFtZV0uc2V0X3N0YXR1cyhkamlubl9zdGF0dXMuU0VULCBhY3Rpb24uY2FzdGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2FjdGlvbi5rZXlfbmFtZV0uc2V0X3N0YXR1cyhkamlubl9zdGF0dXMuU1RBTkRCWSwgYWN0aW9uLmNhc3Rlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGFiaWxpdHkuYWJpbGl0eV9jYXRlZ29yeSA9PT0gYWJpbGl0eV9jYXRlZ29yaWVzLlNVTU1PTikgeyAvL3NvbWUgc3VtbW9uIGNoZWNrc1xyXG4gICAgICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSB0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbYWJpbGl0eS5rZXlfbmFtZV0ucmVxdWlyZW1lbnRzO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFuZGJ5X2RqaW5uaSA9IERqaW5uLmdldF9zdGFuZGJ5X2RqaW5uaSh0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdCwgTWFpbkNoYXIuZ2V0X2FjdGl2ZV9wbGF5ZXJzKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIE1BWF9DSEFSU19JTl9CQVRUTEUpKTtcclxuICAgICAgICAgICAgY29uc3QgaGFzX2F2YWlsYWJsZV9kamlubmkgPSBfLmV2ZXJ5KHJlcXVpcmVtZW50cywgKHJlcXVpcmVtZW50LCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhbmRieV9kamlubmlbZWxlbWVudF0gPj0gcmVxdWlyZW1lbnQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWhhc19hdmFpbGFibGVfZGppbm5pKSB7IC8vY2hlY2sgaWYgaXMgcG9zc2libGUgdG8gY2FzdCBhIHN1bW1vblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24uY2FzdGVyLm5hbWV9IHN1bW1vbnMgJHthYmlsaXR5Lm5hbWV9IGJ1dGApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgZG9lc24ndCBoYXZlIGVub3VnaCBzdGFuZGJ5IERqaW5uIWApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vc2V0IGRqaW5uaSB1c2VkIGluIHRoaXMgc3VtbW9uIHRvIHJlY292ZXJ5IG1vZGVcclxuICAgICAgICAgICAgICAgIERqaW5uLnNldF90b19yZWNvdmVyeSh0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdCwgTWFpbkNoYXIuZ2V0X2FjdGl2ZV9wbGF5ZXJzKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIE1BWF9DSEFSU19JTl9CQVRUTEUpLCByZXF1aXJlbWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmF0dGxlX21lbnUuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfY2hhcnNfaW5mbygpO1xyXG4gICAgICAgIGlmIChhYmlsaXR5LnR5cGUgPT09IGFiaWxpdHlfdHlwZXMuVVRJTElUWSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25fbWFuYWdlci5hbmltYXRpb25fYXZhaWxhYmxlKGFjdGlvbi5iYXR0bGVfYW5pbWF0aW9uX2tleSkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FzdGVyX3Nwcml0ZSA9IGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFkgPyB0aGlzLmFsbGllc19tYXBfc3ByaXRlW2FjdGlvbi5jYXN0ZXIua2V5X25hbWVdIDogdGhpcy5lbmVtaWVzX21hcF9zcHJpdGVbYWN0aW9uLmNhc3Rlci5rZXlfbmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9zcHJpdGVzID0gYWN0aW9uLnRhcmdldHMuZmxhdE1hcChpbmZvID0+IGluZm8ubWFnbml0dWRlID8gW2luZm8udGFyZ2V0LnNwcml0ZV0gOiBbXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwX2Nhc3RlciA9IGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFkgPyB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9hbGxpZXMgOiB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9lbmVtaWVzO1xyXG4gICAgICAgICAgICBjb25zdCBncm91cF90YWtlciA9IGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFkgPyB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9lbmVtaWVzIDogdGhpcy5iYXR0bGVfc3RhZ2UuZ3JvdXBfYWxsaWVzO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyLnBsYXkoYWN0aW9uLmJhdHRsZV9hbmltYXRpb25fa2V5LCBjYXN0ZXJfc3ByaXRlLCB0YXJnZXRfc3ByaXRlcywgZ3JvdXBfY2FzdGVyLCBncm91cF90YWtlciwgdGhpcy5iYXR0bGVfc3RhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5wcmV2ZW50X2NhbWVyYV9hbmdsZV9vdmVyZmxvdygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEFuaW1hdGlvbiBmb3IgJHthYmlsaXR5Lm5hbWV9IG5vdCBhdmFpbGFibGUuLi5gKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9hcHBseSBhYmlsaXR5IGRhbWFnZVxyXG4gICAgICAgIGlmICghW2FiaWxpdHlfdHlwZXMuVVRJTElUWSwgYWJpbGl0eV90eXBlcy5FRkZFQ1RfT05MWV0uaW5jbHVkZXMoYWJpbGl0eS50eXBlKSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwcGx5X2RhbWFnZShhY3Rpb24sIGFiaWxpdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2FwcGx5IGFiaWxpdHkgZWZmZWN0c1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWJpbGl0eS5lZmZlY3RzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IGFiaWxpdHkuZWZmZWN0c1tpXTtcclxuICAgICAgICAgICAgaWYgKCFlZmZlY3RfdXNhZ2VzLk9OX1VTRSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZF90dXJuID0gYXdhaXQgdGhpcy5hcHBseV9lZmZlY3RzKGFjdGlvbiwgYWJpbGl0eSwgZWZmZWN0KTtcclxuICAgICAgICAgICAgaWYgKGVuZF90dXJuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9zdGFnZS5zZXRfc3RhZ2VfZGVmYXVsdF9wb3NpdGlvbigpO1xyXG4gICAgICAgIC8vc3VtbW9uIGFmdGVyIGNhc3QgcG93ZXIgYnVmZlxyXG4gICAgICAgIGlmIChhYmlsaXR5LmFiaWxpdHlfY2F0ZWdvcnkgPT09IGFiaWxpdHlfY2F0ZWdvcmllcy5TVU1NT04pIHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWlyZW1lbnRzID0gdGhpcy5kYXRhLmRicy5zdW1tb25zX2RiW2FiaWxpdHkua2V5X25hbWVdLnJlcXVpcmVtZW50cztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvd2VyID0gQmF0dGxlRm9ybXVsYXMuc3VtbW9uX3Bvd2VyKHJlcXVpcmVtZW50c1tlbGVtZW50XSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocG93ZXIgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5hZGRfZWZmZWN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwb3dlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogcG93ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcInBsdXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgYWJpbGl0eSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24uY2FzdGVyLm5hbWV9J3MgJHtlbGVtZW50X25hbWVzW2VsZW1lbnRdfSBQb3dlciByaXNlcyBieSAke3Bvd2VyLnRvU3RyaW5nKCl9IWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaGVjayBmb3IgcG9pc29uIGRhbWFnZVxyXG4gICAgICAgIGNvbnN0IHBvaXNvbl9zdGF0dXMgPSBhY3Rpb24uY2FzdGVyLmlzX3BvaXNvbmVkKCk7XHJcbiAgICAgICAgaWYgKHBvaXNvbl9zdGF0dXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLmJhdHRsZV9wb2lzb25fZGFtYWdlKGFjdGlvbi5jYXN0ZXIsIHBvaXNvbl9zdGF0dXMpO1xyXG4gICAgICAgICAgICBpZiAoZGFtYWdlID4gYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwKSB7XHJcbiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfaHA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwID0gXy5jbGFtcChhY3Rpb24uY2FzdGVyLmN1cnJlbnRfaHAgLSBkYW1hZ2UsIDAsIGFjdGlvbi5jYXN0ZXIubWF4X2hwKTtcclxuICAgICAgICAgICAgY29uc3QgcG9pc29uX25hbWUgPSBwb2lzb25fc3RhdHVzID09PSBwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTiA/IFwicG9pc29uXCIgOiBcInZlbm9tXCI7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYFRoZSAke3BvaXNvbl9uYW1lfSBkb2VzICR7ZGFtYWdlLnRvU3RyaW5nKCl9IGRhbWFnZSB0byAke2FjdGlvbi5jYXN0ZXIubmFtZX0hYCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX21lbnUuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfY2hhcnNfaW5mbygpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrX2Rvd25lZChhY3Rpb24uY2FzdGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFjdGlvbi5jYXN0ZXIuaGFzX3RlbXBvcmFyeV9zdGF0dXModGVtcG9yYXJ5X3N0YXR1cy5ERUFUSF9DVVJTRSkpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSBfLmZpbmQoYWN0aW9uLmNhc3Rlci5lZmZlY3RzLCB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IHRlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmdldF9lZmZlY3RfdHVybnNfY291bnQodGhpc19lZmZlY3QpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfaHAgPSAwO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5hZGRfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBUaGUgR3JpbSBSZWFwZXIgY2FsbHMgb3V0IHRvICR7YWN0aW9uLmNhc3Rlci5uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFwcGx5X2RhbWFnZShhY3Rpb24sIGFiaWxpdHkpIHtcclxuICAgICAgICBsZXQgaW5jcmVhc2VkX2NyaXQ7XHJcbiAgICAgICAgaWYgKGFiaWxpdHkuaGFzX2NyaXRpY2FsKSB7XHJcbiAgICAgICAgICAgIGluY3JlYXNlZF9jcml0ID0gYWN0aW9uLmNhc3Rlci5lZmZlY3RzLmZpbHRlcihlZmZlY3QgPT4gZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlcy5DUklUSUNBTFMpLnJlZHVjZSgoYWNjLCBlZmZlY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBFZmZlY3QuYXBwbHlfb3BlcmF0b3IoYWNjLCBlZmZlY3QucXVhbnRpdHksIGVmZmVjdC5vcGVyYXRvcik7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbi50YXJnZXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbmZvID0gYWN0aW9uLnRhcmdldHNbaV07XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5mby5tYWduaXR1ZGUgPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRfaW5zdGFuY2UgPSB0YXJnZXRfaW5mby50YXJnZXQuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGFiaWxpdHkuY2FuX2JlX2V2YWRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCBFVkFTSU9OX0NIQU5DRSB8fCAoYWN0aW9uLmNhc3Rlci50ZW1wb3Jhcnlfc3RhdHVzLmhhcyh0ZW1wb3Jhcnlfc3RhdHVzLkRFTFVTSU9OKSAmJiBNYXRoLnJhbmRvbSgpIDwgREVMVVNJT05fTUlTU19DSEFOQ0UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHt0YXJnZXRfaW5zdGFuY2UubmFtZX0gbmltYmx5IGRvZGdlcyB0aGUgYmxvdyFgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZGFtYWdlID0gMDtcclxuICAgICAgICAgICAgaWYgKGFiaWxpdHkuaGFzX2NyaXRpY2FsICYmIChNYXRoLnJhbmRvbSgpIDwgQ1JJVElDQUxfQ0hBTkNFIHx8IE1hdGgucmFuZG9tKCkgPCBpbmNyZWFzZWRfY3JpdC8yKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXVsdF9tb2QgPSBhYmlsaXR5LmNyaXRfbXVsdF9mYWN0b3IgPT09IHVuZGVmaW5lZCA/IDEuMjUgOiBhYmlsaXR5LmNyaXRfbXVsdF9mYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRfbW9kID0gNi4wICsgdGFyZ2V0X2luc3RhbmNlLmxldmVsLzUuMDtcclxuICAgICAgICAgICAgICAgIGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLnBoeXNpY2FsX2F0dGFjayhhY3Rpb24uY2FzdGVyLCB0YXJnZXRfaW5zdGFuY2UsIG11bHRfbW9kLCBhZGRfbW9kLCBhYmlsaXR5LmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5BRERFRF9EQU1BR0U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLnBoeXNpY2FsX2F0dGFjayhhY3Rpb24uY2FzdGVyLCB0YXJnZXRfaW5zdGFuY2UsIDEuMCwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBhYmlsaXR5LmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuTVVMVElQTElFUjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMucGh5c2ljYWxfYXR0YWNrKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLzEwLjAsIDAsIGFiaWxpdHkuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5CQVNFX0RBTUFHRTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMucHN5bmVyZ3lfZGFtYWdlKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBhYmlsaXR5LmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuSEVBTElORzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gLUJhdHRsZUZvcm11bGFzLmhlYWxfYWJpbGl0eShhY3Rpb24uY2FzdGVyLCBhYmlsaXR5LmFiaWxpdHlfcG93ZXIsIGFiaWxpdHkuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5TVU1NT046XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRqaW5uX3VzZWQgPSBfLnN1bShfLnZhbHVlcyh0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbYWJpbGl0eS5rZXlfbmFtZV0ucmVxdWlyZW1lbnRzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLnN1bW1vbl9kYW1hZ2UodGFyZ2V0X2luc3RhbmNlLCBhYmlsaXR5LmFiaWxpdHlfcG93ZXIsIGRqaW5uX3VzZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuRElSRUNUX0RBTUFHRTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gYWJpbGl0eS5hYmlsaXR5X3Bvd2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByYXRpb3MgPSBBYmlsaXR5LmdldF9kaW1pbmlzaGluZ19yYXRpb3MoYWJpbGl0eS50eXBlLCBhYmlsaXR5LnVzZV9kaW1pbmlzaGluZ19yYXRpbyk7XHJcbiAgICAgICAgICAgIGRhbWFnZSA9IChkYW1hZ2UgKiByYXRpb3NbdGFyZ2V0X2luZm8ubWFnbml0dWRlXSkgfCAwO1xyXG4gICAgICAgICAgICBkYW1hZ2UgKz0gdmFyaWF0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmIChkYW1hZ2UgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkRBTUFHRV9NT0RJRklFUikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBlZmZlY3QuYXBwbHlfZWZmZWN0KGRhbWFnZSkuYWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXRfaW5zdGFuY2UsIGFiaWxpdHkuYWZmZWN0c19wcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfcHJvcGVydHkgPSBhYmlsaXR5LmFmZmVjdHNfcHAgPyBcImN1cnJlbnRfcHBcIiA6IFwiY3VycmVudF9ocFwiO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhfcHJvcGVydHkgPSBhYmlsaXR5LmFmZmVjdHNfcHAgPyBcIm1heF9wcFwiIDogXCJtYXhfaHBcIjtcclxuICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLmN1cnJlbnRfaHAgPSBfLmNsYW1wKHRhcmdldF9pbnN0YW5jZVtjdXJyZW50X3Byb3BlcnR5XSAtIGRhbWFnZSwgMCwgdGFyZ2V0X2luc3RhbmNlW21heF9wcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQodGFyZ2V0X2luc3RhbmNlKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhYmlsaXR5LmVmZmVjdHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdF9vYmogPSBhYmlsaXR5LmVmZmVjdHNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X29iai50eXBlID09PSBlZmZlY3RfdHlwZXMuREFNQUdFX0lOUFVUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gZWZmZWN0X29iai5vbl9jYXN0ZXIgPyBhY3Rpb24uY2FzdGVyIDogdGFyZ2V0X2luc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpX2VmZmVjdCA9IHBsYXllci5hZGRfZWZmZWN0KGVmZmVjdF9vYmosIGFiaWxpdHkpLmVmZmVjdDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlZmZlY3RfcmVzdWx0ID0gZGlfZWZmZWN0LmFwcGx5X2VmZmVjdChkYW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbZWZmZWN0X3R5cGVzLkNVUlJFTlRfSFAsIGVmZmVjdF90eXBlcy5DVVJSRU5UX1BQXS5pbmNsdWRlcyhkaV9lZmZlY3Quc3ViX2VmZmVjdC50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZmZlY3RfZGFtYWdlID0gZWZmZWN0X3Jlc3VsdC5iZWZvcmUgLSBlZmZlY3RfcmVzdWx0LmFmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X2RhbWFnZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpX2VmZmVjdC5lZmZlY3RfbXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChlZmZlY3RfbXNnW2RpX2VmZmVjdC5lZmZlY3RfbXNnXSh0YXJnZXRfaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZWZmZWN0X2RhbWFnZSwgcGxheWVyLCBkaV9lZmZlY3Quc3ViX2VmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQocGxheWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnJlbW92ZV9lZmZlY3QoZGlfZWZmZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbi8qXHJcbklmIGEgc2xlZXAgaXMgY2FzdCBvdmVyIGEgdGFyZ2V0IHRoYXQgaXMgYWxyZWFkeSBzbGVlcGluZyxcclxuaXQgd2lsbCByZWNhbGN1bGF0ZSB0aGUgY2hhbmNlLCBhbmQgaWYgaXQgbGFuZHMgaXQgd2lsbCBcInRvcCB1cFwiIChyZWFkOiByZXBsYWNlKSB0aGUgZWZmZWN0J3MgZHVyYXRpb24uXHJcblNvIGlmIGEgY2hhcmFjdGVyIGlzIHNsZWVwaW5nLCB0aGUgcmVtYWluaW5nIGR1cmF0aW9uIGlzIDYgcm91bmRzLCBhbmQgeW91IGNhc3QgU2xlZXAgb24gdGhlbSBhZ2FpbiBhbmQgaXQgbGFuZHMsIGl0J2xsIGdldCBidW1wZWQgdXAgdG8gNyByb3VuZHMuXHJcbldoZW4gU2xlZXAgbm9ybWFsbHkgZ2V0cyBpbmZsaWN0ZWQgd2l0aCBhIG1heCBkdXJhdGlvbiBvZiA3IGFueXdheS5cclxuXHJcbkJ1ZmZzIGFuZCBkZWJ1ZmZzIGNhbiBzdGFjayB2YWx1ZXMsIGJ1dCBkdXJhdGlvbnMgZ2V0IG92ZXJ3cml0dGVuIGV2ZXJ5IHRpbWUgYW5kIGRvIG5vdCBzdGFjay5cclxuXHJcblBvaXNvbi9WZW5vbSBjYW4ndCBsYW5kIGFnYWluLCBhbHRob3VnaCBWZW5vbSBjYW4gcmVwbGFjZSBQb2lzb24gKGJ1dCBub3QgdGhlIG90aGVyIHdheSBhcm91bmQpLlxyXG5BbmQgQ2FuZGxlIEN1cnNlIChjb3VudGRvd24gdG8gZGVhdGgpIGNhbiBiZSBcImFkdmFuY2VkXCIuXHJcblNvLCBpZiBhIGNoYXJhY3RlciB3aWxsIGRpZSBhZnRlciA1IHR1cm5zIGFuZCB5b3UgbGFuZCBhbm90aGVyIEN1cnNlIG9uIHRoZW0sIGl0IHdpbGwgZHJvcCB0aGUgcmVtYWluaW5nIGNvdW50IHRvIDQuXHJcbiovXHJcblxyXG4gICAgYXN5bmMgYXBwbHlfZWZmZWN0cyhhY3Rpb24sIGFiaWxpdHksIGVmZmVjdCkge1xyXG4gICAgICAgIGxldCBlZmZlY3RfcmVzdWx0O1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWN0aW9uLnRhcmdldHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luZm8gPSBhY3Rpb24udGFyZ2V0c1tqXTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldF9pbmZvLm1hZ25pdHVkZSA9PT0gbnVsbCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbnN0YW5jZSA9IHRhcmdldF9pbmZvLnRhcmdldC5pbnN0YW5jZTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldF9pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBzd2l0Y2goZWZmZWN0LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBFUk1BTkVOVF9TVEFUVVM6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5hZGRfc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRfaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMoZWZmZWN0LnN0YXR1c19rZXlfbmFtZSkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0LnN0YXR1c19rZXlfbmFtZSA9PT0gcGVybWFuZW50X3N0YXR1cy5QT0lTT04gJiYgdGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuVkVOT00pKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuYWRkX3N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdnVsbmVyYWJpbGl0eSA9IF8uZmluZCh0YXJnZXRfaW5zdGFuY2UuY2xhc3MudnVsbmVyYWJpbGl0aWVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IGVmZmVjdC5zdGF0dXNfa2V5X25hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgPSB2dWxuZXJhYmlsaXR5ID09PSB1bmRlZmluZWQgPyAwIDogdnVsbmVyYWJpbGl0eS5jaGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IGRpbWluaXNoaW5nX3JhdGlvcy5TVEFUVVNbdGFyZ2V0X2luZm8ubWFnbml0dWRlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJhdHRsZUZvcm11bGFzLmFpbG1lbnRfc3VjY2VzcyhhY3Rpb24uY2FzdGVyLCB0YXJnZXRfaW5zdGFuY2UsIGVmZmVjdC5jaGFuY2UsIG1hZ25pdHVkZSwgYWJpbGl0eS5lbGVtZW50LCB2dWxuZXJhYmlsaXR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSB0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0X2luc3RhbmNlLmhhc190ZW1wb3Jhcnlfc3RhdHVzKHRoaXNfZWZmZWN0LnN0YXR1c19rZXlfbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGhpc19lZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19lZmZlY3Quc3RhdHVzX2tleV9uYW1lID09PSB0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFICYmIHRhcmdldF9pbnN0YW5jZS5oYXNfdGVtcG9yYXJ5X3N0YXR1cyh0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudCh0aGlzX2VmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnNldF9lZmZlY3RfdHVybnNfY291bnQodGhpc19lZmZlY3QsIHRoaXNfZWZmZWN0LnR1cm5fY291bnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXNfZWZmZWN0LnN0YXR1c19rZXlfbmFtZSA9PT0gcGVybWFuZW50X3N0YXR1cy5WRU5PTSAmJiB0YXJnZXRfaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5QT0lTT04pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pc29uX2VmZmVjdCA9IF8uZmluZCh0YXJnZXRfaW5zdGFuY2UuZWZmZWN0cywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IHBlcm1hbmVudF9zdGF0dXMuUE9JU09OXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnJlbW92ZV9lZmZlY3QocG9pc29uX2VmZmVjdCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKG9uX2NhdGNoX3N0YXR1c19tc2dbZWZmZWN0LnN0YXR1c19rZXlfbmFtZV0odGFyZ2V0X2luc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBCdXQgaXQgaGFzIG5vIGVmZmVjdCBvbiAke3RhcmdldF9pbnN0YW5jZS5uYW1lfSFgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgZWZmZWN0LmNoYW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSBfLmZpbmQodGFyZ2V0X2luc3RhbmNlLmVmZmVjdHMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzX2tleV9uYW1lOiBlZmZlY3Quc3RhdHVzX2tleV9uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNfZWZmZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5yZW1vdmVfZWZmZWN0KHRoaXNfZWZmZWN0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNfZWZmZWN0LnN0YXR1c19rZXlfbmFtZSA9PT0gcGVybWFuZW50X3N0YXR1cy5ET1dORUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5pbml0X2VmZmVjdF90dXJuc19jb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzID0gdGhpcy5vbl9nb2luZ19lZmZlY3RzLmZpbHRlcihlZmZlY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlZmZlY3QgIT09IHRoaXNfZWZmZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGRfcmVjb3Zlcl9lZmZlY3QoZWZmZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9IUDpcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfcmVzdWx0ID0gdGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X3Jlc3VsdC5lZmZlY3Quc2hvd19tc2cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlID0gZWZmZWN0X3Jlc3VsdC5jaGFuZ2VzLmJlZm9yZSAtIGVmZmVjdF9yZXN1bHQuY2hhbmdlcy5hZnRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXRfaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQodGFyZ2V0X2luc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X3Jlc3VsdC5lZmZlY3QudHVybnNfcXVhbnRpdHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaChlZmZlY3RfcmVzdWx0LmVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnJlbW92ZV9lZmZlY3QoZWZmZWN0X3Jlc3VsdC5lZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBPV0VSOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUkVTSVNUOlxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF9yZXN1bHQgPSB0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cy5wdXNoKGVmZmVjdF9yZXN1bHQuZWZmZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3RfcmVzdWx0LmVmZmVjdCwgZWZmZWN0X3Jlc3VsdC5lZmZlY3QudHVybl9jb3VudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RfcmVzdWx0LmVmZmVjdC5zaG93X21zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gZWZmZWN0X3Jlc3VsdC5jaGFuZ2VzLmFmdGVyIC0gZWZmZWN0X3Jlc3VsdC5jaGFuZ2VzLmJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGRpZmYgPj0gMCA/IFwicmlzZXNcIiA6IFwiZHJvcHNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRfaW5mbyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbZWZmZWN0X3R5cGVzLlBPV0VSLCBlZmZlY3RfdHlwZXMuUkVTSVNUXS5pbmNsdWRlcyhlZmZlY3QudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfaW5mbyA9IGVsZW1lbnRfbmFtZXNbZWZmZWN0X3Jlc3VsdC5lZmZlY3QuYXR0cmlidXRlXSArIFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7dGFyZ2V0X2luc3RhbmNlLm5hbWV9J3MgJHtlbGVtZW50X2luZm99JHtlZmZlY3RfbmFtZXNbZWZmZWN0LnR5cGVdfSAke3RleHR9IGJ5ICR7TWF0aC5hYnMoZGlmZil9IWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5FTkRfVEhFX1JPVU5EOlxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEV2ZXJ5Ym9keSBpcyByZXN0aW5nIWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5UVVJOUzpcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gcmVhZGllcyBmb3IgYWN0aW9uIWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKS5lZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREFNQUdFX01PRElGSUVSOlxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoZWZmZWN0X21zZ1tlZmZlY3QuZWZmZWN0X21zZ10odGFyZ2V0X2luc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaCh0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DT1VOVEVSX1NUUklLRTogYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5GTEVFOiBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKS5lZmZlY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBiYXR0bGVfcGhhc2Vfcm91bmRfZW5kKCkge1xyXG4gICAgICAgIGxldCBlZmZlY3RzX3RvX3JlbW92ZSA9IFtdO1xyXG4gICAgICAgIGxldCBlZmZlY3RfZ3JvdXBzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9uX2dvaW5nX2VmZmVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5vbl9nb2luZ19lZmZlY3RzW2ldO1xyXG4gICAgICAgICAgICBpZiAoZWZmZWN0LmNoYXIuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci5yZW1vdmVfZWZmZWN0KGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci51cGRhdGVfYWxsKCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RzX3RvX3JlbW92ZS5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGF2b2lkX21zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR1cm5fY291bnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfY291bnQoZWZmZWN0KSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVmZmVjdC5jaGFyLmtleV9uYW1lIGluIGVmZmVjdF9ncm91cHMpIHx8ICEoZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0KSBpbiBlZmZlY3RfZ3JvdXBzW2VmZmVjdC5jaGFyLmtleV9uYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIuc2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3QudHVybl9jb3VudCA9IGVmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfY291bnQoZWZmZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVmZmVjdF9ncm91cHNbZWZmZWN0LmNoYXIua2V5X25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdF9ncm91cHNbZWZmZWN0LmNoYXIua2V5X25hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2VmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfa2V5KGVmZmVjdCldOiBlZmZlY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RfZ3JvdXBzW2VmZmVjdC5jaGFyLmtleV9uYW1lXVtlZmZlY3QuY2hhci5nZXRfZWZmZWN0X3R1cm5zX2tleShlZmZlY3QpXSA9IGVmZmVjdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXZvaWRfbXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1lZmZlY3QudHVybl9jb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHVybl9jb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFyLnJlbW92ZV9lZmZlY3QoZWZmZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci51cGRhdGVfYWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0c190b19yZW1vdmUucHVzaChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWF2b2lkX21zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkX3JlY292ZXJfZWZmZWN0KGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGNoYXJfa2V5X25hbWUgaW4gZWZmZWN0X2dyb3Vwcykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlZmZlY3RfdHVybl9rZXkgaW4gZWZmZWN0X2dyb3Vwc1tjaGFyX2tleV9uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gZWZmZWN0X2dyb3Vwc1tjaGFyX2tleV9uYW1lXVtlZmZlY3RfdHVybl9rZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC50dXJuX2NvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZF9yZWNvdmVyX2VmZmVjdChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzID0gdGhpcy5vbl9nb2luZ19lZmZlY3RzLmZpbHRlcigoZWZmZWN0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gIWVmZmVjdHNfdG9fcmVtb3ZlLmluY2x1ZGVzKGluZGV4KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1BWF9DSEFSU19JTl9CQVRUTEU7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllcl9kamlubmkgPSBwbGF5ZXIuZGppbm5pO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBsYXllcl9kamlubmkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRqaW5uX2tleSA9IHBsYXllcl9kamlubmlbal07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2RqaW5uX2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGppbm4ucmVjb3ZlcnlfdHVybiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TRVQsIHBsYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7ZGppbm4ubmFtZX0gaXMgc2V0IHRvICR7cGxheWVyLm5hbWV9IWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpOyBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAtLWRqaW5uLnJlY292ZXJ5X3R1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb250cm9sc19lbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLk1FTlU7XHJcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcclxuICAgIH1cclxuXHJcbi8vIEV2ZXJ5b25lIGdldHMgZXF1YWwgZXhwZXJpZW5jZSB3aXRoIG5vIGRpdmlzaW9uLCBidXQ6XHJcbi8vIC0gQ2hhcmFjdGVycyB3aG8gZG8gbm90IHBhcnRpY2lwYXRlIGdldCBoYWxmO1xyXG4vLyAtIERvd25lZCBjaGFyYWN0ZXJzIGdldCBub25lLlxyXG5cclxuICAgIGFzeW5jIGJhdHRsZV9waGFzZV9lbmQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9uX2dvaW5nX2VmZmVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5vbl9nb2luZ19lZmZlY3RzW2ldO1xyXG4gICAgICAgICAgICBlZmZlY3QuY2hhci5yZW1vdmVfZWZmZWN0KGVmZmVjdCk7XHJcbiAgICAgICAgICAgIGVmZmVjdC5jaGFyLnVwZGF0ZV9hbGwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYWxsaWVzX2RlZmVhdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQodGhpcy5hbGxpZXNfaW5mb1swXS5pbnN0YW5jZS5uYW1lICsgXCInIHBhcnR5IGhhcyBiZWVuIGRlZmVhdGVkIVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKHRoaXMuZW5lbWllc19wYXJ0eV9kYXRhLm5hbWUgKyBcIiBoYXMgYmVlbiBkZWZlYXRlZCFcIik7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsX2V4cCA9IHRoaXMuZW5lbWllc19pbmZvLm1hcChpbmZvID0+IGluZm8uaW5zdGFuY2UuZXhwX3Jld2FyZCkucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYFlvdSBnb3QgJHt0b3RhbF9leHAudG9TdHJpbmcoKX0gZXhwZXJpZW5jZSBwb2ludHMuYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxpZXNfaW5mby5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMuYWxsaWVzX2luZm9baV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFyID0gaW5mby5pbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmICghY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBjaGFyLmFkZF9leHAoaW5mby5lbnRlcmVkX2luX2JhdHRsZSA/IHRvdGFsX2V4cCA6IHRvdGFsX2V4cCA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLmJlZm9yZS5sZXZlbCAhPT0gY2hhbmdlLmFmdGVyLmxldmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7Y2hhci5uYW1lfSBpcyBub3cgYSBsZXZlbCAke2NoYXIubGV2ZWx9ICR7Y2hhci5jbGFzcy5uYW1lfSFgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2FpbmVkX2FiaWxpdGllcyA9IF8uZGlmZmVyZW5jZShjaGFuZ2UuYWZ0ZXIuYWJpbGl0aWVzLCBjaGFuZ2UuYmVmb3JlLmFiaWxpdGllcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2dhaW5lZF9hYmlsaXRpZXNbal1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgTWFzdGVyZWQgdGhlICR7Y2hhci5jbGFzcy5uYW1lfSdzICR7YWJpbGl0eS5uYW1lfSFgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFuZ2UuYmVmb3JlLnN0YXRzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ID0gT2JqZWN0LmtleXMoY2hhbmdlLmJlZm9yZS5zdGF0c1tqXSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gY2hhbmdlLmFmdGVyLnN0YXRzW2pdW3N0YXRdIC0gY2hhbmdlLmJlZm9yZS5zdGF0c1tqXVtzdGF0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXRfdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1heF9ocFwiOiBzdGF0X3RleHQgPSBcIk1heGltdW0gSFBcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhfcHBcIjogc3RhdF90ZXh0ID0gXCJNYXhpbXVtIFBQXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXRrXCI6IHN0YXRfdGV4dCA9IFwiQXR0YWNrXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVmXCI6IHN0YXRfdGV4dCA9IFwiRGVmZW5zZVwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFnaVwiOiBzdGF0X3RleHQgPSBcIkFnaWxpdHlcIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsdWtcIjogc3RhdF90ZXh0ID0gXCJMdWNrXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke3N0YXRfdGV4dH0gcmlzZXMgYnkgJHtkaWZmLnRvU3RyaW5nKCl9IWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdG90YWxfY29pbnMgPSB0aGlzLmVuZW1pZXNfaW5mby5tYXAoaW5mbyA9PiBpbmZvLmluc3RhbmNlLmNvaW5zX3Jld2FyZCkucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYFlvdSBnb3QgJHt0b3RhbF9jb2lucy50b1N0cmluZygpfSBjb2lucy5gKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVuZW1pZXNfaW5mby5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZW5lbXkgPSB0aGlzLmVuZW1pZXNfaW5mb1tpXS5pbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmVteS5pdGVtX3Jld2FyZCAmJiBNYXRoLnJhbmRvbSgpIDwgZW5lbXkuaXRlbV9yZXdhcmRfY2hhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VuZW15Lml0ZW1fcmV3YXJkXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYFlvdSBnb3QgYSAke2l0ZW0ubmFtZX0uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHtlbmVteS5pdGVtX3Jld2FyZH0gbm90IHJlZ2lzdGVyZWQuLi5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51bnNldF9iYXR0bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB1bnNldF9iYXR0bGUoKSB7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVfZmluaXNoaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS51bnNldF9zdGFnZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX21lbnUuZGVzdHJveV9tZW51KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldF93aW5kb3cuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyLmRlc3Ryb3koKTtcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5pbl9iYXR0bGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmJhdHRsZV9pbnN0YW5jZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmJhdHRsZV9maW5pc2hpbmcpIHJldHVybjtcclxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS51cGRhdGVfc3RhZ2UoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyLnJlbmRlcigpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhdHRsZSB9IGZyb20gXCIuLi9iYXR0bGUvQmF0dGxlLmpzXCI7XHJcbmltcG9ydCB7IEdhbWVFdmVudCwgZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi9HYW1lRXZlbnQuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXR0bGVFdmVudCBleHRlbmRzIEdhbWVFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBiYWNrZ3JvdW5kX2tleSwgZW5lbXlfcGFydHlfa2V5KSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuQkFUVExFKTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRfa2V5ID0gYmFja2dyb3VuZF9rZXk7XHJcbiAgICAgICAgdGhpcy5lbmVteV9wYXJ0eV9rZXkgPSBlbmVteV9wYXJ0eV9rZXk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlyZSgpIHtcclxuICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGUgPSBuZXcgQmF0dGxlKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmJhY2tncm91bmRfa2V5LCB0aGlzLmVuZW15X3BhcnR5X2tleSk7XHJcbiAgICAgICAgdGhpcy5iYXR0bGUuc3RhcnRfYmF0dGxlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTcHJpdGVCYXNlIH0gZnJvbSAnLi9TcHJpdGVCYXNlLmpzJztcclxuaW1wb3J0IHsgZXZlbnRfdHlwZXMgYXMgZ2FtZV9ldmVudF90eXBlcyB9IGZyb20gXCIuL2dhbWVfZXZlbnRzL0dhbWVFdmVudC5qc1wiO1xyXG5pbXBvcnQgeyBtb3VudF9jb2xsaXNpb25fcG9seWdvbiB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBDb250cm9sbGFibGVDaGFyIH0gZnJvbSAnLi9Db250cm9sbGFibGVDaGFyLmpzJztcclxuaW1wb3J0IHsgQmF0dGxlRXZlbnQgfSBmcm9tICcuL2dhbWVfZXZlbnRzL0JhdHRsZUV2ZW50LmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBOUENfU3ByaXRlIGV4dGVuZHMgU3ByaXRlQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvciAoa2V5X25hbWUsIGFjdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihrZXlfbmFtZSwgYWN0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IE5QQ19UQUxLX1JBTkdFID0gMy4wO1xyXG5cclxuZXhwb3J0IGNvbnN0IG5wY19tb3ZlbWVudF90eXBlcyA9IHtcclxuICAgIElETEU6IFwiaWRsZVwiLFxyXG4gICAgV0FMS19BUk9VTkQ6IFwid2Fsa19hcm91bmRcIlxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG5wY190eXBlcyA9IHtcclxuICAgIE5PUk1BTDogXCJub3JtYWxcIixcclxuICAgIElOTjogXCJpbm5cIixcclxuICAgIFdFQVBPTl9TSE9QOiBcIndlYXBvbl9zaG9wXCIsXHJcbiAgICBBUk1PUl9TSE9QOiBcImFybW9yX3Nob3BcIixcclxuICAgIE1FRElDSU5FX1NIT1A6IFwibWVkaWNpbmVfc2hvcFwiXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgTlBDIGV4dGVuZHMgQ29udHJvbGxhYmxlQ2hhciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBnYW1lLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAga2V5X25hbWUsXHJcbiAgICAgICAgaW5pdGlhbF94LFxyXG4gICAgICAgIGluaXRpYWxfeSxcclxuICAgICAgICBpbml0aWFsX2FjdGlvbixcclxuICAgICAgICBpbml0aWFsX2RpcmVjdGlvbixcclxuICAgICAgICBlbmFibGVfZm9vdHN0ZXBzLFxyXG4gICAgICAgIG5wY190eXBlLFxyXG4gICAgICAgIG1vdmVtZW50X3R5cGUsXHJcbiAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICB0aG91Z2h0X21lc3NhZ2UsXHJcbiAgICAgICAgYXZhdGFyLFxyXG4gICAgICAgIGJhc2VfY29sbGlkZXJfbGF5ZXIsXHJcbiAgICAgICAgdGFsa19yYW5nZV9mYWN0b3IsXHJcbiAgICAgICAgZXZlbnRzX2luZm9cclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGtleV9uYW1lLCBpbml0aWFsX3gsIGluaXRpYWxfeSwgaW5pdGlhbF9hY3Rpb24sIGluaXRpYWxfZGlyZWN0aW9uLCBlbmFibGVfZm9vdHN0ZXBzKTtcclxuICAgICAgICB0aGlzLm5wY190eXBlID0gbnBjX3R5cGU7XHJcbiAgICAgICAgdGhpcy5tb3ZlbWVudF90eXBlID0gbW92ZW1lbnRfdHlwZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMudGhvdWdodF9tZXNzYWdlID0gdGhvdWdodF9tZXNzYWdlO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyID0gYXZhdGFyO1xyXG4gICAgICAgIHRoaXMuYmFzZV9jb2xsaWRlcl9sYXllciA9IGJhc2VfY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy50YWxrX3JhbmdlX2ZhY3RvciA9IHRhbGtfcmFuZ2VfZmFjdG9yID09PSB1bmRlZmluZWQgPyBOUENfVEFMS19SQU5HRSA6IHRhbGtfcmFuZ2VfZmFjdG9yO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XHJcbiAgICAgICAgdGhpcy5zZXRfZXZlbnRzKGV2ZW50c19pbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfc3ByaXRlX2FzX25wYygpIHtcclxuICAgICAgICB0aGlzLnNwcml0ZS5pc19ucGMgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9ldmVudHMoZXZlbnRzX2luZm8pIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50c19pbmZvLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50X2luZm8gPSBldmVudHNfaW5mb1tpXTtcclxuICAgICAgICAgICAgc3dpdGNoIChldmVudF9pbmZvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZ2FtZV9ldmVudF90eXBlcy5CQVRUTEU6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHMucHVzaChuZXcgQmF0dGxlRXZlbnQodGhpcy5nYW1lLCB0aGlzLmRhdGEsIGV2ZW50X2luZm8uYmFja2dyb3VuZF9rZXksIGV2ZW50X2luZm8uZW5lbXlfcGFydHlfa2V5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdmVtZW50X3R5cGUgPT09IG5wY19tb3ZlbWVudF90eXBlcy5JRExFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jaGFyKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVfc2hhZG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iaikge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xyXG4gICAgICAgIC8vSW1wb3J0YW50IHRvIGJlIGFmdGVyIHRoZSBwcmV2aW91cyBjb21tYW5kXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMubnBjX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl94ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0X2FuY2hvcigneCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3kgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3IueSA9IHRoaXMuZGF0YS5kYnMubnBjX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl95O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKCd5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcclxuICAgICAgICB0aGlzLmJvZHlfcmFkaXVzID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmJvZHlfcmFkaXVzIDw8IDE7XHJcbiAgICAgICAgY29uc3QgcG9seWdvbiA9IG1vdW50X2NvbGxpc2lvbl9wb2x5Z29uKHdpZHRoLCAtKHdpZHRoID4+IDEpLCB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5jb2xsaXNpb25fYm9keV9iZXZlbCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hZGRQb2x5Z29uKHtcclxuICAgICAgICAgICAgICAgIG9wdGltYWxEZWNvbXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2tpcFNpbXBsZUNoZWNrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ29sbGluZWFyUG9pbnRzOiBmYWxzZVxyXG4gICAgICAgIH0sIHBvbHlnb24pO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5ucGNfY29sbGlzaW9uX2dyb3Vwc1t0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXJdKTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmRhbXBpbmcgPSAxO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAxO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5maXhlZFJvdGF0aW9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnN0YXRpYyA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZWxlbWVudHMgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDbGFzc2VzIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGtleV9uYW1lLFxyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgcmVxdWlyZWRfdmVudXNfbGV2ZWwsXHJcbiAgICAgICAgcmVxdWlyZWRfbWVyY3VyeV9sZXZlbCxcclxuICAgICAgICByZXF1aXJlZF9tYXJzX2xldmVsLFxyXG4gICAgICAgIHJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWwsXHJcbiAgICAgICAgaHBfYm9vc3QsXHJcbiAgICAgICAgcHBfYm9vc3QsXHJcbiAgICAgICAgYXRrX2Jvb3N0LFxyXG4gICAgICAgIGRlZl9ib29zdCxcclxuICAgICAgICBhZ2lfYm9vc3QsXHJcbiAgICAgICAgbHVrX2Jvb3N0LFxyXG4gICAgICAgIGFiaWxpdHlfbGV2ZWxfcGFpcnMsXHJcbiAgICAgICAgY2xhc3NfdHlwZSxcclxuICAgICAgICB2dWxuZXJhYmlsaXRpZXNcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZWRfdmVudXNfbGV2ZWwgPSByZXF1aXJlZF92ZW51c19sZXZlbDtcclxuICAgICAgICB0aGlzLnJlcXVpcmVkX21lcmN1cnlfbGV2ZWwgPSByZXF1aXJlZF9tZXJjdXJ5X2xldmVsO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZWRfbWFyc19sZXZlbCA9IHJlcXVpcmVkX21hcnNfbGV2ZWw7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsID0gcmVxdWlyZWRfanVwaXRlcl9sZXZlbDtcclxuICAgICAgICB0aGlzLmhwX2Jvb3N0ID0gaHBfYm9vc3Q7XHJcbiAgICAgICAgdGhpcy5wcF9ib29zdCA9IHBwX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuYXRrX2Jvb3N0ID0gYXRrX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuZGVmX2Jvb3N0ID0gZGVmX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuYWdpX2Jvb3N0ID0gYWdpX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMubHVrX2Jvb3N0ID0gbHVrX2Jvb3N0O1xyXG4gICAgICAgIHRoaXMuYWJpbGl0eV9sZXZlbF9wYWlycyA9IGFiaWxpdHlfbGV2ZWxfcGFpcnM7XHJcbiAgICAgICAgdGhpcy5jbGFzc190eXBlID0gY2xhc3NfdHlwZTtcclxuICAgICAgICB0aGlzLnZ1bG5lcmFiaWxpdGllcyA9IHZ1bG5lcmFiaWxpdGllcyA9PT0gdW5kZWZpbmVkID8gW10gOiB2dWxuZXJhYmlsaXRpZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2VfcmlnaHRfY2xhc3MoY2xhc3Nlc19saXN0LCBjbGFzc190YWJsZSwgZWxlbWVudF9hZmluaXR5LCB2ZW51c19sdmwsIG1lcmN1cnlfbHZsLCBtYXJzX2x2bCwganVwaXRlcl9sdmwpIHtcclxuICAgIGxldCBzZWNvbmRhcnlfZWxlbWVudHMgPSBbXHJcbiAgICAgICAgLi4uZWxlbWVudF9hZmluaXR5ICE9PSBlbGVtZW50cy5WRU5VUyA/IFt7ZWxlbWVudDogZWxlbWVudHMuVkVOVVMsIGxldmVsOiB2ZW51c19sdmx9XSA6IFtdLFxyXG4gICAgICAgIC4uLmVsZW1lbnRfYWZpbml0eSAhPT0gZWxlbWVudHMuTUVSQ1VSWSA/IFt7ZWxlbWVudDogZWxlbWVudHMuTUVSQ1VSWSwgbGV2ZWw6IG1lcmN1cnlfbHZsfV0gOiBbXSxcclxuICAgICAgICAuLi5lbGVtZW50X2FmaW5pdHkgIT09IGVsZW1lbnRzLk1BUlMgPyBbe2VsZW1lbnQ6IGVsZW1lbnRzLk1BUlMsIGxldmVsOiBtYXJzX2x2bH1dIDogW10sXHJcbiAgICAgICAgLi4uZWxlbWVudF9hZmluaXR5ICE9PSBlbGVtZW50cy5KVVBJVEVSID8gW3tlbGVtZW50OiBlbGVtZW50cy5KVVBJVEVSLCBsZXZlbDoganVwaXRlcl9sdmx9XSA6IFtdXHJcbiAgICBdO1xyXG4gICAgY29uc3Qgbm9fc2Vjb25kYXJ5ID0gc2Vjb25kYXJ5X2VsZW1lbnRzLmV2ZXJ5KGVsZW1lbnQgPT4gZWxlbWVudC5sZXZlbCA9PT0gMCk7XHJcbiAgICBsZXQgc2Vjb25kYXJ5X2FmaW5pdHk7XHJcbiAgICBpZiAobm9fc2Vjb25kYXJ5KSB7XHJcbiAgICAgICAgc2Vjb25kYXJ5X2FmaW5pdHkgPSBlbGVtZW50X2FmaW5pdHk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlY29uZGFyeV9hZmluaXR5ID0gXy5tYXhCeShzZWNvbmRhcnlfZWxlbWVudHMsIGVsZW1lbnQgPT4gZWxlbWVudC5sZXZlbCkuZWxlbWVudDtcclxuICAgIH1cclxuICAgIGNvbnN0IGNsYXNzX3R5cGUgPSBjbGFzc190YWJsZVtlbGVtZW50X2FmaW5pdHldW3NlY29uZGFyeV9hZmluaXR5XTtcclxuICAgIGxldCBjbGFzc2VzID0gT2JqZWN0LnZhbHVlcyhjbGFzc2VzX2xpc3QpLmZpbHRlcih0aGlzX2NsYXNzID0+IHRoaXNfY2xhc3MuY2xhc3NfdHlwZSA9PT0gY2xhc3NfdHlwZSk7XHJcbiAgICBjbGFzc2VzID0gY2xhc3Nlcy5maWx0ZXIodGhpc19jbGFzcyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNfY2xhc3MucmVxdWlyZWRfdmVudXNfbGV2ZWwgPD0gdmVudXNfbHZsICYmXHJcbiAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9tZXJjdXJ5X2xldmVsIDw9IG1lcmN1cnlfbHZsICYmXHJcbiAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9tYXJzX2xldmVsIDw9IG1hcnNfbHZsICYmXHJcbiAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsIDw9IGp1cGl0ZXJfbHZsO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gXy5zb3J0QnkoY2xhc3NlcywgW3RoaXNfY2xhc3MgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzX2NsYXNzLnJlcXVpcmVkX3ZlbnVzX2xldmVsICsgdGhpc19jbGFzcy5yZXF1aXJlZF9tZXJjdXJ5X2xldmVsICsgdGhpc19jbGFzcy5yZXF1aXJlZF9tYXJzX2xldmVsICsgdGhpc19jbGFzcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsO1xyXG4gICAgfV0pLnJldmVyc2UoKVswXTtcclxufVxyXG4iLCJpbXBvcnQgeyBnZXRfdGV4dF93aWR0aCB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93LmpzJztcclxuXHJcbmNvbnN0IEZPUldBUkQgPSAxO1xyXG5jb25zdCBCQUNLV0FSRCA9IC0xO1xyXG5jb25zdCBCVVRUT05fV0lEVEggPSAyNDtcclxuY29uc3QgQlVUVE9OX0hFSUdIVCA9IDI0O1xyXG5jb25zdCBCVVRUT05fWSA9IG51bWJlcnMuR0FNRV9IRUlHSFQgLSBCVVRUT05fSEVJR0hUO1xyXG5jb25zdCBUSVRMRV9XSU5ET1dfSEVJR0hUID0gQlVUVE9OX0hFSUdIVCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEg7XHJcblxyXG4vKkEgaG9yaXpvbnRhbCBtZW51XHJcblVzZWQgaW4gQmF0dGxlIE1lbnVzIGFuZCB0aGUgZmllbGQgTWVudVxyXG5cclxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxyXG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZVxyXG4gICAgICAgYnV0dG9ucyBbYXJyYXldIC0gVGhlIGJ1dHRvbiBrZXlzIChhcnJheSBvZiBzdHJpbmcpXHJcbiAgICAgICB0aXRsZXMgW2FycmF5XSAtIFRoZSBuYW1lcyBvZiB0aGUgYnV0dG9ucyAoYXJyYXkgb2Ygc3RyaW5nKVxyXG4gICAgICAgb25fY2hvb3NlIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBleGVjdXRlZCBvbiBcIkNob29zZVwiIG9wdGlvblxyXG4gICAgICAgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgW251bWJlcl0gLSBDb3VudHMgcGFyZW50LWNoaWxkIHN0YXR1cyBmb3IgRW50ZXIga2V5IChDaG9vc2UvU2VsZWN0KVxyXG4gICAgICAgb25fY2FuY2VsIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBleGVjdXRlZCBvbiBcIkNhbmNlbFwiIG9wdGlvblxyXG4gICAgICAgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IFtudW1iZXJdIC0gQ291bnRzIHBhcmVudC1jaGlsZCBzdGF0dXMgZm9yIEVTQyBrZXkgKENhbmNlbC9CYWNrKVxyXG4gICAgICAgdGl0bGVfd2luZG93X3dpZHRoIFtudW1iZXJdIC0gVGhlIHdpZHRoIG9mIHRoZSB0aXRsZSB3aW5kb3dcclxuICAgICAgIGRvY2tfcmlnaHQgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgcGxhY2VzIHRoZSBtZW51IG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSBzY3JlZW4qL1xyXG5leHBvcnQgY2xhc3MgSG9yaXpvbnRhbE1lbnUge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgYnV0dG9ucywgdGl0bGVzLCBvbl9jaG9vc2UsIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBvbl9jYW5jZWwsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGl0bGVfd2luZG93X3dpZHRoLCBkb2NrX3JpZ2h0ID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5idXR0b25zX2tleXMgPSBidXR0b25zO1xyXG4gICAgICAgIHRoaXMudGl0bGVzID0gdGl0bGVzO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uc19udW1iZXIgPSBidXR0b25zLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgY29uc3QgbWF4X3RpdGxlX3dpZHRoID0gZ2V0X3RleHRfd2lkdGgodGhpcy5nYW1lLCBfLm1heEJ5KHRpdGxlcywgdGl0bGUgPT4gdGl0bGUubGVuZ3RoKSk7XHJcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3dfd2lkdGggPSB0aXRsZV93aW5kb3dfd2lkdGggIT09IHVuZGVmaW5lZCA/IHRpdGxlX3dpbmRvd193aWR0aCA6IG1heF90aXRsZV93aWR0aCArIDIgKiAobnVtYmVycy5XSU5ET1dfUEFERElOR19IICsgbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIKTtcclxuICAgICAgICBjb25zdCB0b3RhbF93aWR0aCA9IEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIgKyB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCArIDIgKiBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIICsgMjtcclxuICAgICAgICB0aGlzLmRvY2tfcmlnaHQgPSBkb2NrX3JpZ2h0O1xyXG4gICAgICAgIHRoaXMueCA9IG51bWJlcnMuR0FNRV9XSURUSCAtIHRvdGFsX3dpZHRoO1xyXG4gICAgICAgIGlmICghdGhpcy5kb2NrX3JpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueCA+PiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnkgPSBCVVRUT05fWTtcclxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLnggKyBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyLCB0aGlzLnksIHRoaXMudGl0bGVfd2luZG93X3dpZHRoLCBUSVRMRV9XSU5ET1dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLm1vdW50X2J1dHRvbnMoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ncm91cC53aWR0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX3R3ZWVuID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9uX2Nob29zZSA9IG9uX2Nob29zZSA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jaG9vc2U7XHJcbiAgICAgICAgdGhpcy5vbl9jYW5jZWwgPSBvbl9jYW5jZWwgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2FuY2VsO1xyXG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypNYW5hZ2VzIGludGVyYWN0aW9uIHdpdGggdGhlIHBhcmVudCBtZW51XHJcbiAgICBQYXNzZXMgY29udHJvbCBvdmVyIHRvIHRoZSBDaG9vc2UvQ2FuY2VsIGZ1bmN0aW9uc1xyXG4gICAgTWFuYWdlcyB0aGUgTGVmdC9SaWdodCBpbnRlcmFjdGlvbiB3aXRoaW4gdGhlIG1lbnUqL1xyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWVudV9vcGVuIHx8ICF0aGlzLm1lbnVfYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UodGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2NhbmNlbCgpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tZW51X29wZW4gfHwgIXRoaXMubWVudV9hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRfcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoRk9SV0FSRCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSB8fCAhdGhpcy5yaWdodF9wcmVzc2VkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRfcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoQkFDS1dBUkQpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTEVGVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSB8fCAhdGhpcy5sZWZ0X3ByZXNzZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNyZWF0ZXMgdGhlIHNwcml0ZXMgZm9yIHRoZSBidXR0b25zXHJcblxyXG4gICAgSW5wdXQ6IGZpbHRlcmVkX2J1dHRvbnMgW2FycmF5XSAtIEJ1dHRvbnMgdG8gbW91bnQqL1xyXG4gICAgbW91bnRfYnV0dG9ucyhmaWx0ZXJlZF9idXR0b25zID0gW10pIHtcclxuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5idXR0b25zX2tleXMuZmlsdGVyKGtleSA9PiAhZmlsdGVyZWRfYnV0dG9ucy5pbmNsdWRlcyhrZXkpKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnNfbnVtYmVyID0gYnV0dG9ucy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgdG90YWxfd2lkdGggPSBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyICsgdGhpcy50aXRsZV93aW5kb3dfd2lkdGggKyAyICogbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSCArIDI7XHJcbiAgICAgICAgdGhpcy54ID0gbnVtYmVycy5HQU1FX1dJRFRIIC0gdG90YWxfd2lkdGg7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRvY2tfcmlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy54ID4+IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogdGhpcy54ICsgQlVUVE9OX1dJRFRIICogdGhpcy5idXR0b25zX251bWJlcn0pO1xyXG4gICAgICAgIGlmICh0aGlzLmJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2gob2JqID0+IHtcclxuICAgICAgICAgICAgICAgIG9iai5zcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idXR0b25zID0gbmV3IEFycmF5KHRoaXMuYnV0dG9uc19udW1iZXIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXR0b25zX251bWJlcjsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1tpXSA9IHtcclxuICAgICAgICAgICAgICAgIHNwcml0ZTogdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgXCJidXR0b25zXCIsIGJ1dHRvbnNbaV0pLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGVzW2ldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLnNwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAxKTtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLnNwcml0ZS5jZW50ZXJYID0gcGFyc2VJbnQoQlVUVE9OX1dJRFRIICogKGkgKyAwLjUpKTtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLnNwcml0ZS5jZW50ZXJZID0gcGFyc2VJbnQoQlVUVE9OX0hFSUdIVCAqIDAuNSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB0aGUgdGltZXIgdG8gdHJpZ2dlciBhbm90aGVyIG1lbnUgYnV0dG9uIGNoYW5nZVxyXG4gICAgSWYgdGhlIGlucHV0IGtleSBpcyBoZWxkIGRvd24sIG11bHRpcGxlIGJ1dHRvbiBjaGFuZ2VzIHdpbGwgb2NjdXJcclxuXHJcbiAgICBzdGVwPTEsIHNlbGVjdCB0aGUgbmV4dCBidXR0b24gKHJpZ2h0KVxyXG4gICAgc3RlcD0tMSwgc2VsZWN0IHRoZSBwcmV2aW91cyBidXR0b24gKGxlZnQpXHJcbiAgICBUaGlzIHNlbGVjdGlvbiB3aWxsIGxvb3Agb3ZlciBpZiBuZWNlc3NhcnlcclxuXHJcbiAgICBJbnB1dDogc3RlcCBbbnVtYmVyXSAtIFRoZSBzdGVwIGluY3JlYXNlL2RlY3JlYXNlKi9cclxuICAgIHNldF9jaGFuZ2VfdGltZXJzKHN0ZXApIHtcclxuICAgICAgICB0aGlzLmNoYW5nZV9idXR0b24oc3RlcCk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuYWRkKFBoYXNlci5UaW1lci5RVUFSVEVSLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5sb29wKFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDEsIHRoaXMuY2hhbmdlX2J1dHRvbi5iaW5kKHRoaXMsIHN0ZXApKTtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0YXJ0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlN0b3BzIHRoZSBidXR0b24gY2hhbmdlIHRpbWVycyovXHJcbiAgICBzdG9wX3RpbWVycygpIHtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKk1vdmVzIHRoZSBidXR0b24gc2VsZWN0aW9uIGJ5IGEgZ2l2ZW4gdmFsdWVcclxuICAgIFxyXG4gICAgc3RlcD0xLCBzZWxlY3QgdGhlIG5leHQgYnV0dG9uIChyaWdodClcclxuICAgIHN0ZXA9LTEsIHNlbGVjdCB0aGUgcHJldmlvdXMgYnV0dG9uIChsZWZ0KVxyXG4gICAgVGhpcyBzZWxlY3Rpb24gd2lsbCBsb29wIG92ZXIgaWYgbmVjZXNzYXJ5XHJcblxyXG4gICAgSW5wdXQ6IHN0ZXAgW251bWJlcl0gLSBUaGUgc3RlcCBpbmNyZWFzZS9kZWNyZWFzZSovXHJcbiAgICBjaGFuZ2VfYnV0dG9uKHN0ZXApIHtcclxuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ICsgc3RlcCkgJSB0aGlzLmJ1dHRvbnNfbnVtYmVyO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSB0aGlzLmJ1dHRvbnNfbnVtYmVyIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xyXG4gICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmVzZXRzIHRoZSBjdXJyZW50IGJ1dHRvbiBhbmQgc2V0cyB0aGUgbmV3IGJ1dHRvblxyXG4gICAgVXBkYXRlcyB0aGUgdGV4dCBvbiB0aGUgdGl0bGUgd2luZG93XHJcblxyXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gVGhlIG5ldyBidXR0b24ncyBpbmRleCovXHJcbiAgICBzZXRfdG9fcG9zaXRpb24oaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xyXG4gICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2NhbGVzIHRoZSBidXR0b24gdXAgYW5kIGFkZHMgYSBncmFkdWFsIGZsaWNrZXIgZWZmZWN0XHJcbiAgICBQbGFjZXMgdGhlIGJ1dHRvbiBvbiB0b3Agb2YgdGhlIHJlbWFpbmluZywgbGF5ZXItd2lzZSovXHJcbiAgICBzZXRfYnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLnNjYWxlLnNldFRvKDEuMiwgMS4yKTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnNwcml0ZS5icmluZ1RvVG9wKCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLnNjYWxlKS50byhcclxuICAgICAgICAgICAgeyB4OiAxLjMsIHk6IDEuMyB9LFxyXG4gICAgICAgICAgICBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLFxyXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAtMSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLypTY2FsZXMgdGhlIGJ1dHRvbiB0byBpdHMgb3JpZ2luYWwgc2l6ZVxyXG4gICAgRGlzYWJsZXMgdGhlIGZsaWNrZXIgZWZmZWN0Ki9cclxuICAgIHJlc2V0X2J1dHRvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnNwcml0ZS5zY2FsZS5zZXRUbygxLjAsIDEuMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2Vlbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2Vlbi5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qVXBkYXRlcyB0aGUgbWVudSdzIHBvc2l0aW9uKi9cclxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xyXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnVwZGF0ZSh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKk9wZW5zIHRoaXMgd2luZG93XHJcbiAgICBJbnB1dDogY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbClcclxuICAgICAgICAgICBzZWxlY3RfaW5kZXggW251bWJlcl0gLSBEZWZhdWx0IHNlbGVjdGVkIGJ1dHRvbiBpbmRleFxyXG4gICAgICAgICAgIHN0YXJ0X2FjdGl2ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzZXRzIHRoaXMgd2luZG93IHRvIFwiYWN0aXZlXCIgbW9kZSovXHJcbiAgICBvcGVuKGNhbGxiYWNrLCBzZWxlY3RfaW5kZXgsIHN0YXJ0X2FjdGl2ZSA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xyXG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZW51X2FjdGl2ZSA9IHN0YXJ0X2FjdGl2ZTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHNlbGVjdF9pbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IHNlbGVjdF9pbmRleDtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNldF90ZXh0KFtbdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS50aXRsZV1dKTtcclxuICAgICAgICBsZXQgd2luZG93X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBsZXQgd2luZG93X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgd2luZG93X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7IH0pXHJcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2hvdyh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICBsZXQgYnV0dG9uc19yZXNvbHZlO1xyXG4gICAgICAgIGxldCBidXR0b25zX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgYnV0dG9uc19yZXNvbHZlID0gcmVzb2x2ZTsgfSlcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZ3JvdXApLnRvKFxyXG4gICAgICAgICAgICB7IHdpZHRoOiBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyLCBoZWlnaHQ6IEJVVFRPTl9IRUlHSFQgfSxcclxuICAgICAgICAgICAgUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMixcclxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKGJ1dHRvbnNfcmVzb2x2ZSk7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwoW3dpbmRvd19wcm9taXNlLCBidXR0b25zX3Byb21pc2VdKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudV9vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhpcyB3aW5kb3dcclxuICAgIFxyXG4gICAgSW5wdXQ6IGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpXHJcbiAgICAgICAgICAgYW5pbWF0ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCB3aWxsIHBsYXkgYW4gYW5pbWF0aW9uIHdoaWxlIGNsb3NpbmcqL1xyXG4gICAgY2xvc2UoY2FsbGJhY2ssIGFuaW1hdGUgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24oKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICBsZXQgd2luZG93X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHdpbmRvd19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlOyB9KVxyXG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5jbG9zZSh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNpdGlvbl90aW1lID0gUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMjtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbnNfcmVzb2x2ZTtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBidXR0b25zX3Jlc29sdmUgPSByZXNvbHZlOyB9KVxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZ3JvdXApLnRvKFxyXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX3RpbWUsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZShidXR0b25zX3Jlc29sdmUpO1xyXG4gICAgICAgICAgICBQcm9taXNlLmFsbChbd2luZG93X3Byb21pc2UsIGJ1dHRvbnNfcHJvbWlzZV0pLnRoZW4oY2FsbGJhY2sgIT09IHVuZGVmaW5lZCA/IGNhbGxiYWNrIDogKCkgPT4ge30pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGl0bGVfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypFbmFibGVzIHRoZSBcImFjdGl2ZVwiIHN0YXRlIGZvciB0aGlzIHdpbmRvdyovXHJcbiAgICBhY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKG9iaiA9PiB7XHJcbiAgICAgICAgICAgIG9iai5zcHJpdGUuYWxwaGEgPSAxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghdGhpcy50aXRsZV93aW5kb3cub3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zZXRfdGV4dChbW3RoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0udGl0bGVdXSk7XHJcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypEaXNhYmxlcyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSBmb3IgdGhpcyB3aW5kb3dcclxuICAgIFxyXG4gICAgSW5wdXQ6IGhpZGUgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgaGlkZXMgdGhlIGJ1dHRvbnMqL1xyXG4gICAgZGVhY3RpdmF0ZShoaWRlID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKCk7XHJcbiAgICAgICAgaWYgKGhpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2gob2JqID0+IHtcclxuICAgICAgICAgICAgICAgIG9iai5zcHJpdGUuYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qRGVzdHJveXMgdGhpcyBtZW51IGFuZCBpdHMgY29tcG9uZW50cyovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xyXG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAgXCIuLi9tYWdpY19udW1iZXJzLmpzXCI7XHJcbmltcG9ydCB7IFRpbGVFdmVudCwgZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi4vdGlsZV9ldmVudHMvVGlsZUV2ZW50LmpzXCI7XHJcbmltcG9ydCB7IGdldF9zdXJyb3VuZGluZ3MsIGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24sIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucywgYmFzZV9hY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7IEp1bXBFdmVudCB9IGZyb20gXCIuLi90aWxlX2V2ZW50cy9KdW1wRXZlbnQuanNcIjtcclxuXHJcbmNvbnN0IERVU1RfQ09VTlQgPSA3O1xyXG5jb25zdCBEVVNUX1JBRElVUyA9IDE4O1xyXG5jb25zdCBQVVNIX1NISUZUID0gMTY7XHJcbmNvbnN0IERVU1RfS0VZID0gXCJkdXN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsX3B1c2goZ2FtZSwgZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCkge1xyXG4gICAgaWYgKGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaCAmJiBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdLmluY2x1ZGVzKGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pICYmIGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPT09IGRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiAmJiAhZGF0YS5oZXJvLmNhc3RpbmdfcHN5bmVyZ3kgJiYgIWRhdGEuaGVyby5qdW1waW5nICYmICFkYXRhLmluX2JhdHRsZSkge1xyXG4gICAgICAgIGZpcmVfcHVzaF9tb3ZlbWVudChnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0KTtcclxuICAgIH1cclxuICAgIGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaCA9IGZhbHNlO1xyXG4gICAgZGF0YS5oZXJvLnB1c2hfdGltZXIgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0X29ubHlfcHVzaChnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBiZWZvcmVfbW92ZSwgcHVzaF9lbmQsIGVuYWJsZV9waHlzaWNzX2F0X2VuZCA9IHRydWUsIG9uX3B1c2hfdXBkYXRlID0gdW5kZWZpbmVkKSB7XHJcbiAgICBmaXJlX3B1c2hfbW92ZW1lbnQoZ2FtZSwgZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgcHVzaF9lbmQsIGJlZm9yZV9tb3ZlLCB0cnVlLCBlbmFibGVfcGh5c2ljc19hdF9lbmQsIG9uX3B1c2hfdXBkYXRlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpcmVfcHVzaF9tb3ZlbWVudChnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBwdXNoX2VuZCwgYmVmb3JlX21vdmUsIHRhcmdldF9vbmx5ID0gZmFsc2UsIGVuYWJsZV9waHlzaWNzX2F0X2VuZCA9IHRydWUsIG9uX3B1c2hfdXBkYXRlID0gdW5kZWZpbmVkKSB7XHJcbiAgICBsZXQgZXhwZWN0ZWRfcG9zaXRpb247XHJcbiAgICBpZiAoIXRhcmdldF9vbmx5KSB7XHJcbiAgICAgICAgbGV0IHBvc2l0aXZlX2xpbWl0ID0gZGF0YS5oZXJvLnNwcml0ZS54ICsgKC1pbnRlcmFjdGFibGVfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLnkgLSBpbnRlcmFjdGFibGVfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLngpO1xyXG4gICAgICAgIGxldCBuZWdhdGl2ZV9saW1pdCA9IC1kYXRhLmhlcm8uc3ByaXRlLnggKyAoLWludGVyYWN0YWJsZV9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUueSArIGludGVyYWN0YWJsZV9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUueCk7XHJcbiAgICAgICAgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA+PSBuZWdhdGl2ZV9saW1pdCkge1xyXG4gICAgICAgICAgICBleHBlY3RlZF9wb3NpdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcclxuICAgICAgICB9IGVsc2UgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA+PSBuZWdhdGl2ZV9saW1pdCkge1xyXG4gICAgICAgICAgICBleHBlY3RlZF9wb3NpdGlvbiA9IGRpcmVjdGlvbnMubGVmdDtcclxuICAgICAgICB9IGVsc2UgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA8PSBuZWdhdGl2ZV9saW1pdCkge1xyXG4gICAgICAgICAgICBleHBlY3RlZF9wb3NpdGlvbiA9IGRpcmVjdGlvbnMudXA7XHJcbiAgICAgICAgfSBlbHNlIGlmICgtZGF0YS5oZXJvLnNwcml0ZS55ID49IHBvc2l0aXZlX2xpbWl0ICYmIC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gbmVnYXRpdmVfbGltaXQpIHtcclxuICAgICAgICAgICAgZXhwZWN0ZWRfcG9zaXRpb24gPSBkaXJlY3Rpb25zLnJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0YXJnZXRfb25seSB8fCBleHBlY3RlZF9wb3NpdGlvbiA9PT0gZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbikge1xyXG4gICAgICAgIGlmICghdGFyZ2V0X29ubHkpIHtcclxuICAgICAgICAgICAgZGF0YS5oZXJvLnB1c2hpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBkYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuUFVTSDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XHJcbiAgICAgICAgbGV0IHR3ZWVuX3ggPSAwLCB0d2Vlbl95ID0gMDtcclxuICAgICAgICBsZXQgZXZlbnRfc2hpZnRfeCA9IDAsIGV2ZW50X3NoaWZ0X3kgPSAwO1xyXG4gICAgICAgIHN3aXRjaCAoZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XHJcbiAgICAgICAgICAgICAgICBldmVudF9zaGlmdF95ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB0d2Vlbl95ID0gLVBVU0hfU0hJRlQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XHJcbiAgICAgICAgICAgICAgICBldmVudF9zaGlmdF95ID0gMTtcclxuICAgICAgICAgICAgICAgIHR3ZWVuX3kgPSBQVVNIX1NISUZUO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxyXG4gICAgICAgICAgICAgICAgZXZlbnRfc2hpZnRfeCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5feCA9IC1QVVNIX1NISUZUO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcclxuICAgICAgICAgICAgICAgIGV2ZW50X3NoaWZ0X3ggPSAxO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5feCA9IFBVU0hfU0hJRlQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgc2hpZnRfZXZlbnRzKGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIGV2ZW50X3NoaWZ0X3gsIGV2ZW50X3NoaWZ0X3kpO1xyXG4gICAgICAgIGxldCBzcHJpdGVzID0gW2ludGVyYWN0YWJsZV9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keV07XHJcbiAgICAgICAgaWYgKCF0YXJnZXRfb25seSkge1xyXG4gICAgICAgICAgICBzcHJpdGVzLnB1c2goLi4uW2RhdGEuaGVyby5zaGFkb3csIGRhdGEuaGVyby5zcHJpdGUuYm9keV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcmV2X3ggPSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeDtcclxuICAgICAgICBjb25zdCBwcmV2X3kgPSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeTtcclxuICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCArPSBldmVudF9zaGlmdF94O1xyXG4gICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICs9IGV2ZW50X3NoaWZ0X3k7XHJcbiAgICAgICAgbGV0IHByb21pc2VzID0gW107XHJcbiAgICAgICAgaWYgKGJlZm9yZV9tb3ZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgYmVmb3JlX21vdmUodHdlZW5feCwgdHdlZW5feSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrKSB7XHJcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2sueCArPSB0d2Vlbl94O1xyXG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrLnkgKz0gdHdlZW5feTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBib2R5ID0gc3ByaXRlc1tpXTtcclxuICAgICAgICAgICAgbGV0IGRlc3RfeCA9IGJvZHkueCArIHR3ZWVuX3g7XHJcbiAgICAgICAgICAgIGxldCBkZXN0X3kgPSBib2R5LnkgKyB0d2Vlbl95O1xyXG4gICAgICAgICAgICBpZiAoYm9keSA9PT0gZGF0YS5oZXJvLnNoYWRvdyB8fCBib2R5ID09PSBkYXRhLmhlcm8uc3ByaXRlLmJvZHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0d2Vlbl94ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzdF94ID0gZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCAqIChwcmV2X3ggKyBldmVudF9zaGlmdF94ICsgMC41KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHdlZW5feSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc3RfeSA9IGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICogKHByZXZfeSArIGV2ZW50X3NoaWZ0X3kgKyAwLjUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBwcm9taXNlX3Jlc29sdmU7XHJcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7IH0pKVxyXG4gICAgICAgICAgICBjb25zdCB0aGlzX3R3ZWVuID0gZ2FtZS5hZGQudHdlZW4oYm9keSkudG8oe1xyXG4gICAgICAgICAgICAgICAgeDogZGVzdF94LFxyXG4gICAgICAgICAgICAgICAgeTogZGVzdF95XHJcbiAgICAgICAgICAgIH0sIG51bWJlcnMuUFVTSF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKG9uX3B1c2hfdXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzX3R3ZWVuLm9uVXBkYXRlQ2FsbGJhY2sob25fcHVzaF91cGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXNfdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkcm9wX2ZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3ByaXRlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5vYmplY3RfZHJvcF90aWxlcy5mb3JFYWNoKGRyb3BfdGlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcm9wX3RpbGUueCA9PT0gaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggJiYgZHJvcF90aWxlLnkgPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wX2ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RfeV9zaGlmdF9weCA9IChkcm9wX3RpbGUuZGVzdF95IC0gaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdF9ldmVudHMoZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgMCwgZHJvcF90aWxlLmRlc3RfeSAtIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ID0gZHJvcF90aWxlLmRlc3RfeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY2hhbmdlX2NvbGxpZGVyX2xheWVyKGRhdGEsIGRyb3BfdGlsZS5kZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmFkZC50d2VlbihpbnRlcmFjdGFibGVfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkpLnRvKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpbnRlcmFjdGFibGVfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkueSArIGRlc3RfeV9zaGlmdF9weFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BfdGlsZS5hbmltYXRpb25fZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5JbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcF90aWxlLmR1c3RfYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5JRExFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmhlcm8ucGxheShkYXRhLmhlcm8uY3VycmVudF9hY3Rpb24sIHJldmVyc2VfZGlyZWN0aW9uc1tkYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb25dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVzdF9hbmltYXRpb24oZ2FtZSwgZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFkcm9wX2ZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZV9yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGEuaGVyby5wdXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChlbmFibGVfcGh5c2ljc19hdF9lbmQpIHtcclxuICAgICAgICAgICAgICAgIGdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHVzaF9lbmQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcHVzaF9lbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaGlmdF9ldmVudHMoZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgZXZlbnRfc2hpZnRfeCwgZXZlbnRfc2hpZnRfeSkge1xyXG4gICAgbGV0IG9iamVjdF9ldmVudHMgPSBpbnRlcmFjdGFibGVfb2JqZWN0LmdldF9ldmVudHMoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0X2V2ZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGxldCBldmVudCA9IG9iamVjdF9ldmVudHNbaV07XHJcbiAgICAgICAgZGF0YS5tYXAuZXZlbnRzW2V2ZW50LmxvY2F0aW9uX2tleV0gPSBkYXRhLm1hcC5ldmVudHNbZXZlbnQubG9jYXRpb25fa2V5XS5maWx0ZXIoZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlLmlkICE9PSBldmVudC5pZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZGF0YS5tYXAuZXZlbnRzW2V2ZW50LmxvY2F0aW9uX2tleV0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhLm1hcC5ldmVudHNbZXZlbnQubG9jYXRpb25fa2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG9sZF94ID0gZXZlbnQueDtcclxuICAgICAgICBsZXQgb2xkX3kgPSBldmVudC55O1xyXG4gICAgICAgIGxldCBuZXdfeCA9IG9sZF94ICsgZXZlbnRfc2hpZnRfeDtcclxuICAgICAgICBsZXQgbmV3X3kgPSBvbGRfeSArIGV2ZW50X3NoaWZ0X3k7XHJcbiAgICAgICAgY29uc3QgbmV3X2V2ZW50X2xvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KG5ld194LCBuZXdfeSk7XHJcbiAgICAgICAgZXZlbnQueCA9IG5ld194O1xyXG4gICAgICAgIGV2ZW50LnkgPSBuZXdfeTtcclxuICAgICAgICBldmVudC5sb2NhdGlvbl9rZXkgPSBuZXdfZXZlbnRfbG9jYXRpb25fa2V5O1xyXG4gICAgICAgIGlmICghKG5ld19ldmVudF9sb2NhdGlvbl9rZXkgaW4gZGF0YS5tYXAuZXZlbnRzKSkge1xyXG4gICAgICAgICAgICBkYXRhLm1hcC5ldmVudHNbbmV3X2V2ZW50X2xvY2F0aW9uX2tleV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YS5tYXAuZXZlbnRzW25ld19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2goZXZlbnQpO1xyXG4gICAgICAgIGNvbnN0IG5ld19zdXJyb3VuZGluZ3MgPSBnZXRfc3Vycm91bmRpbmdzKG5ld194LCBuZXdfeSwgZmFsc2UsIDIpO1xyXG4gICAgICAgIEp1bXBFdmVudC5hY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoZGF0YSwgbmV3X3N1cnJvdW5kaW5ncywgaW50ZXJhY3RhYmxlX29iamVjdC5jb2xsaWRlcl9sYXllcl9zaGlmdCArIGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaWRlcl9sYXllcik7XHJcbiAgICAgICAgY29uc3Qgb2xkX3N1cnJvdW5kaW5ncyA9IGdldF9zdXJyb3VuZGluZ3Mob2xkX3gsIG9sZF95LCBmYWxzZSwgMik7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvbGRfc3Vycm91bmRpbmdzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZF9zdXJyb3VuZGluZyA9IG9sZF9zdXJyb3VuZGluZ3Nbal07XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZF9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShvbGRfc3Vycm91bmRpbmcueCwgb2xkX3N1cnJvdW5kaW5nLnkpO1xyXG4gICAgICAgICAgICBpZiAob2xkX2tleSBpbiBkYXRhLm1hcC5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YS5tYXAuZXZlbnRzW29sZF9rZXldLmxlbmd0aDsgKytrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkX3N1cnJfZXZlbnQgPSBkYXRhLm1hcC5ldmVudHNbb2xkX2tleV1ba107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZF9zdXJyX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID0gaW50ZXJhY3RhYmxlX29iamVjdC5jb2xsaWRlcl9sYXllcl9zaGlmdCArIGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaWRlcl9sYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZF9zdXJyX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0YXJnZXRfbGF5ZXIpICYmIG9sZF9zdXJyX2V2ZW50LmR5bmFtaWMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRfc3Vycl9ldmVudC5kZWFjdGl2YXRlX2F0KGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24ob2xkX3N1cnJvdW5kaW5nLmRpcmVjdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkdXN0X2FuaW1hdGlvbihnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBwcm9taXNlX3Jlc29sdmUpIHtcclxuICAgIGxldCBwcm9taXNlcyA9IG5ldyBBcnJheShEVVNUX0NPVU5UKTtcclxuICAgIGxldCBzcHJpdGVzID0gbmV3IEFycmF5KERVU1RfQ09VTlQpO1xyXG4gICAgY29uc3Qgb3JpZ2luX3ggPSAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggKyAwLjUpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcclxuICAgIGNvbnN0IG9yaWdpbl95ID0gKGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICsgMC41KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xyXG4gICAgY29uc3QgZHVzdF9zcHJpdGVfYmFzZSA9IGRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbRFVTVF9LRVldO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBEVVNUX0NPVU5UOyArK2kpIHtcclxuICAgICAgICBjb25zdCB0aGlzX2FuZ2xlID0gKE1hdGguUEkgKyBudW1iZXJzLmRlZ3JlZTYwKSAqIGkvKERVU1RfQ09VTlQgLSAxKSAtIG51bWJlcnMuZGVncmVlMzA7XHJcbiAgICAgICAgY29uc3QgeCA9IG9yaWdpbl94ICsgRFVTVF9SQURJVVMgKiBNYXRoLmNvcyh0aGlzX2FuZ2xlKTtcclxuICAgICAgICBjb25zdCB5ID0gb3JpZ2luX3kgKyBEVVNUX1JBRElVUyAqIE1hdGguc2luKHRoaXNfYW5nbGUpO1xyXG4gICAgICAgIGxldCBkdXN0X3Nwcml0ZSA9IGRhdGEubnBjX2dyb3VwLmNyZWF0ZShvcmlnaW5feCwgb3JpZ2luX3ksIERVU1RfS0VZKTtcclxuICAgICAgICBpZiAodGhpc19hbmdsZSA8IDAgfHwgdGhpc19hbmdsZSA+IE1hdGguUEkpIHtcclxuICAgICAgICAgICAgZGF0YS5ucGNfZ3JvdXAuc2V0Q2hpbGRJbmRleChkdXN0X3Nwcml0ZSwgZGF0YS5ucGNfZ3JvdXAuZ2V0Q2hpbGRJbmRleChpbnRlcmFjdGFibGVfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGR1c3Rfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICAgICAgZ2FtZS5hZGQudHdlZW4oZHVzdF9zcHJpdGUpLnRvKHtcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeVxyXG4gICAgICAgIH0sIDQwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuSW4sIHRydWUpO1xyXG4gICAgICAgIHNwcml0ZXNbaV0gPSBkdXN0X3Nwcml0ZTtcclxuICAgICAgICBkdXN0X3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbihkdXN0X3Nwcml0ZSwgRFVTVF9LRVkpO1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSBkdXN0X3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShEVVNUX0tFWSwgXCJzcHJlYWRcIik7XHJcbiAgICAgICAgbGV0IHJlc29sdmVfZnVuYztcclxuICAgICAgICBwcm9taXNlc1tpXSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZXNvbHZlX2Z1bmMgPSByZXNvbHZlOyB9KTtcclxuICAgICAgICBkdXN0X3Nwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fa2V5KS5vbkNvbXBsZXRlLmFkZE9uY2UocmVzb2x2ZV9mdW5jKTtcclxuICAgICAgICBkdXN0X3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uX2tleSk7XHJcbiAgICB9XHJcbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGEubnBjX2dyb3VwLnJlbW92ZShzcHJpdGUsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByb21pc2VfcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93LmpzJztcclxuaW1wb3J0IHsgZ2V0X3RleHRfd2lkdGgsIG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IERqaW5uIH0gZnJvbSAnLi4vRGppbm4uanMnO1xyXG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gJy4uL01haW5DaGFyLmpzJztcclxuXHJcbmNvbnN0IFdJRFRIX1BFUl9DSEFSID0gNDY7XHJcbmNvbnN0IFNUQVRVU19XSU5fSEVJR0hUID0gMzU7XHJcbmNvbnN0IFNUQVRVU19XSU5fSEVJR0hUX0NPTVBBQ1QgPSAyNDtcclxuY29uc3QgU1RBVFVTX0JBUl9XSURUSCA9IDQzO1xyXG5jb25zdCBTVEFUVVNfQkFSX0hFSUdIVCA9IDM7XHJcbmNvbnN0IFNUQVRVU19CQVJfQ09MT1JfR09PRCA9IG51bWJlcnMuQkxVRV9GT05UX0NPTE9SO1xyXG5jb25zdCBTVEFUVVNfQkFSX0NPTE9SX0JBRCA9IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1I7XHJcbmNvbnN0IE1BWF9DSEFSU19OVU1CRVIgPSA0O1xyXG5jb25zdCBTVEFUX1ggPSA0MDtcclxuY29uc3QgTkFNRV9ZID0gODtcclxuY29uc3QgTkFNRV9ZX0NPTVBBQ1QgPSAwO1xyXG5jb25zdCBJTklUSUFMX1BBRERJTkdfWCA9IDg7XHJcbmNvbnN0IERKSU5OX0lORk9fV0lEVEggPSAzNjtcclxuY29uc3QgU1RBUlNfWCA9IFswLCAxNl07XHJcbmNvbnN0IFNUQVJTX1kgPSBbMSwgOV07XHJcbmNvbnN0IFNUQU5EQllfQ09VTlRfWCA9IFsyMCwgMzZdO1xyXG5jb25zdCBTVEFOREJZX0NPVU5UX1NISUZUX1kgPSBbOCwgMTZdO1xyXG5jb25zdCBTRVBBUkFUT1JfV0lEVEggPSAzO1xyXG5jb25zdCBJTklUSUFMX1BBRERJTkdfX0RKSU5OSV9YID0gNztcclxuXHJcbi8qQSB3aW5kb3cgZGlzcGxheWluZyB0aGUgY2hhcmFjdGVyJ3MgbmFtZSBhbmQgSFAvUFBcclxuVGhlIG5vcm1hbCB2ZXJzaW9uIGlzIHVzZWQgaW4gdGhlIGZpZWxkIG1lbnVcclxuVGhlIGNvbXBhY3RlZCB2ZXJzaW9uIGFuZCBEamlubiBpbmZvcm1hdGlvbiBhcmUgZGlzcGxheWVkIGluIGJhdHRsZVxyXG5cclxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxyXG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZVxyXG4gICAgICAgZGppbm5faW5mbyBbYm9vbGVhbl0gLSBJZiB0cnVlLCB3aWxsIGRpc3BsYXkgRGppbm4gb24gc3RhbmRieVxyXG4gICAgICAgY29tcGFjdCBbYm9vbGVhbl0gLSBJZiB0cnVlLCBkaXNwbGF5cyB0aGUgY29tcGFjdGVkIHZlcnNpb24qL1xyXG5leHBvcnQgY2xhc3MgQ2hhcnNTdGF0dXNXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZGppbm5pX2luZm8gPSBmYWxzZSwgY29tcGFjdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZGppbm5pX2luZm8gPSBkamlubmlfaW5mbztcclxuICAgICAgICB0aGlzLmNvbXBhY3QgPSBjb21wYWN0O1xyXG4gICAgICAgIHRoaXMubmFtZV95ID0gTkFNRV9ZO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBhY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lX3kgPSBOQU1FX1lfQ09NUEFDVDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luX2hlaWdodCA9IFNUQVRVU19XSU5fSEVJR0hUO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBhY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luX2hlaWdodCA9IFNUQVRVU19XSU5fSEVJR0hUX0NPTVBBQ1Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNoYXJzX251bWJlciA9IF8uY2xhbXAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCwgTUFYX0NIQVJTX05VTUJFUik7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luX3dpZHRoID0gY2hhcnNfbnVtYmVyICogKFdJRFRIX1BFUl9DSEFSICsgU1RBVFVTX0JBUl9IRUlHSFQpICsgKElOSVRJQUxfUEFERElOR19YID4+IDEpO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbl94ID0gbnVtYmVycy5HQU1FX1dJRFRIIC0gdGhpcy5zdGF0dXNfd2luX3dpZHRoIC0gbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIIC0gbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSDtcclxuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5zdGF0dXNfd2luX3gsIDAsIHRoaXMuc3RhdHVzX3dpbl93aWR0aCwgdGhpcy5zdGF0dXNfd2luX2hlaWdodCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzX2hlYWRlcl93aWR0aCA9IGdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgXCJIUCBcIik7XHJcbiAgICAgICAgdGhpcy5pbmZvX3Nwcml0ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLnNldF9jaGFyc19pbmZvKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGppbm5pX2luZm8pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFuZGJ5X2NvdW50X3RleHQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBpJTIsIHkgPSArKGk+MSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwLmNyZWF0ZShTVEFSU19YW3hdLCBTVEFSU19ZW3ldLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhbmRieV9jb3VudF90ZXh0W2VsZW1lbnRdID0gdGhpcy5zdGF0dXNfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFNUQU5EQllfQ09VTlRfWFt4XSwgdGhpcy5uYW1lX3kgKyBTVEFOREJZX0NPVU5UX1NISUZUX1lbeV0sIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuc3RhcnNfZ3JvdXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKlVwZGF0ZXMgdGhlIHdpbmRvdydzIHBvc2l0aW9uXHJcblxyXG4gICAgSW5wdXQ6IGZvcmNlIFtib29sZWFuXSA9IElmIHRydWUsIGZvcmNlcyBhbiB1cGRhdGUqL1xyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKGZvcmNlID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlKGZvcmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdGhlIGNoYXJhY3RlcnMnIGluZm9ybWF0aW9uIGFuZCBjcmVhdGVzIHRoZSBncmFwaGljc1xyXG4gICAgUmVtb3ZlcyBzcHJpdGVzIGZyb20gdGhlIFdpbmRvdyBncm91cCBhbmQgZ2l2ZXMgdGhlbSB0byB0aGUgaW50ZXJuYWwgZ3JvdXAqL1xyXG4gICAgc2V0X2NoYXJzX2luZm8oKSB7XHJcbiAgICAgICAgY29uc3QgY2hhcnNfbGlzdCA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5zbGljZSgwLCBNQVhfQ0hBUlNfTlVNQkVSKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzX2xpc3QubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGluZm9fc3ByaXRlc19vYmogPSB7fTtcclxuICAgICAgICAgICAgY29uc3QgY2hhciA9IGNoYXJzX2xpc3RbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeF9wb3MgPSAgaSAqIChXSURUSF9QRVJfQ0hBUiArIFNFUEFSQVRPUl9XSURUSCkgKyBJTklUSUFMX1BBRERJTkdfWDtcclxuICAgICAgICAgICAgY29uc3QgZ3JvdXBfa2V5ID0gY2hhci5rZXlfbmFtZSArIFwiX3N0YXR1c1wiO1xyXG5cclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ncm91cCA9IHRoaXMuc3RhdHVzX3dpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoZ3JvdXBfa2V5KTtcclxuXHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoubmFtZSA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihjaGFyLm5hbWUsIGJhc2VfeF9wb3MsIHRoaXMubmFtZV95LCBmYWxzZSwgZmFsc2UsIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLCB0aGlzLmNvbXBhY3QsIGdyb3VwX2tleSk7XHJcbiAgICAgICAgICAgIGxldCB5X3BvcyA9IHRoaXMubmFtZV95ICsgbnVtYmVycy5GT05UX1NJWkU7XHJcblxyXG4gICAgICAgICAgICBsZXQgeV9wb3NfYmFyID0geV9wb3MgKyBudW1iZXJzLkZPTlRfU0laRSAtIFNUQVRVU19CQVJfSEVJR0hUO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoYmFzZV94X3BvcywgeV9wb3NfYmFyKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ocF9iYXJfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfR09PRCwgMSk7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHBfYmFyX2dyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIFNUQVRVU19CQVJfV0lEVEgsIFNUQVRVU19CQVJfSEVJR0hUKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ocF9iYXJfZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcyk7XHJcblxyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZGVmYXVsdF95ID0geV9wb3NfYmFyO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MpO1xyXG5cclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ocF9oZWFkZXIgPSB0aGlzLnN0YXR1c193aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJIUFwiLCBiYXNlX3hfcG9zLCB5X3BvcywgZmFsc2UsIGZhbHNlLCB0aGlzLnN0YXR1c193aW5kb3cuZm9udF9jb2xvciwgZmFsc2UsIGdyb3VwX2tleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHhfbnVtYmVyX3BvcyA9IGJhc2VfeF9wb3MgKyBTVEFUX1g7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHAgPSB0aGlzLnN0YXR1c193aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oY2hhci5jdXJyZW50X2hwLnRvU3RyaW5nKCksIHhfbnVtYmVyX3BvcywgeV9wb3MsIHRydWUsIGZhbHNlLCB0aGlzLnN0YXR1c193aW5kb3cuZm9udF9jb2xvciwgZmFsc2UsIGdyb3VwX2tleSk7XHJcblxyXG4gICAgICAgICAgICB5X3BvcyA9IHRoaXMubmFtZV95ICsgMiAqIG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgICAgICB5X3Bvc19iYXIgPSB5X3BvcyArIG51bWJlcnMuRk9OVF9TSVpFIC0gU1RBVFVTX0JBUl9IRUlHSFQ7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyhiYXNlX3hfcG9zLCB5X3Bvc19iYXIpO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9ncmFwaGljcy5iZWdpbkZpbGwoU1RBVFVTX0JBUl9DT0xPUl9HT09ELCAxKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZ3JhcGhpY3MuZHJhd1JlY3QoMCwgMCwgU1RBVFVTX0JBUl9XSURUSCwgU1RBVFVTX0JBUl9IRUlHSFQpO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9ncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouZ3JvdXAuYWRkKGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzKTtcclxuXHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2RhbWFnZV9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kZWZhdWx0X3kgPSB5X3Bvc19iYXI7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouZ3JvdXAuYWRkKGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2RhbWFnZV9ncmFwaGljcyk7XHJcblxyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2hlYWRlciA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIGJhc2VfeF9wb3MsIHlfcG9zLCBmYWxzZSwgZmFsc2UsIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLCBmYWxzZSwgZ3JvdXBfa2V5KTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcCA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihjaGFyLmN1cnJlbnRfcHAudG9TdHJpbmcoKSwgeF9udW1iZXJfcG9zLCB5X3BvcywgdHJ1ZSwgZmFsc2UsIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLCBmYWxzZSwgZ3JvdXBfa2V5KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5mb19zcHJpdGVzW2NoYXIua2V5X25hbWVdID0gaW5mb19zcHJpdGVzX29iajtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBkaXNwbGF5ZWQqL1xyXG4gICAgdXBkYXRlX2NoYXJzX2luZm8oKSB7XHJcbiAgICAgICAgbGV0IHNob3dfZGppbm5faW5mbyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmRqaW5uaV9pbmZvKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhbmRieV9kamlubmkgPSBEamlubi5nZXRfc3RhbmRieV9kamlubmkodGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3QsIE1haW5DaGFyLmdldF9hY3RpdmVfcGxheWVycyh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLCBNQVhfQ0hBUlNfTlVNQkVSKSk7XHJcbiAgICAgICAgICAgIHNob3dfZGppbm5faW5mbyA9IF8uc29tZSh0aGlzLnN0YW5kYnlfZGppbm5pLCBCb29sZWFuKTtcclxuICAgICAgICAgICAgaWYgKHNob3dfZGppbm5faW5mbykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwLnggPSBJTklUSUFMX1BBRERJTkdfX0RKSU5OSV9YO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC55ID0gdGhpcy5uYW1lX3kgKyBudW1iZXJzLkZPTlRfU0laRTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBlbGVtZW50IGluIHRoaXMuc3RhbmRieV9kamlubmkgPyB0aGlzLnN0YW5kYnlfZGppbm5pW2VsZW1lbnRdLnRvU3RyaW5nKCkgOiBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQodGV4dCwgdGhpcy5zdGFuZGJ5X2NvdW50X3RleHRbZWxlbWVudF0sIHVuZGVmaW5lZCwgdGhpcy5uYW1lX3kgKyBTVEFOREJZX0NPVU5UX1NISUZUX1lbKyhpPjEpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5zdGFuZGJ5X2NvdW50X3RleHRbZWxlbWVudF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC5hbHBoYSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2hhcnNfbnVtYmVyID0gXy5jbGFtcCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoLCBNQVhfQ0hBUlNfTlVNQkVSKTtcclxuICAgICAgICB0aGlzLnN0YXR1c193aW5fd2lkdGggPSBjaGFyc19udW1iZXIgKiAoV0lEVEhfUEVSX0NIQVIgKyBTRVBBUkFUT1JfV0lEVEgpICsgKElOSVRJQUxfUEFERElOR19YID4+IDEpICsgKHNob3dfZGppbm5faW5mbyA/IERKSU5OX0lORk9fV0lEVEggOiAwKTtcclxuICAgICAgICB0aGlzLnN0YXR1c193aW5feCA9IG51bWJlcnMuR0FNRV9XSURUSCAtIHRoaXMuc3RhdHVzX3dpbl93aWR0aCAtIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEg7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV9zaXplKHt3aWR0aDogdGhpcy5zdGF0dXNfd2luX3dpZHRofSk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogdGhpcy5zdGF0dXNfd2luX3h9KTtcclxuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xyXG4gICAgICAgIGxldCBjdXJyZW50X2NoYXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyc19udW1iZXI7ICsraSkge1xyXG4gICAgICAgICAgICBsZXQgY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcclxuICAgICAgICAgICAgY3VycmVudF9jaGFycy5wdXNoKGNoYXIua2V5X25hbWUpO1xyXG4gICAgICAgICAgICBsZXQgaW5mb19zcHJpdGUgPSB0aGlzLmluZm9fc3ByaXRlc1tjaGFyLmtleV9uYW1lXTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGUuZ3JvdXAudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeF9wb3MgPSAgaSAqIChXSURUSF9QRVJfQ0hBUiArIFNFUEFSQVRPUl9XSURUSCkgKyBJTklUSUFMX1BBRERJTkdfWCArIChzaG93X2RqaW5uX2luZm8gPyBESklOTl9JTkZPX1dJRFRIIDogMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLm5hbWUsIGluZm9fc3ByaXRlLm5hbWUsIGJhc2VfeF9wb3MpO1xyXG4gICAgICAgICAgICBjb25zdCB4X251bWJlcl9wb3MgPSBiYXNlX3hfcG9zICsgU1RBVF9YO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQoY2hhci5jdXJyZW50X2hwLCBpbmZvX3Nwcml0ZS5ocCwgeF9udW1iZXJfcG9zKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0KGNoYXIuY3VycmVudF9wcCwgaW5mb19zcHJpdGUucHAsIHhfbnVtYmVyX3Bvcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IGJhc2VfeF9wb3N9LCBpbmZvX3Nwcml0ZS5ocF9oZWFkZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IGJhc2VfeF9wb3N9LCBpbmZvX3Nwcml0ZS5wcF9oZWFkZXIpO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5ocF9iYXJfZ3JhcGhpY3MueCA9IGJhc2VfeF9wb3M7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9ncmFwaGljcy54ID0gYmFzZV94X3BvcztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhwX2RhbWFnZV9iYXJfd2lkdGggPSBwYXJzZUludChTVEFUVVNfQkFSX1dJRFRIICogKDEgLSBjaGFyLmN1cnJlbnRfaHAvY2hhci5tYXhfaHApKTtcclxuICAgICAgICAgICAgY29uc3QgaHBfZGFtYWdlX2Jhcl94ID0gYmFzZV94X3BvcyArIFNUQVRVU19CQVJfV0lEVEggLSBocF9kYW1hZ2VfYmFyX3dpZHRoO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5ocF9iYXJfZGFtYWdlX2dyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfQkFELCAxKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kcmF3UmVjdChocF9kYW1hZ2VfYmFyX3gsIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZGVmYXVsdF95LCBocF9kYW1hZ2VfYmFyX3dpZHRoLCBTVEFUVVNfQkFSX0hFSUdIVCk7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHBfZGFtYWdlX2Jhcl93aWR0aCA9IHBhcnNlSW50KFNUQVRVU19CQVJfV0lEVEggKiAoMSAtIGNoYXIuY3VycmVudF9wcC9jaGFyLm1heF9wcCkpO1xyXG4gICAgICAgICAgICBjb25zdCBwcF9kYW1hZ2VfYmFyX3ggPSBiYXNlX3hfcG9zICsgU1RBVFVTX0JBUl9XSURUSCAtIHBwX2RhbWFnZV9iYXJfd2lkdGg7XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGUucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5iZWdpbkZpbGwoU1RBVFVTX0JBUl9DT0xPUl9CQUQsIDEpO1xyXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzLmRyYXdSZWN0KHBwX2RhbWFnZV9iYXJfeCwgaW5mb19zcHJpdGUucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kZWZhdWx0X3ksIHBwX2RhbWFnZV9iYXJfd2lkdGgsIFNUQVRVU19CQVJfSEVJR0hUKTtcclxuICAgICAgICAgICAgaW5mb19zcHJpdGUucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5lbmRGaWxsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSAhPT0gMCB8fCBzaG93X2RqaW5uX2luZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5kcmF3X3NlcGFyYXRvcihiYXNlX3hfcG9zIC0gNCwgMywgYmFzZV94X3BvcyAtIDQsIHRoaXMuc3RhdHVzX3dpbl9oZWlnaHQgLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBrZXlfbmFtZSBpbiB0aGlzLmluZm9fc3ByaXRlcykge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudF9jaGFycy5pbmNsdWRlcyhrZXlfbmFtZSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBsZXQgaW5mb19zcHJpdGUgPSB0aGlzLmluZm9fc3ByaXRlc1trZXlfbmFtZV07XHJcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmdyb3VwLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypEaXNwbGF5cyB0aGlzIHdpbmRvdyovXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhpcyB3aW5kb3cqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypEZXN0cm95cyB0aGlzIHdpbmRvdyovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tIFwiLi9TcHJpdGVCYXNlLmpzXCI7XHJcbmltcG9ydCB7IFBsYXllciwgZmlnaHRlcl90eXBlcyB9IGZyb20gXCIuL1BsYXllci5qc1wiO1xyXG5pbXBvcnQgeyBvcmRlcmVkX2VsZW1lbnRzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFbmVteSBleHRlbmRzIFBsYXllciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbmVteV9kYXRhLCBuYW1lKSB7XHJcbiAgICAgICAgc3VwZXIoZW5lbXlfZGF0YS5rZXlfbmFtZSwgbmFtZSA/IG5hbWUgOiBlbmVteV9kYXRhLm5hbWUpO1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSBlbmVteV9kYXRhLmxldmVsO1xyXG4gICAgICAgIHRoaXMudHVybnMgPSBlbmVteV9kYXRhLnR1cm5zO1xyXG4gICAgICAgIHRoaXMubWF4X2hwID0gZW5lbXlfZGF0YS5tYXhfaHA7XHJcbiAgICAgICAgdGhpcy5tYXhfcHAgPSBlbmVteV9kYXRhLm1heF9wcDtcclxuICAgICAgICB0aGlzLmhwX3JlY292ZXJ5ID0gZW5lbXlfZGF0YS5ocF9yZWNvdmVyeTtcclxuICAgICAgICB0aGlzLnBwX3JlY292ZXJ5ID0gZW5lbXlfZGF0YS5wcF9yZWNvdmVyeTtcclxuICAgICAgICB0aGlzLmF0ayA9IGVuZW15X2RhdGEuYXRrO1xyXG4gICAgICAgIHRoaXMuZGVmID0gZW5lbXlfZGF0YS5kZWY7XHJcbiAgICAgICAgdGhpcy5hZ2kgPSBlbmVteV9kYXRhLmFnaTtcclxuICAgICAgICB0aGlzLmx1ayA9IGVuZW15X2RhdGEubHVrO1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBlbmVteV9kYXRhLml0ZW1zO1xyXG4gICAgICAgIHRoaXMuYWJpbGl0aWVzID0gZW5lbXlfZGF0YS5hYmlsaXRpZXM7XHJcbiAgICAgICAgdGhpcy5jb2luc19yZXdhcmQgPSBlbmVteV9kYXRhLmNvaW5zX3Jld2FyZDtcclxuICAgICAgICB0aGlzLml0ZW1fcmV3YXJkID0gZW5lbXlfZGF0YS5pdGVtX3Jld2FyZDtcclxuICAgICAgICB0aGlzLml0ZW1fcmV3YXJkX2NoYW5jZSA9IGVuZW15X2RhdGEuaXRlbV9yZXdhcmRfY2hhbmNlO1xyXG4gICAgICAgIHRoaXMuZXhwX3Jld2FyZCA9IGVuZW15X2RhdGEuZXhwX3Jld2FyZDtcclxuICAgICAgICB0aGlzLnZlbnVzX2xldmVsID0gZW5lbXlfZGF0YS52ZW51c19sZXZlbDtcclxuICAgICAgICB0aGlzLm1lcmN1cnlfbGV2ZWwgPSBlbmVteV9kYXRhLm1lcmN1cnlfbGV2ZWw7XHJcbiAgICAgICAgdGhpcy5tYXJzX2xldmVsID0gZW5lbXlfZGF0YS5tYXJzX2xldmVsO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9sZXZlbCA9IGVuZW15X2RhdGEuanVwaXRlcl9sZXZlbDtcclxuICAgICAgICB0aGlzLnZlbnVzX3Bvd2VyID0gZW5lbXlfZGF0YS52ZW51c19wb3dlcjtcclxuICAgICAgICB0aGlzLm1lcmN1cnlfcG93ZXIgPSBlbmVteV9kYXRhLm1lcmN1cnlfcG93ZXI7XHJcbiAgICAgICAgdGhpcy5tYXJzX3Bvd2VyID0gZW5lbXlfZGF0YS5tYXJzX3Bvd2VyO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9wb3dlciA9IGVuZW15X2RhdGEuanVwaXRlcl9wb3dlcjtcclxuICAgICAgICB0aGlzLnZlbnVzX3Jlc2lzdCA9IGVuZW15X2RhdGEudmVudXNfcmVzaXN0O1xyXG4gICAgICAgIHRoaXMubWVyY3VyeV9yZXNpc3QgPSBlbmVteV9kYXRhLm1lcmN1cnlfcmVzaXN0O1xyXG4gICAgICAgIHRoaXMubWFyc19yZXNpc3QgPSBlbmVteV9kYXRhLm1hcnNfcmVzaXN0O1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9yZXNpc3QgPSBlbmVteV9kYXRhLmp1cGl0ZXJfcmVzaXN0O1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGVuZW15X2RhdGEuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5maWdodGVyX3R5cGUgPSBmaWdodGVyX3R5cGVzLkVORU1ZO1xyXG4gICAgICAgIHRoaXMuY2xhc3MgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiTm8gQ2xhc3NcIixcclxuICAgICAgICAgICAgdnVsbmVyYWJpbGl0aWVzOiBlbmVteV9kYXRhLnZ1bG5lcmFiaWxpdGllcyA9PT0gdW5kZWZpbmVkID8gW10gOiBlbmVteV9kYXRhLnZ1bG5lcmFiaWxpdGllc1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2V4cCA9IC0xO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2V0X2Jhc2VfYXR0cmlidXRlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9iYXNlX2F0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2hwID0gdGhpcy5tYXhfaHA7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X3BwID0gdGhpcy5tYXhfcHA7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2hwX3JlY292ZXJ5ID0gdGhpcy5ocF9yZWNvdmVyeTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfcHBfcmVjb3ZlcnkgPSB0aGlzLnBwX3JlY292ZXJ5O1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9hdGsgPSB0aGlzLmF0aztcclxuICAgICAgICB0aGlzLmN1cnJlbnRfZGVmID0gdGhpcy5kZWY7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2FnaSA9IHRoaXMuYWdpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9sdWsgPSB0aGlzLmx1aztcclxuICAgICAgICB0aGlzLnZlbnVzX2xldmVsX2N1cnJlbnQgPSB0aGlzLnZlbnVzX2xldmVsO1xyXG4gICAgICAgIHRoaXMubWVyY3VyeV9sZXZlbF9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X2xldmVsO1xyXG4gICAgICAgIHRoaXMubWFyc19sZXZlbF9jdXJyZW50ID0gdGhpcy5tYXJzX2xldmVsO1xyXG4gICAgICAgIHRoaXMuanVwaXRlcl9sZXZlbF9jdXJyZW50ID0gdGhpcy5qdXBpdGVyX2xldmVsO1xyXG4gICAgICAgIHRoaXMudmVudXNfcG93ZXJfY3VycmVudCA9IHRoaXMudmVudXNfcG93ZXI7XHJcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Bvd2VyX2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfcG93ZXI7XHJcbiAgICAgICAgdGhpcy5tYXJzX3Bvd2VyX2N1cnJlbnQgPSB0aGlzLm1hcnNfcG93ZXI7XHJcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Bvd2VyX2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfcG93ZXI7XHJcbiAgICAgICAgdGhpcy52ZW51c19yZXNpc3RfY3VycmVudCA9IHRoaXMudmVudXNfcmVzaXN0O1xyXG4gICAgICAgIHRoaXMubWVyY3VyeV9yZXNpc3RfY3VycmVudCA9IHRoaXMubWVyY3VyeV9yZXNpc3Q7XHJcbiAgICAgICAgdGhpcy5tYXJzX3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5tYXJzX3Jlc2lzdDtcclxuICAgICAgICB0aGlzLmp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfcmVzaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9hbGwoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfYmFzZV9hdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUE9XRVI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfSFA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcclxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmFwcGx5X2VmZmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBwb3dlcl9rZXkgPSBlbGVtZW50ICsgXCJfcG93ZXJfY3VycmVudFwiO1xyXG4gICAgICAgICAgICBjb25zdCByZXNpc3Rfa2V5ID0gZWxlbWVudCArIFwiX3Jlc2lzdF9jdXJyZW50XCI7XHJcbiAgICAgICAgICAgIHRoaXNbcG93ZXJfa2V5XSA9IF8uY2xhbXAodGhpc1twb3dlcl9rZXldLCBFTEVNX0FUVFJfTUlOLCBFTEVNX0FUVFJfTUFYKTtcclxuICAgICAgICAgICAgdGhpc1tyZXNpc3Rfa2V5XSA9IF8uY2xhbXAodGhpc1tyZXNpc3Rfa2V5XSwgRUxFTV9BVFRSX01JTiwgRUxFTV9BVFRSX01BWCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW5lbXlCYXNlIGV4dGVuZHMgU3ByaXRlQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBrZXlfbmFtZSxcclxuICAgICAgICBiYXR0bGVfc2NhbGUsXHJcbiAgICAgICAgZGF0YVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoa2V5X25hbWUsIFtcImJhdHRsZVwiXSk7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMuYmF0dGxlX3NjYWxlID0gYmF0dGxlX3NjYWxlO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfZW5lbXlfaW5zdGFuY2UoZW5lbWllc19saXN0LCBrZXlfbmFtZSwgc3VmZml4KSB7XHJcbiAgICByZXR1cm4gbmV3IEVuZW15KGVuZW1pZXNfbGlzdFtrZXlfbmFtZV0uZGF0YSwgZW5lbWllc19saXN0W2tleV9uYW1lXS5kYXRhLm5hbWUgKyBzdWZmaXgpO1xyXG59IiwiaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnN9IGZyb20gXCIuL3V0aWxzLmpzXCI7XHJcblxyXG5jb25zdCBGT09UU1RFUFNfVFRMID0gUGhhc2VyLlRpbWVyLlNFQ09ORCA8PCAxO1xyXG5jb25zdCBXQUxLSU5HX1RJTUVfSU5URVJWQUwgPSBQaGFzZXIuVGltZXIuUVVBUlRFUjtcclxuY29uc3QgUlVOTklOR19USU1FX0lOVEVSVkFMID0gUGhhc2VyLlRpbWVyLlFVQVJURVI7XHJcblxyXG5jb25zdCBJTklUSUFMX0FDVElPTiA9IGJhc2VfYWN0aW9ucy5JRExFO1xyXG5jb25zdCBJTklUSUFMX0RJUkVDVElPTiA9IGRpcmVjdGlvbnMuZG93bjtcclxuXHJcbmNvbnN0IEZPT1RTVEVQU19LRVlfTkFNRSA9IFwiZm9vdHByaW50c1wiO1xyXG5jb25zdCBGT09UU1RFUFNfQU5DSE9SID0gMC41O1xyXG5jb25zdCBNQVhfREVBRF9TSVpFID0gMjA7XHJcblxyXG5jb25zdCBmb290X2ZvcndhcmRfdHlwZXMgPSB7XHJcbiAgICBOT05FOiBcIm5vbmVcIixcclxuICAgIFJJR0hUOiBcInJpZ2h0XCIsXHJcbiAgICBMRUZUOiBcImxlZnRcIlxyXG59O1xyXG5cclxuLypHZW5lcmF0ZXMgYW5kIG1hbmFnZXMgZm9vdHByaW50c1xyXG5DYW4gYmUgYXBwbGllZCB0byBhbnkgbW92YWJsZSB1bml0XHJcblxyXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XHJcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlKi9cclxuZXhwb3J0IGNsYXNzIEZvb3RzdGVwc3tcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpe1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnhfcG9zID0gMDtcclxuICAgICAgICB0aGlzLnlfcG9zID0gMDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gSU5JVElBTF9BQ1RJT047XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IElOSVRJQUxfRElSRUNUSU9OO1xyXG4gICAgICAgIHRoaXMuYW5jaG9yX3ggPSBGT09UU1RFUFNfQU5DSE9SO1xyXG4gICAgICAgIHRoaXMuYW5jaG9yX3kgPSBGT09UU1RFUFNfQU5DSE9SO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5zZW5kX3RvX2JhY2sgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYmFzZV9jb2xsaWRlcl9sYXllciA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuZGVhZF9zdGVwcyA9IG5ldyBBcnJheShNQVhfREVBRF9TSVpFKTtcclxuICAgICAgICB0aGlzLmRlYWRfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuZm9vdF9mb3J3YXJkID0gZm9vdF9mb3J3YXJkX3R5cGVzLk5PTkU7XHJcbiAgICAgICAgdGhpcy5jYW5fbWFrZV9mb290cHJpbnQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzX3R5cGUgPSAxO1xyXG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzX3RpbWVfaW50ZXJ2YWwgPSBXQUxLSU5HX1RJTUVfSU5URVJWQUw7XHJcblxyXG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb290c3RlcHNfc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbRk9PVFNURVBTX0tFWV9OQU1FXTtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdGhlIGZvb3RwcmludCBpbnRlcnZhbCB0aW1lciovXHJcbiAgICBzZXRfbmV3X3N0ZXBfdGltZXIoKXtcclxuICAgICAgICB0aGlzLmNhbl9tYWtlX2Zvb3RwcmludCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIuYWRkKHRoaXMuZm9vdHN0ZXBzX3RpbWVfaW50ZXJ2YWwsKCkgPT4ge3RoaXMuY2FuX21ha2VfZm9vdHByaW50ID0gdHJ1ZTt9KVxyXG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdGhlIGZvb3RwcmludCBleHBpcmF0aW9uIHRpbWVyKi9cclxuICAgIHNldF9leHBpcmVfdGltZXIoc3ByaXRlLCBhbmltYXRpb24pe1xyXG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyLmFkZChGT09UU1RFUFNfVFRMLCgpPT57XHJcbiAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uKTtcclxuICAgICAgICB9LHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypFaXRoZXIga2lsbHMgb3IgZGVzdHJveXMgYSBnaXZlbiBzdGVwXHJcbiAgICBLaWxsaW5nIGxlYXZlcyB0aGUgc3ByaXRlIGluIG1lbW9yeSB0byBiZSByZWN5Y2xlZFxyXG5cclxuICAgIElucHV0OiBleHBpcmVkIFtQaGFzZXI6U3ByaXRlXTogVGhlIHN0ZXAgdG8gYmUga2lsbGVkL2Rlc3Ryb3llZCovXHJcbiAgICBraWxsX3N0ZXAoZXhwaXJlZCl7XHJcbiAgICAgICAgaWYodGhpcy5kZWFkX2luZGV4ID09PSBNQVhfREVBRF9TSVpFKXtcclxuICAgICAgICAgICAgZXhwaXJlZC5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGV4cGlyZWQua2lsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRlYWRfc3RlcHNbdGhpcy5kZWFkX2luZGV4KytdID0gZXhwaXJlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypSb3RhdGVzIHRoZSBzdGVwIGFjY29yZGluZyB0aGUgcGFyZW50J3MgZGlyZWN0aW9uXHJcbiAgICBBbHNvIGZsaXBzIHRoZSBzcHJpdGUgaG9yaXpvbnRhbGx5IGlmIG5lY2Vzc2FyeVxyXG4gICAgXHJcbiAgICBJbnB1dDogc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYmUgYWZmZWN0ZWQqL1xyXG4gICAgcG9zaXRpb25fZm9vdHN0ZXBzKHNwcml0ZSl7XHJcbiAgICAgICAgc3ByaXRlLnNjYWxlLnggPSB0aGlzLmZvb3RfZm9yd2FyZCA9PT0gZm9vdF9mb3J3YXJkX3R5cGVzLlJJR0hUID8gLTEgOiAxO1xyXG4gICAgICAgIHNwcml0ZS5yb3RhdGlvbiA9ICh0aGlzLmN1cnJlbnRfZGlyZWN0aW9uICsgMikqTWF0aC5QSS80O1xyXG4gICAgfVxyXG5cclxuICAgIC8qRGlzcGxheXMgYSBuZXcgc3RlcCBvbiBzY3JlZW5cclxuICAgIFdpbGwgcmVjeWNsZSBkZWFkIHNwcml0ZXMgaWYgYXZhaWxhYmxlXHJcblxyXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSA9IFRoZSBwYXJlbnQncyBjdXJyZW50IGRpcmVjdGlvblxyXG4gICAgICAgICAgIGFjdGlvbiBbc3RyaW5nXSA9IFRoZSBwYXJlbnQncyBjdXJyZW50IGFjdGlvbiovXHJcbiAgICBjcmVhdGVfc3RlcChkaXJlY3Rpb24sYWN0aW9uKXtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLm5wY19ncm91cC5nZXRJbmRleCh0aGlzLmdyb3VwKSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5hZGQodGhpcy5ncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9mb290KCk7XHJcbiAgICAgICAgdGhpcy5mb290c3RlcHNfdHlwZSA9IHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5JRExFID8gXCJkb3VibGVcIiA6IFwic2luZ2xlXCI7XHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uX25hbWUgPSB0aGlzLmZvb3RzdGVwc19zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoRk9PVFNURVBTX0tFWV9OQU1FLCB0aGlzLmZvb3RzdGVwc190eXBlKTtcclxuXHJcbiAgICAgICAgbGV0IGZvb3RzdGVwc19zcHJpdGU7XHJcbiAgICAgICAgaWYodGhpcy5kZWFkX2luZGV4ID09PSAwKXtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IHRoaXMuZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlLmdldEFjdGlvbktleShGT09UU1RFUFNfS0VZX05BTUUpO1xyXG4gICAgICAgICAgICBmb290c3RlcHNfc3ByaXRlID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgc3ByaXRlX2tleSk7XHJcbiAgICAgICAgICAgIGZvb3RzdGVwc19zcHJpdGUuYW5jaG9yLnNldFRvKHRoaXMuYW5jaG9yX3gsIHRoaXMuYW5jaG9yX3kpO1xyXG4gICAgICAgICAgICB0aGlzLmZvb3RzdGVwc19zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24oZm9vdHN0ZXBzX3Nwcml0ZSxGT09UU1RFUFNfS0VZX05BTUUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBmb290c3RlcHNfc3ByaXRlID0gdGhpcy5kZWFkX3N0ZXBzWy0tdGhpcy5kZWFkX2luZGV4XTtcclxuICAgICAgICAgICAgZm9vdHN0ZXBzX3Nwcml0ZS5yZXNldCgwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uX29iaiA9IGZvb3RzdGVwc19zcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24oYW5pbWF0aW9uX25hbWUpO1xyXG4gICAgICAgIGFuaW1hdGlvbl9vYmouc3RvcCh0cnVlKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcjtcclxuICAgICAgICBmb290c3RlcHNfc3ByaXRlLnggPSB0aGlzLmRhdGEuaGVyby5zaGFkb3cueDtcclxuICAgICAgICBmb290c3RlcHNfc3ByaXRlLnkgPSB0aGlzLmRhdGEuaGVyby5zaGFkb3cueTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uX2Zvb3RzdGVwcyhmb290c3RlcHNfc3ByaXRlKTtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uX29iai5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmtpbGxfc3RlcChmb290c3RlcHNfc3ByaXRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldF9leHBpcmVfdGltZXIoZm9vdHN0ZXBzX3Nwcml0ZSwgYW5pbWF0aW9uX25hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLnNldF9uZXdfc3RlcF90aW1lcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qVXBkYXRlcyB0aGUgXCJmb290X2ZvcndhcmRcIiBwcm9wZXJ0eSovXHJcbiAgICB1cGRhdGVfZm9vdCgpe1xyXG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzX3RpbWVfaW50ZXJ2YWwgPSB0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuV0FMSyA/IFdBTEtJTkdfVElNRV9JTlRFUlZBTCA6IFJVTk5JTkdfVElNRV9JTlRFUlZBTDtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuSURMRSl7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdF9mb3J3YXJkID0gZm9vdF9mb3J3YXJkX3R5cGVzLk5PTkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdF9mb3J3YXJkID0gdGhpcy5mb290X2ZvcndhcmQgPT09IGZvb3RfZm9yd2FyZF90eXBlcy5MRUZUID8gZm9vdF9mb3J3YXJkX3R5cGVzLlJJR0hUIDogZm9vdF9mb3J3YXJkX3R5cGVzLkxFRlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qS2lsbHMgYWxsIHNwcml0ZXMgYW5kIHJlc2V0cyB0aGUgdGltZXJzXHJcblxyXG4gICAgSW5wdXQ6IGZvcmNlX2Rlc3Ryb3kgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgZGVzdHJveXMgc3RlcHMgaW5zdGVhZCovXHJcbiAgICBjbGVhbl9hbGwoZm9yY2VfZGVzdHJveSl7XHJcbiAgICAgICAgdGhpcy5uZXdfc3RlcF90aW1lci5zdG9wKHRydWUpO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyLnN0b3AodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5jaGlsZHJlbi5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmb3JjZV9kZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0uc3RvcCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUua2lsbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kZWFkX3N0ZXBzID0gdGhpcy5ncm91cC5jaGlsZHJlbi5zbGljZSgpO1xyXG4gICAgICAgIHRoaXMuZGVhZF9pbmRleCA9IHRoaXMuZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qRGVzdHJveXMgdGhpcyBvYmplY3QgYW5kIGl0cyBjaGlsZHJlbiovXHJcbiAgICBkZXN0cm95KCl7XHJcbiAgICAgICAgdGhpcy5jbGVhbl9hbGwodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5uZXdfc3RlcF90aW1lci5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5leHBpcmVfdGltZXIuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi9tYWdpY19udW1iZXJzLmpzXCI7XHJcbmltcG9ydCB7IHJldmVyc2VfZGlyZWN0aW9ucywgYmFzZV9hY3Rpb25zIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcclxuaW1wb3J0IHsgRm9vdHN0ZXBzIH0gZnJvbSBcIi4vRm9vdHN0ZXBzLmpzXCI7XHJcblxyXG5jb25zdCBERUZBVUxUX1NIQURPV19LRVlOQU1FID0gXCJzaGFkb3dcIjtcclxuXHJcbmNvbnN0IERFRkFVTFRfU0hBRE9XX0FOQ0hPUl9YID0gMC40NTtcclxuY29uc3QgREVGQVVMVF9TSEFET1dfQU5DSE9SX1kgPSAwLjA1O1xyXG5jb25zdCBERUZBVUxUX1NQUklURV9BTkNIT1JfWCA9IDAuNTA7XHJcbmNvbnN0IERFRkFVTFRfU1BSSVRFX0FOQ0hPUl9ZID0gMC44MDtcclxuXHJcbmNvbnN0IGRlZmF1bHRfYW5jaG9yID0ge1xyXG4gICAgeDogREVGQVVMVF9TUFJJVEVfQU5DSE9SX1gsXHJcbiAgICB5OiBERUZBVUxUX1NQUklURV9BTkNIT1JfWVxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsYWJsZUNoYXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwga2V5X25hbWUsIGluaXRpYWxfeCwgaW5pdGlhbF95LCBpbml0aWFsX2FjdGlvbiwgaW5pdGlhbF9kaXJlY3Rpb24sIGVuYWJsZV9mb290c3RlcHMpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMueF9zcGVlZCA9IDA7XHJcbiAgICAgICAgdGhpcy55X3NwZWVkID0gMDtcclxuICAgICAgICB0aGlzLmV4dHJhX3NwZWVkID0gMDtcclxuICAgICAgICB0aGlzLnN0b3BfYnlfY29sbGlkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mb3JjZV9kaXJlY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsaW1iaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wdXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYXN0aW5nX3BzeW5lcmd5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50ZWxlcG9ydGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaWRsZV9jbGltYmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNoYWRvdyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ib2R5X3JhZGl1cyA9IDA7XHJcbiAgICAgICAgdGhpcy50aWxlX3hfcG9zID0gaW5pdGlhbF94O1xyXG4gICAgICAgIHRoaXMudGlsZV95X3BvcyA9IGluaXRpYWxfeTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gaW5pdGlhbF9hY3Rpb247XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IGluaXRpYWxfZGlyZWN0aW9uO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZWRfZGlyZWN0aW9uID0gMDtcclxuICAgICAgICB0aGlzLmRlc2lyZWRfZGlyZWN0aW9uID0gaW5pdGlhbF9kaXJlY3Rpb247XHJcbiAgICAgICAgdGhpcy5jb2xvcl9maWx0ZXIgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcignQ29sb3JGaWx0ZXJzJyk7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfZm9vdHN0ZXBzID0gZW5hYmxlX2Zvb3RzdGVwcyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBlbmFibGVfZm9vdHN0ZXBzO1xyXG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzID0gbmV3IEZvb3RzdGVwcyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5fYWN0aW9uKGFsbG93X2NsaW1iaW5nID0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYXN0aW5nX3BzeW5lcmd5IHx8IHRoaXMucHVzaGluZyB8fCAodGhpcy5jbGltYmluZyAmJiAhYWxsb3dfY2xpbWJpbmcpIHx8IHRoaXMuanVtcGluZyB8fCB0aGlzLnRlbGVwb3J0aW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9zcHJpdGUoZ3JvdXAsIHNwcml0ZV9pbmZvLCBtYXBfc3ByaXRlLCBsYXllciwgYW5jaG9yX3gsIGFuY2hvcl95KSB7XHJcbiAgICAgICAgYW5jaG9yX3ggPSBhbmNob3JfeCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdF9hbmNob3IueCA6IGFuY2hvcl94O1xyXG4gICAgICAgIGFuY2hvcl95ID0gYW5jaG9yX3kgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRfYW5jaG9yLnkgOiBhbmNob3JfeTtcclxuICAgICAgICB0aGlzLnNwcml0ZV9pbmZvID0gc3ByaXRlX2luZm87XHJcbiAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXMuc3ByaXRlX2luZm8uZ2V0QWN0aW9uS2V5KHRoaXMuY3VycmVudF9hY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gZ3JvdXAuY3JlYXRlKDAsIDAsIGFjdGlvbl9rZXkpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmNlbnRlclggPSAoKHRoaXMudGlsZV94X3BvcyArIDEuNSkgKiBtYXBfc3ByaXRlLnRpbGVXaWR0aCkgfCAwO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmNlbnRlclkgPSAoKHRoaXMudGlsZV95X3BvcyArIDEuNSkgKiBtYXBfc3ByaXRlLnRpbGVIZWlnaHQpIHwgMDtcclxuICAgICAgICB0aGlzLnNwcml0ZS5iYXNlX2NvbGxpZGVyX2xheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUucm91bmRQeCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnNldFRvKGFuY2hvcl94LCBhbmNob3JfeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRfYW5jaG9yKHByb3BlcnR5KSB7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQgJiYgWyd4JywgJ3knXS5pbmNsdWRlcyhwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yW3Byb3BlcnR5XSA9IGRlZmF1bHRfYW5jaG9yW3Byb3BlcnR5XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3IueCA9IGRlZmF1bHRfYW5jaG9yLng7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci55ID0gZGVmYXVsdF9hbmNob3IueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3NoYWRvdyhrZXlfbmFtZSwgZ3JvdXAsIGxheWVyLCBzaGFkb3dfYW5jaG9yX3gsIHNoYWRvd19hbmNob3JfeSkge1xyXG4gICAgICAgIGtleV9uYW1lID0ga2V5X25hbWUgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfU0hBRE9XX0tFWU5BTUUgOiBrZXlfbmFtZTtcclxuICAgICAgICBzaGFkb3dfYW5jaG9yX3ggPSBzaGFkb3dfYW5jaG9yX3ggPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfU0hBRE9XX0FOQ0hPUl9YIDogc2hhZG93X2FuY2hvcl94O1xyXG4gICAgICAgIHNoYWRvd19hbmNob3JfeSA9IHNoYWRvd19hbmNob3JfeSA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9TSEFET1dfQU5DSE9SX1kgOiBzaGFkb3dfYW5jaG9yX3k7XHJcbiAgICAgICAgdGhpcy5zaGFkb3cgPSBncm91cC5jcmVhdGUoMCwgMCwga2V5X25hbWUpO1xyXG4gICAgICAgIHRoaXMuc2hhZG93LmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5NVUxUSVBMWTtcclxuICAgICAgICB0aGlzLnNoYWRvdy5kaXNhYmxlUm91bmRQeCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zaGFkb3cuYW5jaG9yLnNldFRvKHNoYWRvd19hbmNob3JfeCwgc2hhZG93X2FuY2hvcl95KTtcclxuICAgICAgICB0aGlzLnNoYWRvdy5iYXNlX2NvbGxpZGVyX2xheWVyID0gbGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgY2FtZXJhX2ZvbGxvdygpIHtcclxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZvbGxvdyh0aGlzLnNwcml0ZSwgUGhhc2VyLkNhbWVyYS5GT0xMT1dfTE9DS09OLCBudW1iZXJzLkNBTUVSQV9MRVJQLCBudW1iZXJzLkNBTUVSQV9MRVJQKTtcclxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZvY3VzT24odGhpcy5zcHJpdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jb2xsaWRlcl9sYXllcihsYXllcikge1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSBsYXllcjtcclxuICAgICAgICB0aGlzLnNoYWRvdy5iYXNlX2NvbGxpZGVyX2xheWVyID0gbGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcGxheShhY3Rpb24sIGFuaW1hdGlvbikge1xyXG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbiA9PT0gdW5kZWZpbmVkID8gdGhpcy5jdXJyZW50X2FjdGlvbiA6IGFjdGlvbjtcclxuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRpb24gPT09IHVuZGVmaW5lZCA/IHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmN1cnJlbnRfZGlyZWN0aW9uXSA6IGFuaW1hdGlvbjtcclxuICAgICAgICBpZiAodGhpcy5zcHJpdGVfaW5mby5nZXRTcHJpdGVBY3Rpb24odGhpcy5zcHJpdGUpICE9PSBhY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXMuc3ByaXRlX2luZm8uZ2V0QWN0aW9uS2V5KGFjdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmxvYWRUZXh0dXJlKGFjdGlvbl9rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gdGhpcy5zcHJpdGVfaW5mby5nZXRBbmltYXRpb25LZXkoYWN0aW9uLCBhbmltYXRpb24pO1xyXG4gICAgICAgIGlmICghdGhpcy5zcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24oYW5pbWF0aW9uX2tleSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGVfaW5mby5zZXRBbmltYXRpb24odGhpcy5zcHJpdGUsIGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb25fa2V5KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24oYW5pbWF0aW9uX2tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3NoYWRvdygpIHtcclxuICAgICAgICB0aGlzLnNoYWRvdy54ID0gdGhpcy5zcHJpdGUuYm9keS54O1xyXG4gICAgICAgIHRoaXMuc2hhZG93LnkgPSB0aGlzLnNwcml0ZS5ib2R5Lnk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcF9jaGFyKGNoYW5nZV9zcHJpdGUgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS55ID0gdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS54ID0gMDtcclxuICAgICAgICBpZiAoY2hhbmdlX3Nwcml0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfZGlyZWN0aW9uKGRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSB0aGlzLmRlc2lyZWRfZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9hY3Rpb24oY2hlY2tfb25fZXZlbnQgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChjaGVja19vbl9ldmVudCAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFjdGlvbiA9IHRoaXMuY3VycmVudF9hY3Rpb247XHJcbiAgICAgICAgbGV0IGlkbGVfY2xpbWJpbmcgPSB0aGlzLmlkbGVfY2xpbWJpbmc7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgJiYgIXRoaXMucHVzaGluZyAmJiAhdGhpcy5jbGltYmluZykge1xyXG4gICAgICAgICAgICBhY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgJiYgIXRoaXMucHVzaGluZyAmJiB0aGlzLmNsaW1iaW5nKSB7XHJcbiAgICAgICAgICAgIGlkbGVfY2xpbWJpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBpZGxlX2NsaW1iaW5nID8gYmFzZV9hY3Rpb25zLklETEUgOiByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5kZXNpcmVkX2RpcmVjdGlvbl07XHJcbiAgICAgICAgdGhpcy5wbGF5KGFjdGlvbiwgYW5pbWF0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICB0aWxlX2FibGVfdG9fc2hvd19mb290cHJpbnQoKSB7XHJcbiAgICAgICAgY29uc3QgdGlsZXMgPSB0aGlzLmRhdGEubWFwLmdldF9jdXJyZW50X3RpbGUodGhpcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWxlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGlsZXNbaV07XHJcbiAgICAgICAgICAgIGlmICh0aWxlLnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoXCJkaXNhYmxlX2Zvb3RwcmludFwiKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJzID0gdGlsZS5wcm9wZXJ0aWVzLmRpc2FibGVfZm9vdHByaW50LnNwbGl0KFwiLFwiKS5tYXAobGF5ZXIgPT4gcGFyc2VJbnQobGF5ZXIpKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaW5jbHVkZXModGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jdXJyZW50X2FjdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVkX2RpcmVjdGlvbiA9PT0gbnVsbCAmJiB0aGlzLmN1cnJlbnRfYWN0aW9uICE9PSBiYXNlX2FjdGlvbnMuSURMRSAmJiAhdGhpcy5jbGltYmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlcXVpcmVkX2RpcmVjdGlvbiAhPT0gbnVsbCAmJiAhdGhpcy5jbGltYmluZyAmJiAhdGhpcy5wdXNoaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvb3RzdGVwcyA9IHRoaXMuZW5hYmxlX2Zvb3RzdGVwcyAmJiB0aGlzLmRhdGEubWFwLnNob3dfZm9vdHN0ZXBzICYmIHRoaXMudGlsZV9hYmxlX3RvX3Nob3dfZm9vdHByaW50KCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZm9vdHN0ZXBzLmNhbl9tYWtlX2Zvb3RwcmludCAmJiBmb290c3RlcHMpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb290c3RlcHMuY3JlYXRlX3N0ZXAodGhpcy5jdXJyZW50X2RpcmVjdGlvbix0aGlzLmN1cnJlbnRfYWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzaGlmdF9wcmVzc2VkID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuU0hJRlQpO1xyXG4gICAgICAgICAgICBpZiAoc2hpZnRfcHJlc3NlZCAmJiB0aGlzLmN1cnJlbnRfYWN0aW9uICE9PSBiYXNlX2FjdGlvbnMuREFTSCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5EQVNIO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzaGlmdF9wcmVzc2VkICYmIHRoaXMuY3VycmVudF9hY3Rpb24gIT09IGJhc2VfYWN0aW9ucy5XQUxLKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLldBTEs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3RpbGVfcG9zaXRpb24obWFwX3Nwcml0ZSkge1xyXG4gICAgICAgIHRoaXMudGlsZV94X3BvcyA9ICh0aGlzLnNwcml0ZS54L21hcF9zcHJpdGUudGlsZVdpZHRoKSB8IDA7XHJcbiAgICAgICAgdGhpcy50aWxlX3lfcG9zID0gKHRoaXMuc3ByaXRlLnkvbWFwX3Nwcml0ZS50aWxlSGVpZ2h0KSB8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsYXRlX3NwZWVkKCkgeyAvL3doZW4gc2V0dGluZyB0ZW1wX3ggb3IgdGVtcF95LCBpdCBtZWFucyB0aGF0IHRoZXNlIHZlbG9jaXRpZXMgd2lsbCBzdGlsbCBiZSBhbmFseXplZCBpbiBjb2xsaXNpb25fZGVhbGVyIGZ1bmN0aW9uXHJcbiAgICAgICAgY29uc3QgZGVsdGFfdGltZSA9IHRoaXMuZ2FtZS50aW1lLmVsYXBzZWRNUyAvIG51bWJlcnMuREVMVEFfVElNRV9GQUNUT1I7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5EQVNIKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnhfc3BlZWQgKiAodGhpcy5zcHJpdGVfaW5mby5kYXNoX3NwZWVkICsgdGhpcy5leHRyYV9zcGVlZCkpIHwgMDtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3kgPSAoZGVsdGFfdGltZSAqIHRoaXMueV9zcGVlZCAqICh0aGlzLnNwcml0ZV9pbmZvLmRhc2hfc3BlZWQgKyB0aGlzLmV4dHJhX3NwZWVkKSkgfCAwO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuV0FMSykge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeCA9IChkZWx0YV90aW1lICogdGhpcy54X3NwZWVkICogKHRoaXMuc3ByaXRlX2luZm8ud2Fsa19zcGVlZCArIHRoaXMuZXh0cmFfc3BlZWQpKSB8IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnlfc3BlZWQgKiAodGhpcy5zcHJpdGVfaW5mby53YWxrX3NwZWVkICsgdGhpcy5leHRyYV9zcGVlZCkpIHwgMDtcclxuICAgICAgICB9IGVsc2UgaWYodGhpcy5jdXJyZW50X2FjdGlvbiA9PT0gYmFzZV9hY3Rpb25zLkNMSU1CKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnhfc3BlZWQgKiB0aGlzLnNwcml0ZV9pbmZvLmNsaW1iX3NwZWVkKSB8IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnlfc3BlZWQgKiB0aGlzLnNwcml0ZV9pbmZvLmNsaW1iX3NwZWVkKSB8IDA7XHJcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5JRExFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NwZWVkKCkge1xyXG4gICAgICAgIGlmIChbYmFzZV9hY3Rpb25zLldBTEssIGJhc2VfYWN0aW9ucy5EQVNILCBiYXNlX2FjdGlvbnMuQ0xJTUJdLmluY2x1ZGVzKHRoaXMuY3VycmVudF9hY3Rpb24pKSB7IC8vc2V0cyB0aGUgZmluYWwgdmVsb2NpdHlcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS54ID0gdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3g7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfc3BlZWQoeF9zcGVlZCwgeV9zcGVlZCkge1xyXG4gICAgICAgIHRoaXMueF9zcGVlZCA9IHhfc3BlZWQgPT09IHVuZGVmaW5lZCA/IHRoaXMueF9zcGVlZCA6IHhfc3BlZWQ7XHJcbiAgICAgICAgdGhpcy55X3NwZWVkID0geV9zcGVlZCA9PT0gdW5kZWZpbmVkID8gdGhpcy55X3NwZWVkIDogeV9zcGVlZDtcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZV9zcGVlZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwbHlfc3BlZWQoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IFRpbGVFdmVudCB9IGZyb20gJy4vdGlsZV9ldmVudHMvVGlsZUV2ZW50LmpzJztcclxuaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuL2RlYnVnL2RlYnVnLmpzJztcclxuaW1wb3J0IHsgbG9hZF9hbGwgfSBmcm9tICcuL2luaXRpYWxpemVycy9hc3NldHNfbG9hZGVyLmpzJztcclxuaW1wb3J0IHsgQ29sbGlzaW9uIH0gZnJvbSAnLi9Db2xsaXNpb24uanMnO1xyXG5pbXBvcnQgeyBkaXJlY3Rpb25zIH0gZnJvbSAnLi91dGlscy5qcyc7XHJcbmltcG9ydCB7IEhlcm8gfSBmcm9tICcuL0hlcm8uanMnO1xyXG5pbXBvcnQgeyBUaWxlRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi90aWxlX2V2ZW50cy9UaWxlRXZlbnRNYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgR2FtZUV2ZW50TWFuYWdlciB9IGZyb20gJy4vZ2FtZV9ldmVudHMvR2FtZUV2ZW50TWFuYWdlci5qcyc7XHJcbmltcG9ydCB7IGxvYWRfZGF0YWJhc2VzIH0gZnJvbSAnLi9pbml0aWFsaXplcnMvZGF0YWJhc2VzX2xvYWRlci5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfZ2FtZV9kYXRhIH0gZnJvbSAnLi9pbml0aWFsaXplcnMvaW5pdGlhbGl6ZV9pbmZvLmpzJztcclxuaW1wb3J0IHsgTWFwIH0gZnJvbSAnLi9NYXAuanMnO1xyXG5pbXBvcnQgeyBCYXR0bGUgfSBmcm9tICcuL2JhdHRsZS9CYXR0bGUuanMnO1xyXG5cclxuY2xhc3MgR29sZGVuU3VuIHtcclxuICAgIHB1YmxpYyBnYW1lOiBhbnkgPSB7fTtcclxuICAgIHB1YmxpYyBkYnM6IGFueSA9IHt9O1xyXG4gICAgcHVibGljIGluZm86IGFueSA9IHt9O1xyXG5cclxuICAgIC8vZ2FtZSBzdGF0ZXNcclxuICAgIHB1YmxpYyBtZW51X29wZW46IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBpbl9iYXR0bGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBjcmVhdGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLy9nYW1lIG9iamVjdHNcclxuICAgIHB1YmxpYyBoZXJvOiBIZXJvID0gbnVsbDtcclxuICAgIHB1YmxpYyBjb2xsaXNpb246IENvbGxpc2lvbiA9IG51bGw7XHJcbiAgICBwdWJsaWMgY3Vyc29yczogYW55ID0gbnVsbDtcclxuICAgIHB1YmxpYyBkZWJ1ZzogRGVidWcgPSBudWxsO1xyXG4gICAgcHVibGljIG1lbnVfc2NyZWVuOiBhbnkgPSBudWxsO1xyXG4gICAgcHVibGljIG1hcDogTWFwID0gbnVsbDtcclxuICAgIHB1YmxpYyB0aWxlX2V2ZW50X21hbmFnZXI6IFRpbGVFdmVudE1hbmFnZXIgPSBudWxsO1xyXG4gICAgcHVibGljIGdhbWVfZXZlbnRfbWFuYWdlcjogR2FtZUV2ZW50TWFuYWdlciA9IG51bGw7XHJcbiAgICBwdWJsaWMgYmF0dGxlX2luc3RhbmNlOiBCYXR0bGUgPSBudWxsO1xyXG5cclxuICAgIC8vY29tbW9uIGlucHV0c1xyXG4gICAgcHVibGljIGVudGVyX2lucHV0OiBhbnkgPSBudWxsO1xyXG4gICAgcHVibGljIGVzY19pbnB1dDogYW55ID0gbnVsbDtcclxuICAgIHB1YmxpYyBzaGlmdF9pbnB1dDogYW55ID0gbnVsbDtcclxuICAgIHB1YmxpYyBzcGFjZWJhcl9pbnB1dDogYW55ID0gbnVsbDtcclxuXHJcbiAgICAvL3NjcmVlblxyXG4gICAgcHVibGljIGZ1bGxzY3JlZW46IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBzY2FsZV9mYWN0b3I6IG51bWJlciA9IDE7XHJcblxyXG4gICAgLy9ncm91cHNcclxuICAgIHB1YmxpYyB1bmRlcmxheWVyX2dyb3VwOiBhbnkgPSBudWxsO1xyXG4gICAgcHVibGljIG5wY19ncm91cDogYW55ID0gbnVsbDtcclxuICAgIHB1YmxpYyBvdmVybGF5ZXJfZ3JvdXA6IGFueSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gbmV3IFBoYXNlci5HYW1lKFxyXG4gICAgICAgICAgICBudW1iZXJzLkdBTUVfV0lEVEgsXHJcbiAgICAgICAgICAgIG51bWJlcnMuR0FNRV9IRUlHSFQsXHJcbiAgICAgICAgICAgIFBoYXNlci5XRUJHTCxcclxuICAgICAgICAgICAgXCJnYW1lXCIsIC8vZG9tIGVsZW1lbnQgaWRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJlbG9hZDogdGhpcy5wcmVsb2FkLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgICAgICBjcmVhdGU6IHRoaXMuY3JlYXRlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgICAgICBsb2FkUmVuZGVyOiB0aGlzLmxvYWRSZW5kZXIuYmluZCh0aGlzKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmYWxzZSwgLy90cmFuc3BhcmVudFxyXG4gICAgICAgICAgICBmYWxzZSAvL2FudGlhbGlhc1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlbG9hZCgpIHtcclxuICAgICAgICBsb2FkX2FsbCh0aGlzLmdhbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWUudGltZS5hZHZhbmNlZFRpbWluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5nYW1lLnN0YWdlLnNtb290aGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5yb3VuZFB4ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmdhbWUucmVuZGVyZXIucmVuZGVyU2Vzc2lvbi5yb3VuZFBpeGVscyA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZmFkZSgweDAsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcl9sb2FkaW5nKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KCdMb2FkaW5nLi4uJywgNSwgMTUsIFwiIzAwZmYwMFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkUmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyX2xvYWRpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjcmVhdGUoKSB7XHJcbiAgICAgICAgbG9hZF9kYXRhYmFzZXModGhpcy5nYW1lLCB0aGlzLmRicyk7XHJcblxyXG4gICAgICAgIHRoaXMuZW50ZXJfaW5wdXQgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5FTlRFUikub25Eb3duO1xyXG4gICAgICAgIHRoaXMuZXNjX2lucHV0ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRVNDKS5vbkRvd247XHJcbiAgICAgICAgdGhpcy5zaGlmdF9pbnB1dCA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNISUZUKS5vbkRvd247XHJcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9pbnB1dCA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKS5vbkRvd247XHJcblxyXG4gICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yID0gdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX3NjYWxlX2ZhY3RvcjtcclxuXHJcbiAgICAgICAgLy9pbml0IGRlYnVnIGluc3RhbmNlXHJcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IG5ldyBEZWJ1Zyh0aGlzLmdhbWUsIHRoaXMpO1xyXG4gICAgICAgIC8vaW5pdCBkZWJ1ZyBjb250cm9sc1xyXG4gICAgICAgIHRoaXMuZGVidWcuaW5pdGlhbGl6ZV9jb250cm9scygpO1xyXG5cclxuICAgICAgICAvL2NyZWF0aW5nIGdyb3Vwcy4gT3JkZXIgaGVyZSBpcyBpbXBvcnRhbnRcclxuICAgICAgICB0aGlzLnVuZGVybGF5ZXJfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5ucGNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5ZXJfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcblxyXG4gICAgICAgIGF3YWl0IGluaXRpYWxpemVfZ2FtZV9kYXRhKHRoaXMuZ2FtZSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vY29uZmlndXJpbmcgbWFwIGxheWVyczogY3JlYXRpbmcgc3ByaXRlcywgbGlzdGluZyBldmVudHMgYW5kIHNldHRpbmcgdGhlIGxheWVyc1xyXG4gICAgICAgIHRoaXMubWFwID0gYXdhaXQgdGhpcy5pbmZvLm1hcHNfbGlzdFt0aGlzLmRicy5pbml0X2RiLm1hcF9rZXlfbmFtZV0ubW91bnRfbWFwKHRoaXMuZGJzLmluaXRfZGIubWFwX3pfaW5kZXgpO1xyXG5cclxuICAgICAgICAvL2luaXRpYWxpemVzIHRoZSBjb250cm9sbGFibGUgaGVyb1xyXG4gICAgICAgIHRoaXMuaGVybyA9IG5ldyBIZXJvKFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICAgIHRoaXMuZGJzLmluaXRfZGIuaGVyb19rZXlfbmFtZSxcclxuICAgICAgICAgICAgdGhpcy5kYnMuaW5pdF9kYi54X3RpbGVfcG9zaXRpb24sXHJcbiAgICAgICAgICAgIHRoaXMuZGJzLmluaXRfZGIueV90aWxlX3Bvc2l0aW9uLFxyXG4gICAgICAgICAgICB0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfYWN0aW9uLFxyXG4gICAgICAgICAgICBkaXJlY3Rpb25zW3RoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9kaXJlY3Rpb25dXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmhlcm8uc2V0X3Nwcml0ZSh0aGlzLm5wY19ncm91cCwgdGhpcy5pbmZvLm1haW5fY2hhcl9saXN0W3RoaXMuaGVyby5rZXlfbmFtZV0uc3ByaXRlX2Jhc2UsIHRoaXMubWFwLnNwcml0ZSwgdGhpcy5tYXAuY29sbGlzaW9uX2xheWVyKTtcclxuICAgICAgICB0aGlzLmhlcm8uc2V0X3NoYWRvdygnc2hhZG93JywgdGhpcy5ucGNfZ3JvdXAsIHRoaXMubWFwLmNvbGxpc2lvbl9sYXllcik7XHJcbiAgICAgICAgdGhpcy5oZXJvLmNhbWVyYV9mb2xsb3coKTtcclxuICAgICAgICB0aGlzLmhlcm8ucGxheSgpO1xyXG5cclxuICAgICAgICAvL2luaXRpYWxpemVzIGNvbGxpc2lvbiBzeXN0ZW1cclxuICAgICAgICB0aGlzLmNvbGxpc2lvbiA9IG5ldyBDb2xsaXNpb24odGhpcy5nYW1lLCB0aGlzLmhlcm8pO1xyXG4gICAgICAgIHRoaXMuaGVyby5jb25maWdfYm9keSh0aGlzLmNvbGxpc2lvbik7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb24uY29uZmlnX2NvbGxpc2lvbl9ncm91cHModGhpcy5tYXApO1xyXG4gICAgICAgIHRoaXMubWFwLmNvbmZpZ19hbGxfYm9kaWVzKHRoaXMuY29sbGlzaW9uLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uLmNvbmZpZ19jb2xsaXNpb25zKHRoaXMubWFwLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIsIHRoaXMubnBjX2dyb3VwKTtcclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi51cGRhdGVCb3VuZHNDb2xsaXNpb25Hcm91cCgpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRpYWxpemVfZ2FtZV9tYWluX2NvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyID0gbmV3IFRpbGVFdmVudE1hbmFnZXIodGhpcy5nYW1lLCB0aGlzLCB0aGlzLmhlcm8sIHRoaXMuY29sbGlzaW9uKTtcclxuICAgICAgICB0aGlzLmdhbWVfZXZlbnRfbWFuYWdlciA9IG5ldyBHYW1lRXZlbnRNYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vc2V0IGtleWJvYXJkIGN1cnNvcnNcclxuICAgICAgICB0aGlzLmN1cnNvcnMgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpO1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEucmVzZXRGWCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVfZ2FtZV9tYWluX2NvbnRyb2xzKCkge1xyXG4gICAgICAgIC8vc2V0IGluaXRpYWwgem9vbVxyXG4gICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX1dJRFRILCB0aGlzLnNjYWxlX2ZhY3RvciAqIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xyXG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xyXG5cclxuICAgICAgICAvL2VuYWJsZSBmdWxsIHNjcmVlblxyXG4gICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5mdWxsU2NyZWVuU2NhbGVNb2RlID0gUGhhc2VyLlNjYWxlTWFuYWdlci5TSE9XX0FMTDtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQub25UYXAuYWRkKChwb2ludGVyLCBpc19kb3VibGVfY2xpY2spID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzX2RvdWJsZV9jbGljaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnN0YXJ0RnVsbFNjcmVlbih0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5vbkZ1bGxTY3JlZW5DaGFuZ2UuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuID0gIXRoaXMuZnVsbHNjcmVlbjtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0dXBTY2FsZShudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9lbmFibGUgem9vbVxyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLk9ORSkub25Eb3duLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZ1bGxzY3JlZW4pIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0dXBTY2FsZShudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5UV08pLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mdWxsc2NyZWVuKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yID0gMjtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnNldHVwU2NhbGUodGhpcy5zY2FsZV9mYWN0b3IgKiBudW1iZXJzLkdBTUVfV0lEVEgsIHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX0hFSUdIVCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlRIUkVFKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlX2ZhY3RvciA9IDM7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX1dJRFRILCB0aGlzLnNjYWxlX2ZhY3RvciAqIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9lbmFibGUgcHN5bmVyZ2llcyBzaG9ydGN1dHMgZm9yIHRlc3RpbmdcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5RKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGVyby5pbl9hY3Rpb24oKSB8fCB0aGlzLm1lbnVfb3BlbiB8fCB0aGlzLmluX2JhdHRsZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3QubW92ZS5jYXN0KHRoaXMuaGVybywgdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX3Nob3J0Y3V0cy5tb3ZlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5XKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGVyby5pbl9hY3Rpb24oKSB8fCB0aGlzLm1lbnVfb3BlbiB8fCB0aGlzLmluX2JhdHRsZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3QuZnJvc3QuY2FzdCh0aGlzLmhlcm8sIHRoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9zaG9ydGN1dHMuZnJvc3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkUpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oZXJvLmluX2FjdGlvbigpIHx8IHRoaXMubWVudV9vcGVuIHx8IHRoaXMuaW5fYmF0dGxlKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdC5ncm93dGguY2FzdCh0aGlzLmhlcm8sIHRoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9zaG9ydGN1dHMuZ3Jvd3RoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNyZWF0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJfbG9hZGluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgJiYgIXRoaXMuZ2FtZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ICYmICF0aGlzLmhlcm8ucHVzaGluZyAmJiAhdGhpcy5tZW51X29wZW4gJiYgIXRoaXMuaGVyby5jYXN0aW5nX3BzeW5lcmd5ICYmICF0aGlzLmluX2JhdHRsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmhlcm8udXBkYXRlX3RpbGVfcG9zaXRpb24odGhpcy5tYXAuc3ByaXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyLmZpcmVfdHJpZ2dlcmVkX2V2ZW50cygpO1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbl9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleSh0aGlzLmhlcm8udGlsZV94X3BvcywgdGhpcy5oZXJvLnRpbGVfeV9wb3MpO1xyXG4gICAgICAgICAgICBpZiAobG9jYXRpb25fa2V5IGluIHRoaXMubWFwLmV2ZW50cykgeyAvL2NoZWNrIGlmIHRoZSBhY3R1YWwgdGlsZSBoYXMgYW4gZXZlbnRcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyLmNoZWNrX3RpbGVfZXZlbnRzKGxvY2F0aW9uX2tleSwgdGhpcy5tYXApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhlcm8udXBkYXRlKHRoaXMubWFwKTsgLy91cGRhdGUgaGVybyBwb3NpdGlvbi92ZWxvY2l0eS9zcHJpdGVcclxuICAgICAgICAgICAgdGhpcy5tYXAudXBkYXRlKCk7IC8vdXBkYXRlIG1hcCBhbmQgaXRzIG9iamVjdHMgcG9zaXRpb24vdmVsb2NpdHkvc3ByaXRlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZXJvLnN0b3BfY2hhcihmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhlcm8ucHVzaGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oZXJvLnNldF9hY3Rpb24oKTtcclxuICAgICAgICAgICAgfWVsc2UgaWYgKHRoaXMubWVudV9vcGVuICYmIHRoaXMubWVudV9zY3JlZW4uaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVfc2NyZWVuLnVwZGF0ZV9wb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5fYmF0dGxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9pbnN0YW5jZS51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy5kZWJ1Zy5zZXRfZGVidWdfaW5mbygpO1xyXG4gICAgICAgIGlmICh0aGlzLmdhbWUudGltZS5mcmFtZXMlOCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnLmZpbGxfa2V5X2RlYnVnX3RhYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWUudGltZS5mcmFtZXMlMzAgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Zy5maWxsX3N0YXRzX2RlYnVnX3RhYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG52YXIgZ29sZGVuX3N1biA9IG5ldyBHb2xkZW5TdW4oKTtcclxuXHJcbi8vZGVidWdnaW5nIHBvcnBvdXNlc1xyXG4od2luZG93IGFzIGFueSkuZGF0YSA9IGdvbGRlbl9zdW47XHJcbiIsImltcG9ydCB7IHJldmVyc2VfZGlyZWN0aW9ucywgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlYnVnIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19waHlzaWNzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ncmlkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19rZXlzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19zdGF0cyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2hvd19mcHMgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplX2NvbnRyb2xzKCkge1xyXG4gICAgICAgIC8vYWN0aXZhdGUgZGVidWcgbW9kZVxyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkQpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9kZWJ1Z19waHlzaWNzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9hY3RpdmF0ZSBncmlkIG1vZGVcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5HKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVfZ3JpZCgpO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAvL2FjdGl2YXRlIGtleXMgZGVidWcgbW9kZVxyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkspLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9rZXlzKCk7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vYWN0aXZhdGUgc3RhdHMgZGVidWcgbW9kZVxyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlMpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9zdGF0cygpO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAvL2VuYWJsZSBmcHMgc2hvd1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkYpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9mcHMoKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfZGVidWdfcGh5c2ljcyhmbGFnKSB7XHJcbiAgICAgICAgZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmRlYnVnID0gZmxhZztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIGlmICghc3ByaXRlLmlzX25wYyAmJiAhc3ByaXRlLmlzX2ludGVyYWN0YWJsZV9vYmplY3QpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5ib2R5KSBjb250aW51ZTtcclxuICAgICAgICAgICAgc3ByaXRlLmJvZHkuZGVidWcgPSBmbGFnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVfZGVidWdfcGh5c2ljcygpIHtcclxuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZyA9ICF0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcclxuICAgICAgICB0aGlzLnVwZGF0ZV9kZWJ1Z19waHlzaWNzKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmRlYnVnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllc1tpXS5kZWJ1ZyA9ICF0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldLmRlYnVnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XHJcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrLmRlYnVnID0gIWludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2suZGVidWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19waHlzaWNzID0gIXRoaXMuZGVidWdfcGh5c2ljcztcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVfa2V5cygpIHtcclxuICAgICAgICB0aGlzLmRlYnVnX2tleXMgPSAhdGhpcy5kZWJ1Z19rZXlzO1xyXG4gICAgICAgIGNvbnN0IHRvZ2dsZXIgPSAoaXNfZG93biwgZSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgY2xhc3NfbGlzdDtcclxuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucmVwZWF0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIC51cFwiKS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzX2xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyAuZG93blwiKS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzX2xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyAucmlnaHRcIikuY2xhc3NMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXBlYXQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgLmxlZnRcIikuY2xhc3NMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoY2xhc3NfbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX2Rvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0LmFkZCgncHJlc3NlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0LnJlbW92ZSgncHJlc3NlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnX2tleXMpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrZXlfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5vbmtleWRvd24gPSB0b2dnbGVyLmJpbmQobnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ua2V5dXAgPSB0b2dnbGVyLmJpbmQobnVsbCwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia2V5X2RlYnVnXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQub25rZXlkb3duID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5vbmtleXVwID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmaWxsX2tleV9kZWJ1Z190YWJsZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGVidWdfa2V5cykgcmV0dXJuO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5kaXJlY3Rpb25cIikuaW5uZXJIVE1MID0gcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uXTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyB0YWJsZSAuYWN0aW9uXCIpLmlubmVySFRNTCA9IHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC54XCIpLmlubmVySFRNTCA9IGAke3RoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3N9LyR7dGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueC50b0ZpeGVkKDMpfWA7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnlcIikuaW5uZXJIVE1MID0gYCR7dGhpcy5kYXRhLmhlcm8udGlsZV95X3Bvc30vJHt0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55LnRvRml4ZWQoMyl9YDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyB0YWJsZSAuc3BlZWRfeFwiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS52ZWxvY2l0eS54LnRvRml4ZWQoMyk7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnNwZWVkX3lcIikuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkudmVsb2NpdHkueS50b0ZpeGVkKDMpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5mb3JjZV9kaXJlY3Rpb25cIikuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uZm9yY2VfZGlyZWN0aW9uO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5zdG9wX2J5X2NvbGxpZGluZ1wiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZztcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVfZnBzKCkge1xyXG4gICAgICAgIHRoaXMuc2hvd19mcHMgPSAhdGhpcy5zaG93X2ZwcztcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVfZ3JpZCgpIHtcclxuICAgICAgICB0aGlzLmdyaWQgPSAhdGhpcy5ncmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9kZWJ1Z19pbmZvKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KCcnLCAwLCAwKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd19mcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoJ0ZQUzogJyArIHRoaXMuZ2FtZS50aW1lLmZwcyB8fCAnRlBTOiAtLScsIDUsIDE1LCBcIiMwMGZmMDBcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ncmlkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGVfd2lkdGggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5nYW1lLndvcmxkLndpZHRoOyB4ICs9IHRpbGVfd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKG5ldyBQaGFzZXIuTGluZSh4LCAwLCB4LCB0aGlzLmdhbWUud29ybGQuaGVpZ2h0KSwgJ3JnYmEoMCwyNTUsMjU1LDAuMzUpJywgZmFsc2UsIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGVfaGVpZ2h0ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmdhbWUud29ybGQuaGVpZ2h0OyB5ICs9IHRpbGVfaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcuZ2VvbShuZXcgUGhhc2VyLkxpbmUoMCwgeSwgdGhpcy5nYW1lLndvcmxkLndpZHRoLCB5KSwgJ3JnYmEoMCwyNTUsMjU1LDAuMzUpJywgZmFsc2UsIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB4X3BvcyA9IHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MqdGlsZV93aWR0aDtcclxuICAgICAgICAgICAgbGV0IHlfcG9zID0gdGhpcy5kYXRhLmhlcm8udGlsZV95X3Bvcyp0aWxlX2hlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLmdlb20obmV3IFBoYXNlci5SZWN0YW5nbGUoeF9wb3MsIHlfcG9zLCB0aWxlX3dpZHRoLCB0aWxlX2hlaWdodCksICdyZ2JhKDI1NSwwLDAsMC41KScpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcuZ2VvbShuZXcgUGhhc2VyLkNpcmNsZSh0aGlzLmRhdGEuaGVyby5zcHJpdGUueCwgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnksIDUpLCAncmdiYSgyMCw3NSwwLDEuMCknKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnQgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb3MgPSBwb2ludC5zcGxpdCgnXycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLmdlb20obmV3IFBoYXNlci5SZWN0YW5nbGUocG9zWzBdKnRpbGVfd2lkdGgsIHBvc1sxXSp0aWxlX2hlaWdodCwgdGlsZV93aWR0aCwgdGlsZV9oZWlnaHQpLCAncmdiYSgyNTUsMjU1LDYwLDAuNyknKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIud2l0aGluR2FtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2VfeCA9ICgodGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy5nYW1lLmlucHV0Lm1vdXNlUG9pbnRlci54L3RoaXMuZGF0YS5zY2FsZV9mYWN0b3IpL3RoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCkgfCAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2VfeSA9ICgodGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy5nYW1lLmlucHV0Lm1vdXNlUG9pbnRlci55L3RoaXMuZGF0YS5zY2FsZV9mYWN0b3IpL3RoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQpIHwgMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KGB4OiAke21vdXNlX3h9LCB5OiAke21vdXNlX3l9YCwgMTQwLCAxNSwgXCIjMDBmZjAwXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRfa2V5ID0gbW91c2VfeCArIFwiX1wiICsgbW91c2VfeTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudF9rZXkgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLmRhdGEubWFwLmV2ZW50c1tldmVudF9rZXldLm1hcChldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBldmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTogXCJbUGhhc2VyLkdhbWVdXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIltHb2xkZW5TdW5dXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IGV2ZW50LmFjdGl2YXRpb25fZGlyZWN0aW9ucy5tYXAoZGlyID0+IHJldmVyc2VfZGlyZWN0aW9uc1tkaXJdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihldmVudC5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdCAmJiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Q6IGBbJHtldmVudC5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZX1dYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvYmplY3RfaW5zcGVjdG9yXCIpLmlubmVyVGV4dCA9IEpTT04uc3RyaW5naWZ5KGV2ZW50cywgbnVsbCwgNCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcudGV4dChgeDogLS0sIHk6IC0tYCwgMTQwLCAxNSwgXCIjMDBmZjAwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvYmplY3RfaW5zcGVjdG9yXCIpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZV9zdGF0cygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5pbl9iYXR0bGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0cyA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSAhdGhpcy5kZWJ1Z19zdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0X2VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXRzX2RlYnVnX3NlbGVjdFwiKTtcclxuICAgICAgICBpZiAodGhpcy5kZWJ1Z19zdGF0cykge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnX3N0YXRzX2luZm8gPSB7XHJcbiAgICAgICAgICAgICAgICBjaGFyczogdGhpcy5kYXRhLmJhdHRsZV9pbnN0YW5jZS5hbGxpZXNfaW5mby5jb25jYXQodGhpcy5kYXRhLmJhdHRsZV9pbnN0YW5jZS5lbmVtaWVzX2luZm8pLm1hcChpbmZvID0+IGluZm8uaW5zdGFuY2UpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IDAsXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcjogZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHNfaW5mby5zZWxlY3RlZCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvLmNoYXJzLmZvckVhY2goKGNoYXIsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjaGFyLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0X2VsZW1lbnQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNlbGVjdF9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuZGVidWdfc3RhdHNfaW5mby5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z19zdGF0c19pbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RfZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmRlYnVnX3N0YXRzX2luZm8ubGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdfc2VsZWN0XCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmaWxsX3N0YXRzX2RlYnVnX3RhYmxlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kZWJ1Z19zdGF0cyB8fCAhdGhpcy5kYXRhLmluX2JhdHRsZSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmRlYnVnX3N0YXRzX2luZm8uY2hhcnNbdGhpcy5kZWJ1Z19zdGF0c19pbmZvLnNlbGVjdGVkXTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5uYW1lXCIpLmlubmVySFRNTCA9IGNoYXIubmFtZTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5jbGFzc1wiKS5pbm5lckhUTUwgPSBjaGFyLmNsYXNzLm5hbWU7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubGV2ZWxcIikuaW5uZXJIVE1MID0gY2hhci5sZXZlbDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5leHBcIikuaW5uZXJIVE1MID0gY2hhci5jdXJyZW50X2V4cDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5jdXJyZW50X2hwXCIpLmlubmVySFRNTCA9IGNoYXIuY3VycmVudF9ocDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXhfaHBcIikuaW5uZXJIVE1MID0gY2hhci5tYXhfaHA7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuY3VycmVudF9wcFwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfcHA7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWF4X3BwXCIpLmlubmVySFRNTCA9IGNoYXIubWF4X3BwO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmF0a1wiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfYXRrO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmRlZlwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfZGVmO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmFnaVwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfYWdpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmx1a1wiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfbHVrO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnZlbnVzX3Bvd2VyXCIpLmlubmVySFRNTCA9IGNoYXIudmVudXNfcG93ZXJfY3VycmVudDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC52ZW51c19yZXNpc3RcIikuaW5uZXJIVE1MID0gY2hhci52ZW51c19yZXNpc3RfY3VycmVudDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC52ZW51c19sZXZlbFwiKS5pbm5lckhUTUwgPSBjaGFyLnZlbnVzX2xldmVsX2N1cnJlbnQ7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWVyY3VyeV9wb3dlclwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfcG93ZXJfY3VycmVudDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tZXJjdXJ5X3Jlc2lzdFwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfcmVzaXN0X2N1cnJlbnQ7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWVyY3VyeV9sZXZlbFwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfbGV2ZWxfY3VycmVudDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXJzX3Bvd2VyXCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19wb3dlcl9jdXJyZW50O1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1hcnNfcmVzaXN0XCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19yZXNpc3RfY3VycmVudDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXJzX2xldmVsXCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19sZXZlbF9jdXJyZW50O1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmp1cGl0ZXJfcG93ZXJcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX3Bvd2VyX2N1cnJlbnQ7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuanVwaXRlcl9yZXNpc3RcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX3Jlc2lzdF9jdXJyZW50O1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmp1cGl0ZXJfbGV2ZWxcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX2xldmVsX2N1cnJlbnQ7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAudHVybnNcIikuaW5uZXJIVE1MID0gY2hhci50dXJucztcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC50ZW1wX3N0YXR1c2VzXCIpLmlubmVySFRNTCA9IFsuLi5jaGFyLnRlbXBvcmFyeV9zdGF0dXNdLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnBlcm1fc3RhdHVzZXNcIikuaW5uZXJIVE1MID0gWy4uLmNoYXIucGVybWFuZW50X3N0YXR1c10uam9pbihcIiBcIik7XHJcbiAgICAgICAgbGV0IGJ1ZmZfaHRtbCA9IFwiXCI7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoY2hhci5lZmZlY3RfdHVybnNfY291bnQpLnNvcnQoKS5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlZmZlY3QgPT09IFwicG93ZXJcIiB8fCBlZmZlY3QgPT09IFwicmVzaXN0XCIpIHtcclxuICAgICAgICAgICAgICAgIG9yZGVyZWRfZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fVske2VsZW1lbnR9XS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF1bZWxlbWVudF19IDxicj5gO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF19IDxicj5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuYnVmZlwiKS5pbm5lckhUTUwgPSBidWZmX2h0bWw7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuZWZmZWN0X2NvdW50XCIpLmlubmVySFRNTCA9IGNoYXIuZWZmZWN0cy5sZW5ndGg7XHJcbiAgICB9XHJcbn0iLCJmdW5jdGlvbiBsb2FkX2J1dHRvbnMoZ2FtZSkge1xyXG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ2J1dHRvbnMnLCAnYXNzZXRzL2ltYWdlcy9idXR0b25zL2J1dHRvbnMucG5nJywgJ2Fzc2V0cy9pbWFnZXMvYnV0dG9ucy9idXR0b25zLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgnc2hpZnRfa2V5Ym9hcmQnLCAnYXNzZXRzL2ltYWdlcy9rZXlib2FyZC9zaGlmdC5wbmcnKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgndGFiX2tleWJvYXJkJywgJ2Fzc2V0cy9pbWFnZXMva2V5Ym9hcmQvdGFiLnBuZycpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdzcGFjZWJhcl9rZXlib2FyZCcsICdhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3NwYWNlYmFyLnBuZycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkX2RiX2ZpbGVzKGdhbWUpIHtcclxuICAgIGdhbWUubG9hZC5qc29uKCdpbml0X2RiJywgJ2luaXQuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmpzb24oJ2NsYXNzZXNfZGInLCAnYXNzZXRzL2Ricy9jbGFzc2VzX2RiLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5qc29uKCdhYmlsaXRpZXNfZGInLCAnYXNzZXRzL2Ricy9hYmlsaXRpZXNfZGIuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmpzb24oJ2l0ZW1zX2RiJywgJ2Fzc2V0cy9kYnMvaXRlbXNfZGIuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmpzb24oJ25wY19kYicsICdhc3NldHMvZGJzL25wY19kYi5qc29uJyk7XHJcbiAgICBnYW1lLmxvYWQuanNvbignaW50ZXJhY3RhYmxlX29iamVjdHNfZGInLCAnYXNzZXRzL2Ricy9pbnRlcmFjdGFibGVfb2JqZWN0c19kYi5qc29uJyk7XHJcbiAgICBnYW1lLmxvYWQuanNvbignZGppbm5pX2RiJywgJ2Fzc2V0cy9kYnMvZGppbm5pX2RiLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5qc29uKCdlbmVtaWVzX2RiJywgJ2Fzc2V0cy9kYnMvZW5lbWllc19kYi5qc29uJyk7XHJcbiAgICBnYW1lLmxvYWQuanNvbignZW5lbWllc19wYXJ0aWVzX2RiJywgJ2Fzc2V0cy9kYnMvZW5lbWllc19wYXJ0aWVzX2RiLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5qc29uKCdtYXBzX2RiJywgJ2Fzc2V0cy9kYnMvbWFwc19kYi5qc29uJyk7XHJcbiAgICBnYW1lLmxvYWQuanNvbignbWFpbl9jaGFyc19kYicsICdhc3NldHMvZGJzL21haW5fY2hhcnNfZGIuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmpzb24oJ3N1bW1vbnNfZGInLCAnYXNzZXRzL2Ricy9zdW1tb25zX2RiLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5qc29uKCdtaXNjX2FuaW1hdGlvbnNfZGInLCAnYXNzZXRzL2Ricy9taXNjX2FuaW1hdGlvbnNfZGIuanNvbicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkX21pc2MoZ2FtZSkge1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdzaGFkb3cnLCAnYXNzZXRzL2ltYWdlcy9taXNjL3NoYWRvdy5qcGcnKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgnY3Vyc29yJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9jdXJzb3IuZ2lmJyk7XHJcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ2dyZWVuX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9ncmVlbl9hcnJvdy5naWYnKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgndXBfYXJyb3cnLCAnYXNzZXRzL2ltYWdlcy9taXNjL3VwX2Fycm93LmdpZicpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdkb3duX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9kb3duX2Fycm93LmdpZicpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdwYWdlX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9wYWdlX2Fycm93LnBuZycpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdwc3luZXJneV9hdXJhJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9wc3luZXJneV9hdXJhLnBuZycpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdlcXVpcHBlZCcsICdhc3NldHMvaW1hZ2VzL21pc2MvZXF1aXBwZWQuZ2lmJyk7XHJcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3ZlbnVzX3N0YXInLCAnYXNzZXRzL2ltYWdlcy9taXNjL3ZlbnVzX3N0YXIuZ2lmJyk7XHJcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ21lcmN1cnlfc3RhcicsICdhc3NldHMvaW1hZ2VzL21pc2MvbWVyY3VyeV9zdGFyLmdpZicpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdtYXJzX3N0YXInLCAnYXNzZXRzL2ltYWdlcy9taXNjL21hcnNfc3Rhci5naWYnKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgnanVwaXRlcl9zdGFyJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9qdXBpdGVyX3N0YXIuZ2lmJyk7XHJcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3N0YXRfdXAnLCAnYXNzZXRzL2ltYWdlcy9taXNjL3N0YXRfdXAuZ2lmJyk7XHJcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3N0YXRfZG93bicsICdhc3NldHMvaW1hZ2VzL21pc2Mvc3RhdF9kb3duLmdpZicpO1xyXG4gICAgZ2FtZS5sb2FkLmltYWdlKCdhcnJvd19jaGFuZ2UnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2Fycm93X2NoYW5nZS5wbmcnKTtcclxuICAgIGdhbWUubG9hZC5pbWFnZSgnZnJvc3Rfc25vd2ZsYWtlJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvc25vd2ZsYWtlLnBuZycpO1xyXG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ2R1c3QnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2R1c3QucG5nJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9kdXN0Lmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdiYXR0bGVfY3Vyc29yJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9iYXR0bGVfY3Vyc29yLnBuZycsICdhc3NldHMvaW1hZ2VzL21pc2MvYmF0dGxlX2N1cnNvci5qc29uJyk7XHJcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgncmFuZ2VzJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9yYW5nZXMucG5nJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9yYW5nZXMuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ3BzeW5lcmd5X3BhcnRpY2xlJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfcGFydGljbGUucG5nJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfcGFydGljbGUuanNvbicpO1xyXG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ3BzeW5lcmd5X2JhbGwnLCAnYXNzZXRzL2ltYWdlcy9pbnRlcmFjdGFibGVfb2JqZWN0cy9wc3luZXJneV9iYWxsLnBuZycsICdhc3NldHMvaW1hZ2VzL2ludGVyYWN0YWJsZV9vYmplY3RzL3BzeW5lcmd5X2JhbGwuanNvbicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkX2Fzc2V0cyhnYW1lKSB7XHJcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgnYmF0dGxlX2JhY2tncm91bmRzJywgJ2Fzc2V0cy9pbWFnZXMvYmF0dGxlX2JhY2tncm91bmRzL2JhdHRsZV9iYWNrZ3JvdW5kcy5wbmcnLCAnYXNzZXRzL2ltYWdlcy9iYXR0bGVfYmFja2dyb3VuZHMvYmF0dGxlX2JhY2tncm91bmRzLmpzb24nKTtcclxuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdhdmF0YXJzJywgJ2Fzc2V0cy9pbWFnZXMvYXZhdGFycy9hdmF0YXJzLnBuZycsICdhc3NldHMvaW1hZ2VzL2F2YXRhcnMvYXZhdGFycy5qc29uJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRfZm9udHMoZ2FtZSkge1xyXG4gICAgZ2FtZS5sb2FkLmJpdG1hcEZvbnQoJ2dzLWJtcC1mb250JywgJ2Fzc2V0cy9mb250L2dvbGRlbi1zdW4ucG5nJywgJ2Fzc2V0cy9mb250L2dvbGRlbi1zdW4uZm50Jyk7XHJcbiAgICBnYW1lLmxvYWQuYml0bWFwRm9udCgnZ3MtaXRhbGljLWJtcC1mb250JywgJ2Fzc2V0cy9mb250L2dvbGRlbi1zdW4taXRhbGljLnBuZycsICdhc3NldHMvZm9udC9nb2xkZW4tc3VuLWl0YWxpYy5mbnQnKTtcclxuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KCdncy1pdGVtLWJtcC1mb250JywgJ2Fzc2V0cy9mb250L2dzLWl0ZW0tZm9udC5wbmcnLCAnYXNzZXRzL2ZvbnQvZ3MtaXRlbS1mb250LmZudCcpO1xyXG4gICAgZ2FtZS5sb2FkLmJpdG1hcEZvbnQoJ2dzLXNob3AtYm1wLWZvbnQnLCAnYXNzZXRzL2ZvbnQvZ3Mtc2hvcC1mb250LnBuZycsICdhc3NldHMvZm9udC9ncy1zaG9wLWZvbnQuZm50Jyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkX2FsbChnYW1lKSB7XHJcbiAgICBsb2FkX2RiX2ZpbGVzKGdhbWUpO1xyXG4gICAgbG9hZF9taXNjKGdhbWUpO1xyXG4gICAgbG9hZF9hc3NldHMoZ2FtZSk7XHJcbiAgICBsb2FkX2J1dHRvbnMoZ2FtZSk7XHJcbiAgICBsb2FkX2ZvbnRzKGdhbWUpO1xyXG4gICAgZ2FtZS5sb2FkLnNjcmlwdCgnY29sb3JfZmlsdGVycycsICdwbHVnaW5zL2NvbG9yX2ZpbHRlcnMuanMnKTtcclxufSIsImV4cG9ydCBjbGFzcyBDb2xsaXNpb24ge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgaGVybykge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5oZXJvID0gaGVybztcclxuICAgICAgICB0aGlzLmNvbmZpZ193b3JsZCgpO1xyXG4gICAgICAgIHRoaXMuaGVyb19jb2xsaXNpb25fZ3JvdXAgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVDb2xsaXNpb25Hcm91cCgpO1xyXG4gICAgICAgIHRoaXMuZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcclxuICAgICAgICB0aGlzLm1hcF9jb2xsaXNpb25fZ3JvdXAgPSBnYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcclxuICAgICAgICB0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzID0ge307XHJcbiAgICAgICAgdGhpcy5tYXhfbGF5ZXJzX2NyZWF0ZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25maWdfd29ybGQoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3Muc3RhcnRTeXN0ZW0oUGhhc2VyLlBoeXNpY3MuUDJKUyk7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuc2V0SW1wYWN0RXZlbnRzKHRydWUpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwucmVzdGl0dXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwucmVsYXhhdGlvbiA9IDg7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuZGVmYXVsdENvbnRhY3RNYXRlcmlhbC5mcmljdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuZGVmYXVsdENvbnRhY3RNYXRlcmlhbC5jb250YWN0U2tpblNpemUgPSAxZS0zO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLnNldEdsb2JhbFN0aWZmbmVzcygxZTUpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3RpdHV0aW9uID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25maWdfY29sbGlzaW9uX2dyb3VwcyhtYXApIHtcclxuICAgICAgICAvL3AyIGhhcyBhIGxpbWl0IG51bWJlciBvZiBjb2xsaXNpb24gZ3JvdXBzIHRoYXQgY2FuIGJlIGNyZWF0ZWQuIFRoZW4sIE5QQ3MgYW5kIEkuIE9ianMuIGdyb3VwcyB3aWxsIGJlIGNyZWF0ZWQgb24gZGVtYW5kLlxyXG4gICAgICAgIGZvciAobGV0IGxheWVyX2luZGV4ID0gdGhpcy5tYXhfbGF5ZXJzX2NyZWF0ZWQ7IGxheWVyX2luZGV4IDwgbWFwLmNvbGxpc2lvbl9sYXllcnNfbnVtYmVyOyArK2xheWVyX2luZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHNbbGF5ZXJfaW5kZXhdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2xheWVyX2luZGV4XSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWF4X2xheWVyc19jcmVhdGVkID0gTWF0aC5tYXgodGhpcy5tYXhfbGF5ZXJzX2NyZWF0ZWQsIG1hcC5jb2xsaXNpb25fbGF5ZXJzX251bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX2NvbGxpc2lvbnMobWFwLCBjb2xsaXNpb25fbGF5ZXIsIG5wY19ncm91cCkge1xyXG4gICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLm1hcF9jb2xsaXNpb25fZ3JvdXApO1xyXG4gICAgICAgIG1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwcykge1xyXG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaWRlX2luZGV4XSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2xsaXNpb25fbGF5ZXIgaW4gdGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwcykge1xyXG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaXNpb25fbGF5ZXJdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cCh0aGlzLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbY29sbGlkZV9pbmRleF0sIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29sbGlzaW9uX2xheWVyIGluIHRoaXMuaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwcykge1xyXG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpc2lvbl9sYXllcl0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gbnBjX2dyb3VwLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5pc19ucGMgJiYgIXNwcml0ZS5pc19pbnRlcmFjdGFibGVfb2JqZWN0KSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKCFzcHJpdGUuYm9keSkgY29udGludWU7XHJcbiAgICAgICAgICAgIHNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuaGVyb19jb2xsaXNpb25fZ3JvdXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5keW5hbWljX2V2ZW50c19jb2xsaXNpb25fZ3JvdXApO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9tYXBfYm9keShkYXRhLCBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXgpIHtcclxuICAgICAgICBpZiAoZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyID09PSBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXgpIHJldHVybjtcclxuICAgICAgICBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPSBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXg7XHJcbiAgICAgICAgdGhpcy5oZXJvLnNoYWRvdy5iYXNlX2NvbGxpZGVyX2xheWVyID0gZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyO1xyXG4gICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYmFzZV9jb2xsaWRlcl9sYXllciA9IGRhdGEubWFwLmNvbGxpc2lvbl9sYXllcjtcclxuICAgICAgICBkYXRhLm1hcC5jb25maWdfYm9keSh0aGlzLCBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnX2NvbGxpc2lvbl9ncm91cHMoZGF0YS5tYXApO1xyXG4gICAgICAgIHRoaXMuY29uZmlnX2NvbGxpc2lvbnMoZGF0YS5tYXAsIGRhdGEubWFwLmNvbGxpc2lvbl9sYXllciwgZGF0YS5ucGNfZ3JvdXApO1xyXG4gICAgICAgIGxldCBsYXllcnMgPSBkYXRhLm1hcC5sYXllcnM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGxheWVyID0gbGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICBsZXQgaXNfb3ZlciA9IGxheWVyLnByb3BlcnRpZXMub3Zlci50b1N0cmluZygpLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgaWYgKGlzX292ZXIubGVuZ3RoID4gbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpc19vdmVyID0gaXNfb3Zlci5sZW5ndGggPiBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXggPyAoaXNfb3ZlcltuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXhdKSB8IDAgOiAoaXNfb3ZlclswXSkgfCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX292ZXIgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAucmVtb3ZlKGxheWVyLnNwcml0ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgZGF0YS5vdmVybGF5ZXJfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyArK2luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGRhdGEub3ZlcmxheWVyX2dyb3VwLmNoaWxkcmVuW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmxheWVyX3ogPiBsYXllci56KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm92ZXJsYXllcl9ncm91cC5hZGRBdChsYXllci5zcHJpdGUsIGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZGF0YS5vdmVybGF5ZXJfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3ZlcmxheWVyX2dyb3VwLmFkZChsYXllci5zcHJpdGUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5vdmVybGF5ZXJfZ3JvdXAucmVtb3ZlKGxheWVyLnNwcml0ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgZGF0YS51bmRlcmxheWVyX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGF5ZXJfeiA+IGxheWVyLnopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudW5kZXJsYXllcl9ncm91cC5hZGRBdChsYXllci5zcHJpdGUsIGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZGF0YS51bmRlcmxheWVyX2dyb3VwLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuYWRkKGxheWVyLnNwcml0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbnRyb2xsYWJsZUNoYXIgfSBmcm9tIFwiLi9Db250cm9sbGFibGVDaGFyLmpzXCI7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgVGlsZUV2ZW50LCBldmVudF90eXBlcyB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RpbGVFdmVudC5qc1wiO1xyXG5pbXBvcnQgeyBnZXRfdHJhbnNpdGlvbl9kaXJlY3Rpb25zLCByYW5nZV8zNjAsIGRpcmVjdGlvbnMsIGJhc2VfYWN0aW9ucyB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBub3JtYWxfcHVzaCB9IGZyb20gXCIuL2ludGVyYWN0YWJsZV9vYmplY3RzL3B1c2guanNcIjtcclxuXHJcbmNvbnN0IFNQRUVEX0xJTUlUX1RPX1NUT1AgPSAxMztcclxuY29uc3QgTUlOSU1BTF9TTE9QRSA9IDAuMTtcclxuXHJcbi8vcm90YXRpb25fa2V5IGNhbiBjb252ZXJ0IGZyb20gcHJlc3NlZF9rZXlzIHRvIHRoZSBjb3JyZXNwb25kaW5nIGluLWdhbWUgcm90YXRpb25cclxuY29uc3Qgcm90YXRpb25fa2V5ID0gW1xyXG4gICAgbnVsbCwgICAgICAgICAgICAgICAgICAgLy9ubyBrZXlzIHByZXNzZWRcclxuICAgIGRpcmVjdGlvbnMucmlnaHQsICAgICAgIC8vcmlnaHRcclxuICAgIGRpcmVjdGlvbnMubGVmdCwgICAgICAgIC8vbGVmdFxyXG4gICAgbnVsbCwgICAgICAgICAgICAgICAgICAgLy9yaWdodCBhbmQgbGVmdFxyXG4gICAgZGlyZWN0aW9ucy51cCwgICAgICAgICAgLy91cFxyXG4gICAgZGlyZWN0aW9ucy51cF9yaWdodCwgICAgLy91cCBhbmQgcmlnaHRcclxuICAgIGRpcmVjdGlvbnMudXBfbGVmdCwgICAgIC8vdXAgYW5kIGxlZnRcclxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vdXAsIGxlZnQsIGFuZCByaWdodFxyXG4gICAgZGlyZWN0aW9ucy5kb3duLCAgICAgICAgLy9kb3duXHJcbiAgICBkaXJlY3Rpb25zLmRvd25fcmlnaHQsICAvL2Rvd24gYW5kIHJpZ2h0XHJcbiAgICBkaXJlY3Rpb25zLmRvd25fbGVmdCwgICAvL2Rvd24gYW5kIGxlZnRcclxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vZG93biwgbGVmdCwgYW5kIHJpZ2h0XHJcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24gYW5kIHVwXHJcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24sIHVwLCBhbmQgcmlnaHRcclxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vZG93biwgdXAsIGFuZCBsZWZ0XHJcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24sIHVwLCBsZWZ0LCBhbmQgcmlnaHRcclxuXTtcclxuXHJcbi8vcm90YXRpb25fbm9ybWFsIGNvbnZlcnRzIGZyb20gbm9ybWFsX2FuZ2xlIHJlZ2lvbiAoZmxvb3IoKGFuZ2xlLTE1KS8zMCkpIHRvIGluLWdhbWUgcm90YXRpb25cclxuY29uc3Qgcm90YXRpb25fbm9ybWFsID0gW1xyXG4gICAgZGlyZWN0aW9ucy5yaWdodCwgICAgICAvLzM0NS0xNSBkZWdyZWVzXHJcbiAgICBkaXJlY3Rpb25zLnVwX3JpZ2h0LCAgIC8vMTUtNDUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy51cF9yaWdodCwgICAvLzQ1LTc1IGRlZ3JlZXNcclxuICAgIGRpcmVjdGlvbnMudXAsICAgICAgICAgLy83NS0xMDUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy51cF9sZWZ0LCAgICAvLzEwNS0xMzUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy51cF9sZWZ0LCAgICAvLzEzNS0xNjUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5sZWZ0LCAgICAgICAvLzE2NS0xOTUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5kb3duX2xlZnQsICAvLzE5NS0yMjUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5kb3duX2xlZnQsICAvLzIyNS0yNTUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5kb3duLCAgICAgICAvLzI1NS0yODUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5kb3duX3JpZ2h0LCAvLzI4NS0zMTUgZGVncmVlc1xyXG4gICAgZGlyZWN0aW9ucy5kb3duX3JpZ2h0LCAvLzMxNS0zNDUgZGVncmVlc1xyXG5dO1xyXG5cclxuY29uc3Qgc3BlZWRzID0ge1xyXG4gICAgW2RpcmVjdGlvbnMucmlnaHRdOiB7eDogMSwgeTogMH0sXHJcbiAgICBbZGlyZWN0aW9ucy5sZWZ0XToge3g6IC0xLCB5OiAwfSxcclxuICAgIFtkaXJlY3Rpb25zLnVwXToge3g6IDAsIHk6IC0xfSxcclxuICAgIFtkaXJlY3Rpb25zLnVwX3JpZ2h0XToge3g6IG51bWJlcnMuSU5WX1NRUlQyLCB5OiAtbnVtYmVycy5JTlZfU1FSVDJ9LFxyXG4gICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IHt4OiAtbnVtYmVycy5JTlZfU1FSVDIsIHk6IC1udW1iZXJzLklOVl9TUVJUMn0sXHJcbiAgICBbZGlyZWN0aW9ucy5kb3duXToge3g6IDAsIHk6IDF9LFxyXG4gICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IHt4OiBudW1iZXJzLklOVl9TUVJUMiwgeTogbnVtYmVycy5JTlZfU1FSVDJ9LFxyXG4gICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XToge3g6IC1udW1iZXJzLklOVl9TUVJUMiwgeTogbnVtYmVycy5JTlZfU1FSVDJ9XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgSGVybyBleHRlbmRzIENvbnRyb2xsYWJsZUNoYXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwga2V5X25hbWUsIGluaXRpYWxfeCwgaW5pdGlhbF95LCBpbml0aWFsX2FjdGlvbiwgaW5pdGlhbF9kaXJlY3Rpb24pIHtcclxuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBrZXlfbmFtZSwgaW5pdGlhbF94LCBpbml0aWFsX3ksIGluaXRpYWxfYWN0aW9uLCBpbml0aWFsX2RpcmVjdGlvbiwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5hcnJvd19pbnB1dHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudHJ5aW5nX3RvX3B1c2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wdXNoX3RpbWVyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfYXJyb3dfaW5wdXRzKCkge1xyXG4gICAgICAgIHRoaXMuYXJyb3dfaW5wdXRzID1cclxuICAgICAgICAgICAgICAxICogdGhpcy5kYXRhLmN1cnNvcnMucmlnaHQuaXNEb3duXHJcbiAgICAgICAgICAgIHwgMiAqIHRoaXMuZGF0YS5jdXJzb3JzLmxlZnQuaXNEb3duXHJcbiAgICAgICAgICAgIHwgNCAqIHRoaXMuZGF0YS5jdXJzb3JzLnVwLmlzRG93blxyXG4gICAgICAgICAgICB8IDggKiB0aGlzLmRhdGEuY3Vyc29ycy5kb3duLmlzRG93bjtcclxuICAgICAgICB0aGlzLnJlcXVpcmVkX2RpcmVjdGlvbiA9IHJvdGF0aW9uX2tleVt0aGlzLmFycm93X2lucHV0c107XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3NwZWVkX2ZhY3RvcnMoY2hlY2tfb25fZXZlbnQgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChjaGVja19vbl9ldmVudCAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGRlc2lyZWRfZGlyZWN0aW9uID0gcm90YXRpb25fa2V5W3RoaXMuYXJyb3dfaW5wdXRzXTtcclxuICAgICAgICBpZiAodGhpcy5jbGltYmluZykge1xyXG4gICAgICAgICAgICBpZiAoZGVzaXJlZF9kaXJlY3Rpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHRoaXMueV9zcGVlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkbGVfY2xpbWJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKChkZXNpcmVkX2RpcmVjdGlvbiAmIDEpID09PSAxKSB7IC8vdHJhbnNmb3JtcyBkaWFnb25hbCBtb3ZlbWVudHMgaW4gbm9uLWRpYWdvbmFsXHJcbiAgICAgICAgICAgICAgICAgICAgLS1kZXNpcmVkX2RpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2RpcmVjdGlvbihkZXNpcmVkX2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkbGVfY2xpbWJpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHNwZWVkc1tkZXNpcmVkX2RpcmVjdGlvbl0ueDtcclxuICAgICAgICAgICAgICAgIHRoaXMueV9zcGVlZCA9IHNwZWVkc1tkZXNpcmVkX2RpcmVjdGlvbl0ueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vd2hlbiBmb3JjZV9kaXJlY3Rpb24gaXMgdHJ1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgaGVybyBpcyBnb2luZyB0byBmYWNlIGEgZGlmZmVyZW50IGRpcmVjdGlvbiBmcm9tIHRoZSBvbmUgc3BlY2lmaWVkIGluIHRoZSBrZXlib2FyZCBhcnJvd3NcclxuICAgICAgICAgICAgaWYgKGRlc2lyZWRfZGlyZWN0aW9uICE9PSBudWxsIHx8IHRoaXMuZm9yY2VfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZm9yY2VfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IGRlc2lyZWRfZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWUudGltZS5mcmFtZXMgJiAxKSB7IC8vdHVybiB0aW1lIGZyYW1lIHJhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNpcmVkX2RpcmVjdGlvbiA9IGdldF90cmFuc2l0aW9uX2RpcmVjdGlvbnModGhpcy5kZXNpcmVkX2RpcmVjdGlvbiwgZGVzaXJlZF9kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZF9kaXJlY3Rpb24gPSB0aGlzLmN1cnJlbnRfZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy54X3NwZWVkID0gc3BlZWRzW2Rlc2lyZWRfZGlyZWN0aW9uXS54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy55X3NwZWVkID0gc3BlZWRzW2Rlc2lyZWRfZGlyZWN0aW9uXS55O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54X3NwZWVkID0gdGhpcy55X3NwZWVkID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja19pbnRlcmFjdGFibGVfb2JqZWN0cyhtYXAsIGNvbnRhY3QpIHtcclxuICAgICAgICBsZXQgaiA9IDA7XHJcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraikgeyAvL2NoZWNrIGlmIGhlcm8gaXMgY29sbGlkaW5nIHdpdGggYW55IGludGVyYWN0YWJsZSBvYmplY3RcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdF9ib2R5ID0gbWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2pdLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHk7XHJcbiAgICAgICAgICAgIGlmICghaW50ZXJhY3RhYmxlX29iamVjdF9ib2R5KSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGNvbnRhY3QuYm9keUEgPT09IGludGVyYWN0YWJsZV9vYmplY3RfYm9keS5kYXRhIHx8IGNvbnRhY3QuYm9keUIgPT09IGludGVyYWN0YWJsZV9vYmplY3RfYm9keS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFjdC5ib2R5QSA9PT0gdGhpcy5zcHJpdGUuYm9keS5kYXRhIHx8IGNvbnRhY3QuYm9keUIgPT09IHRoaXMuc3ByaXRlLmJvZHkuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSBtYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0hdLmluY2x1ZGVzKHRoaXMuY3VycmVudF9hY3Rpb24pICYmIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlkZXJfbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cnlpbmdfdG9fcHVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnB1c2hfdGltZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uID0gdGhpcy5jdXJyZW50X2RpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50c19pbl9wb3MgPSBtYXAuZXZlbnRzW1RpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHRoaXMudGlsZV94X3BvcywgdGhpcy50aWxlX3lfcG9zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzX3N0YWlyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzX2luX3Bvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c19pbl9wb3MuZm9yRWFjaChldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBldmVudF90eXBlcy5DTElNQiAmJiBldmVudC5pc19zZXQgJiYgZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHRoaXMudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX3N0YWlyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNfc3RhaXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbV9wb3NpdGlvbiA9IGludGVyYWN0YWJsZV9vYmplY3QuZ2V0X2N1cnJlbnRfcG9zaXRpb24obWFwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi55ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnggLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJhY3RhYmxlX29iamVjdC5wb3NpdGlvbl9hbGxvd2VkKGl0ZW1fcG9zaXRpb24ueCwgaXRlbV9wb3NpdGlvbi55KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hfdGltZXIgPSB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5RVUFSVEVSLCBub3JtYWxfcHVzaC5iaW5kKHRoaXMsIHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaiA9PT0gbWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbGxpc2lvbl9kZWFsZXIobWFwKSB7XHJcbiAgICAgICAgbGV0IG5vcm1hbHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLm5hcnJvd3BoYXNlLmNvbnRhY3RFcXVhdGlvbnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGFjdCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLm5hcnJvd3BoYXNlLmNvbnRhY3RFcXVhdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGlmIChjb250YWN0LmJvZHlBID09PSB0aGlzLnNwcml0ZS5ib2R5LmRhdGEpIHsgLy9jaGVjayBpZiBoZXJvIGNvbGxpZGVkIHdpdGggc29tZXRoaW5nXHJcbiAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2goY29udGFjdC5ub3JtYWxBKTsgLy9jb2xsaXNpb24gbm9ybWFscyAob25lIG5vcm1hbCBmb3IgZWFjaCBjb250YWN0IHBvaW50KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfaW50ZXJhY3RhYmxlX29iamVjdHMobWFwLCBjb250YWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9ub3JtYWxzIGhhdmluZyBsZW5ndGgsIG1lYW5zIHRoYXQgYSBjb2xsaXNpb24gaXMgaGFwcGVuaW5nXHJcbiAgICAgICAgaWYgKG5vcm1hbHMubGVuZ3RoICYmIFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0gsIGJhc2VfYWN0aW9ucy5DTElNQl0uaW5jbHVkZXModGhpcy5jdXJyZW50X2FjdGlvbikpIHtcclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueCkgPCBTUEVFRF9MSU1JVF9UT19TVE9QICYmIE1hdGguYWJzKHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSkgPCBTUEVFRF9MSU1JVF9UT19TVE9QKSB7IC8vc3BlZWRzIGJlbG93IFNQRUVEX0xJTUlUX1RPX1NUT1AgYXJlIG5vdCBjb25zaWRlcmVkXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFjdF9wb2ludF9kaXJlY3Rpb25zID0gbmV3IEFycmF5KG5vcm1hbHMubGVuZ3RoKTsgLy8gYSBjb250YWN0IHBvaW50IGRpcmVjdGlvbiBpcyB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uIG9mIHRoZSBjb250YWN0IG5vcm1hbCB2ZWN0b3JcclxuICAgICAgICAgICAgICAgIG5vcm1hbHMuZm9yRWFjaCgobm9ybWFsLCBpbmRleCkgPT4geyAvL3Nsb3BlcyBvdXRzaWRlIHRoZSBNSU5JTUFMX1NMT1BFIHJhbmdlIHdpbGwgYmUgZGVzY29uc2lkZXJlZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhub3JtYWxbMF0pIDwgTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzBdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobm9ybWFsWzFdKSA8IE1JTklNQUxfU0xPUEUpIG5vcm1hbFsxXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbFswXSkgPiAxIC0gTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzBdID0gTWF0aC5zaWduKG5vcm1hbFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbFsxXSkgPiAxIC0gTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzFdID0gTWF0aC5zaWduKG5vcm1hbFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdF9wb2ludF9kaXJlY3Rpb25zW2luZGV4XSA9IHJhbmdlXzM2MChNYXRoLmF0YW4yKG5vcm1hbFsxXSwgLW5vcm1hbFswXSkpOyAvL3N0b3JpbmcgdGhlIGFuZ2xlIGFzIGlmIGl0IGlzIGluIHRoZSAxc3QgcXVhZHJhbnRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVzaXJlZF9kaXJlY3Rpb24gPSByYW5nZV8zNjAoTWF0aC5hdGFuMigtdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ksIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94KSk7IC8vc3RvcmluZyB0aGUgYW5nbGUgYXMgaWYgaXQgaXMgaW4gdGhlIDFzdCBxdWFkcmFudFxyXG4gICAgICAgICAgICAgICAgY29udGFjdF9wb2ludF9kaXJlY3Rpb25zLmZvckVhY2goZGlyZWN0aW9uID0+IHsgLy9jaGVjayBpZiB0aGUgZGVzaXJlZCBkaXJlY3Rpb24gaXMgZ29pbmcgdG93YXJkcyBhdCBsZWFzdCBvbmUgY29udGFjdCBkaXJlY3Rpb24gd2l0aCBhIGVycm9yIG1hcmdpbiBvZiAzMCBkZWdyZWVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA+PSBkZXNpcmVkX2RpcmVjdGlvbiAtIG51bWJlcnMuZGVncmVlMTUgJiYgZGlyZWN0aW9uIDw9IGRlc2lyZWRfZGlyZWN0aW9uICsgbnVtYmVycy5kZWdyZWUxNSkgeyAvL2lmIHRydWUsIGl0IG1lYW5zIHRoYXQgdGhlIGhlcm8gaXMgZ29pbmcgdGhlIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGNvbGxpc2lvbiBvYmVqY3QsIHRoZW4gaXQgbXVzdCBzdG9wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3kgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfYnlfY29sbGlkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X2FjdGlvbiAhPT0gYmFzZV9hY3Rpb25zLkNMSU1CKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfYnlfY29sbGlkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFscy5sZW5ndGggPT09IDEpIHsgLy9ldmVyeXRoaW5nIGluc2lkZSB0aGlzIGlmIGlzIHRvIGRlYWwgd2l0aCBkaXJlY3Rpb24gY2hhbmdpbmcgd2hlbiBjb2xsaWRpbmdcclxuICAgICAgICAgICAgICAgICAgICAvL2ZpbmRzIHdoaWNoIDMwIGRlZ3JlZSBzZWN0b3IgdGhlIG5vcm1hbCBhbmdsZSBsaWVzIHdpdGhpbiwgYW5kIGNvbnZlcnRzIHRvIGEgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FsbF9kaXJlY3Rpb24gPSByb3RhdGlvbl9ub3JtYWxbKHJhbmdlXzM2MChNYXRoLmF0YW4yKG5vcm1hbHNbMF1bMV0sIC1ub3JtYWxzWzBdWzBdKSArIG51bWJlcnMuZGVncmVlMTUpIC8gbnVtYmVycy5kZWdyZWUzMCkgfCAwXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZV9kaXJlY3Rpb24gPSAocm90YXRpb25fa2V5W3RoaXMuYXJyb3dfaW5wdXRzXSAtIHdhbGxfZGlyZWN0aW9uKSAmIDc7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBwbGF5ZXIncyBkaXJlY3Rpb24gaXMgd2l0aGluIDEgb2Ygd2FsbF9kaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVfZGlyZWN0aW9uID09PSAxIHx8IHJlbGF0aXZlX2RpcmVjdGlvbiA9PT0gNykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2RpcmVjdGlvbigod2FsbF9kaXJlY3Rpb24gKyAocmVsYXRpdmVfZGlyZWN0aW9uIDw8IDEpKSAmIDcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX2J5X2NvbGxpZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wX2J5X2NvbGxpZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFwcGx5X3NwZWVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKG1hcCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2Fycm93X2lucHV0cygpOyAvL2NoZWNrIHdoaWNoIGFycm93IGtleXMgYXJlIGJlaW5nIHByZXNzZWRcclxuICAgICAgICB0aGlzLnNldF9zcGVlZF9mYWN0b3JzKHRydWUpOyAvL3NldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgbW92ZW1lbnRcclxuICAgICAgICB0aGlzLnNldF9jdXJyZW50X2FjdGlvbigpOyAvL2Nob29zZXMgd2hpY2ggc3ByaXRlIHRoZSBoZXJvIHNoYWxsIGFzc3VtZVxyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlX3NwZWVkKCk7IC8vY2FsY3VsYXRlcyB0aGUgZmluYWwgc3BlZWRcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9kZWFsZXIobWFwKTsgLy9jaGVjayBpZiB0aGUgaGVybyBpcyBjb2xsaWRpbmcgYW5kIGl0cyBjb25zZXF1ZW5jZXNcclxuICAgICAgICB0aGlzLnNldF9hY3Rpb24odHJ1ZSk7IC8vc2V0cyB0aGUgaGVybyBzcHJpdGVcclxuICAgICAgICB0aGlzLnVwZGF0ZV9zaGFkb3coKTsgLy91cGRhdGVzIHRoZSBoZXJvJ3Mgc2hhZG93IHBvc2l0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iaikge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKCk7IC8vSW1wb3J0YW50IHRvIGJlIGFmdGVyIHRoZSBwcmV2aW91cyBjb21tYW5kXHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5jbGVhclNoYXBlcygpO1xyXG4gICAgICAgIHRoaXMuYm9keV9yYWRpdXMgPSBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVM7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDaXJjbGUodGhpcy5ib2R5X3JhZGl1cywgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDb2xsaXNpb25Hcm91cChjb2xsaXNpb25fb2JqLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5Lm1hc3MgPSAxLjA7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5kYW1waW5nID0gMDtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmFuZ3VsYXJEYW1waW5nID0gMDtcclxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmluZXJ0aWEgPSAwO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5maXhlZFJvdGF0aW9uID0gdHJ1ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGJhc2VfYWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgZXZlbnRfdHlwZXMgfSBmcm9tICcuL1RpbGVFdmVudC5qcyc7XHJcblxyXG5jb25zdCBFVkVOVF9JTklUX0RFTEFZID0gMzUwO1xyXG5cclxuY2xhc3MgRXZlbnRRdWV1ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNsaW1iX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZChldmVudCwgdGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbiwgZmlyZV9mdW5jdGlvbiwgZmlyZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgc3dpdGNoKGV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBldmVudF90eXBlcy5DTElNQjpcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5hY3RpdmUgJiYgZXZlbnQuaXNfc2V0ICYmIGV2ZW50LmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmNsdWRlcyh0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpbWJfZXZlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmaXJlKSB7XHJcbiAgICAgICAgICAgIGZpcmVfZnVuY3Rpb24oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgZmlyZV9mdW5jdGlvbjogZmlyZV9mdW5jdGlvblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2Vzc19xdWV1ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jbGltYl9ldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtLmV2ZW50LnR5cGUgIT09IGV2ZW50X3R5cGVzLkpVTVApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2goaXRlbSA9PiBpdGVtLmZpcmVfZnVuY3Rpb24oKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaWxlRXZlbnRNYW5hZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGhlcm8sIGNvbGxpc2lvbikge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmhlcm8gPSBoZXJvO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uID0gY29sbGlzaW9uO1xyXG4gICAgICAgIHRoaXMuZXZlbnRfdGltZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5vbl9ldmVudCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlcmVkX2V2ZW50cyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF90cmlnZ2VyZWRfZXZlbnQoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnRyaWdnZXJlZF9ldmVudHNbZXZlbnQuaWRdID0gZXZlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfdHJpZ2dlcmVkX2V2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudHJpZ2dlcmVkX2V2ZW50c1tldmVudC5pZF07XHJcbiAgICB9XHJcblxyXG4gICAgZXZlbnRfdHJpZ2dlcmVkKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50LmlkIGluIHRoaXMudHJpZ2dlcmVkX2V2ZW50cztcclxuICAgIH1cclxuXHJcbiAgICBmaXJlX3RyaWdnZXJlZF9ldmVudHMoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy50cmlnZ2VyZWRfZXZlbnRzKS5mb3JFYWNoKGlkID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudCA9IHRoaXMudHJpZ2dlcmVkX2V2ZW50c1tpZF07XHJcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLlNQRUVEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LnVuc2V0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LmZpcmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcmVfZXZlbnQoY3VycmVudF9ldmVudCwgdGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gIT09IHRoaXNfYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHJldHVybjtcclxuICAgICAgICBpZiAoY3VycmVudF9ldmVudC50eXBlID09PSBldmVudF90eXBlcy5DTElNQiAmJiAhdGhpcy5oZXJvLmlkbGVfY2xpbWJpbmcpIHtcclxuICAgICAgICAgICAgY3VycmVudF9ldmVudC5maXJlKHRoaXNfYWN0aXZhdGlvbl9kaXJlY3Rpb24pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoW2V2ZW50X3R5cGVzLlRFTEVQT1JULCBldmVudF90eXBlcy5KVU1QXS5pbmNsdWRlcyhjdXJyZW50X2V2ZW50LnR5cGUpKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRfZXZlbnQuZmlyZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja190aWxlX2V2ZW50cyhldmVudF9rZXksIG1hcCkge1xyXG4gICAgICAgIGxldCBldmVudF9xdWV1ZSA9IG5ldyBFdmVudFF1ZXVlKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXAuZXZlbnRzW2V2ZW50X2tleV0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudCA9IG1hcC5ldmVudHNbZXZlbnRfa2V5XVtpXTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyhtYXAuY29sbGlzaW9uX2xheWVyKSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVApIHtcclxuICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQuanVtcF9uZWFyX2NvbGxpc2lvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpc19ldmVudC5pc19hY3RpdmUodGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uKSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLlNQRUVEKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oZXJvLmV4dHJhX3NwZWVkICE9PSB0aGlzX2V2ZW50LnNwZWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQuZmlyZS5iaW5kKHRoaXNfZXZlbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLlRFTEVQT1JUICYmICF0aGlzX2V2ZW50LmFkdmFuY2VfZWZmZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9ldmVudC5iaW5kKHRoaXMsIHRoaXNfZXZlbnQsIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtldmVudF90eXBlcy5TVEVQLCBldmVudF90eXBlcy5DT0xMSVNJT05dLmluY2x1ZGVzKHRoaXNfZXZlbnQudHlwZSkgJiYgIXRoaXMuZXZlbnRfdHJpZ2dlcmVkKHRoaXNfZXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudF9xdWV1ZS5hZGQoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudC5zZXQuYmluZCh0aGlzX2V2ZW50KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0X2RpcmVjdGlvbiA9IHRoaXNfZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRfZGlyZWN0aW9uICYmIFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0gsIGJhc2VfYWN0aW9ucy5DTElNQl0uaW5jbHVkZXModGhpcy5oZXJvLmN1cnJlbnRfYWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50X3RpbWVyc1t0aGlzX2V2ZW50LmlkXSAmJiAhdGhpcy5ldmVudF90aW1lcnNbdGhpc19ldmVudC5pZF0udGltZXIuZXhwaXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRfdGltZXJzW3RoaXNfZXZlbnQuaWRdID0gdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChFVkVOVF9JTklUX0RFTEFZLCB0aGlzLmZpcmVfZXZlbnQuYmluZCh0aGlzLCB0aGlzX2V2ZW50LCB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnRfcXVldWUucHJvY2Vzc19xdWV1ZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBsb2FkX2RhdGFiYXNlcyhnYW1lLCBkYnMpIHtcclxuICAgIC8vIGluaXRpYWxpemluZyBqc29uIGRhdGFiYXNlIGRhdGFcclxuICAgIGRicy5pbml0X2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdpbml0X2RiJyk7IFxyXG4gICAgZGJzLm5wY19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignbnBjX2RiJyk7XHJcbiAgICBkYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2ludGVyYWN0YWJsZV9vYmplY3RzX2RiJyk7XHJcbiAgICBkYnMubWlzY19hbmltYXRpb25zX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdtaXNjX2FuaW1hdGlvbnNfZGInKTtcclxuICAgIGRicy5jbGFzc2VzX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdjbGFzc2VzX2RiJyk7XHJcbiAgICBkYnMuYWJpbGl0aWVzX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdhYmlsaXRpZXNfZGInKTtcclxuICAgIGRicy5pdGVtc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignaXRlbXNfZGInKTtcclxuICAgIGRicy5kamlubmlfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2RqaW5uaV9kYicpO1xyXG4gICAgZGJzLmVuZW1pZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2VuZW1pZXNfZGInKTtcclxuICAgIGRicy5lbmVtaWVzX3BhcnRpZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2VuZW1pZXNfcGFydGllc19kYicpO1xyXG4gICAgZGJzLm1hcHNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ21hcHNfZGInKTtcclxuICAgIGRicy5tYWluX2NoYXJzX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdtYWluX2NoYXJzX2RiJyk7XHJcbiAgICBkYnMuc3VtbW9uc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignc3VtbW9uc19kYicpO1xyXG5cclxuICAgIC8vZm9ybWF0IHNvbWUgZGIgc3RydWN0dXJlc1xyXG4gICAgZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiID0gXy5tYXBLZXlzKGRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYiwgaW50ZXJhY3RhYmxlX29iamVjdF9kYXRhID0+IGludGVyYWN0YWJsZV9vYmplY3RfZGF0YS5rZXlfbmFtZSk7XHJcbiAgICBkYnMuZW5lbWllc19wYXJ0aWVzX2RiID0gXy5tYXBLZXlzKGRicy5lbmVtaWVzX3BhcnRpZXNfZGIsIGVuZW15X3BhcnR5X2RhdGEgPT4gZW5lbXlfcGFydHlfZGF0YS5rZXlfbmFtZSk7XHJcbiAgICBkYnMubnBjX2RiID0gXy5tYXBLZXlzKGRicy5ucGNfZGIsIG5wY19kYXRhID0+IG5wY19kYXRhLmtleV9uYW1lKTtcclxuICAgIGRicy5zdW1tb25zX2RiID0gXy5tYXBLZXlzKGRicy5zdW1tb25zX2RiLCAoc3VtbW9uX2RhdGEsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgc3VtbW9uX2RhdGEuaW5kZXggPSBwYXJzZUludChpbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIHN1bW1vbl9kYXRhLmtleV9uYW1lO1xyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBKdW1wRXZlbnQgfSBmcm9tIFwiLi9KdW1wRXZlbnQuanNcIjtcclxuaW1wb3J0IHsgVGlsZUV2ZW50LCBldmVudF90eXBlcyB9IGZyb20gXCIuL1RpbGVFdmVudC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2xpbWJFdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyLCBpc19zZXQsIG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LCBjbGltYmluZ19vbmx5KSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuQ0xJTUIsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0KTtcclxuICAgICAgICB0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyO1xyXG4gICAgICAgIHRoaXMuaXNfc2V0ID0gaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogaXNfc2V0O1xyXG4gICAgICAgIHRoaXMuY2xpbWJpbmdfb25seSA9IGNsaW1iaW5nX29ubHkgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogY2xpbWJpbmdfb25seTtcclxuICAgIH1cclxuXHJcbiAgICBmaXJlKGFjdGl2YXRpb25fZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZyB8fCAhdGhpcy5jaGVja19wb3NpdGlvbigpIHx8IHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbih0cnVlKSB8fCB0aGlzLmRhdGEubWVudV9vcGVuIHx8IHRoaXMuZGF0YS5pbl9iYXR0bGUgfHwgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgJiYgIXRoaXMuY2xpbWJpbmdfb25seSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0X2NsaW1iaW5nKGFjdGl2YXRpb25fZGlyZWN0aW9uKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLmRhdGEuaGVyby5jbGltYmluZyAmJiAhdGhpcy5jbGltYmluZ19vbmx5KSB8fCAodGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgJiYgdGhpcy5jbGltYmluZ19vbmx5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbmlzaF9jbGltYmluZyhhY3RpdmF0aW9uX2RpcmVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0X2NsaW1iaW5nKGFjdGl2YXRpb25fZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucGF1c2UoKTtcclxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY2hhbmdlX21hcF9ib2R5KHRoaXMuZGF0YSwgdGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcclxuICAgICAgICAgICAgY29uc3QgdHVybl9hbmltYXRpb24gPSB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5DTElNQiwgXCJ0dXJuXCIpO1xyXG4gICAgICAgICAgICB0dXJuX2FuaW1hdGlvbi5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhfdHdlZW4gPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54ICsgMC41KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlfdHdlZW4gPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSArIDI1O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSkudG8oXHJcbiAgICAgICAgICAgICAgICAgICAgeyB4OiB4X3R3ZWVuLCB5OiB5X3R3ZWVuIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0X2FuaW1hdGlvbiA9IHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBcInN0YXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnRfYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuQ0xJTUIsIGJhc2VfYWN0aW9ucy5JRExFKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLkNMSU1CO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBiYXNlX2FjdGlvbnMuSURMRSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dF90aW1lID0gUGhhc2VyLlRpbWVyLlFVQVJURVIvMztcclxuICAgICAgICAgICAgY29uc3QgeF90d2VlbiA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCAqICh0aGlzLnggKyAwLjUpO1xyXG4gICAgICAgICAgICBjb25zdCB5X3R3ZWVuID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKFxyXG4gICAgICAgICAgICAgICAgeyB4OiB4X3R3ZWVuLCB5OiB5X3R3ZWVuIH0sXHJcbiAgICAgICAgICAgICAgICBvdXRfdGltZSxcclxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuQ0xJTUI7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmlkbGVfY2xpbWJpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmaW5pc2hfY2xpbWJpbmcoYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xyXG4gICAgICAgIGlmIChhY3RpdmF0aW9uX2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCAhPT0gdGhpcy54IHx8IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgIT09IHRoaXMueSAtIDEpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciAhPT0gbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlkZXJfbGF5ZXIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jaGFuZ2VfbWFwX2JvZHkodGhpcy5kYXRhLCB0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRfYW5pbWF0aW9uID0gdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuQ0xJTUIsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KS50byhcclxuICAgICAgICAgICAgICAgIHsgeTogdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNSB9LFxyXG4gICAgICAgICAgICAgICAgMTcwLFxyXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgZmluYWxfc2hhZG93X3BvcyA9IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55IC0gMTU7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoMTcwLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueSA9IGZpbmFsX3NoYWRvd19wb3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlbmRfYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDE1MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy55ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMudXBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDI1MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNldF9kaXJlY3Rpb24oZGlyZWN0aW9ucy51cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMuZG93bikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dF90aW1lID0gUGhhc2VyLlRpbWVyLlFVQVJURVIvMztcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSkudG8oXHJcbiAgICAgICAgICAgICAgICB7IHk6IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55ICsgMTUgfSxcclxuICAgICAgICAgICAgICAgIG91dF90aW1lLFxyXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jbGltYmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy55ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2RpcmVjdGlvbihkaXJlY3Rpb25zLnVwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMoKSB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5zZW5kX3RvX2JhY2sgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHBvc3Rpb25zID0gdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5ldmVudHNfaW5mby5jbGltYi5jb2xsaXNpb25fdGlsZXMubWFwKHRpbGVfc2hpZnQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge3g6IHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICsgdGlsZV9zaGlmdC54LCB5OiB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSArIHRpbGVfc2hpZnQueX07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgSnVtcEV2ZW50LnVuc2V0X3NldF9qdW1wX2NvbGxpc2lvbih0aGlzLmRhdGEpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XHJcbiAgICAgICAgZm9yIChsZXQgY29sbGlkZV9pbmRleCBpbiB0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHMpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpZGVfaW5kZXhdLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3N0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB4X3BvcyA9IChwb3N0aW9uc1tpXS54ICsgLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCB5X3BvcyA9IChwb3N0aW9uc1tpXS55ICsgLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcclxuICAgICAgICAgICAgbGV0IGJvZHkgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVCb2R5KHhfcG9zLCB5X3BvcywgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcclxuICAgICAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoLCB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0LCAwLCAwKTtcclxuICAgICAgICAgICAgYm9keS5zZXRDb2xsaXNpb25Hcm91cCh0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cCk7XHJcbiAgICAgICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xyXG4gICAgICAgICAgICBib2R5LnNldFplcm9Sb3RhdGlvbigpO1xyXG4gICAgICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgYm9keS5zdGF0aWMgPSB0cnVlO1xyXG4gICAgICAgICAgICBib2R5LmRlYnVnID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWc7XHJcbiAgICAgICAgICAgIGJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuY29sbGlzaW9uX3RpbGVzX2JvZGllcy5wdXNoKGJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcyhjb2xsaWRlX3dpdGhfbWFwID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuc2VuZF90b19iYWNrID0gZmFsc2U7XHJcbiAgICAgICAgSnVtcEV2ZW50LnNldF9qdW1wX2NvbGxpc2lvbih0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgaWYgKGNvbGxpZGVfd2l0aF9tYXApIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaWRlX2luZGV4XSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllciBpbiB0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHMpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW3RoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBib2RpZXMgPSB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbGxpc2lvbl90aWxlc19ib2RpZXM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgYm9kaWVzW2ldLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYm9kaWVzID0gW107XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTcHJpdGVCYXNlIH0gZnJvbSBcIi4vU3ByaXRlQmFzZS5qc1wiO1xyXG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIGFzIHRpbGVfZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi90aWxlX2V2ZW50cy9UaWxlRXZlbnQuanNcIjtcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBkaXJlY3Rpb25zLCBnZXRfc3Vycm91bmRpbmdzLCBtb3VudF9jb2xsaXNpb25fcG9seWdvbiB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7IEp1bXBFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL0p1bXBFdmVudC5qc1wiO1xyXG5pbXBvcnQgeyBDbGltYkV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvQ2xpbWJFdmVudC5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXMgPSB7XHJcbiAgICBPTkNFOiBcIm9uY2VcIixcclxuICAgIElORklOSVRFOiBcImluZmluaXRlXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0X2V2ZW50X3R5cGVzID0ge1xyXG4gICAgSlVNUDogXCJqdW1wXCIsXHJcbiAgICBKVU1QX0FST1VORDogXCJqdW1wX2Fyb3VuZFwiLFxyXG4gICAgQ0xJTUI6IFwiY2xpbWJcIlxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEludGVyYWN0YWJsZU9iamVjdHNfU3ByaXRlIGV4dGVuZHMgU3ByaXRlQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvciAoa2V5X25hbWUsIGFjdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihrZXlfbmFtZSwgYWN0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBJbnRlcmFjdGFibGVPYmplY3RzIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGtleV9uYW1lLCB4LCB5LCBhbGxvd2VkX3RpbGVzLCBiYXNlX2NvbGxpZGVyX2xheWVyLCBjb2xsaWRlcl9sYXllcl9zaGlmdCwgbm90X2FsbG93ZWRfdGlsZXMsIG9iamVjdF9kcm9wX3RpbGVzLCBpbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLmFsbG93ZWRfdGlsZXMgPSBhbGxvd2VkX3RpbGVzO1xyXG4gICAgICAgIHRoaXMuYmFzZV9jb2xsaWRlcl9sYXllciA9IGJhc2VfY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdCA9IGNvbGxpZGVyX2xheWVyX3NoaWZ0O1xyXG4gICAgICAgIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0ID0gaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0ID09PSB1bmRlZmluZWQgPyAwIDogaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xyXG4gICAgICAgIHRoaXMubm90X2FsbG93ZWRfdGlsZXMgPSBub3RfYWxsb3dlZF90aWxlcyA9PT0gdW5kZWZpbmVkID8gW10gOiBub3RfYWxsb3dlZF90aWxlcztcclxuICAgICAgICB0aGlzLm9iamVjdF9kcm9wX3RpbGVzID0gb2JqZWN0X2Ryb3BfdGlsZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogb2JqZWN0X2Ryb3BfdGlsZXM7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5ldmVudHNfaW5mbyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY3VycmVudF94ID0geDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfeSA9IHk7XHJcbiAgICAgICAgdGhpcy5jdXN0b21fZGF0YSA9IHtcclxuICAgICAgICAgICAgY29sbGlzaW9uX3RpbGVzX2JvZGllczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfc3ByaXRlKHNwcml0ZSkge1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUgPSBzcHJpdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zaXRpb25fYWxsb3dlZCh4LCB5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5jdXJyZW50X3ggPT09IHggJiYgaXRlbS5jdXJyZW50X3kgPT09IHk7XHJcbiAgICAgICAgfSkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFsbG93ZWRfdGlsZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuYWxsb3dlZF90aWxlc1tpXTtcclxuICAgICAgICAgICAgaWYgKHRpbGUueCA9PT0geCAmJiB0aWxlLnkgPT09IHkgJiYgdGlsZS5jb2xsaXNpb25fbGF5ZXIgPT09IHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJyZW50X3Bvc2l0aW9uKG1hcCkge1xyXG4gICAgICAgIGNvbnN0IHggPSAodGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS54L21hcC5zcHJpdGUudGlsZVdpZHRoKSB8IDA7XHJcbiAgICAgICAgY29uc3QgeSA9ICh0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLnkvbWFwLnNwcml0ZS50aWxlSGVpZ2h0KSB8IDA7XHJcbiAgICAgICAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9jb2xsaWRlcl9sYXllcihkYXRhLCBkZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllcikge1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cChkYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllcl0pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5zZXRDb2xsaXNpb25Hcm91cChkYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2Rlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyXSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyID0gZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5iYXNlX2NvbGxpZGVyX2xheWVyID0gZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9ucy5mb3JFYWNoKGYgPT4geyBmKCk7IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluc2VydF9ldmVudChpZCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzLmFkZChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2V2ZW50cygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuZXZlbnRzXS5tYXAoaWQgPT4gVGlsZUV2ZW50LmdldF9ldmVudChpZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZV9ldmVudChpZCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzLmRlbGV0ZShpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2soY29sbGlzaW9uX29iaikge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldF9sYXllciA9IHRoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuY3VzdG9tX2RhdGEuYmxvY2tfc3RhaXJfY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XHJcbiAgICAgICAgY29uc3QgeF9wb3MgPSAodGhpcy5jdXJyZW50X3ggKyAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XHJcbiAgICAgICAgY29uc3QgeV9wb3MgPSAodGhpcy5jdXJyZW50X3kgKyAxLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAtIDQ7XHJcbiAgICAgICAgbGV0IGJvZHkgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVCb2R5KHhfcG9zLCB5X3BvcywgMCwgdHJ1ZSk7XHJcbiAgICAgICAgYm9keS5jbGVhclNoYXBlcygpO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5ib2R5X3JhZGl1cyAqIDI7XHJcbiAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUod2lkdGgsIHdpZHRoLCAwLCAwKTtcclxuICAgICAgICBpZiAoISh0YXJnZXRfbGF5ZXIgaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbdGFyZ2V0X2xheWVyXSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW3RhcmdldF9sYXllcl0pO1xyXG4gICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgYm9keS5hbmd1bGFyRGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgYm9keS5zZXRaZXJvUm90YXRpb24oKTtcclxuICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgIGJvZHkuZHluYW1pYyA9IGZhbHNlO1xyXG4gICAgICAgIGJvZHkuc3RhdGljID0gdHJ1ZTtcclxuICAgICAgICBib2R5LmRlYnVnID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWc7XHJcbiAgICAgICAgYm9keS5jb2xsaWRlcyhjb2xsaXNpb25fb2JqLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICB0aGlzLmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrID0gYm9keTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsX2NvbmZpZyhtYXBfc3ByaXRlKSB7XHJcbiAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUgPSB0aGlzLmRhdGEubnBjX2dyb3VwLmNyZWF0ZSgwLCAwLCB0aGlzLmtleV9uYW1lICsgXCJfXCIgKyB0aGlzLmtleV9uYW1lKTtcclxuICAgICAgICB0aGlzLnNldF9zcHJpdGUoaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5yb3VuZFB4ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5pbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zZW5kX3RvX2JhY2sgIT09IHVuZGVmaW5lZCkgeyBcclxuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5zZW5kX3RvX2JhY2sgPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLnNlbmRfdG9fYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3ggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmFuY2hvci54ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5hbmNob3IueSA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3k7XHJcbiAgICAgICAgY29uc3Qgc2hpZnRfeCA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2hpZnRfeCAhPT0gdW5kZWZpbmVkID8gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF94IDogMDtcclxuICAgICAgICBjb25zdCBzaGlmdF95ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF95ICE9PSB1bmRlZmluZWQgPyB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLnNoaWZ0X3kgOiAwO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuY2VudGVyWCA9ICh0aGlzLnggKyAxKSAqIG1hcF9zcHJpdGUudGlsZVdpZHRoICsgc2hpZnRfeDtcclxuICAgICAgICBjb25zdCBhbmNob3Jfc2hpZnQgPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl95ICogbWFwX3Nwcml0ZS50aWxlV2lkdGggKiAwLjU7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5jZW50ZXJZID0gdGhpcy55ICogbWFwX3Nwcml0ZS50aWxlV2lkdGggLSBhbmNob3Jfc2hpZnQgKyBzaGlmdF95O1xyXG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8uc2V0QW5pbWF0aW9uKHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUsIHRoaXMua2V5X25hbWUpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxfYW5pbWF0aW9uID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5pbml0aWFsX2FuaW1hdGlvbjtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmFuaW1hdGlvbnMucGxheSh0aGlzLmtleV9uYW1lICsgXCJfXCIgKyBpbml0aWFsX2FuaW1hdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZV9yZWxhdGVkX2V2ZW50cyhtYXBfZXZlbnRzLCBtYXApIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0X2N1cnJlbnRfcG9zaXRpb24obWFwKTtcclxuICAgICAgICBsZXQgeF9wb3MgPSBwb3NpdGlvbi54O1xyXG4gICAgICAgIGxldCB5X3BvcyA9IHBvc2l0aW9uLnk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmV2ZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudF9pbmZvID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5ldmVudHNbaV07XHJcbiAgICAgICAgICAgIHhfcG9zICs9IGV2ZW50X2luZm8ueF9zaGlmdCAhPT0gdW5kZWZpbmVkID8gZXZlbnRfaW5mby54X3NoaWZ0IDogMDtcclxuICAgICAgICAgICAgeV9wb3MgKz0gZXZlbnRfaW5mby55X3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLnlfc2hpZnQgOiAwO1xyXG4gICAgICAgICAgICBsZXQgY29sbGlkZXJfbGF5ZXJfc2hpZnQgPSBldmVudF9pbmZvLmNvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLmNvbGxpZGVyX2xheWVyX3NoaWZ0IDogMDtcclxuICAgICAgICAgICAgY29sbGlkZXJfbGF5ZXJfc2hpZnQgPSB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQgPyB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0IDogY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQgPSBjb2xsaWRlcl9sYXllcl9zaGlmdDtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlX2V2ZW50ID0gZXZlbnRfaW5mby5hY3RpdmUgIT09IHVuZGVmaW5lZCA/IGV2ZW50X2luZm8uYWN0aXZlIDogdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID0gdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyICsgY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnRfaW5mby50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuSlVNUDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9qdW1wX3R5cGVfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuSlVNUF9BUk9VTkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfanVtcF9hcm91bmRfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuQ0xJTUI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfc3RhaXJfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBub3RfYWxsb3dlZF90aWxlX3Rlc3QoeCwgeSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub3RfYWxsb3dlZF90aWxlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBub3RfYWxsb3dlZF90aWxlID0gdGhpcy5ub3RfYWxsb3dlZF90aWxlc1tpXTtcclxuICAgICAgICAgICAgaWYgKG5vdF9hbGxvd2VkX3RpbGUueCA9PT0geCAmJiBub3RfYWxsb3dlZF90aWxlLnkgPT09IHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfanVtcF90eXBlX2V2ZW50KGV2ZW50X2luZm8sIHhfcG9zLCB5X3BvcywgYWN0aXZlX2V2ZW50LCB0YXJnZXRfbGF5ZXIsIG1hcF9ldmVudHMpIHtcclxuICAgICAgICBpZiAodGhpcy5ub3RfYWxsb3dlZF90aWxlX3Rlc3QoeF9wb3MsIHlfcG9zKSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkoeF9wb3MsIHlfcG9zKTtcclxuICAgICAgICBpZiAoISh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiBtYXBfZXZlbnRzKSkge1xyXG4gICAgICAgICAgICBtYXBfZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgeF9wb3MsXHJcbiAgICAgICAgICAgIHlfcG9zLFxyXG4gICAgICAgICAgICBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLnJpZ2h0LCBkaXJlY3Rpb25zLmxlZnRdLFxyXG4gICAgICAgICAgICBbdGFyZ2V0X2xheWVyXSxcclxuICAgICAgICAgICAgZXZlbnRfaW5mby5keW5hbWljLFxyXG4gICAgICAgICAgICBhY3RpdmVfZXZlbnQsXHJcbiAgICAgICAgICAgIGV2ZW50X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlOiBldmVudF9pbmZvLmlzX3NldFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuaW5zZXJ0X2V2ZW50KG5ld19ldmVudC5pZCk7XHJcbiAgICAgICAgdGhpcy5ldmVudHNfaW5mb1tldmVudF9pbmZvLnR5cGVdID0gZXZlbnRfaW5mbztcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLnB1c2goKCkgPT4ge1xyXG4gICAgICAgICAgICBuZXdfZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnRdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9qdW1wX2Fyb3VuZF9ldmVudChldmVudF9pbmZvLCB4X3BvcywgeV9wb3MsIGFjdGl2ZV9ldmVudCwgdGFyZ2V0X2xheWVyLCBtYXBfZXZlbnRzKSB7XHJcbiAgICAgICAgbGV0IGlzX3NldCA9IGV2ZW50X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlOiBldmVudF9pbmZvLmlzX3NldDtcclxuICAgICAgICBnZXRfc3Vycm91bmRpbmdzKHhfcG9zLCB5X3BvcykuZm9yRWFjaCgocG9zLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RfYWxsb3dlZF90aWxlX3Rlc3QocG9zLngsIHBvcy55KSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCB0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHBvcy54LCBwb3MueSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiBtYXBfZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGFscmVhZHkgdGhlcmVzIGEganVtcCBldmVudCBpbiB0aGlzIHBsYWNlXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLmxlbmd0aDsgKytrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBtYXBfZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XVtrXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5KVU1QICYmIGV2ZW50LmlzX3NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKHRhcmdldF9sYXllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX3NldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICAgICAgcG9zLngsXHJcbiAgICAgICAgICAgICAgICBwb3MueSxcclxuICAgICAgICAgICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0LCBkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMuZG93biwgZGlyZWN0aW9ucy51cF1baW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllcl0sXHJcbiAgICAgICAgICAgICAgICBldmVudF9pbmZvLmR5bmFtaWMsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVfZXZlbnQsXHJcbiAgICAgICAgICAgICAgICBpc19zZXRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmluc2VydF9ldmVudChuZXdfZXZlbnQuaWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLnB1c2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3X2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXJdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmV2ZW50c19pbmZvW2V2ZW50X2luZm8udHlwZV0gPSBldmVudF9pbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9zdGFpcl9ldmVudChldmVudF9pbmZvLCB4X3BvcywgeV9wb3MsIGFjdGl2ZV9ldmVudCwgdGFyZ2V0X2xheWVyLCBtYXBfZXZlbnRzKSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRzX2RhdGEgPSBbe1xyXG4gICAgICAgICAgICB4OiB4X3BvcyxcclxuICAgICAgICAgICAgeTogeV9wb3MgKyAxLFxyXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IFtkaXJlY3Rpb25zLnVwXSxcclxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyXSxcclxuICAgICAgICAgICAgY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcjogdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXHJcbiAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uOiAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXJdO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9IHRoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHg6IHhfcG9zLFxyXG4gICAgICAgICAgICB5OiB5X3BvcyxcclxuICAgICAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zOiBbZGlyZWN0aW9ucy5kb3duXSxcclxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnRdLFxyXG4gICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXIsXHJcbiAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb246IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LHtcclxuICAgICAgICAgICAgeDogeF9wb3MsXHJcbiAgICAgICAgICAgIHk6IHlfcG9zICsgZXZlbnRfaW5mby5sYXN0X3lfc2hpZnQgKyAxLFxyXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IFtkaXJlY3Rpb25zLnVwXSxcclxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpZGVyX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnRdLFxyXG4gICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0YXJnZXRfbGF5ZXIsXHJcbiAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb246IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXIgKyB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHg6IHhfcG9zLFxyXG4gICAgICAgICAgICB5OiB5X3BvcyArIGV2ZW50X2luZm8ubGFzdF95X3NoaWZ0LFxyXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IFtkaXJlY3Rpb25zLmRvd25dLFxyXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnM6IFt0YXJnZXRfbGF5ZXJdLFxyXG4gICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlkZXJfbGF5ZXIgKyB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdCxcclxuICAgICAgICAgICAgY2xpbWJpbmdfb25seTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb246IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnRdO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9IHRoaXMuYmFzZV9jb2xsaWRlcl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV07XHJcbiAgICAgICAgZXZlbnRzX2RhdGEuZm9yRWFjaChldmVudF9kYXRhID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19sb2NhdGlvbl9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShldmVudF9kYXRhLngsIGV2ZW50X2RhdGEueSk7XHJcbiAgICAgICAgICAgIGlmICghKHRoaXNfbG9jYXRpb25fa2V5IGluIG1hcF9ldmVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXBfZXZlbnRzW3RoaXNfbG9jYXRpb25fa2V5XSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBDbGltYkV2ZW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS54LFxyXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS55LFxyXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS5hY3RpdmF0aW9uX2RpcmVjdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyxcclxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uZHluYW1pYyxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZV9ldmVudCxcclxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcixcclxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uaXNfc2V0LFxyXG4gICAgICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuY2xpbWJpbmdfb25seVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBtYXBfZXZlbnRzW3RoaXNfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0X2V2ZW50KG5ld19ldmVudC5pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMucHVzaChldmVudF9kYXRhLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb24uYmluZChudWxsLCBuZXdfZXZlbnQpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmV2ZW50c19pbmZvW2V2ZW50X2luZm8udHlwZV0gPSBldmVudF9pbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbmZpZ19ib2R5KGNvbGxpc2lvbl9vYmopIHtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5ib2R5X3JhZGl1cyA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbl9ncm91cHMgPSBjb2xsaXNpb25fb2JqLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHM7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmFuY2hvci55ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeTsgLy9JbXBvcnRhbnQgdG8gYmUgYWZ0ZXIgdGhlIHByZXZpb3VzIGNvbW1hbmRcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYm9keV9yYWRpdXMgPDwgMTtcclxuICAgICAgICBjb25zdCBwb2x5Z29uID0gbW91bnRfY29sbGlzaW9uX3BvbHlnb24od2lkdGgsIC0od2lkdGggPj4gMSksIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uY29sbGlzaW9uX2JvZHlfYmV2ZWwpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5hZGRQb2x5Z29uKHtcclxuICAgICAgICAgICAgICAgIG9wdGltYWxEZWNvbXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2tpcFNpbXBsZUNoZWNrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ29sbGluZWFyUG9pbnRzOiBmYWxzZVxyXG4gICAgICAgIH0sIHBvbHlnb24pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5zZXRDb2xsaXNpb25Hcm91cChjb2xsaXNpb25fZ3JvdXBzW3RoaXMuYmFzZV9jb2xsaWRlcl9sYXllcl0pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5kYW1waW5nID0gMTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAxO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYm9keS5zZXRaZXJvUm90YXRpb24oKTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkuc3RhdGljID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21fZGF0YS5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2soY29sbGlzaW9uX29iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93LmpzJztcclxuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgZ2V0X3RleHRfd2lkdGggfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzLmpzJztcclxuXHJcbmNvbnN0IEJBU0VfV0lEVEggPSAobnVtYmVycy5XSU5ET1dfUEFERElOR19IIDw8IDEpICsgODtcclxuY29uc3QgQkFTRV9IRUlHSFQgPSAyMDtcclxuY29uc3QgUE9TX1ggPSAobnVtYmVycy5HQU1FX1dJRFRIID4+IDEpIC0gKEJBU0VfV0lEVEggPj4gMSk7XHJcbmNvbnN0IFBPU19ZID0gKG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkgKyBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMgKyA2O1xyXG5jb25zdCBESUZGX1RIUkVTSE9MRCA9IDkwO1xyXG5jb25zdCBESUZGX0NPUlJFQ1RJT04gPSA1NjtcclxuXHJcbi8qVGhlIHdpbmRvdyBzaG93aW5nIGNhc3QgcHN5bmVyZ3kncyBuYW1lIG9uIHRoZSBmaWVsZFxyXG5cclxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxyXG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZSovXHJcbmV4cG9ydCBjbGFzcyBGaWVsZFBzeW5lcmd5V2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgUE9TX1gsIFBPU19ZLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy53aW5kb3cuc2V0X3NpbmdsZV9saW5lX3RleHQoXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLypDYWxjdWxhdGVzIGEgdmVydGljYWwgb2Zmc2V0IHNvIHRoZSB3aW5kb3cgZG9lc24ndCBjb3ZlciB0aGUgaGVyb1xyXG5cclxuICAgIE91dHB1dDogW251bWJlcl0gLSBUaGUgdmVydGljYWwgb2Zmc2V0IHRvIGFwcGx5Ki9cclxuICAgIHZlcnRpY2FsX2FkanVzdCgpe1xyXG4gICAgICAgIGxldCBkaWZmID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSB0aGlzLmdhbWUuY2FtZXJhLnk7XHJcbiAgICAgICAgcmV0dXJuIGRpZmYgPiBESUZGX1RIUkVTSE9MRCA/IC1ESUZGX0NPUlJFQ1RJT04rKGRpZmYtRElGRl9USFJFU0hPTEQpIDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKk9wZW5zIHRoZSB3aW5kb3cgd2l0aCB0aGUgcHN5bmVyZ3kgbmFtZVxyXG5cclxuICAgIElucHV0OiB0ZXh0IFtzdHJpbmddIC0gVGhlIHBzeW5lcmd5IG5hbWUgdG8gc2hvd1xyXG4gICAgICAgICAgIGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cclxuICAgIG9wZW4odGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICBsZXQgdGV4dF9zaXplID0gZ2V0X3RleHRfd2lkdGgodGhpcy5nYW1lLHRleHQpO1xyXG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV9zaXplKHt3aWR0aDogQkFTRV9XSURUSCt0ZXh0X3NpemUsIGhlaWdodDogQkFTRV9IRUlHSFR9KTtcclxuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IChQT1NfWCAtICh0ZXh0X3NpemUgPj4gMSkpIHwgMCwgeTogKFBPU19ZICsgdGhpcy52ZXJ0aWNhbF9hZGp1c3QoKSkgfCAwfSk7XHJcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2FwaXRhbGl6ZSh0ZXh0KSx0aGlzLnRleHQpO1xyXG5cclxuICAgICAgICB0aGlzLndpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhlIHdpbmRvd1xyXG5cclxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXHJcbiAgICBjbG9zZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaW5pdF9jYXN0X2F1cmEsIHRpbnRfbWFwX2xheWVycyB9IGZyb20gXCIuLi9maWVsZF9hYmlsaXRpZXMvcHN5bmVyZ3lfY2FzdC5qc1wiO1xyXG5pbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBpbnRlcmFjdGFibGVfb2JqZWN0X2ludGVyYWN0aW9uX3R5cGVzIH0gZnJvbSBcIi4uL0ludGVyYWN0YWJsZU9iamVjdHMuanNcIjtcclxuaW1wb3J0IHsgRmllbGRQc3luZXJneVdpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL0ZpZWxkUHN5bmVyZ3lXaW5kb3cuanNcIjtcclxuXHJcbi8qRGVmaW5lcyBhbmQgbWFuYWdlcyB0aGUgdXNhZ2Ugb2YgZmllbGQgcHN5bmVyZ3lcclxuXHJcbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcclxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xyXG5leHBvcnQgY2xhc3MgRmllbGRBYmlsaXRpZXMge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgYWJpbGl0eV9rZXlfbmFtZSwgdGFyZ2V0X21heF9yYW5nZSwgYWN0aW9uX2tleV9uYW1lLCBuZWVkX3RhcmdldCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5hYmlsaXR5X2tleV9uYW1lID0gYWJpbGl0eV9rZXlfbmFtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0X21heF9yYW5nZSA9IHRhcmdldF9tYXhfcmFuZ2U7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25fa2V5X25hbWUgPSBhY3Rpb25fa2V5X25hbWU7XHJcbiAgICAgICAgdGhpcy5uZWVkX3RhcmdldCA9IG5lZWRfdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYm9vdHN0cmFwX21ldGhvZCA9ICgpID0+IHt9O1xyXG4gICAgICAgIHRoaXMuY2FzdF9maW5pc2hlciA9ICgpID0+IHt9O1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0b3BfY2FzdGluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cgPSBuZXcgRmllbGRQc3luZXJneVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZXRzIHRoZSBwc3luZXJneSBjYXN0IGRpcmVjdGlvblxyXG4gICAgRm9yIGRpYWdvbmFscywgcGljayB0aGUgbmV4dCBjbG9ja3dpc2Ugbm9uLWRpYWdvbmFsXHJcblxyXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIEN1cnJlbnQgZGlyZWN0aW9uXHJcblxyXG4gICAgT3V0cHV0OiBbbnVtYmVyXSAtIE5vbi1kaWFnb25hbCBjYXN0IGRpcmVjdGlvbiovXHJcbiAgICBnZXRfY2FzdF9kaXJlY3Rpb24oZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgaWYoZGlyZWN0aW9uJTI9PT0wKSByZXR1cm4gZGlyZWN0aW9uO1xyXG4gICAgICAgIGRpcmVjdGlvbisrO1xyXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IGRpcmVjdGlvbnNfY291bnQgPyBkaXJlY3Rpb25zLnJpZ2h0IDogZGlyZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9oZXJvX2Nhc3RfYW5pbSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnBsYXkodGhpcy5hY3Rpb25fa2V5X25hbWUsIHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmNhc3RfZGlyZWN0aW9uXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfaGVyb19jYXN0X2FuaW0oKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5yZXZlcnNlT25jZSgpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5wbGF5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIucGxheSh0aGlzLmFjdGlvbl9rZXlfbmFtZSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY2FzdF9kaXJlY3Rpb25dKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYm9vdHN0cmFwX21ldGhvZChtZXRob2QpIHtcclxuICAgICAgICB0aGlzLmJvb3RzdHJhcF9tZXRob2QgPSBtZXRob2Q7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2Nhc3RfZmluaXNoZXJfbWV0aG9kKG1ldGhvZCkge1xyXG4gICAgICAgIHRoaXMuY2FzdF9maW5pc2hlciA9IG1ldGhvZDtcclxuICAgIH1cclxuXHJcbiAgICBzZWFyY2hfZm9yX3RhcmdldCgpIHtcclxuICAgICAgICB0aGlzLnRhcmdldF9mb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBtaW5feCwgbWF4X3gsIG1pbl95LCBtYXhfeTtcclxuICAgICAgICBpZiAodGhpcy5jYXN0X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cCB8fCB0aGlzLmNhc3RfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcclxuICAgICAgICAgICAgbWluX3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgbWF4X3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FzdF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcclxuICAgICAgICAgICAgICAgIG1pbl95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSAtIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXMgLSB0aGlzLnRhcmdldF9tYXhfcmFuZ2U7XHJcbiAgICAgICAgICAgICAgICBtYXhfeSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWluX3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgICAgIG1heF95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXMgKyB0aGlzLnRhcmdldF9tYXhfcmFuZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtaW5feSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xyXG4gICAgICAgICAgICBtYXhfeSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgKyB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jYXN0X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICBtaW5feCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzIC0gdGhpcy50YXJnZXRfbWF4X3JhbmdlO1xyXG4gICAgICAgICAgICAgICAgbWF4X3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1pbl94ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXM7XHJcbiAgICAgICAgICAgICAgICBtYXhfeCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggKyB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzICsgdGhpcy50YXJnZXRfbWF4X3JhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzcXJfZGlzdGFuY2UgPSBJbmZpbml0eTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2ldO1xyXG4gICAgICAgICAgICBpZiAoISh0aGlzLmFiaWxpdHlfa2V5X25hbWUgaW4gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5wc3luZXJneV9rZXlzKSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1feF9weCA9IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCA+PiAxKTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbV95X3B4ID0gaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgPj4gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHhfY29uZGl0aW9uID0gaXRlbV94X3B4ID49IG1pbl94ICYmIGl0ZW1feF9weCA8PSBtYXhfeDtcclxuICAgICAgICAgICAgY29uc3QgeV9jb25kaXRpb24gPSBpdGVtX3lfcHggPj0gbWluX3kgJiYgaXRlbV95X3B4IDw9IG1heF95O1xyXG4gICAgICAgICAgICBpZiAoeF9jb25kaXRpb24gJiYgeV9jb25kaXRpb24gJiYgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaWRlcl9sYXllcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfc3FyX2Rpc3RhbmNlID0gTWF0aC5wb3coaXRlbV94X3B4IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCwgMikgKyBNYXRoLnBvdyhpdGVtX3lfcHggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55LCAyKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzX3Nxcl9kaXN0YW5jZSA8IHNxcl9kaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNxcl9kaXN0YW5jZSA9IHRoaXNfc3FyX2Rpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QgPSBpbnRlcmFjdGFibGVfb2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF90YXJnZXRfY2FzdGVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldF9vYmplY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgcHN5bmVyZ3lfcHJvcGVydGllcyA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5wc3luZXJneV9rZXlzW3RoaXMuYWJpbGl0eV9rZXlfbmFtZV07XHJcbiAgICAgICAgICAgIGlmIChwc3luZXJneV9wcm9wZXJ0aWVzLmludGVyYWN0aW9uX3R5cGUgPT09IGludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXMuT05DRSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FzdGVkX3Byb3BlcnR5ID0gdGhpcy5hYmlsaXR5X2tleV9uYW1lICsgXCJfY2FzdGVkXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhW2Nhc3RlZF9wcm9wZXJ0eV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9mb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhW2Nhc3RlZF9wcm9wZXJ0eV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhc3QoY29udHJvbGxhYmxlX2NoYXIsIGNhc3Rlcl9rZXlfbmFtZSkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIgPSBjb250cm9sbGFibGVfY2hhcjtcclxuICAgICAgICBpZiAodGhpcy5jb250cm9sbGFibGVfY2hhci5jYXN0aW5nX3BzeW5lcmd5KSByZXR1cm47XHJcbiAgICAgICAgaWYgKGNhc3Rlcl9rZXlfbmFtZSAhPT0gdW5kZWZpbmVkICYmIGNhc3Rlcl9rZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdCkge1xyXG4gICAgICAgICAgICBjb25zdCBjYXN0ZXIgPSB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdFtjYXN0ZXJfa2V5X25hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXR5X2tleV9uYW1lXTtcclxuICAgICAgICAgICAgaWYgKGNhc3Rlci5jdXJyZW50X3BwIDwgYWJpbGl0eS5wcF9jb3N0IHx8ICFjYXN0ZXIuYWJpbGl0aWVzLmluY2x1ZGVzKHRoaXMuYWJpbGl0eV9rZXlfbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXN0ZXIuY3VycmVudF9wcCAtPSBhYmlsaXR5LnBwX2Nvc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmZpZWxkX3BzeW5lcmd5X3dpbmRvdy53aW5kb3cuc2VuZF90b19mcm9udCgpO1xyXG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93Lm9wZW4odGhpcy5hYmlsaXR5X2tleV9uYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5jYXN0aW5nX3BzeW5lcmd5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3RvcF9jaGFyKGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbiA9IHRoaXMuZ2V0X2Nhc3RfZGlyZWN0aW9uKHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY3VycmVudF9kaXJlY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc2V0X2RpcmVjdGlvbih0aGlzLmNhc3RfZGlyZWN0aW9uKTtcclxuICAgICAgICBpZiAodGhpcy5uZWVkX3RhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaF9mb3JfdGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X3RhcmdldF9jYXN0ZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgbGV0IHJlc2V0X21hcDtcclxuICAgICAgICB0aGlzLnN0b3BfY2FzdGluZyA9IGluaXRfY2FzdF9hdXJhKHRoaXMuZ2FtZSwgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUsIHRoaXMuZGF0YS5ucGNfZ3JvdXAsIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY29sb3JfZmlsdGVyLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc2V0X21hcCA9IHRpbnRfbWFwX2xheWVycyh0aGlzLmdhbWUsIHRoaXMuZGF0YS5tYXAsIHRoaXMuZGF0YS5tYXAuY29sb3JfZmlsdGVyKTtcclxuICAgICAgICAgICAgdGhpcy5ib290c3RyYXBfbWV0aG9kKCk7XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5jYXN0aW5nX3BzeW5lcmd5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IG51bGw7XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhc3RfZmluaXNoZXIoKTtcclxuICAgICAgICAgICAgcmVzZXRfbWFwKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gaW5pdF9jYXN0X2F1cmEoZ2FtZSwgc3ByaXRlLCBncm91cCwgZmlsdGVyLCBhZnRlcl9pbml0LCBhZnRlcl9kZXN0cm95LCBiZWZvcmVfZGVzdHJveSkge1xyXG4gICAgY29uc3QgcmluZ191cF90aW1lID0gNzUwO1xyXG4gICAgY29uc3QgcmluZ191cF90aW1lX2hhbGYgPSByaW5nX3VwX3RpbWUgPj4gMTtcclxuICAgIGNvbnN0IHN0ZXBfdGltZSA9IChyaW5nX3VwX3RpbWUgLyAzKSB8IDA7XHJcbiAgICBzcHJpdGUuZmlsdGVycyA9IFtmaWx0ZXJdO1xyXG4gICAgY29uc3QgYXVyYXNfbnVtYmVyID0gMjtcclxuICAgIGxldCB0d2VlbnMgPSBbXTtcclxuICAgIGxldCBzdG9wX2Fza2VkID0gZmFsc2U7XHJcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXVyYXNfbnVtYmVyOyArK2opIHtcclxuICAgICAgICBsZXQgYmFja19hdXJhID0gZ3JvdXAuY3JlYXRlKDAsIDAsIFwicHN5bmVyZ3lfYXVyYVwiKTtcclxuICAgICAgICBsZXQgZnJvbnRfYXVyYSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBcInBzeW5lcmd5X2F1cmFcIik7XHJcbiAgICAgICAgYmFja19hdXJhLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSBzcHJpdGUuYmFzZV9jb2xsaWRlcl9sYXllcjtcclxuICAgICAgICBmcm9udF9hdXJhLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSBzcHJpdGUuYmFzZV9jb2xsaWRlcl9sYXllcjtcclxuICAgICAgICBiYWNrX2F1cmEuc29ydF9mdW5jdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgZ3JvdXAuc2V0Q2hpbGRJbmRleChiYWNrX2F1cmEsIGdyb3VwLmdldENoaWxkSW5kZXgoc3ByaXRlKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBiYWNrX2F1cmEuc29ydF9mdW5jdGlvbigpO1xyXG4gICAgICAgIGZyb250X2F1cmEuc29ydF9mdW5jdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgZ3JvdXAuc2V0Q2hpbGRJbmRleChmcm9udF9hdXJhLCBncm91cC5nZXRDaGlsZEluZGV4KHNwcml0ZSkgKyAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZyb250X2F1cmEuc29ydF9mdW5jdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHNwcml0ZS5oZWlnaHQgKyBmcm9udF9hdXJhLmhlaWdodCAtIDg7XHJcbiAgICAgICAgY29uc3Qgc3RlcF9oZWlnaHQgPSAoaGVpZ2h0IC8gMykgfCAwO1xyXG4gICAgICAgIGZyb250X2F1cmEuYW5jaG9yLnNldFRvKDAuNSwgMCk7XHJcbiAgICAgICAgZnJvbnRfYXVyYS5jZW50ZXJYID0gc3ByaXRlLmNlbnRlclg7XHJcbiAgICAgICAgZnJvbnRfYXVyYS5jZW50ZXJZID0gc3ByaXRlLmNlbnRlclkgKyAoc3ByaXRlLmhlaWdodCA+PiAxKSArIChmcm9udF9hdXJhLmhlaWdodCA+PiAxKTtcclxuICAgICAgICBjb25zdCBpbml0aWFsX2Zyb250X3kgPSBmcm9udF9hdXJhLnk7XHJcbiAgICAgICAgZnJvbnRfYXVyYS5zY2FsZS5zZXRUbygwLCAwKTtcclxuICAgICAgICBiYWNrX2F1cmEuYW5jaG9yLnNldFRvKDAuNSwgMCk7XHJcbiAgICAgICAgYmFja19hdXJhLmNlbnRlclggPSBzcHJpdGUuY2VudGVyWDtcclxuICAgICAgICBiYWNrX2F1cmEuY2VudGVyWSA9IHNwcml0ZS5jZW50ZXJZICsgKHNwcml0ZS5oZWlnaHQgPj4gMSkgKyAoYmFja19hdXJhLmhlaWdodCA+PiAxKTtcclxuICAgICAgICBjb25zdCBpbml0aWFsX2JhY2tfeSA9IGJhY2tfYXVyYS55O1xyXG4gICAgICAgIGJhY2tfYXVyYS5zY2FsZS5zZXRUbygwLCAwKTtcclxuICAgICAgICBsZXQgYXVyYXMgPSBbXHJcbiAgICAgICAgICAgIHthdXJhOiBmcm9udF9hdXJhLCBpbml0aWFsX3k6IGluaXRpYWxfZnJvbnRfeSwgc2NhbGVfZmFjdG9yOiAxfSxcclxuICAgICAgICAgICAge2F1cmE6IGJhY2tfYXVyYSwgaW5pdGlhbF95OiBpbml0aWFsX2JhY2tfeSwgc2NhbGVfZmFjdG9yOiAtMX0sXHJcbiAgICAgICAgXTtcclxuICAgICAgICB0d2VlbnMucHVzaChbXSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdXJhcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBsZXQgYXVyYSA9IGF1cmFzW2ldLmF1cmE7XHJcbiAgICAgICAgICAgIGxldCBpbml0aWFsX3kgPSBhdXJhc1tpXS5pbml0aWFsX3k7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZV9mYWN0b3IgPSBhdXJhc1tpXS5zY2FsZV9mYWN0b3I7XHJcbiAgICAgICAgICAgIGxldCB0d2Vlbl9hID0gZ2FtZS5hZGQudHdlZW4oYXVyYSkudG8oXHJcbiAgICAgICAgICAgICAgICB7IHk6IGluaXRpYWxfeSAtIHN0ZXBfaGVpZ2h0IH0sXHJcbiAgICAgICAgICAgICAgICBzdGVwX3RpbWUsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGxldCB0d2Vlbl9iID0gZ2FtZS5hZGQudHdlZW4oYXVyYSkudG8oXHJcbiAgICAgICAgICAgICAgICB7IHk6IGluaXRpYWxfeSAtIDIgKiBzdGVwX2hlaWdodCB9LFxyXG4gICAgICAgICAgICAgICAgc3RlcF90aW1lLFxyXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBsZXQgdHdlZW5fYyA9IGdhbWUuYWRkLnR3ZWVuKGF1cmEpLnRvKFxyXG4gICAgICAgICAgICAgICAgeyB5OiBpbml0aWFsX3kgLSAzICogc3RlcF9oZWlnaHQgfSxcclxuICAgICAgICAgICAgICAgIHN0ZXBfdGltZSxcclxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbGV0IHByb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsgfSkpO1xyXG4gICAgICAgICAgICB0d2Vlbl9jLm9uQ29tcGxldGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF1cmEueSA9IGluaXRpYWxfeTtcclxuICAgICAgICAgICAgICAgIGlmICghc3RvcF9hc2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuX2Euc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0d2Vlbl9hYS5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCB0d2Vlbl9hYSA9IGdhbWUuYWRkLnR3ZWVuKGF1cmEuc2NhbGUpLnRvKFxyXG4gICAgICAgICAgICAgICAgeyB4OiBzY2FsZV9mYWN0b3IsIHk6IHNjYWxlX2ZhY3RvciB9LFxyXG4gICAgICAgICAgICAgICAgcmluZ191cF90aW1lX2hhbGYsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5PdXRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbGV0IHR3ZWVuX2NjID0gZ2FtZS5hZGQudHdlZW4oYXVyYS5zY2FsZSkudG8oXHJcbiAgICAgICAgICAgICAgICB7IHg6IDAsIHk6IDAgfSxcclxuICAgICAgICAgICAgICAgIHJpbmdfdXBfdGltZV9oYWxmLFxyXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuT3V0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHR3ZWVuc1tqXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGF1cmE6IGF1cmEsXHJcbiAgICAgICAgICAgICAgICB0d2Vlbl9hOiB0d2Vlbl9hLFxyXG4gICAgICAgICAgICAgICAgdHdlZW5fYWE6IHR3ZWVuX2FhLFxyXG4gICAgICAgICAgICAgICAgdHdlZW5fYjogdHdlZW5fYixcclxuICAgICAgICAgICAgICAgIHR3ZWVuX2M6IHR3ZWVuX2MsXHJcbiAgICAgICAgICAgICAgICB0d2Vlbl9jYzogdHdlZW5fY2NcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHR3ZWVuX2EuY2hhaW4odHdlZW5fYik7XHJcbiAgICAgICAgICAgIHR3ZWVuX2IuY2hhaW4odHdlZW5fYyk7XHJcbiAgICAgICAgICAgIHR3ZWVuX2FhLmNoYWluKHR3ZWVuX2NjKTtcclxuICAgICAgICAgICAgaWYgKGogPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0d2Vlbl9hYS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuc1swXVtpXS5hdXJhLnkgPSBpbml0aWFsX3k7XHJcbiAgICAgICAgICAgICAgICAgICAgdHdlZW5zWzBdW2ldLnR3ZWVuX2Euc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0d2VlbnNbMF1baV0udHdlZW5fYWEuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5fYS5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5fYWEuc3RhcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBibGlua19jb3VudGVyID0gMTY7XHJcbiAgICBsZXQgYmxpbmtfdGltZXIgPSBnYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgIGxldCBodWVfdGltZXIgPSBnYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgIGJsaW5rX3RpbWVyLmxvb3AoNTAsICgpID0+IHtcclxuICAgICAgICBpZiAoYmxpbmtfY291bnRlciUyID09PSAwKSB7XHJcbiAgICAgICAgICAgIGZpbHRlci50aW50ID0gWzEsMSwxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaWx0ZXIudGludCA9IFstMSwtMSwtMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC0tYmxpbmtfY291bnRlcjtcclxuICAgICAgICBpZiAoYmxpbmtfY291bnRlciA9PT0gMCkge1xyXG4gICAgICAgICAgICBmaWx0ZXIuZ3JheSA9IDAuNDtcclxuICAgICAgICAgICAgYmxpbmtfdGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICBpZiAoYWZ0ZXJfaW5pdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhZnRlcl9pbml0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaHVlX3RpbWVyLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBodWVfdGltZXIubG9vcCgxMDAsICgpID0+IHtcclxuICAgICAgICBmaWx0ZXIuaHVlX2FkanVzdCA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcclxuICAgIH0pO1xyXG4gICAgYmxpbmtfdGltZXIuc3RhcnQoKTtcclxuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGJlZm9yZV9kZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgYmVmb3JlX2Rlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RvcF9hc2tlZCA9IHRydWU7XHJcbiAgICAgICAgaHVlX3RpbWVyLnN0b3AoKTtcclxuICAgICAgICBibGlua190aW1lci5zdG9wKCk7XHJcbiAgICAgICAgZmlsdGVyLnRpbnQgPSBbLTEsLTEsLTFdO1xyXG4gICAgICAgIGZpbHRlci5ncmF5ID0gMDtcclxuICAgICAgICBmaWx0ZXIuaHVlX2FkanVzdCA9IDA7XHJcbiAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHdlZW5zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdHdlZW5zW2ldLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV1bal0udHdlZW5fYS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV1bal0udHdlZW5fYWEuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2Iuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2Muc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2NjLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIGdyb3VwLnJlbW92ZSh0d2VlbnNbaV1bal0uYXVyYSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFmdGVyX2Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBhZnRlcl9kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbnRfbWFwX2xheWVycyhnYW1lLCBtYXAsIGZpbHRlciwgYWZ0ZXJfZGVzdHJveSkge1xyXG4gICAgZmlsdGVyLmNvbG9yaXplX2ludGVuc2l0eSA9IDA7XHJcbiAgICBmaWx0ZXIuZ3JheSA9IDA7XHJcbiAgICBmaWx0ZXIuY29sb3JpemUgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXAubGF5ZXJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgbWFwLmxheWVyc1tpXS5zcHJpdGUuZmlsdGVycyA9IFtmaWx0ZXJdO1xyXG4gICAgfVxyXG4gICAgZ2FtZS5hZGQudHdlZW4oZmlsdGVyKS50byhcclxuICAgICAgICB7IGNvbG9yaXplX2ludGVuc2l0eTogMC40LCBncmF5OiAxIH0sXHJcbiAgICAgICAgUGhhc2VyLlRpbWVyLlFVQVJURVIsXHJcbiAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBnYW1lLmFkZC50d2VlbihmaWx0ZXIpLnRvKFxyXG4gICAgICAgICAgICB7IGNvbG9yaXplX2ludGVuc2l0eTogMCwgZ3JheTogMCB9LFxyXG4gICAgICAgICAgICBQaGFzZXIuVGltZXIuUVVBUlRFUixcclxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgZmlsdGVyLmNvbG9yaXplID0gLTE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwLmxheWVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbWFwLmxheWVyc1tpXS5zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWZ0ZXJfZGVzdHJveSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhZnRlcl9kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgdGFyZ2V0X29ubHlfcHVzaCB9IGZyb20gJy4uL2ludGVyYWN0YWJsZV9vYmplY3RzL3B1c2guanMnO1xyXG5pbXBvcnQgeyBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMsIGpvaW5fZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBGaWVsZEFiaWxpdGllcyB9IGZyb20gXCIuL0ZpZWxkQWJpbGl0aWVzLmpzXCI7XHJcblxyXG5jb25zdCBBQklMSVRZX0tFWV9OQU1FID0gXCJtb3ZlXCI7XHJcbmNvbnN0IEFDVElPTl9LRVlfTkFNRSA9IFwiY2FzdFwiO1xyXG5jb25zdCBNQVhfSEFORF9UUkFOU0xBVEUgPSAxNjtcclxuY29uc3QgTU9WRV9NQVhfUkFOR0UgPSAyNjtcclxuY29uc3QgTU9WRV9IQU5EX0tFWV9OQU1FID0gXCJtb3ZlX2hhbmRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNb3ZlRmllbGRQc3luZXJneSBleHRlbmRzIEZpZWxkQWJpbGl0aWVzIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBBQklMSVRZX0tFWV9OQU1FLCBNT1ZFX01BWF9SQU5HRSwgQUNUSU9OX0tFWV9OQU1FLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9tb3ZlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuc2V0X2Nhc3RfZmluaXNoZXJfbWV0aG9kKHRoaXMudW5zZXRfaHVlX3NoaWZ0ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZV9iYXNlID0gdGhpcy5kYXRhLmluZm8ubWlzY19zcHJpdGVfYmFzZV9saXN0W01PVkVfSEFORF9LRVlfTkFNRV07XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IHRoaXMuaGFuZF9zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoTU9WRV9IQU5EX0tFWV9OQU1FKTtcclxuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoMCwgMCwgc3ByaXRlX2tleSk7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmhhbmRfc3ByaXRlLCBNT1ZFX0hBTkRfS0VZX05BTUUpO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9scygpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbHNfYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2xzKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZV9wdXNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTEVGVCkub25Eb3duLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250cm9sc19hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZV9wdXNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVVApLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udHJvbHNfYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cDtcclxuICAgICAgICAgICAgdGhpcy5maXJlX3B1c2goKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5ET1dOKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcclxuICAgICAgICAgICAgdGhpcy5maXJlX3B1c2goKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250cm9sc19hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sc19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5maW5pc2hfaGFuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlyZV9wdXNoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllciA9PT0gdGhpcy50YXJnZXRfb2JqZWN0LmJhc2VfY29sbGlkZXJfbGF5ZXIpIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW1fcG9zaXRpb24gPSB0aGlzLnRhcmdldF9vYmplY3QuZ2V0X2N1cnJlbnRfcG9zaXRpb24odGhpcy5kYXRhLm1hcCk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcclxuICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnkgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHBvc2l0aW9uX2FsbG93ZWQgPSB0aGlzLnRhcmdldF9vYmplY3QucG9zaXRpb25fYWxsb3dlZChpdGVtX3Bvc2l0aW9uLngsIGl0ZW1fcG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbl9hbGxvd2VkICYmICEodGhpcy5jb250cm9sbGFibGVfY2hhci50aWxlX3hfcG9zID09PSBpdGVtX3Bvc2l0aW9uLnggJiYgdGhpcy5jb250cm9sbGFibGVfY2hhci50aWxlX3lfcG9zID09PSBpdGVtX3Bvc2l0aW9uLnkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X29ubHlfcHVzaCh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy50YXJnZXRfb2JqZWN0LCAoeF9zaGlmdCwgeV9zaGlmdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHhfdGFyZ2V0ID0gdGhpcy5oYW5kX3Nwcml0ZS54ICsgeF9zaGlmdDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB5X3RhcmdldCA9IHRoaXMuaGFuZF9zcHJpdGUueSArIHlfc2hpZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmhhbmRfc3ByaXRlKS50byhcclxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IHhfdGFyZ2V0LCB5OiB5X3RhcmdldH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlcnMuUFVTSF9USU1FLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKG51bWJlcnMuUFVTSF9USU1FID4+IDEsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5lZWRfY2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duXS5pbmNsdWRlcyh0aGlzLmNhc3RfZGlyZWN0aW9uKSAmJiBbZGlyZWN0aW9ucy5sZWZ0LCBkaXJlY3Rpb25zLnJpZ2h0XS5pbmNsdWRlcyh0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FzdF9kaXJlY3Rpb24gPSBqb2luX2RpcmVjdGlvbnModGhpcy5jYXN0X2RpcmVjdGlvbiwgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZF9jaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd25dLmluY2x1ZGVzKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSAmJiBbZGlyZWN0aW9ucy5sZWZ0LCBkaXJlY3Rpb25zLnJpZ2h0XS5pbmNsdWRlcyh0aGlzLmNhc3RfZGlyZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbiA9IGpvaW5fZGlyZWN0aW9ucyh0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiwgdGhpcy5jYXN0X2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkX2NoYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZWVkX2NoYW5nZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNldF9kaXJlY3Rpb24odGhpcy5jYXN0X2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0X2RpcmVjdGlvbiA9IHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmNhc3RfZGlyZWN0aW9uXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KFwiY2FzdF9cIiArIGRlc3RfZGlyZWN0aW9uLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5mcmFtZU5hbWUgPSBgY2FzdC8ke2Rlc3RfZGlyZWN0aW9ufS8wMWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zX3Nxcl9kaXN0YW5jZSA9IE1hdGgucG93KHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmJvZHkueCAtIHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5ib2R5LngsIDIpICsgTWF0aC5wb3codGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS55IC0gdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmJvZHkueSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkX3Nxcl9kaXN0YW5jZSA9IE1hdGgucG93KG51bWJlcnMuSEVST19CT0RZX1JBRElVUyArIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5ib2R5X3JhZGl1cywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc19zcXJfZGlzdGFuY2UgPD0gcmFkX3Nxcl9kaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnggPSAodGhpcy5jb250cm9sbGFibGVfY2hhci50aWxlX3hfcG9zICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS55ID0gKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcyArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNoYWRvdy54ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNoYWRvdy55ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoX2hhbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5tYXAuc29ydF9zcHJpdGVzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfaGFuZCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmFkZCh0aGlzLmhhbmRfc3ByaXRlKTtcclxuICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmJyaW5nVG9Ub3AodGhpcy5oYW5kX3Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLnNjYWxlLnNldFRvKDEsIDEpO1xyXG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuc2VuZF90b19mcm9udCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5iYXNlX2NvbGxpZGVyX2xheWVyID0gdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnN0b3AodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5mcmFtZU5hbWUgPSB0aGlzLmhhbmRfc3ByaXRlX2Jhc2UuZ2V0RnJhbWVOYW1lKE1PVkVfSEFORF9LRVlfTkFNRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY2FzdF9kaXJlY3Rpb25dLCAwKTtcclxuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLmFuY2hvci54ID0gMC41O1xyXG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclg7XHJcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5jZW50ZXJZID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2xhdGVfaGFuZCgpIHtcclxuICAgICAgICBsZXQgdHJhbnNsYXRlX3ggPSB0aGlzLmhhbmRfc3ByaXRlLmNlbnRlclg7XHJcbiAgICAgICAgbGV0IHRyYW5zbGF0ZV95ID0gdGhpcy5oYW5kX3Nwcml0ZS5jZW50ZXJZO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jYXN0X2RpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCA9IHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5jZW50ZXJYO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLnk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95IC09IE1BWF9IQU5EX1RSQU5TTEFURTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldF9mb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV94ID0gdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmNlbnRlclg7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3kgPSB0aGlzLnRhcmdldF9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUueSAtIHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5oZWlnaHQgKyB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ICs9IE1BWF9IQU5EX1RSQU5TTEFURTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCA9IHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS54IC0gMiAqIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeSA9IHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5jZW50ZXJZO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCArPSBNQVhfSEFORF9UUkFOU0xBVEU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCA9IHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS54ICsgMiAqIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5ib2R5X3JhZGl1cztcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeSA9IHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5jZW50ZXJZO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCAtPSBNQVhfSEFORF9UUkFOU0xBVEU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmhhbmRfc3ByaXRlKS50byhcclxuICAgICAgICAgICAge2NlbnRlclg6IHRyYW5zbGF0ZV94LCBjZW50ZXJZOiB0cmFuc2xhdGVfeX0sXHJcbiAgICAgICAgICAgIDIwMCxcclxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYW5pbV9rZXkgPSB0aGlzLmhhbmRfc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KE1PVkVfSEFORF9LRVlfTkFNRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY2FzdF9kaXJlY3Rpb25dKTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbV9rZXkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5pbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZS5maWx0ZXJzID0gW3RoaXMudGFyZ2V0X29iamVjdC5jb2xvcl9maWx0ZXJdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfaHVlc2hpZnRfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfaHVlc2hpZnRfdGltZXIubG9vcCg1LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmNvbG9yX2ZpbHRlci5odWVfYWRqdXN0ID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9odWVzaGlmdF90aW1lci5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc19hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCg3MDAsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaF9oYW5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNldF9oZXJvX2Nhc3RfYW5pbSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5pc2hfaGFuZCgpIHtcclxuICAgICAgICBsZXQgZmxpcF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgbGV0IGZha2VfaGFuZF9zY2FsZSA9IHt4IDogMX07XHJcbiAgICAgICAgZmxpcF90aW1lci5sb29wKDQwLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuc2NhbGUueCA9IHRoaXMuaGFuZF9zcHJpdGUuc2NhbGUueCA+IDAgPyAtZmFrZV9oYW5kX3NjYWxlLnggOiBmYWtlX2hhbmRfc2NhbGUueDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBmbGlwX3RpbWVyLnN0YXJ0KCk7XHJcbiAgICAgICAgbGV0IHlfc2hpZnQgPSB0aGlzLmhhbmRfc3ByaXRlLnkgLSAxMDtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpLnRvKFxyXG4gICAgICAgICAgICB7IHk6IHlfc2hpZnQgfSxcclxuICAgICAgICAgICAgMzUwLFxyXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKGZha2VfaGFuZF9zY2FsZSkudG8oXHJcbiAgICAgICAgICAgIHsgeDogMCB9LFxyXG4gICAgICAgICAgICAzNTAsXHJcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5oYW5kX3Nwcml0ZS5zY2FsZSkudG8oXHJcbiAgICAgICAgICAgIHsgeTogMCB9LFxyXG4gICAgICAgICAgICAzNTAsXHJcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfZmluYWxfZW1pdHRlcih0aGlzLmhhbmRfc3ByaXRlLngsIHRoaXMuaGFuZF9zcHJpdGUueSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XHJcbiAgICAgICAgICAgIGZsaXBfdGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLnJlbW92ZSh0aGlzLmhhbmRfc3ByaXRlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMudW5zZXRfZW1pdHRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHNldF9lbWl0dGVyKCkge1xyXG4gICAgICAgIGxldCB4X3NoaWZ0ID0gMDtcclxuICAgICAgICBsZXQgeV9zaGlmdCA9IDA7XHJcbiAgICAgICAgc3dpdGNoKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxyXG4gICAgICAgICAgICAgICAgeV9zaGlmdCA9IC1NQVhfSEFORF9UUkFOU0xBVEU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XHJcbiAgICAgICAgICAgICAgICB5X3NoaWZ0ID0gTUFYX0hBTkRfVFJBTlNMQVRFO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxyXG4gICAgICAgICAgICAgICAgeF9zaGlmdCA9IC1NQVhfSEFORF9UUkFOU0xBVEU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgeF9zaGlmdCA9IE1BWF9IQU5EX1RSQU5TTEFURTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXR0ZXIgPSB0aGlzLmdhbWUuYWRkLmVtaXR0ZXIodGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWCArIHhfc2hpZnQsIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyB5X3NoaWZ0LCAxNTApO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfcGFydGljbGVcIik7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1pblBhcnRpY2xlU3BlZWQuc2V0VG8oLTE1LCAtMTUpO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5tYXhQYXJ0aWNsZVNwZWVkLnNldFRvKDE1LCAxNSk7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLmdyYXZpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci53aWR0aCA9IDIgKiBNT1ZFX01BWF9SQU5HRTtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuaGVpZ2h0ID0gMiAqIE1PVkVfTUFYX1JBTkdFO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5hZGQoJ3ZhbmlzaCcsIG51bGwsIDQsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydF9lbWl0dGVyKCkge1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5zdGFydChmYWxzZSwgUGhhc2VyLlRpbWVyLlFVQVJURVIsIDE1LCAwKTtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMucGxheSgndmFuaXNoJyk7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0uc2V0RnJhbWUoKE1hdGgucmFuZG9tKCkgKiBwYXJ0aWNsZS5hbmltYXRpb25zLmZyYW1lVG90YWwpIHwgMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfZW1pdHRlcigpIHtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9maW5hbF9lbWl0dGVyKCkge1xyXG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlcl9wYXJ0aWNsZXNfY291bnQgPSA4O1xyXG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlciA9IHRoaXMuZ2FtZS5hZGQuZW1pdHRlcigwLCAwLCB0aGlzLmZpbmFsX2VtaXR0ZXJfcGFydGljbGVzX2NvdW50KTtcclxuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIubWFrZVBhcnRpY2xlcyhcInBzeW5lcmd5X3BhcnRpY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5ncmF2aXR5ID0gMzAwO1xyXG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5hZGQoJ3ZhbmlzaCcsIG51bGwsIDQsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydF9maW5hbF9lbWl0dGVyKHgsIHkpIHtcclxuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIueCA9IHg7XHJcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyLnkgPSB5O1xyXG4gICAgICAgIGxldCBsaWZldGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSO1xyXG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5zdGFydCh0cnVlLCBsaWZldGltZSwgbnVsbCwgdGhpcy5maW5hbF9lbWl0dGVyX3BhcnRpY2xlc19jb3VudCk7XHJcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLnBsYXkoJ3ZhbmlzaCcpO1xyXG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnNldEZyYW1lKChNYXRoLnJhbmRvbSgpICogcGFydGljbGUuYW5pbWF0aW9ucy5mcmFtZVRvdGFsKSB8IDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQobGlmZXRpbWUsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51bnNldF9maW5hbF9lbWl0dGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfZmluYWxfZW1pdHRlcigpIHtcclxuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0X2h1ZV9zaGlmdGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldF9mb3VuZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRfaHVlc2hpZnRfdGltZXIuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0X21vdmUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfZW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2ZpbmFsX2VtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaF9mb3JfdGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5zZXRfaGFuZCgpO1xyXG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGVfaGFuZCgpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRfZW1pdHRlcigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi4vdGlsZV9ldmVudHMvVGlsZUV2ZW50LmpzXCI7XHJcbmltcG9ydCB7IGdldF9zdXJyb3VuZGluZ3MsIGRpcmVjdGlvbnN9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBKdW1wRXZlbnQgfSBmcm9tIFwiLi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50LmpzXCI7XHJcbmltcG9ydCB7IEZpZWxkQWJpbGl0aWVzIH0gZnJvbSBcIi4vRmllbGRBYmlsaXRpZXMuanNcIjtcclxuXHJcbmNvbnN0IEFCSUxJVFlfS0VZX05BTUUgPSBcImZyb3N0XCI7XHJcbmNvbnN0IEFDVElPTl9LRVlfTkFNRSA9IFwiY2FzdFwiO1xyXG5jb25zdCBGUk9TVF9NQVhfUkFOR0UgPSAxMjtcclxuY29uc3QgU05PV0ZMQUtFU19DT1VOVCA9IDE2OyBcclxuY29uc3QgVE9UQUxfVFVSTlNfU05PV0ZMQUtFUyA9IE1hdGguUEkgKiA3O1xyXG5jb25zdCBQT0xBUl9TTE9QRSA9IDAuMTU7IFxyXG5jb25zdCBTUElSQUxfSU5URU5TSVRZID0gODsgXHJcbmNvbnN0IFNOT1dGTEFLRV9EVVJBVElPTiA9IDE2NTA7XHJcblxyXG4vKkhhbmRsZXMgdGhlIFwiRnJvc3RcIiBmaWVsZCBwc3luZXJneVxyXG5Eb2VzIG5vdCBoYW5kbGUgdGhlIGluLWJhdHRsZSBjb21tYW5kXHJcblxyXG5JbnB1dDpnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcclxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xyXG5leHBvcnQgY2xhc3MgRnJvc3RGaWVsZFBzeW5lcmd5IGV4dGVuZHMgRmllbGRBYmlsaXRpZXMge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIEFCSUxJVFlfS0VZX05BTUUsIEZST1NUX01BWF9SQU5HRSwgQUNUSU9OX0tFWV9OQU1FLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9zbm93Zmxha2VzLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qQmVnaW5zIHRoZSBzbm93Zmxha2UgZWZmZWN0c1xyXG4gICAgVXBvbiBmaW5pc2hpbmcsIHRyaWdnZXJzIHRoZSBwaWxsYXIncyBncm93dGgqL1xyXG4gICAgaW5pdF9zbm93Zmxha2VzKCkge1xyXG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTTk9XRkxBS0VTX0NPVU5UOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHNub3dmbGFrZV9zcHJpdGUgPSB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImZyb3N0X3Nub3dmbGFrZVwiKTtcclxuICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZV9mYWN0b3IgPSBfLnJhbmRvbSg1LCA4KS8xMC4wO1xyXG4gICAgICAgICAgICBjb25zdCByb3RhdGlvbl9mYWN0b3IgPSBNYXRoLnJhbmRvbSgpICogbnVtYmVycy5kZWdyZWUzNjA7XHJcbiAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGVfZmFjdG9yLCBzY2FsZV9mYWN0b3IpO1xyXG4gICAgICAgICAgICBzbm93Zmxha2Vfc3ByaXRlLnJvdGF0aW9uID0gcm90YXRpb25fZmFjdG9yO1xyXG4gICAgICAgICAgICBsZXQgeF9kZXN0ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWDtcclxuICAgICAgICAgICAgbGV0IHlfZGVzdCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyAxMjtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmNhc3RfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDogeF9kZXN0IC09IDE2OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDogeF9kZXN0ICs9IDE2OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDogeV9kZXN0IC09IDE0OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOiB5X2Rlc3QgKz0gMTI7IGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzcGlyYWxfYW5nbGUgPSB7cmFkOiBUT1RBTF9UVVJOU19TTk9XRkxBS0VTfTtcclxuICAgICAgICAgICAgY29uc3Qgc2lnbl94ID0gTWF0aC5zaWduKE1hdGgucmFuZG9tKCkgLSAwLjUpO1xyXG4gICAgICAgICAgICBjb25zdCBzaWduX3kgPSBNYXRoLnNpZ24oTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2VlbihzcGlyYWxfYW5nbGUpLnRvKFxyXG4gICAgICAgICAgICAgICAge3JhZDogLU1hdGguUEl9LFxyXG4gICAgICAgICAgICAgICAgU05PV0ZMQUtFX0RVUkFUSU9OLFxyXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICBpKihQaGFzZXIuVGltZXIuUVVBUlRFUi81KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0d2Vlbi5vblVwZGF0ZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuY2VudGVyWCA9IHNpZ25feCAqIFNQSVJBTF9JTlRFTlNJVFkgKiBNYXRoLmV4cChQT0xBUl9TTE9QRSAqIHNwaXJhbF9hbmdsZS5yYWQpICogTWF0aC5jb3Moc3BpcmFsX2FuZ2xlLnJhZCkgKyB4X2Rlc3Q7XHJcbiAgICAgICAgICAgICAgICBzbm93Zmxha2Vfc3ByaXRlLmNlbnRlclkgPSBzaWduX3kgKiBTUElSQUxfSU5URU5TSVRZICogTWF0aC5leHAoUE9MQVJfU0xPUEUgKiBzcGlyYWxfYW5nbGUucmFkKSAqIE1hdGguc2luKHNwaXJhbF9hbmdsZS5yYWQpICsgeV9kZXN0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IFNOT1dGTEFLRVNfQ09VTlQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdF9waWxsYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypDaGFuZ2VzIHRoZSBwb29sIGludG8gYSBwaWxsYXJcclxuICAgIFdpbGwgY2hhbmdlIGl0cyBwcm9wZXJ0aWVzIGFuZCBhbmltYXRpb24qL1xyXG4gICAgaW5pdF9waWxsYXIoKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmdldF9ldmVudHMoKS5mb3JFYWNoKGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmlzX3NldCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuaXNfc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuaXNfc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSnVtcEV2ZW50LmFjdGl2ZV9qdW1wX3N1cnJvdW5kaW5ncyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRfc3Vycm91bmRpbmdzKGV2ZW50LngsIGV2ZW50LnksIGZhbHNlLCAyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmNvbGxpZGVyX2xheWVyX3NoaWZ0ICsgdGhpcy50YXJnZXRfb2JqZWN0LmJhc2VfY29sbGlkZXJfbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLnNlbmRfdG9fYmFjayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGF0YS5tYXAuc29ydF9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnMgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcignQ29sb3JGaWx0ZXJzJyk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmZpbHRlcnMgPSBbdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnNdO1xyXG4gICAgICAgIGxldCBibGlua19jb3VudGVyID0gMTY7XHJcbiAgICAgICAgbGV0IGJsaW5rX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgICAgICBibGlua190aW1lci5sb29wKDUwLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibGlua19jb3VudGVyJTIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YS5jb2xvcl9maWx0ZXJzLnRpbnQgPSBbMSwxLDFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnMudGludCA9IFstMSwtMSwtMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLS1ibGlua19jb3VudGVyO1xyXG4gICAgICAgICAgICBpZiAoYmxpbmtfY291bnRlciA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYmxpbmtfdGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm93X3BpbGxhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmxpbmtfdGltZXIuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlBsYXlzIHRoZSBwaWxsYXIncyBncm93aW5nIGFuaW1hdGlvbiovXHJcbiAgICBncm93X3BpbGxhcigpIHtcclxuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KFwiZnJvc3RfcG9vbF9waWxsYXJcIik7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfcGVybWFuZW50X2JsaW5rKCk7XHJcbiAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wX2Nhc3RpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKkVuYWJsZXMgdGhlIHBpbGxhcidzIGJsaW5raW5nIHN0YXRlKi9cclxuICAgIHNldF9wZXJtYW5lbnRfYmxpbmsoKSB7XHJcbiAgICAgICAgbGV0IGJsaW5rX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcclxuICAgICAgICBsZXQgdGFyZ2V0X29iamVjdCA9IHRoaXMudGFyZ2V0X29iamVjdDtcclxuICAgICAgICBibGlua190aW1lci5sb29wKDE1MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnMuaHVlX2FkanVzdCA9IDUuMztcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgyMCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YS5jb2xvcl9maWx0ZXJzLmh1ZV9hZGp1c3QgPSAwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBibGlua190aW1lci5zdGFydCgpO1xyXG4gICAgICAgIHRhcmdldF9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuZXZlbnRzLm9uRGVzdHJveS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBibGlua190aW1lci5kZXN0cm95KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBkaXJlY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7IEZpZWxkQWJpbGl0aWVzIH0gZnJvbSBcIi4vRmllbGRBYmlsaXRpZXMuanNcIjtcclxuXHJcbmNvbnN0IEFCSUxJVFlfS0VZX05BTUUgPSBcImdyb3d0aFwiO1xyXG5jb25zdCBBQ1RJT05fS0VZX05BTUUgPSBcImNhc3RcIjtcclxuY29uc3QgR1JPV1RIX01BWF9SQU5HRSA9IDEyO1xyXG5jb25zdCBNQVhfUEFSVElDTEVfU1BFRUQgPSA2MDtcclxuY29uc3QgTUlOX1BBUlRJQ0xFX1NQRUVEID0gNTU7XHJcbmNvbnN0IFhfUEFSVElDTEVfU1BFRUQgPSAzNTtcclxuY29uc3QgWV9QQVJUSUNMRV9TUEVFRCA9IDM1O1xyXG5jb25zdCBOT19UQVJHRVRfU1BST1VUX0NPVU5UID0gNTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcm93dGhGaWVsZFBzeW5lcmd5IGV4dGVuZHMgRmllbGRBYmlsaXRpZXMge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIEFCSUxJVFlfS0VZX05BTUUsIEdST1dUSF9NQVhfUkFOR0UsIEFDVElPTl9LRVlfTkFNRSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zZXRfYm9vdHN0cmFwX21ldGhvZCh0aGlzLmluaXRfYnViYmxlcy5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfZW1pdHRlcigpIHtcclxuICAgICAgICBsZXQgbWF4X3hfc3BlZWQgPSAwO1xyXG4gICAgICAgIGxldCBtYXhfeV9zcGVlZCA9IDA7XHJcbiAgICAgICAgbGV0IG1pbl94X3NwZWVkID0gMDtcclxuICAgICAgICBsZXQgbWluX3lfc3BlZWQgPSAwO1xyXG4gICAgICAgIGxldCB4X2Rlc3QgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYO1xyXG4gICAgICAgIGxldCB5X2Rlc3QgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJZICsgNTtcclxuICAgICAgICBsZXQgZW1pdHRlcl93aWR0aCA9IDA7XHJcbiAgICAgICAgbGV0IGVtaXR0ZXJfaGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmluY3JlYXNlX2R1cmF0aW9uID0gMDtcclxuICAgICAgICBzd2l0Y2godGhpcy5jYXN0X2RpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XHJcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IC1NQVhfUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtaW5feV9zcGVlZCA9IC1NSU5fUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtYXhfeF9zcGVlZCA9IG1pbl94X3NwZWVkID0gWF9QQVJUSUNMRV9TUEVFRDtcclxuICAgICAgICAgICAgICAgIHlfZGVzdCAtPSA3O1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlcl93aWR0aCA9IEdST1dUSF9NQVhfUkFOR0UgPj4gMTtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXJfaGVpZ2h0ID0gMS41ICogR1JPV1RIX01BWF9SQU5HRTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24gPSA4MDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcclxuICAgICAgICAgICAgICAgIG1heF95X3NwZWVkID0gTUFYX1BBUlRJQ0xFX1NQRUVEO1xyXG4gICAgICAgICAgICAgICAgbWluX3lfc3BlZWQgPSBNSU5fUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtYXhfeF9zcGVlZCA9IG1pbl94X3NwZWVkID0gWF9QQVJUSUNMRV9TUEVFRDtcclxuICAgICAgICAgICAgICAgIHlfZGVzdCArPSAxMjtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSBHUk9XVEhfTUFYX1JBTkdFID4+IDE7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyX2hlaWdodCA9IDEuNSAqIEdST1dUSF9NQVhfUkFOR0U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlX2R1cmF0aW9uID0gODA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XHJcbiAgICAgICAgICAgICAgICBtYXhfeF9zcGVlZCA9IC1NQVhfUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtaW5feF9zcGVlZCA9IC1NSU5fUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IG1pbl95X3NwZWVkID0gWV9QQVJUSUNMRV9TUEVFRDtcclxuICAgICAgICAgICAgICAgIHhfZGVzdCAtPSAxNjtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSAxLjUgKiBHUk9XVEhfTUFYX1JBTkdFO1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSBHUk9XVEhfTUFYX1JBTkdFO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcclxuICAgICAgICAgICAgICAgIG1heF94X3NwZWVkID0gTUFYX1BBUlRJQ0xFX1NQRUVEO1xyXG4gICAgICAgICAgICAgICAgbWluX3hfc3BlZWQgPSBNSU5fUEFSVElDTEVfU1BFRUQ7XHJcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IG1pbl95X3NwZWVkID0gWV9QQVJUSUNMRV9TUEVFRDtcclxuICAgICAgICAgICAgICAgIHhfZGVzdCArPSAxNjtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSAxLjUgKiBHUk9XVEhfTUFYX1JBTkdFO1xyXG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSBHUk9XVEhfTUFYX1JBTkdFO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW1pdHRlciA9IHRoaXMuZ2FtZS5hZGQuZW1pdHRlcih4X2Rlc3QsIHlfZGVzdCwgMjApO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfYmFsbFwiKTtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIubWluUGFydGljbGVTcGVlZC5zZXRUbyhtaW5feF9zcGVlZCwgbWluX3lfc3BlZWQpO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5tYXhQYXJ0aWNsZVNwZWVkLnNldFRvKG1heF94X3NwZWVkLCBtYXhfeV9zcGVlZCk7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLmdyYXZpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci53aWR0aCA9IGVtaXR0ZXJfd2lkdGg7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLmhlaWdodCA9IGVtaXR0ZXJfaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucGFydGljbGVfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpO1xyXG4gICAgICAgIHRoaXMucGFydGljbGVfZmlsdGVyLmh1ZV9hZGp1c3QgPSAzO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5tYXhQYXJ0aWNsZVNjYWxlID0gMC41O1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5taW5QYXJ0aWNsZVNjYWxlID0gMC40O1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgcGFydGljbGUuZmlsdGVycyA9IFt0aGlzLnBhcnRpY2xlX2ZpbHRlcl07XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMuYWRkKCdzaGluZScsIFtcImJhbGwvMDFcIiwgXCJiYWxsLzAyXCIsIFwiYmFsbC8wM1wiXSwgNCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0X2J1YmJsZXMoKSB7XHJcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLnNldF9lbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLnN0YXJ0KGZhbHNlLCAxMDAgKyB0aGlzLmluY3JlYXNlX2R1cmF0aW9uLCA4LCAwKTtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMucGxheSgnc2hpbmUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3dfc3Byb3V0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1pc3NfdGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBncm93X3Nwcm91dCgpIHtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5nZXRfZXZlbnRzKCkuZm9yRWFjaChldmVudCA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlLmFuaW1hdGlvbnMucGxheShcImdyb3d0aF9ncm93aW5nXCIsIDgsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbWlzc190YXJnZXQoKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRlc3Ryb3koKTtcclxuICAgICAgICBsZXQgZ3Jvd19jZW50ZXJfeCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclg7IFxyXG4gICAgICAgIGxldCBncm93X2NlbnRlcl95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWSArIDE3OyBcclxuICAgICAgICBzd2l0Y2godGhpcy5jYXN0X2RpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XHJcbiAgICAgICAgICAgICAgICBncm93X2NlbnRlcl95IC09IDE2O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxyXG4gICAgICAgICAgICAgICAgZ3Jvd19jZW50ZXJfeSArPSAxNjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcclxuICAgICAgICAgICAgICAgIGdyb3dfY2VudGVyX3ggLT0gMTY7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgZ3Jvd19jZW50ZXJfeCArPSAxNjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmcmFtZXMgPSBQaGFzZXIuQW5pbWF0aW9uLmdlbmVyYXRlRnJhbWVOYW1lcygnZ3Jvd3RoL25vX3RhcmdldC8nLCAwLCA2LCAnJywgMik7XHJcbiAgICAgICAgbGV0IHByb21pc2VzID0gbmV3IEFycmF5KE5PX1RBUkdFVF9TUFJPVVRfQ09VTlQpO1xyXG4gICAgICAgIGNvbnN0IHZhcmlhdGlvbiA9IDEzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTk9fVEFSR0VUX1NQUk9VVF9DT1VOVDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBtaXNzX3RhcmdldF9zcHJpdGUgPSB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmNyZWF0ZShncm93X2NlbnRlcl94ICsgXy5yYW5kb20oLXZhcmlhdGlvbiwgdmFyaWF0aW9uKSwgZ3Jvd19jZW50ZXJfeSArIF8ucmFuZG9tKC12YXJpYXRpb24sIHZhcmlhdGlvbiksIFwiZ3Jvd3RoX2dyb3d0aFwiKTtcclxuICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xyXG4gICAgICAgICAgICBtaXNzX3RhcmdldF9zcHJpdGUuYW5pbWF0aW9ucy5hZGQoXCJub190YXJnZXRcIiwgZnJhbWVzLCAxMCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuYztcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jID0gcmVzb2x2ZTsgfSkpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKGkgKiA0MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuaW1hdGlvbnMucGxheShcIm5vX3RhcmdldFwiKTtcclxuICAgICAgICAgICAgICAgIG1pc3NfdGFyZ2V0X3Nwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBldmVudF90eXBlcywgVGlsZUV2ZW50IH0gZnJvbSBcIi4vVGlsZUV2ZW50LmpzXCI7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnMuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHRhcmdldCwgeF90YXJnZXQsIHlfdGFyZ2V0LCBhZHZhbmNlX2VmZmVjdCwgZGVzdF9jb2xsaWRlcl9sYXllcikge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGV2ZW50X3R5cGVzLlRFTEVQT1JULCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBudWxsKTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICB0aGlzLnhfdGFyZ2V0ID0geF90YXJnZXQ7XHJcbiAgICAgICAgdGhpcy55X3RhcmdldCA9IHlfdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYWR2YW5jZV9lZmZlY3QgPSBhZHZhbmNlX2VmZmVjdDtcclxuICAgICAgICB0aGlzLmRlc3RfY29sbGlkZXJfbGF5ZXIgPSBkZXN0X2NvbGxpZGVyX2xheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcmUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkgfHwgdGhpcy5kYXRhLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5kYXRhLm1lbnVfb3BlbiB8fCB0aGlzLmRhdGEuaW5fYmF0dGxlIHx8IHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRhdGEuaGVyby50ZWxlcG9ydGluZyA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMuYWR2YW5jZV9lZmZlY3QpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8udGVsZXBvcnRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5XQUxLLCByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy51cF0pO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5fZG9vcigpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lID0gNDAwO1xyXG4gICAgICAgICAgICBjb25zdCB0d2Vlbl94ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR3ZWVuX3kgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSAtIDE1O1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNoYWRvdykudG8oe1xyXG4gICAgICAgICAgICAgICAgeDogdHdlZW5feCxcclxuICAgICAgICAgICAgICAgIHk6IHR3ZWVuX3lcclxuICAgICAgICAgICAgfSwgdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKHtcclxuICAgICAgICAgICAgICAgIHg6IHR3ZWVuX3gsXHJcbiAgICAgICAgICAgICAgICB5OiB0d2Vlbl95XHJcbiAgICAgICAgICAgIH0sIHRpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYV9mYWRlX2luKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhX2ZhZGVfaW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FtZXJhX2ZhZGVfaW4oKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3RvcF9jaGFyKHRydWUpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNldF9kaXJlY3Rpb24odGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0pO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbl0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZmFkZSgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEub25GYWRlQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEubGVycC5zZXRUbygxLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfbWFwKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2hhbmdlX21hcCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEubWFwLnVuc2V0X21hcCgpO1xyXG4gICAgICAgIGNvbnN0IG5leHRfbWFwX2tleV9uYW1lID0gdGhpcy50YXJnZXQ7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0X2NvbGxpc2lvbl9sYXllciA9IHRoaXMuZGVzdF9jb2xsaWRlcl9sYXllcjtcclxuICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cuYmFzZV9jb2xsaWRlcl9sYXllciA9IHRhcmdldF9jb2xsaXNpb25fbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJhc2VfY29sbGlkZXJfbGF5ZXIgPSB0YXJnZXRfY29sbGlzaW9uX2xheWVyO1xyXG4gICAgICAgIHRoaXMuZGF0YS5tYXAgPSBhd2FpdCB0aGlzLmRhdGEuaW5mby5tYXBzX2xpc3RbbmV4dF9tYXBfa2V5X25hbWVdLm1vdW50X21hcCh0YXJnZXRfY29sbGlzaW9uX2xheWVyKTtcclxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLnNldEJvdW5kc1RvV29ybGQoKTtcclxuICAgICAgICBpZiAodGhpcy5nYW1lLmNhbWVyYS5ib3VuZHMud2lkdGggPCBudW1iZXJzLkdBTUVfV0lEVEgpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5ib3VuZHMud2lkdGggPSBudW1iZXJzLkdBTUVfV0lEVEg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdhbWUuY2FtZXJhLmJvdW5kcy5oZWlnaHQgPCBudW1iZXJzLkdBTUVfSEVJR0hUKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuYm91bmRzLmhlaWdodCA9IG51bWJlcnMuR0FNRV9IRUlHSFQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY29uZmlnX2NvbGxpc2lvbl9ncm91cHModGhpcy5kYXRhLm1hcCk7XHJcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5jb25maWdfYWxsX2JvZGllcyh0aGlzLmRhdGEuY29sbGlzaW9uLCB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcik7XHJcbiAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jb25maWdfY29sbGlzaW9ucyh0aGlzLmRhdGEubWFwLCB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllciwgdGhpcy5kYXRhLm5wY19ncm91cCk7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIudXBkYXRlQm91bmRzQ29sbGlzaW9uR3JvdXAoKTtcclxuICAgICAgICB0aGlzLmRhdGEuZGVidWcudXBkYXRlX2RlYnVnX3BoeXNpY3ModGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWcpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LnggPSAodGhpcy54X3RhcmdldCArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XHJcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueSA9ICh0aGlzLnlfdGFyZ2V0ICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFfZmFkZV9vdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW1lcmFfZmFkZV9vdXQoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8udXBkYXRlX3NoYWRvdygpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5tYXAubnBjcy5mb3JFYWNoKG5wYyA9PiBucGMudXBkYXRlKCkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZmxhc2goMHgwKTtcclxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLm9uRmxhc2hDb21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5sZXJwLnNldFRvKG51bWJlcnMuQ0FNRVJBX0xFUlAsIG51bWJlcnMuQ0FNRVJBX0xFUlApO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnRlbGVwb3J0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3Blbl9kb29yKCkge1xyXG4gICAgICAgIGNvbnN0IGxheWVyID0gXy5maW5kKHRoaXMuZGF0YS5tYXAuc3ByaXRlLmxheWVycywge1xyXG4gICAgICAgICAgICBuYW1lIDogdGhpcy5kYXRhLm1hcC5zcHJpdGUucHJvcGVydGllcy5kb29yX2xheWVyXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc2FtcGxlX3RpbGUgPSB0aGlzLmRhdGEubWFwLnNwcml0ZS5nZXRUaWxlKHRoaXMueCwgdGhpcy55IC0gMSwgbGF5ZXIubmFtZSk7XHJcbiAgICAgICAgY29uc3QgZG9vcl90eXBlX2luZGV4ID0gc2FtcGxlX3RpbGUucHJvcGVydGllcy5kb29yX3R5cGU7XHJcbiAgICAgICAgY29uc3QgdGlsZXMgPSBfLmZpbHRlcih0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlc2V0c1swXS50aWxlUHJvcGVydGllcywga2V5ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleS5kb29yX3R5cGUgPT09IGRvb3JfdHlwZV9pbmRleCAmJiBcImNsb3NlX2Rvb3JcIiBpbiBrZXkgJiYga2V5LmlkID09PSBzYW1wbGVfdGlsZS5wcm9wZXJ0aWVzLmlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCB0aWxlLCBzb3VyY2VfaW5kZXgsIGNsb3NlX2Rvb3JfaW5kZXgsIG9mZnNldHMsIGJhc2VfeCwgYmFzZV95LCB0YXJnZXRfaW5kZXg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWxlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aWxlID0gdGlsZXNbaV07XHJcbiAgICAgICAgICAgIHNvdXJjZV9pbmRleCA9ICh0aWxlLmluZGV4IHwgMCkgKyAxO1xyXG4gICAgICAgICAgICBjbG9zZV9kb29yX2luZGV4ID0gdGlsZS5jbG9zZV9kb29yO1xyXG4gICAgICAgICAgICBvZmZzZXRzID0gdGlsZS5iYXNlX29mZnNldC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIGJhc2VfeCA9IHRoaXMueCArIChvZmZzZXRzWzBdIHwgMCk7XHJcbiAgICAgICAgICAgIGJhc2VfeSA9IHRoaXMueSArIChvZmZzZXRzWzFdIHwgMCkgLSAxO1xyXG4gICAgICAgICAgICB0YXJnZXRfaW5kZXggPSAoXy5maW5kS2V5KHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVzZXRzWzBdLnRpbGVQcm9wZXJ0aWVzLCB7b3Blbl9kb29yIDogY2xvc2VfZG9vcl9pbmRleH0pIHwgMCkgKyAxO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEubWFwLnNwcml0ZS5yZXBsYWNlKHNvdXJjZV9pbmRleCwgdGFyZ2V0X2luZGV4LCBiYXNlX3gsIGJhc2VfeSwgMSwgMSwgbGF5ZXIubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xyXG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIH0gZnJvbSBcIi4vVGlsZUV2ZW50LmpzXCI7XHJcblxyXG5jb25zdCBTVEVQX1NISUZUX0ZBQ1RPUiA9IDQ7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RlcEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHN0ZXBfZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuU1RFUCwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5zdGVwX2RpcmVjdGlvbiA9IHN0ZXBfZGlyZWN0aW9uO1xyXG4gICAgICAgIHRoaXMubmV4dF94ID0gMDtcclxuICAgICAgICB0aGlzLm5leHRfeSA9IDA7XHJcbiAgICAgICAgdGhpcy5zaGlmdF95ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoKSB7XHJcbiAgICAgICAgbGV0IG5leHRfeCwgbmV4dF95ID0gdGhpcy55LCBzaGlmdF95O1xyXG4gICAgICAgIGlmICh0aGlzLnN0ZXBfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnVwKSB7XHJcbiAgICAgICAgICAgIHNoaWZ0X3kgPSAtKCh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0L1NURVBfU0hJRlRfRkFDVE9SKSB8IDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGVwX2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5kb3duKSB7XHJcbiAgICAgICAgICAgIHNoaWZ0X3kgPSAodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodC9TVEVQX1NISUZUX0ZBQ1RPUikgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMubGVmdCkge1xyXG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggLSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMucmlnaHQpIHtcclxuICAgICAgICAgICAgbmV4dF94ID0gdGhpcy54ICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uZXh0X3ggPSBuZXh0X3g7XHJcbiAgICAgICAgdGhpcy5uZXh0X3kgPSBuZXh0X3k7XHJcbiAgICAgICAgdGhpcy5zaGlmdF95ID0gc2hpZnRfeTtcclxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZpcmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MgPT09IHRoaXMubmV4dF94ICYmIHRoaXMuZGF0YS5oZXJvLnRpbGVfeV9wb3MgPT09IHRoaXMubmV4dF95KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55ICs9IHRoaXMuc2hpZnRfeTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci51bnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVGlsZUV2ZW50LCBldmVudF90eXBlcyB9IGZyb20gXCIuL1RpbGVFdmVudC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxpc2lvbkV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIGRlc3RfY29sbGlkZXJfbGF5ZXIpIHtcclxuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBldmVudF90eXBlcy5DT0xMSVNJT04sIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuZGVzdF9jb2xsaWRlcl9sYXllciA9IGRlc3RfY29sbGlkZXJfbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5uZXh0X3ggPSAwO1xyXG4gICAgICAgIHRoaXMubmV4dF95ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoKSB7XHJcbiAgICAgICAgbGV0IG5leHRfeCA9IHRoaXMueCwgbmV4dF95ID0gdGhpcy55O1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9uc1swXSA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XHJcbiAgICAgICAgICAgIG5leHRfeCA9IHRoaXMueCAtIDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9uc1swXSA9PT0gZGlyZWN0aW9ucy5yaWdodCkge1xyXG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggKyAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMudXApIHtcclxuICAgICAgICAgICAgbmV4dF95ID0gdGhpcy55IC0gMTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLmRvd24pIHtcclxuICAgICAgICAgICAgbmV4dF95ID0gdGhpcy55ICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uZXh0X3ggPSBuZXh0X3g7XHJcbiAgICAgICAgdGhpcy5uZXh0X3kgPSBuZXh0X3k7XHJcbiAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MgPT09IHRoaXMubmV4dF94ICYmIHRoaXMuZGF0YS5oZXJvLnRpbGVfeV9wb3MgPT09IHRoaXMubmV4dF95KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuZGVzdF9jb2xsaWRlcl9sYXllcik7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5jaGVja19wb3NpdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IFRpbGVFdmVudCwgZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi9UaWxlRXZlbnQuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcGVlZEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHNwZWVkKSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuU1BFRUQsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuICAgIH1cclxuXHJcbiAgICB1bnNldCgpIHtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5ldmVudF90cmlnZ2VyZWQodGhpcykgJiYgIXRoaXMuY2hlY2tfcG9zaXRpb24oKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnVuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uZXh0cmFfc3BlZWQgLT0gdGhpcy5zcGVlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZmlyZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIuZXZlbnRfdHJpZ2dlcmVkKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uZXh0cmFfc3BlZWQgKz0gdGhpcy5zcGVlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIG1hcF9kaXJlY3Rpb25zIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcclxuaW1wb3J0IHsgTlBDX1Nwcml0ZSwgTlBDLCBucGNfbW92ZW1lbnRfdHlwZXMgfSBmcm9tICcuL05QQy5qcyc7XHJcbmltcG9ydCB7IEludGVyYWN0YWJsZU9iamVjdHMsIEludGVyYWN0YWJsZU9iamVjdHNfU3ByaXRlLCBpbnRlcmFjdGFibGVfb2JqZWN0X2ludGVyYWN0aW9uX3R5cGVzIH0gZnJvbSBcIi4vSW50ZXJhY3RhYmxlT2JqZWN0cy5qc1wiO1xyXG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIGFzIHRpbGVfZXZlbnRfdHlwZXMgfSBmcm9tICcuL3RpbGVfZXZlbnRzL1RpbGVFdmVudC5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVycy5qc1wiO1xyXG5pbXBvcnQgeyBKdW1wRXZlbnQgfSBmcm9tIFwiLi90aWxlX2V2ZW50cy9KdW1wRXZlbnQuanNcIjtcclxuaW1wb3J0IHsgVGVsZXBvcnRFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RlbGVwb3J0RXZlbnQuanNcIjtcclxuaW1wb3J0IHsgQ2xpbWJFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL0NsaW1iRXZlbnQuanNcIjtcclxuaW1wb3J0IHsgU3RlcEV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvU3RlcEV2ZW50LmpzXCI7XHJcbmltcG9ydCB7IENvbGxpc2lvbkV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvQ29sbGlzaW9uRXZlbnQuanNcIjtcclxuaW1wb3J0IHsgU3BlZWRFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1NwZWVkRXZlbnQuanNcIjtcclxuaW1wb3J0IHsgR2FtZUV2ZW50IH0gZnJvbSBcIi4vZ2FtZV9ldmVudHMvR2FtZUV2ZW50LmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFwIHtcclxuICAgIGNvbnN0cnVjdG9yIChcclxuICAgICAgICBnYW1lLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBrZXlfbmFtZSxcclxuICAgICAgICB0aWxlc2V0X25hbWUsXHJcbiAgICAgICAgcGh5c2ljc19uYW1lcyxcclxuICAgICAgICB0aWxlc2V0X2ltYWdlX3VybCxcclxuICAgICAgICB0aWxlc2V0X2pzb25fdXJsLFxyXG4gICAgICAgIHBoeXNpY3NfanNvbnNfdXJsLFxyXG4gICAgICAgIGxhenlfbG9hZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xyXG4gICAgICAgIHRoaXMudGlsZXNldF9uYW1lID0gdGlsZXNldF9uYW1lO1xyXG4gICAgICAgIHRoaXMucGh5c2ljc19uYW1lcyA9IHBoeXNpY3NfbmFtZXM7XHJcbiAgICAgICAgdGhpcy50aWxlc2V0X2ltYWdlX3VybCA9IHRpbGVzZXRfaW1hZ2VfdXJsO1xyXG4gICAgICAgIHRoaXMudGlsZXNldF9qc29uX3VybCA9IHRpbGVzZXRfanNvbl91cmw7XHJcbiAgICAgICAgdGhpcy5waHlzaWNzX2pzb25zX3VybCA9IHBoeXNpY3NfanNvbnNfdXJsO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xyXG4gICAgICAgIHRoaXMubnBjcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdHMgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9sYXllcnNfbnVtYmVyID0gdGhpcy5waHlzaWNzX25hbWVzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAwKTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUud2lkdGggPSB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuaGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9sYXllciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zaG93X2Zvb3RzdGVwcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXNzZXRzX2xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGF6eV9sb2FkID0gbGF6eV9sb2FkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGxhenlfbG9hZDtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0X3Nwcml0ZXMoKSB7XHJcbiAgICAgICAgbGV0IHNlbmRfdG9fYmFja19saXN0ID0gbmV3IEFycmF5KHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcclxuICAgICAgICBsZXQgc2VuZF90b19mcm9udF9saXN0ID0gbmV3IEFycmF5KHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcclxuICAgICAgICBsZXQgaGFzX3NvcnRfZnVuY3Rpb24gPSBuZXcgQXJyYXkodGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbi5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4uZm9yRWFjaCgoc3ByaXRlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBzcHJpdGUueV9zb3J0ID0gKHNwcml0ZS5iYXNlX2NvbGxpZGVyX2xheWVyLnRvU3RyaW5nKCkgKyBzcHJpdGUueS50b1N0cmluZygpKSB8IDA7XHJcbiAgICAgICAgICAgIGlmIChzcHJpdGUuc29ydF9mdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaGFzX3NvcnRfZnVuY3Rpb25baW5kZXhdID0gc3ByaXRlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwcml0ZS5zZW5kX3RvX2JhY2spIHtcclxuICAgICAgICAgICAgICAgIHNlbmRfdG9fYmFja19saXN0W2luZGV4XSA9IHNwcml0ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzcHJpdGUuc2VuZF90b19mcm9udCkge1xyXG4gICAgICAgICAgICAgICAgc2VuZF90b19mcm9udF9saXN0W2luZGV4XSA9IHNwcml0ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuc29ydCgneV9zb3J0JywgUGhhc2VyLkdyb3VwLlNPUlRfQVNDRU5ESU5HKTtcclxuICAgICAgICBsZXQgc2hhZG93X2luZGV4ID0gdGhpcy5kYXRhLm5wY19ncm91cC5nZXRDaGlsZEluZGV4KHRoaXMuZGF0YS5oZXJvLnNwcml0ZSkgLSAxO1xyXG4gICAgICAgIGlmIChzaGFkb3dfaW5kZXggPj0gLTEgJiYgc2hhZG93X2luZGV4IDwgdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHNoYWRvd19pbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHNoYWRvd19pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5zZXRDaGlsZEluZGV4KHRoaXMuZGF0YS5oZXJvLnNoYWRvdywgc2hhZG93X2luZGV4KTsgLy9tYWtpbmcgc3VyZSB0aGF0IHNoYWRvdyBpcyBhbHdheXMgYmVoaW5kIHRoZSBoZXJvXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbmRfdG9fYmFja19saXN0LmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgaWYgKHNwcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5zZW5kQ2hpbGRUb0JhY2soc3ByaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNlbmRfdG9fZnJvbnRfbGlzdC5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYnJpbmdDaGlsZFRvVG9wKHNwcml0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBoYXNfc29ydF9mdW5jdGlvbi5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcclxuICAgICAgICAgICAgICAgIHNwcml0ZS5zb3J0X2Z1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmcmVlemVfYm9keSgpIHtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS52ZWxvY2l0eS55ID0gdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkudmVsb2NpdHkueCA9IDA7IC8vZml4ZXMgbWFwIGJvZHlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5mcmVlemVfYm9keSgpO1xyXG4gICAgICAgIHRoaXMubnBjcy5mb3JFYWNoKG5wYyA9PiBucGMudXBkYXRlKCkpO1xyXG4gICAgICAgIHRoaXMuc29ydF9zcHJpdGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZF9tYXBfYXNzZXRzKGZvcmNlX2xvYWQsIG9uX2NvbXBsZXRlKSB7XHJcbiAgICAgICAgbGV0IGxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmU7XHJcbiAgICAgICAgbGV0IGxvYWRfdGlsZW1hcF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5sb2FkLnRpbGVtYXAodGhpcy5rZXlfbmFtZSwgdGhpcy50aWxlc2V0X2pzb25fdXJsLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKS5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmUpO1xyXG5cclxuICAgICAgICBsZXQgbG9hZF9pbWFnZV9wcm9taXNlX3Jlc29sdmU7XHJcbiAgICAgICAgbGV0IGxvYWRfaW1hZ2VfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmxvYWQuaW1hZ2UodGhpcy5rZXlfbmFtZSwgdGhpcy50aWxlc2V0X2ltYWdlX3VybCkub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZSk7XHJcblxyXG4gICAgICAgIGxldCBwaHlzaWNzX3Byb21pc2VzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBoeXNpY3NfbmFtZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGxvYWRfcGh5c2ljc19wcm9taXNlX3Jlc29sdmU7XHJcbiAgICAgICAgICAgIGxldCBsb2FkX3BoeXNpY3NfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbG9hZF9waHlzaWNzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwaHlzaWNzX3Byb21pc2VzLnB1c2gobG9hZF9waHlzaWNzX3Byb21pc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUubG9hZC5waHlzaWNzKHRoaXMucGh5c2ljc19uYW1lc1tpXSwgdGhpcy5waHlzaWNzX2pzb25zX3VybFtpXSkub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX3BoeXNpY3NfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZvcmNlX2xvYWQpIHtcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW2xvYWRfdGlsZW1hcF9wcm9taXNlLCBsb2FkX2ltYWdlX3Byb21pc2UsIC4uLnBoeXNpY3NfcHJvbWlzZXNdKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzX2xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBvbl9jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLmxvYWQuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iaiwgY29sbGlzaW9uX2xheWVyKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuY29sbGlzaW9uX3Nwcml0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmNsZWFyU2hhcGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkubG9hZFBvbHlnb24oIC8vbG9hZCBtYXAgcGh5c2ljcyBkYXRhIGpzb24gZmlsZXNcclxuICAgICAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzW2NvbGxpc2lvbl9sYXllcl0sIFxyXG4gICAgICAgICAgICB0aGlzLnBoeXNpY3NfbmFtZXNbY29sbGlzaW9uX2xheWVyXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5tYXBfY29sbGlzaW9uX2dyb3VwKTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5kYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5hbmd1bGFyRGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuZHluYW1pYyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnN0YXRpYyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnX2FsbF9ib2RpZXMoY29sbGlzaW9uX29iaiwgY29sbGlzaW9uX2xheWVyKSB7XHJcbiAgICAgICAgdGhpcy5ucGNzLmZvckVhY2gobnBjID0+IG5wYy5jb25maWdfYm9keShjb2xsaXNpb25fb2JqKSk7XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cy5mb3JFYWNoKGludGVyYWN0YWJsZV9vYmogPT4gaW50ZXJhY3RhYmxlX29iai5jb25maWdfYm9keShjb2xsaXNpb25fb2JqKSk7XHJcbiAgICAgICAgdGhpcy5jb25maWdfYm9keShjb2xsaXNpb25fb2JqLCBjb2xsaXNpb25fbGF5ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJyZW50X3RpbGUoY29udHJvbGxhYmxlX2NoYXIsIGxheWVyKSB7XHJcbiAgICAgICAgaWYgKGxheWVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLmdldFRpbGUoY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcywgY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcywgbGF5ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxheWVycy5tYXAobGF5ZXIgPT4gdGhpcy5zcHJpdGUuZ2V0VGlsZShjb250cm9sbGFibGVfY2hhci50aWxlX3hfcG9zLCBjb250cm9sbGFibGVfY2hhci50aWxlX3lfcG9zLCBsYXllci5uYW1lKSkuZmlsdGVyKHRpbGUgPT4gdGlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldF9sYXllcihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLmxheWVycywge25hbWU6IG5hbWV9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVfdGlsZV9ldmVudHMocmF3X3Byb3BlcnR5KSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlfaW5mbyA9IEpTT04ucGFyc2UocmF3X3Byb3BlcnR5KTtcclxuICAgICAgICBjb25zdCB0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHByb3BlcnR5X2luZm8ueCwgcHJvcGVydHlfaW5mby55KTtcclxuICAgICAgICBpZiAoISh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiB0aGlzLmV2ZW50cykpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuQ0xJTUIpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IENsaW1iRXZlbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXHJcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA/IHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzIDogWzBdLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyID09PSB1bmRlZmluZWQgPyBudWxsIDogcHJvcGVydHlfaW5mby5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuU1BFRUQpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IFNwZWVkRXZlbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXHJcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA/IHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzIDogWzBdLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5zcGVlZFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLlRFTEVQT1JUKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBUZWxlcG9ydEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby55LFxyXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcclxuICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8udGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54X3RhcmdldCxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueV90YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFkdmFuY2VfZWZmZWN0LFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpZGVyX2xheWVyID8gcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpZGVyX2xheWVyIDogMFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLkpVTVApIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IEp1bXBFdmVudChcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcclxuICAgICAgICAgICAgICAgIG1hcF9kaXJlY3Rpb25zKHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9kaXJlY3Rpb25zKSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uaW5pdGlhbGx5X2FjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uaW5pdGlhbGx5X2FjdGl2ZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJvcGVydHlfaW5mby5pc19zZXRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5X2luZm8udHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5TVEVQKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBTdGVwRXZlbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXHJcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA/IHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzIDogWzBdLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uc1twcm9wZXJ0eV9pbmZvLnN0ZXBfZGlyZWN0aW9uXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLkNPTExJU0lPTikge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgQ29sbGlzaW9uRXZlbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXHJcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA/IHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzIDogWzBdLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpZGVyX2xheWVyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZV9ucGNzKHJhd19wcm9wZXJ0eSkge1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2luZm8gPSBKU09OLnBhcnNlKHJhd19wcm9wZXJ0eSk7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbF9hY3Rpb24gPSB0aGlzLmRhdGEuZGJzLm5wY19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXS5pbml0aWFsX2FjdGlvbjtcclxuICAgICAgICB0aGlzLm5wY3MucHVzaChuZXcgTlBDKFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5rZXlfbmFtZSxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5pbml0aWFsX3gsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uaW5pdGlhbF95LFxyXG4gICAgICAgICAgICBpbml0aWFsX2FjdGlvbixcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5ucGNfZGJbcHJvcGVydHlfaW5mby5rZXlfbmFtZV0uYWN0aW9uc1tpbml0aWFsX2FjdGlvbl0uaW5pdGlhbF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uZW5hYmxlX2Zvb3RzdGVwcyxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5ucGNfdHlwZSxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5tb3ZlbWVudF90eXBlLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8udGhvdWdodF9tZXNzYWdlLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmF2YXRhciA/IHByb3BlcnR5X2luZm8uYXZhdGFyIDogbnVsbCxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5iYXNlX2NvbGxpZGVyX2xheWVyID09PSB1bmRlZmluZWQgPyAwIDogcHJvcGVydHlfaW5mby5iYXNlX2NvbGxpZGVyX2xheWVyLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnRhbGtfcmFuZ2VfZmFjdG9yLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmV2ZW50cyA9PT0gdW5kZWZpbmVkID8gW10gOiBwcm9wZXJ0eV9pbmZvLmV2ZW50c1xyXG4gICAgICAgICkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZV9pbnRlcmFjdGFibGVfb2JqZWN0cyhyYXdfcHJvcGVydHkpIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eV9pbmZvID0gSlNPTi5wYXJzZShyYXdfcHJvcGVydHkpO1xyXG4gICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSBuZXcgSW50ZXJhY3RhYmxlT2JqZWN0cyhcclxuICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ua2V5X25hbWUsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcclxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby55LFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFsbG93ZWRfdGlsZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogcHJvcGVydHlfaW5mby5hbGxvd2VkX3RpbGVzLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmJhc2VfY29sbGlkZXJfbGF5ZXIgPT09IHVuZGVmaW5lZCA/IDAgOiBwcm9wZXJ0eV9pbmZvLmJhc2VfY29sbGlkZXJfbGF5ZXIsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uY29sbGlkZXJfbGF5ZXJfc2hpZnQsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ubm90X2FsbG93ZWRfdGlsZXMsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ub2JqZWN0X2Ryb3BfdGlsZXMsXHJcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzLnB1c2goaW50ZXJhY3RhYmxlX29iamVjdCk7XHJcbiAgICAgICAgZm9yIChsZXQgcHN5bmVyZ3lfa2V5IGluIGRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3Byb3BlcnR5X2luZm8ua2V5X25hbWVdLnBzeW5lcmd5X2tleXMpIHtcclxuICAgICAgICAgICAgY29uc3QgcHN5bmVyZ3lfcHJvcGVydGllcyA9IGRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3Byb3BlcnR5X2luZm8ua2V5X25hbWVdLnBzeW5lcmd5X2tleXNbcHN5bmVyZ3lfa2V5XTtcclxuICAgICAgICAgICAgaWYgKHBzeW5lcmd5X3Byb3BlcnRpZXMuaW50ZXJhY3Rpb25fdHlwZSA9PT0gaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcy5PTkNFKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhW3BzeW5lcmd5X2tleSArIFwiX2Nhc3RlZFwiXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXS5wdXNoYWJsZSAmJiBwcm9wZXJ0eV9pbmZvLmJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCA9IHByb3BlcnR5X2luZm8uYmxvY2tfc3RhaXJfY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0KCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0c1tpXTtcclxuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gaW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZTtcclxuICAgICAgICAgICAgbGV0IGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8gPSBuZXcgSW50ZXJhY3RhYmxlT2JqZWN0c19TcHJpdGUoXHJcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lLFxyXG4gICAgICAgICAgICAgICAgW2FjdGlvbl1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGVfaW5mbyA9IGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm87XHJcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8uc2V0QWN0aW9uU3ByaXRlc2hlZXQoXHJcbiAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdLnNwcml0ZXNoZWV0LmltYWdlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5zcHJpdGVzaGVldC5qc29uXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8uc2V0QWN0aW9uRGlyZWN0aW9ucyhcclxuICAgICAgICAgICAgICAgIGFjdGlvbiwgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdLmFjdGlvbnMuYW5pbWF0aW9ucyxcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbaW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZV0uYWN0aW9ucy5mcmFtZXNfY291bnRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29ial9zcHJpdGVfaW5mby5zZXRBY3Rpb25GcmFtZVJhdGUoYWN0aW9uLCB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdLmFjdGlvbnMuZnJhbWVfcmF0ZSk7XHJcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8uc2V0QWN0aW9uTG9vcChhY3Rpb24sIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbaW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZV0uYWN0aW9ucy5sb29wKVxyXG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvLmdlbmVyYXRlQWxsRnJhbWVzKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29ial9zcHJpdGVfaW5mby5sb2FkU3ByaXRlc2hlZXRzKHRoaXMuZ2FtZSwgdHJ1ZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuaW5pdGlhbF9jb25maWcodGhpcy5zcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuaW5pdGlhbGl6ZV9yZWxhdGVkX2V2ZW50cyh0aGlzLmV2ZW50cywgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb25maWdfbnBjKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ucGNzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5wYyA9IHRoaXMubnBjc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgbnBjX2RiID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbbnBjLmtleV9uYW1lXTtcclxuICAgICAgICAgICAgbGV0IGFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgaWYgKG5wYy5tb3ZlbWVudF90eXBlID09PSBucGNfbW92ZW1lbnRfdHlwZXMuSURMRSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9ucyA9IFtiYXNlX2FjdGlvbnMuSURMRV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbnBjX3Nwcml0ZV9pbmZvID0gbmV3IE5QQ19TcHJpdGUobnBjLmtleV9uYW1lLCBhY3Rpb25zKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhY3Rpb25zLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zW2pdO1xyXG4gICAgICAgICAgICAgICAgbnBjX3Nwcml0ZV9pbmZvLnNldEFjdGlvblNwcml0ZXNoZWV0KFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBgYXNzZXRzL2ltYWdlcy9zcHJpdGVzaGVldHMvbnBjLyR7bnBjLmtleV9uYW1lfV8ke2FjdGlvbn0ucG5nYCxcclxuICAgICAgICAgICAgICAgICAgICBgYXNzZXRzL2ltYWdlcy9zcHJpdGVzaGVldHMvbnBjLyR7bnBjLmtleV9uYW1lfV8ke2FjdGlvbn0uanNvbmBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uc2V0QWN0aW9uRGlyZWN0aW9ucyhcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgbnBjX2RiLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0uZnJhbWVzX2NvdW50XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbnBjX3Nwcml0ZV9pbmZvLnNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24sIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfcmF0ZSk7XHJcbiAgICAgICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uc2V0QWN0aW9uTG9vcChhY3Rpb24sIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0ubG9vcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbnBjX3Nwcml0ZV9pbmZvLmdlbmVyYXRlQWxsRnJhbWVzKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbnBjX3Nwcml0ZV9pbmZvLmxvYWRTcHJpdGVzaGVldHModGhpcy5nYW1lLCB0cnVlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnBjLnNldF9zaGFkb3cobnBjX2RiLnNoYWRvd19rZXksIHRoaXMuZGF0YS5ucGNfZ3JvdXAsIG5wYy5iYXNlX2NvbGxpZGVyX2xheWVyLCBucGNfZGIuc2hhZG93X2FuY2hvcl94LCBucGNfZGIuc2hhZG93X2FuY2hvcl95KTtcclxuICAgICAgICAgICAgICAgICAgICBucGMuc2V0X3Nwcml0ZSh0aGlzLmRhdGEubnBjX2dyb3VwLCBucGNfc3ByaXRlX2luZm8sIHRoaXMuc3ByaXRlLCBucGMuYmFzZV9jb2xsaWRlcl9sYXllciwgbnBjX2RiLmFuY2hvcl94LCBucGNfZGIuYW5jaG9yX3kpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5wYy5zZXRfc3ByaXRlX2FzX25wYygpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5wYy5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25maWdfbGF5ZXJzKG92ZXJsYXllcl9ncm91cCwgdW5kZXJsYXllcl9ncm91cCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXllcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IGxheWVyID0gdGhpcy5zcHJpdGUuY3JlYXRlTGF5ZXIodGhpcy5sYXllcnNbaV0ubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXJzW2ldLnNwcml0ZSA9IGxheWVyO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyc1tpXS5zcHJpdGUubGF5ZXJfeiA9IHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMuejtcclxuICAgICAgICAgICAgbGF5ZXIucmVzaXplV29ybGQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMuYmxlbmRNb2RlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxheWVyLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlc1t0aGlzLmxheWVyc1tpXS5wcm9wZXJ0aWVzLmJsZW5kTW9kZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLmFscGhhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxheWVyLmFscGhhID0gdGhpcy5sYXllcnNbaV0uYWxwaGE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBpc19vdmVyID0gdGhpcy5sYXllcnNbaV0ucHJvcGVydGllcy5vdmVyLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBpc19vdmVyID0gaXNfb3Zlci5sZW5ndGggPiB0aGlzLmNvbGxpc2lvbl9sYXllciA/IGlzX292ZXJbdGhpcy5jb2xsaXNpb25fbGF5ZXJdIHwgMCA6IGlzX292ZXJbMF0gfCAwO1xyXG4gICAgICAgICAgICBpZiAoaXNfb3ZlciAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgb3ZlcmxheWVyX2dyb3VwLmFkZChsYXllcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1bmRlcmxheWVyX2dyb3VwLmFkZChsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbW91bnRfbWFwKGNvbGxpc2lvbl9sYXllcikge1xyXG4gICAgICAgIGlmICghdGhpcy5hc3NldHNfbG9hZGVkKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2FkX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICAgICAgY29uc3QgbG9hZF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBsb2FkX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmUpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRfbWFwX2Fzc2V0cyh0cnVlLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxvYWRfcHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fbGF5ZXIgPSBjb2xsaXNpb25fbGF5ZXI7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcclxuICAgICAgICBUaWxlRXZlbnQucmVzZXQoKTtcclxuICAgICAgICBHYW1lRXZlbnQucmVzZXQoKTtcclxuICAgICAgICB0aGlzLnNwcml0ZSA9IHRoaXMuZ2FtZS5hZGQudGlsZW1hcCh0aGlzLmtleV9uYW1lKTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5hZGRUaWxlc2V0SW1hZ2UodGhpcy50aWxlc2V0X25hbWUsIHRoaXMua2V5X25hbWUpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ByaXRlLnRpbGVzZXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGVzZXQgPSB0aGlzLnNwcml0ZS50aWxlc2V0c1tpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgdGlsZV9pbmRleCBpbiB0aWxlc2V0LnRpbGVQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aWxlc2V0LnRpbGVQcm9wZXJ0aWVzW3RpbGVfaW5kZXhdLmluZGV4ID0gdGlsZV9pbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gdGhpcy5zcHJpdGUucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBjb25zdCByYXdfcHJvcGVydHkgPSB0aGlzLnNwcml0ZS5wcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5LnN0YXJ0c1dpdGgoXCJldmVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfdGlsZV9ldmVudHMocmF3X3Byb3BlcnR5KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKHByb3BlcnR5LnN0YXJ0c1dpdGgoXCJucGNcIikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX25wY3MocmF3X3Byb3BlcnR5KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKHByb3BlcnR5LnN0YXJ0c1dpdGgoXCJpbnRlcmFjdGFibGVfb2JqZWN0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9pbnRlcmFjdGFibGVfb2JqZWN0cyhyYXdfcHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxheWVycyA9IHRoaXMuc3ByaXRlLmxheWVycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhLnByb3BlcnRpZXMub3ZlciAhPT0gYi5wcm9wZXJ0aWVzLm92ZXIpIHJldHVybiBhIC0gYjtcclxuICAgICAgICAgICAgaWYgKGEucHJvcGVydGllcy56ICE9PSBiLnByb3BlcnRpZXMueikgcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZ19sYXllcnModGhpcy5kYXRhLm92ZXJsYXllcl9ncm91cCwgdGhpcy5kYXRhLnVuZGVybGF5ZXJfZ3JvdXApO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnX2ludGVyYWN0YWJsZV9vYmplY3QoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNvbmZpZ19ucGMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3ByaXRlLnByb3BlcnRpZXMuZm9vdHByaW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd19mb290c3RlcHMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfbWFwKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YS51bmRlcmxheWVyX2dyb3VwLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5vdmVybGF5ZXJfZ3JvdXAucmVtb3ZlQWxsKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmNsZWFyU2hhcGVzKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNob3dfZm9vdHN0ZXBzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmZvb3RzdGVwcy5jbGVhbl9hbGwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzcHJpdGVzX3RvX3JlbW92ZSA9IFtdXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBzcHJpdGUgPSB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5pc19ucGMgJiYgIXNwcml0ZS5pc19pbnRlcmFjdGFibGVfb2JqZWN0KSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHNwcml0ZS5pc19pbnRlcmFjdGFibGVfb2JqZWN0ICYmIHNwcml0ZS5pbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jay5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGUuaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzcHJpdGVzX3RvX3JlbW92ZS5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ByaXRlc190b19yZW1vdmUubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHNwcml0ZXNfdG9fcmVtb3ZlW2ldO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEubnBjX2dyb3VwLnJlbW92ZShzcHJpdGUsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ucGNzID0gW107XHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5hZGQodGhpcy5kYXRhLmhlcm8uc2hhZG93KTtcclxuICAgICAgICB0aGlzLmRhdGEubnBjX2dyb3VwLmFkZCh0aGlzLmRhdGEuaGVyby5zcHJpdGUpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi91dGlscy9DdXJzb3JDb250cm9sLmpzJztcclxuaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcblxyXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDEwMDtcclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XHJcbmNvbnN0IE1BWF9QRVJfTElORSA9IDQ7XHJcbmNvbnN0IFdPUktJTkdfV0lEVEggPSBCQVNFX1dJTl9XSURUSCAtIDIgKiAobnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSCArIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCk7XHJcbmNvbnN0IFNMT1RfV0lEVEggPSBwYXJzZUludChXT1JLSU5HX1dJRFRIL01BWF9QRVJfTElORSk7XHJcbmNvbnN0IFNMT1RfV0lEVEhfQ0VOVEVSID0gcGFyc2VJbnQoV09SS0lOR19XSURUSC9NQVhfUEVSX0xJTkUvMik7XHJcblxyXG4vKkEgd2luZG93IHRlbXBsYXRlIHNob3dpbmcgY2hhcmFjdGVyIHNwcml0ZXNcclxuRGlzcGxheXMgY2hhcmFjdGVycyBpbiBsaW5lLCB1c2luZyB0aGVpciBpZGxlIGFuaW1hdGlvbnNcclxuVXNlZCBmb3IgUHN5bmVyZ3kgYW5kIEl0ZW0gbWVudXNcclxuXHJcbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcclxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcclxuICAgICAgIG9uX2Nob29zZSBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDaG9vc2VcIiBvcHRpb25cclxuICAgICAgIG9uX2NhbmNlbCBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDYW5jZWxcIiBvcHRpb25cclxuICAgICAgIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSBbbnVtYmVyXSAtIENvdW50cyBwYXJlbnQtY2hpbGQgc3RhdHVzIGZvciBFU0Mga2V5IChDYW5jZWwvQmFjaylcclxuICAgICAgIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IFtudW1iZXJdIC0gQ291bnRzIHBhcmVudC1jaGlsZCBzdGF0dXMgZm9yIEVudGVyIGtleSAoQ2hvb3NlL1NlbGVjdCkqL1xyXG5leHBvcnQgY2xhc3MgQ2hhcnNNZW51IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIG9uX2Nob29zZSwgb25fY2hhbmdlLCBvbl9jYW5jZWwsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5O1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5O1xyXG4gICAgICAgIHRoaXMub25fY2hvb3NlID0gb25fY2hvb3NlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX2Nob29zZTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZSA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jaGFuZ2U7XHJcbiAgICAgICAgdGhpcy5vbl9jYW5jZWwgPSBvbl9jYW5jZWwgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2FuY2VsO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgMCwgMCwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy54ID0gMDtcclxuICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfeSA9IDA7XHJcbiAgICAgICAgdGhpcy51bnNlbGVjdGVkX3kgPSAtNDtcclxuICAgICAgICB0aGlzLnNldF9jaGFycygpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmxpbmVfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZW51X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCBmYWxzZSwgdGhpcy5nZXRfbWF4X3Blcl9saW5lLmJpbmQodGhpcyksIHVuZGVmaW5lZCwgdGhpcy5ncm91cCxcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfYnV0dG9uLmJpbmQodGhpcyksIHVuZGVmaW5lZCwgdGhpcy5nZXRfc2VsZWN0ZWRfYnV0dG9uX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X3NlbGVjdGVkX2J1dHRvbl9pbmRleC5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZhdGVkLmJpbmQodGhpcyksIHRoaXMuZ2V0X2N1cnNvcl94LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X2N1cnNvcl95LmJpbmQodGhpcylcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgY3Vyc29yJ3MgeCB2YWx1ZVxyXG4gICAgXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9jdXJzb3JfeCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGFyX2J1dHRvbnNbdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5rZXlfbmFtZV0ueDtcclxuICAgIH1cclxuXHJcbiAgICAvKlJldHVybnMgdGhlIGN1cnNvcidzIHkgdmFsdWVcclxuICAgIFxyXG4gICAgT3V0cHV0OiBbbnVtYmVyXSovXHJcbiAgICBnZXRfY3Vyc29yX3koKSB7XHJcbiAgICAgICAgcmV0dXJuIDIyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBwZXIgbGluZVxyXG4gICAgXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9tYXhfcGVyX2xpbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5zbGljZSh0aGlzLmxpbmVfaW5kZXggKiBNQVhfUEVSX0xJTkUsICh0aGlzLmxpbmVfaW5kZXggKyAxKSAqIE1BWF9QRVJfTElORSkubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgaW5kZXggZm9yIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXIgYnV0dG9uXHJcbiAgICBcclxuICAgIE91dHB1dDogW251bWJlcl0qL1xyXG4gICAgZ2V0X3NlbGVjdGVkX2J1dHRvbl9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZXRzIGFuIGluZGV4IGZvciB0aGUgc2VsZWN0ZWQgY2hhcmFjdGVyIGJ1dHRvblxyXG4gICAgXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIHNldF9zZWxlY3RlZF9idXR0b25faW5kZXgoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qQ2hlY2tzIHRoZSBcIm9wZW5cIiBzdGF0ZSBmb3IgdGhpcyBtZW51XHJcblxyXG4gICAgT3V0cHV0OiBbYm9vbGVhbl0qL1xyXG4gICAgaXNfb3BlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZW51X29wZW47XHJcbiAgICB9XHJcblxyXG4gICAgLypDaGVja3MgdGhlIFwiYWN0aXZlXCIgc3RhdGUgZm9yIHRoaXMgbWVudVxyXG5cclxuICAgIE91dHB1dDogW2Jvb2xlYW5dKi9cclxuICAgIGlzX2FjdGl2YXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZW51X2FjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNyZWF0ZXMgdGhlIGNoYXJhY3RlciBidXR0b25zIGZyb20gdGhlIHBhcnR5IGRhdGFcclxuICAgIERpc3BsYXlzIG5ldyBzcHJpdGVzIGZvciBlYWNoIHBhcnR5IG1lbWJlciBvbiBzY3JlZW4gd2l0aCB0aGVpciBpZGxlIGFuaW1hdGlvbiovXHJcbiAgICBzZXRfY2hhcnMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5X25hbWUgaW4gdGhpcy5jaGFyX2J1dHRvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnNba2V5X25hbWVdLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF8uY2xhbXAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCwgMCwgTUFYX1BFUl9MSU5FKTsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcl9idXR0b25zW2NoYXIua2V5X25hbWVdID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgY2hhci5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoYmFzZV9hY3Rpb25zLklETEUpKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldLnNwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmNoYXJfYnV0dG9uc1tjaGFyLmtleV9uYW1lXSwgYmFzZV9hY3Rpb25zLklETEUpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJfYnV0dG9uc1tjaGFyLmtleV9uYW1lXS5hbmltYXRpb25zLnBsYXkoY2hhci5zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmRvd25dKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qTWFuYWdlcyBpbnRlcmFjdGlvbiB3aXRoIHRoZSBwYXJlbnQgbWVudVxyXG4gICAgUGFzc2VzIGNvbnRyb2wgb3ZlciB0byB0aGUgQ2hvb3NlL0NhbmNlbCBmdW5jdGlvbnMqL1xyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tZW51X29wZW4gfHwgIXRoaXMubWVudV9hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UodGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xyXG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5vbl9jYW5jZWwoKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypVcGRhdGVzIHRoZSBwb3NpdGlvbiBmb3IgdGhlIGNoYXJhY3RlciBtZW51Ki9cclxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgXy5jbGFtcCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoLCAwLCBNQVhfUEVSX0xJTkUpOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnNbY2hhci5rZXlfbmFtZV0uY2VudGVyWCA9IGkgKiBTTE9UX1dJRFRIICsgU0xPVF9XSURUSF9DRU5URVIgKyBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIICsgbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJfYnV0dG9uc1tjaGFyLmtleV9uYW1lXS55ID0gdGhpcy51bnNlbGVjdGVkX3k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qQ2hhbmdlcyB0aGUgc2VsZWN0ZWQgY2hhcmFjdGVyXHJcblxyXG4gICAgSW5wdXQ6IG9sZF9pbmRleCBbbnVtYmVyXSAtIFByZXZpb3VzbHkgc2VsZWN0ZWQgaW5kZXhcclxuICAgICAgICAgICBuZXdfaW5kZXggW251bWJlcl0gLSBOZXcgaW5kZXggdG8gYmUgc2VsZWN0ZWQqL1xyXG4gICAgY2hhbmdlX2J1dHRvbihvbGRfaW5kZXgsIG5ld19pbmRleCkge1xyXG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKG9sZF9pbmRleCk7XHJcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UobmV3X2luZGV4KTtcclxuICAgICAgICB0aGlzLnNldF9idXR0b24obmV3X2luZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKlNob3dzIHRoZSBjaGFyYWN0ZXIgYXMgXCJzZWxlY3RlZFwiXHJcbiAgICBNb3ZlcyB0aGUgY2hhcmFjdGVyIGRvd24gb24gc2NyZWUgbiovXHJcbiAgICBzZXRfYnV0dG9uKGluZGV4KSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkX2NoYXIgPSB0aGlzLmNoYXJfYnV0dG9uc1t0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXhdLmtleV9uYW1lXTtcclxuICAgICAgICBzZWxlY3RlZF9jaGFyLnkgPSB0aGlzLnNlbGVjdGVkX3k7XHJcbiAgICB9XHJcblxyXG4gICAgLypSZXNldHMgdGhlIGNoYXJhY3RlcidzIFwic2VsZWN0ZWRcIiBzdGF0ZVxyXG4gICAgTW92ZXMgdGhlIGNoYXJhY3RlciBiYWNrIGluIGxpbmUgd2l0aCB0aGUgcmVtYWluaW5nIHVuc2VsZWN0ZWQgbWVtYmVycyovXHJcbiAgICByZXNldF9idXR0b24oaW5kZXgpIHtcclxuICAgICAgICBsZXQgc2VsZWN0ZWRfY2hhciA9IHRoaXMuY2hhcl9idXR0b25zW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpbmRleF0ua2V5X25hbWVdO1xyXG4gICAgICAgIHNlbGVjdGVkX2NoYXIueSA9IHRoaXMudW5zZWxlY3RlZF95O1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB0aGUgc2VsZWN0ZWQgY2hhcmFjdGVyIGluZGV4IHVzaW5nIHRoZSBwYXJ0eSBpbmRleFxyXG4gICAgXHJcbiAgICBJbnB1dDogcGFydHlfaW5kZXggW251bWJlcl0gLSBUaGUgY2hhcmFjdGVyJ3MgcGFydHkgaW5kZXgqL1xyXG4gICAgc2V0X2NoYXJfYnlfaW5kZXgocGFydHlfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbih0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSBwYXJ0eV9pbmRleDtcclxuICAgICAgICB0aGlzLnNldF9idXR0b24odGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3dcclxuXHJcbiAgICBJbnB1dDogc2VsZWN0X2luZGV4IFtudW1iZXJdIC0gRGVmYXVsdCBjaGFyYWN0ZXIgc2VsZWN0ZWQgaW5kZXhcclxuICAgICAgICAgICBzdGFydF9hY3RpdmUgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgdGhlIG1lbnUgc3RhcnRzIGluIFwiYWN0aXZlXCIgc3RhdGUqL1xyXG4gICAgb3BlbihzZWxlY3RfaW5kZXgsIHN0YXJ0X2FjdGl2ZSA9IHRydWUpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5jaGFyX2J1dHRvbnMpLmxlbmd0aCAhPSBfLmNsYW1wKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgsIDAsIE1BWF9QRVJfTElORSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfY2hhcnMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idXR0b25zX251bWJlciA9IF8uY2xhbXAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCwgMCwgTUFYX1BFUl9MSU5FKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHNlbGVjdF9pbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IHNlbGVjdF9pbmRleDtcclxuICAgICAgICB0aGlzLmxpbmVfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5tZW51X2FjdGl2ZSA9IHN0YXJ0X2FjdGl2ZTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qQ2xvc2VzIHRoaXMgd2luZG93Ki9cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24odGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypFbmFibGVzIHRoZSBcImFjdGl2ZVwiIHN0YXRlIGZvciB0aGlzIHdpbmRvdyovXHJcbiAgICBhY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypEaXNhYmxlcyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSBmb3IgdGhpcyB3aW5kb3cqL1xyXG4gICAgZGVhY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93LmpzJztcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTAwO1xyXG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSA5MjtcclxuY29uc3QgQkFTRV9XSU5fWCA9IDA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcclxuXHJcbi8qQSB3aW5kb3cgdGVtcGxhdGUgd2l0aCBjaGFyYWN0ZXIgaW5mb3JtYXRpb25cclxuVXNlZCBmb3IgUHN5bmVyZ3kgYW5kIEl0ZW0gbWVudXNcclxuXHJcbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3QqL1xyXG5leHBvcnQgY2xhc3MgQmFzaWNJbmZvV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1g7XHJcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuXHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnhfYXZhdGFyID0gdGhpcy54ICsgODtcclxuICAgICAgICB0aGlzLnlfYXZhdGFyID0gdGhpcy55ICsgODtcclxuICAgICAgICB0aGlzLmF2YXRhciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJMdlwiLCA0OCwgMjQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJIUFwiLCA4LCA0OCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIDgsIDU2KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiL1wiLCA1NiwgNDkpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIvXCIsIDU2LCA1Nik7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkV4cFwiLCA4LCA3Myk7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNDAsIDgpO1xyXG4gICAgICAgIHRoaXMubHZfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDgwLCAyNCk7XHJcbiAgICAgICAgdGhpcy5jbGFzc190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOCwgNDApO1xyXG4gICAgICAgIHRoaXMuaHBfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDUxLCA0OCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5wcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNTEsIDU2LCB0cnVlKTtcclxuICAgICAgICB0aGlzLm1heF9ocF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOTQsIDQ4LCB0cnVlKTtcclxuICAgICAgICB0aGlzLm1heF9wcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOTQsIDU2LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmV4cF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOTQsIDgwLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBQbGFjZXMgdGhlIGF2YXRhciBncm91cCBjb3JyZWN0bHkgb24gc2NyZWVuICovXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueF9hdmF0YXI7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueV9hdmF0YXI7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZXRzIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXJcclxuICAgIFRoZSBjaGFyYWN0ZXIncyBhdmF0YXIgaXMgbG9hZGVkIGZyb20gY2FjaGVcclxuXHJcbiAgICBJbnB1dDogY2hhciBbc3RyaW5nXSAtIFRoZSBzZWxlY3RlZCBjaGFyYWN0ZXIncyBuYW1lKi9cclxuICAgIHNldF9jaGFyKGNoYXIpIHtcclxuICAgICAgICBpZiAoY2hhciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLm5hbWUsIHRoaXMubmFtZV90ZXh0KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5sZXZlbC50b1N0cmluZygpLCB0aGlzLmx2X3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmNsYXNzLm5hbWUsIHRoaXMuY2xhc3NfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY3VycmVudF9ocC50b1N0cmluZygpLCB0aGlzLmhwX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmN1cnJlbnRfcHAudG9TdHJpbmcoKSwgdGhpcy5wcF90ZXh0KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5tYXhfaHAudG9TdHJpbmcoKSwgdGhpcy5tYXhfaHBfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubWF4X3BwLnRvU3RyaW5nKCksIHRoaXMubWF4X3BwX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmN1cnJlbnRfZXhwLnRvU3RyaW5nKCksIHRoaXMuZXhwX3RleHQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdmF0YXIuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmF2YXRhciA9IHRoaXMuYXZhdGFyX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImF2YXRhcnNcIiwgdGhpcy5jaGFyLmtleV9uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKk9wZW5zIHRoZSB3aW5kb3cgd2l0aCB0aGUgc2VsZWN0ZWQgcGFydHkgbWVtYmVyXHJcblxyXG4gICAgSW5wdXQ6IGluaXRpYWxfY2hhciBbc3RyaW5nXSAtIFRoZSBjaGFyYWN0ZXIgc2VsZWN0ZWQgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgIGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cclxuICAgIG9wZW4oaW5pdGlhbF9jaGFyLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuc2V0X2NoYXIoaW5pdGlhbF9jaGFyKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhlIHdpbmRvd1xyXG5cclxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXHJcbiAgICBjbG9zZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tIFwiLi4vV2luZG93LmpzXCI7XHJcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tIFwiLi4vdXRpbHMvQ3Vyc29yQ29udHJvbC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5cclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9YID0gMTA0O1xyXG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1kgPSAyNDtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9XSURUSCA9IDEzMjtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9IRUlHSFQgPSAxMDg7XHJcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSAxO1xyXG5jb25zdCBFTEVNX1BBRERJTkdfVE9QID0gMTI7XHJcbmNvbnN0IEVMRU1fUEFERElOR19MRUZUID0gODtcclxuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XHJcbmNvbnN0IFBTWV9QUF9YID0gMTI1O1xyXG5jb25zdCBQU1lfUFBfQ09TVF9YID0gMTAyO1xyXG5jb25zdCBQU1lfUFBfQ09TVF9ZID0gODtcclxuY29uc3QgRUxFTV9OQU1FX0lDT05fU0hJRlQgPSA0O1xyXG5jb25zdCBISUdITElHSFRfV0lEVEggPSAxMTQ7XHJcbmNvbnN0IEhJR0hMSUdIVF9IRUlHSFQgPSBudW1iZXJzLkZPTlRfU0laRTtcclxuY29uc3QgUEFHRV9OVU1CRVJfV0lEVEggPSA4O1xyXG5jb25zdCBQQUdFX05VTUJFUl9IRUlHSFQgPSA4O1xyXG5jb25zdCBQQUdFX0lORElDQVRPUl9BUlJPV19ZID0gMDtcclxuY29uc3QgUEFHRV9JTkRJQ0FUT1JfUklHSFRfQVJST1dfWCA9IDEyOTtcclxuY29uc3QgU1VCX0lDT05fWCA9IDA7XHJcbmNvbnN0IFNVQl9JQ09OX1kgPSAwO1xyXG5cclxuLypEaXNwbGF5cyB0aGUgY2hhcmFjdGVyJ3MgUHN5bmVyZ3kgb3IgSXRlbXNcclxuVXNlZCBpbiBhIHNlbGVjdGlvbi10eXBlIG1lbnUsIHJlZmVycmluZyB0byB0aGUgYWJvdmVcclxuXHJcbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcclxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcclxuICAgICAgIGlzX3BzeW5lcmd5X3dpbmRvdyBbYm9vbGVhbl0gLSBXaGV0aGVyIHRoaXMgd2luZG93IHNob3dzIHBzeW5lcmd5IG9yIGl0ZW1zXHJcbiAgICAgICBvbl9jaG9vc2UgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIFwiQ2hvb3NlXCIgb3B0aW9uXHJcbiAgICAgICBvbl9jaGFuZ2UgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIGEgXCJDaGFuZ2VcIiBldmVudFxyXG4gICAgICAgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IFtudW1iZXJdIC0gQ291bnRzIHBhcmVudC1jaGlsZCBzdGF0dXMgZm9yIEVTQyBrZXkgKENhbmNlbC9CYWNrKVxyXG4gICAgICAgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgW251bWJlcl0gLSBDb3VudHMgcGFyZW50LWNoaWxkIHN0YXR1cyBmb3IgRW50ZXIga2V5IChDaG9vc2UvU2VsZWN0KSovXHJcbmV4cG9ydCBjbGFzcyBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgaXNfcHN5bmVyZ3lfd2luZG93LCBvbl9jaGFuZ2UsIG9uX2Nob29zZSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA9IGlzX3BzeW5lcmd5X3dpbmRvdztcclxuICAgICAgICB0aGlzLmVsZW1lbnRfbGlzdCA9IHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ID8gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3QgOiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0O1xyXG4gICAgICAgIHRoaXMuZWxlbWVudF9zcHJpdGVfa2V5ID0gdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyBcImFiaWxpdGllc19pY29uc1wiIDogXCJpdGVtc19pY29uc1wiO1xyXG4gICAgICAgIHRoaXMub25fY2hvb3NlID0gb25fY2hvb3NlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX2Nob29zZTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZSA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jaGFuZ2U7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgUFNZX09WRVJWSUVXX1dJTl9YLCBQU1lfT1ZFUlZJRVdfV0lOX1ksIFBTWV9PVkVSVklFV19XSU5fV0lEVEgsIFBTWV9PVkVSVklFV19XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMgPSBbXHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCg5LCA5NywgXCJzaGlmdF9rZXlib2FyZFwiLCAweDApLFxyXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoOCwgOTYsIFwic2hpZnRfa2V5Ym9hcmRcIiksXHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCgzMiwgOTcsIFwidGFiX2tleWJvYXJkXCIsIDB4MCksXHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCgzMSwgOTYsIFwidGFiX2tleWJvYXJkXCIpXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBzcHJpdGVfcGFpciA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiOiBDaGFuZ2UgQ2hhclwiLCA0OSwgOTYpO1xyXG4gICAgICAgIHRoaXMuY2hhcl9zZWxlY3RfY29udHJvbHNfc3ByaXRlcy5wdXNoKHNwcml0ZV9wYWlyLnRleHQsIHNwcml0ZV9wYWlyLnNoYWRvdyk7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9wYWdlX251bWJlci5iaW5kKHRoaXMpLCB0aGlzLmdldF9lbGVtX3Blcl9wYWdlLmJpbmQodGhpcyksIHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgIHRoaXMucGFnZV9jaGFuZ2UuYmluZCh0aGlzKSwgdGhpcy5lbGVtZW50X2NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLmdldF9wYWdlX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfZWxlbWVudF9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9lbGVtZW50X2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2YXRlZC5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XHJcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmhpZ2hsaWdodF9iYXIpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5iZWdpbkZpbGwodGhpcy53aW5kb3cuY29sb3IsIDEpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5kcmF3UmVjdChFTEVNX1BBRERJTkdfTEVGVCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSksIDAsIEhJR0hMSUdIVF9XSURUSCwgSElHSExJR0hUX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmVuZEZpbGwoKTtcclxuICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJQUFwiLCBQU1lfUFBfQ09TVF9YLCBQU1lfUFBfQ09TVF9ZKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbml0X3BhZ2VfaW5kaWNhdG9yX2JhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB1cCB0aGUgaW5kaWNhdG9yIGJhciBmb3IgdGhlIHBhZ2VzKi9cclxuICAgIGluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCkge1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLnBhZ2VfbnVtYmVyX2Jhcik7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuYmVnaW5GaWxsKHRoaXMud2luZG93LmNvbG9yLCAxKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5kcmF3UmVjdCgwLCAwLCBQQUdFX05VTUJFUl9XSURUSCwgUEFHRV9OVU1CRVJfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5lbmRGaWxsKCk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0ID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMud2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0KTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYmVnaW5GaWxsKHRoaXMud2luZG93LmNvbG9yLCAxKTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuZHJhd1JlY3QoMCwgMCwgUEFHRV9OVU1CRVJfV0lEVEgsIFBBR0VfTlVNQkVSX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoUEFHRV9JTkRJQ0FUT1JfUklHSFRfQVJST1dfWCwgUEFHRV9JTkRJQ0FUT1JfQVJST1dfWSwgXCJwYWdlX2Fycm93XCIpO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuc2NhbGUueCA9IC0xO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cueCAtPSB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LndpZHRoO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdyA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCgwLCBQQUdFX0lORElDQVRPUl9BUlJPV19ZLCBcInBhZ2VfYXJyb3dcIik7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKlJldHVybnMgdGhlIG5hbWUgb2YgdGhlIFBzeW5lcmd5L0l0ZW1cclxuXHJcbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gOiBUaGUgZWxlbWVudCdzIGluZGV4XHJcblxyXG4gICAgT3V0cHV0OiBbc3RyaW5nXSovXHJcbiAgICBnZXRfZWxlbWVudF9rZXlfbmFtZShpbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHRoaXMuZWxlbWVudHNbaW5kZXhdIDogdGhpcy5lbGVtZW50c1tpbmRleF0ua2V5X25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2YXRlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmF0ZWQpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ICYmIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZWxlbWVudHNbdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4XV0uaXNfZmllbGRfcHN5bmVyZ3kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNfcHN5bmVyZ3lfd2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uX2Nob29zZShcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KV0sXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHVuZGVmaW5lZCA6IHRoaXMuaXRlbV9vYmpzW3RoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKkNoZWNrcyBcIm9wZW5cIiBzdGF0ZVxyXG5cclxuICAgIE91dHB1dDogW2Jvb2xlYW5dIC0gVHJ1ZSBpZiBcIm9wZW5cIiovXHJcbiAgICBpc19vcGVuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19vcGVuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qQ2hlY2tzIFwiYWN0aXZhdGVkXCIgc3RhdGVcclxuXHJcbiAgICBPdXRwdXQ6IFtib29sZWFuXSAtIFRydWUgaWYgXCJhY3RpdmF0ZWRcIiovXHJcbiAgICBpc19hY3RpdmF0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2YXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKlJldHVybnMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbGVtZW50J3MgaW5kZXhcclxuXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9lbGVtZW50X2luZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZWxlY3RzIGEgbmV3IGVsZW1lbnRcclxuXHJcbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gLSBUaGUgbmV3IGVsZW1lbnQncyBpbmRleCovXHJcbiAgICBzZXRfZWxlbWVudF9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgY3VycmVudCBwYWdlJ3MgaW5kZXhcclxuXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9wYWdlX2luZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VfaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZWxlY3RzIGEgbmV3IHBhZ2VcclxuXHJcbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gLSBUaGUgbmV3IHBhZ2UncyBpbmRleCovXHJcbiAgICBzZXRfcGFnZV9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qUmV0dXJucyB0aGUgY3Vyc29yJ3MgeCB2YWx1ZVxyXG5cclxuICAgIE91dHB1dDogW251bWJlcl0qL1xyXG4gICAgZ2V0X2N1cnNvcl94KCkge1xyXG4gICAgICAgIHJldHVybiAtNTtcclxuICAgIH1cclxuXHJcbiAgICAvKlJldHVybnMgdGhlIGN1cnNvcidzIHkgdmFsdWVcclxuXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9jdXJzb3JfeSgpIHtcclxuICAgICAgICByZXR1cm4gRUxFTV9QQURESU5HX1RPUCArICgobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKXwwKSArIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUyk7XHJcbiAgICB9XHJcblxyXG4gICAgLypSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhpcyBwYWdlXHJcbiAgICBcclxuICAgIE91dHB1dDogW251bWJlcl0qL1xyXG4gICAgZ2V0X2VsZW1fcGVyX3BhZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB0aGUgdG90YWwgcGFnZSBudW1iZXIqL1xyXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xyXG4gICAgICAgIGxldCBsaXN0X2xlbmd0aDtcclxuICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcclxuICAgICAgICAgICAgbGlzdF9sZW5ndGggPSB0aGlzLmNoYXIuYWJpbGl0aWVzLmZpbHRlcihlbGVtX2tleV9uYW1lID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZWxlbV9rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdCkgJiYgKHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmlzX2ZpZWxkX3BzeW5lcmd5IHx8IHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpO1xyXG4gICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGlzdF9sZW5ndGggPSB0aGlzLmNoYXIuaXRlbXMuZmlsdGVyKGl0ZW1fb2JqID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtX29iai5rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdDtcclxuICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyID0gcGFyc2VJbnQoKGxpc3RfbGVuZ3RoIC0gMSkvRUxFTV9QRVJfUEFHRSkgKyAxO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSB0aGlzLnBhZ2VfbnVtYmVyIC0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLypSZXR1cm5zIHRoZSB0b3RhbCBwYWdlIG51bWJlclxyXG4gICAgXHJcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cclxuICAgIGdldF9wYWdlX251bWJlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX251bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKlNldHMgdXAgdGhlIHBhZ2UgaW5kaWNhdG9yXHJcbiAgICBJbmNsdWRlcyBhcnJvd3MgYW5kIGhpZ2hsaWdodG5pbmcqL1xyXG4gICAgc2V0X3BhZ2VfaW5kaWNhdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IHBhZ2VfbnVtYmVyID0gdGhpcy5nZXRfcGFnZV9udW1iZXIoKTtcclxuICAgICAgICBpZiAocGFnZV9udW1iZXIgPD0gMSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyLndpZHRoID0gcGFnZV9udW1iZXIgKiBQQUdFX05VTUJFUl9XSURUSDtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci54ID0gUFNZX09WRVJWSUVXX1dJTl9XSURUSCAtIHRoaXMucGFnZV9udW1iZXJfYmFyLndpZHRoIC0gNTtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcGFnZV9udW1iZXI7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5wYWdlX251bWJlcl9iYXIueCArIFBBR0VfTlVNQkVSX1dJRFRIICogKGkgLSAxKSArIChQQUdFX05VTUJFUl9XSURUSCA+PiAxKTtcclxuICAgICAgICAgICAgY29uc3QgeSA9IFBBR0VfTlVNQkVSX0hFSUdIVCA+PiAxO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9ycy5wdXNoKHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGkudG9TdHJpbmcoKSwgeCwgeSwgZmFsc2UsIHRydWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQoKTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGljYXRvcl9hcnJvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qVXBkYXRlcyB0aGUgaGlnaGxpZ2h0J3MgcG9zaXRpb24qL1xyXG4gICAgc2V0X3BhZ2VfaW5kaWNhdG9yX2hpZ2hsaWdodCgpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQueCA9IFBTWV9PVkVSVklFV19XSU5fV0lEVEggLSA1IC0gKHRoaXMuZ2V0X3BhZ2VfbnVtYmVyKCkgLSB0aGlzLmdldF9wYWdlX2luZGV4KCkpICogUEFHRV9OVU1CRVJfV0lEVEg7XHJcbiAgICB9XHJcblxyXG4gICAgLypEaXNwbGF5cyB0aGUgcGFnZSBpbmRpY2F0b3IgYXJyb3dzKi9cclxuICAgIHNldF9wYWdlX2luZGljYXRvcl9hcnJvdygpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3ggPSBQU1lfT1ZFUlZJRVdfV0lOX1dJRFRIIC0gNSAtIHRoaXMuZ2V0X3BhZ2VfbnVtYmVyKCkgKiBQQUdFX05VTUJFUl9XSURUSCAtIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy53aWR0aCAtIDI7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LnggPSB0aGlzLmNhbGN1bGF0ZWRfYXJyb3dfbGVmdF94O1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyLnJ1bm5pbmcgJiYgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5wYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5yZXN1bWUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyLmxvb3AoUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LnggPSB0aGlzLmNhbGN1bGF0ZWRfYXJyb3dfbGVmdF94ICsgfigtdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LnglMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LnggPSBQQUdFX0lORElDQVRPUl9SSUdIVF9BUlJPV19YIC0gfigtdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy54JTIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy54IC09IHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cud2lkdGg7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qSGlkZXMgdGhlIHBhZ2UgaW5kaWNhdG9yIGFycm93cyovXHJcbiAgICB1bnNldF9wYWdlX2luZGljYXRvcigpIHtcclxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlX2luZGljYXRvcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3cucmVtb3ZlX3RleHQodGhpcy5wYWdlX2luZGljYXRvcnNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIucGF1c2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlVwZGF0ZXMgdGhpcyB3aW5kb3cncyBwb3NpdGlvbiovXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgUFNZX09WRVJWSUVXX1dJTl9YO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIFBTWV9PVkVSVklFV19XSU5fWTtcclxuICAgIH1cclxuXHJcbiAgICAvKkFkZHMgdGhlIGl0ZW1zL3BzeW5lcmdpZXMgdG8gdGhlIHdpbmRvdyovXHJcbiAgICBzZXRfZWxlbWVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5pdGVtX29ianMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuY2hhci5hYmlsaXRpZXMuZmlsdGVyKGVsZW1fa2V5X25hbWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChlbGVtX2tleV9uYW1lIGluIHRoaXMuZWxlbWVudF9saXN0KSAmJiAodGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0uaXNfZmllbGRfcHN5bmVyZ3kgfHwgdGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0uZWZmZWN0c19vdXRzaWRlX2JhdHRsZSk7XHJcbiAgICAgICAgICAgIH0pLnNsaWNlKHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAqIEVMRU1fUEVSX1BBR0UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmNoYXIuaXRlbXMuZmlsdGVyKGl0ZW1fb2JqID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtX29iai5rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmpzLnB1c2goaXRlbV9vYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KS5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtX29ianMgPSB0aGlzLml0ZW1fb2Jqcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA+PSB0aGlzLmVsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSB0aGlzLmVsZW1lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbV9rZXlfbmFtZSA9IHRoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUoaSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBFTEVNX1BBRERJTkdfTEVGVDtcclxuICAgICAgICAgICAgY29uc3QgeSA9IEVMRU1fUEFERElOR19UT1AgKyBpICogKG51bWJlcnMuSUNPTl9IRUlHSFQgKyBTUEFDRV9CRVRXRUVOX0lURU1TKTtcclxuICAgICAgICAgICAgY29uc3QgaWNvbl94ID0geCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25feSA9IHkgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcclxuICAgICAgICAgICAgY29uc3QgeF9lbGVtX25hbWUgPSBFTEVNX1BBRERJTkdfTEVGVCArIG51bWJlcnMuSUNPTl9XSURUSCArICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IDIgOiA0KTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2godGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0ubmFtZSwgeF9lbGVtX25hbWUsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXksIHVuZGVmaW5lZCwgZWxlbV9rZXlfbmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2ldLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWNvbl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICAgICAgICAgIGxldCBpY29uX3Nwcml0ZSA9IGljb25fZ3JvdXAuY3JlYXRlKDAsIDAsIHRoaXMuZWxlbWVudF9zcHJpdGVfa2V5LCBlbGVtX2tleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgIGljb25fc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX29ianNbaV0uZXF1aXBwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY29uX2dyb3VwLmNyZWF0ZShTVUJfSUNPTl9YLCBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmpzW2ldLnF1YW50aXR5ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KFNVQl9JQ09OX1gsIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29ianNbaV0ucXVhbnRpdHkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbl9ncm91cC5hZGQoaXRlbV9jb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKGljb25fZ3JvdXApO1xyXG4gICAgICAgICAgICAgICAgaWNvbl9ncm91cC54ID0gaWNvbl94O1xyXG4gICAgICAgICAgICAgICAgaWNvbl9ncm91cC55ID0gaWNvbl95O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93LnB1c2goaWNvbl9ncm91cCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4X2VsZW1fcHBfY29zdCA9IFBTWV9QUF9YO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2godGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0ucHBfY29zdCwgeF9lbGVtX3BwX2Nvc3QsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qU2hvd3MgYW5kIHBvc2l0aW9ucyB0aGUgaGlnaGxpZ2h0IGJhciovXHJcbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci55ID0gRUxFTV9QQURESU5HX1RPUCArIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUykgKyA0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qSGlkZXMgdGhlIGhpZ2hsaWdodCBiYXIqL1xyXG4gICAgdW5zZXRfaGlnaGxpZ2h0X2JhcigpIHtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2V0cyB0aGUgc2NhbGluZyBlZmZlY3QgZm9yIHRoZSBzZWxlY3RlZCBpdGVtKi9cclxuICAgIHNldF9lbGVtZW50X3R3ZWVuKGJlZm9yZV9pbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9lbGVtZW50X3R3ZWVuLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2JlZm9yZV9pbmRleF0uc2NhbGUuc2V0VG8oMSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W3RoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleF0uc2NhbGUpLnRvKFxyXG4gICAgICAgICAgICB7IHg6IDEuNiwgeTogMS42IH0sXHJcbiAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSLFxyXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAtMSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLypTdG9wcyB0aGUgc2NhbGluZyBlZmZlY3QqL1xyXG4gICAgdW5zZXRfZWxlbWVudF90d2VlbigpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2VlbiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZWxlY3RzIGEgbmV3IGVsZW1lbnRcclxuICAgIFxyXG4gICAgSW5wdXQ6IGJlZm9yZV9pbmRleCBbbnVtYmVyXSAtIFByZXZpb3VzIGVsZW1lbnRcclxuICAgICAgICAgICBhZnRlcl9pbmRleCBbbnVtYmVyXSAtIE5leHQgZWxlbWVudCovXHJcbiAgICBlbGVtZW50X2NoYW5nZShiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XHJcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudF90d2VlbihiZWZvcmVfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZShcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZShhZnRlcl9pbmRleCldLFxyXG4gICAgICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHVuZGVmaW5lZCA6IHRoaXMuaXRlbV9vYmpzW2FmdGVyX2luZGV4XVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLypEaXNwbGF5cyBhIG5ldyBwYWdlKi9cclxuICAgIHBhZ2VfY2hhbmdlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0X2VsZW1lbnRzKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudF90d2Vlbih0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZShcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZSh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpXSxcclxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLypSZW1vdmVzIGFsbCBzcHJpdGVzIGZyb20gdGhpcyB3aW5kb3cqL1xyXG4gICAgY2xlYXJfc3ByaXRlcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3dbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKkhpZGVzIHRoaXMgd2luZG93Ki9cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3cuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qU2hvd3MgdGhpcyB3aW5kb3cqL1xyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLndpbmRvdy5ncm91cC5hbHBoYSA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLypPcGVucyB0aGlzIHdpbmRvd1xyXG5cclxuICAgIElucHV0OiBjaGFyX2luZGV4IFtudW1iZXJdID0gVGhlIHNlbGVjdGVkIGNoYXJhY3RlcidzIHBhcnR5IGluZGV4XHJcbiAgICAgICAgICAgY2xvc2VfY2FsbGJhY2sgW2Z1bmN0aW9uXSA9IENsb3NpbmcgY2FsbGJhY2sgKE9wdGlvbmFsKVxyXG4gICAgICAgICAgIG9wZW5fY2FsbGJhY2sgW2Z1bmN0aW9uXSA9IE9wZW5pbmcgY2FsbGJhY2sgKE9wdGlvbmFsKSovXHJcbiAgICBvcGVuKGNoYXJfaW5kZXgsIGNsb3NlX2NhbGxiYWNrLCBvcGVuX2NhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLmNoYXJfaW5kZXggPSBjaGFyX2luZGV4O1xyXG4gICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tjaGFyX2luZGV4XTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLndpbmRvdy5zaG93KG9wZW5fY2FsbGJhY2ssIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudHMoKTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLnNldF9lbGVtZW50X3R3ZWVuKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMub25fY2hhbmdlKFxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfbGlzdFt0aGlzLmdldF9lbGVtZW50X2tleV9uYW1lKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCldLFxyXG4gICAgICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHVuZGVmaW5lZCA6IHRoaXMuaXRlbV9vYmpzW3RoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleF1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLypDbG9zZXMgdGhpcyB3aW5kb3cqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xyXG4gICAgICAgIHRoaXMudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLnVuc2V0X2VsZW1lbnRfdHdlZW4oKTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZhdGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLypTZXRzIHRoaXMgd2luZG93J3Mgc3RhdGUgYXMgXCJhY3RpdmF0ZWRcIlxyXG4gICAgRW5hYmxlcyBzZXZlcmFsIFVJIGVsZW1lbnRzKi9cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudHMoKTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZShcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZSh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpXSxcclxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLnNldF9lbGVtZW50X3R3ZWVuKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGFyX3NlbGVjdF9jb250cm9sc19zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcclxuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKkRpc2FibGVzIHRoaXMgd2luZG93J3MgXCJhY3RpdmF0ZWRcIiBzdGF0ZVxyXG4gICAgRGlzYWJsZXMgc2V2ZXJhbCBVSSBlbGVtZW50cyovXHJcbiAgICBkZWFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xyXG4gICAgICAgIHRoaXMudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLnVuc2V0X2VsZW1lbnRfdHdlZW4oKTtcclxuICAgICAgICB0aGlzLnVuc2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICBzcHJpdGUuYWxwaGEgPSAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ2hhcnNNZW51IH0gZnJvbSAnLi4vbWVudXMvQ2hhcnNNZW51LmpzJztcclxuaW1wb3J0IHsgQmFzaWNJbmZvV2luZG93IH0gZnJvbSAnLi4vd2luZG93cy9CYXNpY0luZm9XaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL0l0ZW1Qc3luZXJneUNob29zZVdpbmRvdy5qcyc7XHJcbmltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcblxyXG5jb25zdCBHVUlERV9XSU5ET1dfWCA9IDEwNDtcclxuY29uc3QgR1VJREVfV0lORE9XX1kgPSAwO1xyXG5jb25zdCBHVUlERV9XSU5ET1dfV0lEVEggPSAxMzI7XHJcbmNvbnN0IEdVSURFX1dJTkRPV19IRUlHSFQgPSAyMDtcclxuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1ggPSAwO1xyXG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWSA9IDEzNjtcclxuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1dJRFRIID0gMjM2O1xyXG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfSEVJR0hUID0gMjA7XHJcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fWCA9IDEwNDtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9ZID0gMjQ7XHJcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fV0lEVEggPSAxMzI7XHJcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fSEVJR0hUID0gNzY7XHJcbmNvbnN0IFNIT1JUQ1VUU19XSU5ET1dfWCA9IDEwNDtcclxuY29uc3QgU0hPUlRDVVRTX1dJTkRPV19ZID0gMTA0O1xyXG5jb25zdCBTSE9SVENVVFNfV0lORE9XX1dJRFRIID0gMTMyO1xyXG5jb25zdCBTSE9SVENVVFNfV0lORE9XX0hFSUdIVCA9IDI4O1xyXG5cclxuY29uc3QgVE9UQUxfQk9SREVSID0gbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSDtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19IID0gMTtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19WID0gNTtcclxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSA9IDg7XHJcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fTElORSA9IDM7XHJcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPID0gKChQU1lfT1ZFUlZJRVdfV0lOX1dJRFRIIC0gMioobnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19IKSkgLVxyXG4gICAgKFBTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgKiBudW1iZXJzLklDT05fV0lEVEgpKS8oUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSAtIDEpO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBzeW5lcmd5TWVudVNjcmVlbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudSA9IG5ldyBDaGFyc01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuY2hhcl9jaG9vc2UuYmluZCh0aGlzKSwgdGhpcy5jaGFyX2NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgICAgICB0aGlzLmJhc2ljX2luZm9fd2luZG93ID0gbmV3IEJhc2ljSW5mb1dpbmRvdyh0aGlzLmdhbWUpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbCgpO1xyXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEdVSURFX1dJTkRPV19YLCBHVUlERV9XSU5ET1dfWSwgR1VJREVfV0lORE9XX1dJRFRILCBHVUlERV9XSU5ET1dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvd190ZXh0ID0gdGhpcy5ndWlkZV93aW5kb3cuc2V0X3NpbmdsZV9saW5lX3RleHQoXCJcIik7XHJcbiAgICAgICAgdGhpcy5jaG9vc2luZ19wc3luZXJneSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93X21zZ3MgPSB7XHJcbiAgICAgICAgICAgIGNob29zaW5nX2NoYXI6IFwiV2hvc2UgUHN5bmVyZ3k/XCIsXHJcbiAgICAgICAgICAgIGNob29zaW5nX3BzeW5lcmd5OiBcIldoaWNoIFBzeW5lcmd5P1wiLFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBERVNDUklQVElPTl9XSU5ET1dfWCwgREVTQ1JJUFRJT05fV0lORE9XX1ksIERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCwgREVTQ1JJUFRJT05fV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCA9IHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFBTWV9PVkVSVklFV19XSU5fWCwgUFNZX09WRVJWSUVXX1dJTl9ZLCBQU1lfT1ZFUlZJRVdfV0lOX1dJRFRILCBQU1lfT1ZFUlZJRVdfV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFNIT1JUQ1VUU19XSU5ET1dfWCwgU0hPUlRDVVRTX1dJTkRPV19ZLCBTSE9SVENVVFNfV0lORE9XX1dJRFRILCBTSE9SVENVVFNfV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93X3RleHQgPSB0aGlzLnNob3J0Y3V0c193aW5kb3cuc2V0X3RleHQoW1wiVXNlIGEga2V5Ym9hcmQgbnVtYmVyXCIsIFwidG8gc2V0IGEgc2hvcmN1dC5cIl0sIHVuZGVmaW5lZCwgNywgMyk7XHJcbiAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93ID0gbmV3IEl0ZW1Qc3luZXJneUNob29zZVdpbmRvdyhcclxuICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfY2hhbmdlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfY2hvb3NlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29udHJvbCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUoKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhcl9jaGFuZ2UocGFydHlfaW5kZXgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IHBhcnR5X2luZGV4O1xyXG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cuc2V0X2NoYXIodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3BhcnR5X2luZGV4XSk7XHJcbiAgICAgICAgdGhpcy5zZXRfcHN5bmVyZ3lfaWNvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFyX2Nob29zZShwYXJ0eV9pbmRleCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLmNob29zaW5nX3BzeW5lcmd5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdy5vcGVuKHBhcnR5X2luZGV4LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfcHN5bmVyZ3kgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2d1aWRlX3dpbmRvd190ZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHN5bmVyZ3lfY2hhbmdlKGFiaWxpdHkpIHtcclxuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dChhYmlsaXR5LmRlc2NyaXB0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBwc3luZXJneV9jaG9vc2UoYWJpbGl0eSkge1xyXG4gICAgICAgIGlmIChhYmlsaXR5LmtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudSh0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3RbYWJpbGl0eS5rZXlfbmFtZV0uY2FzdCh0aGlzLmRhdGEuaGVybywgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0ua2V5X25hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfZ3VpZGVfd2luZG93X3RleHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfcHN5bmVyZ3kpIHtcclxuICAgICAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5ndWlkZV93aW5kb3dfbXNncy5jaG9vc2luZ19wc3luZXJneSwgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5ndWlkZV93aW5kb3dfbXNncy5jaG9vc2luZ19jaGFyLCB0aGlzLmd1aWRlX3dpbmRvd190ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfcHN5bmVyZ3kpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoZGVzY3JpcHRpb24sIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuY29pbnMgKyBcIiAgICBDb2luc1wiLCB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvd190ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3BzeW5lcmd5X2ljb25zKCkge1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKCk7XHJcbiAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uYWJpbGl0aWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFiaWxpdHlfa2V5X25hbWUgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5hYmlsaXRpZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChhYmlsaXR5X2tleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbYWJpbGl0eV9rZXlfbmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5pc19maWVsZF9wc3luZXJneSB8fCBhYmlsaXR5LmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4ID0gVE9UQUxfQk9SREVSICsgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19IICsgTWF0aC5jZWlsKChjb3VudGVyJVBTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpICogKFBTWV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPICsgbnVtYmVycy5JQ09OX1dJRFRIKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IFRPVEFMX0JPUkRFUiArIFBTWV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfViArIHBhcnNlSW50KGNvdW50ZXIvUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSkgKiAoUFNZX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9MSU5FICsgbnVtYmVycy5JQ09OX0hFSUdIVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV9vdmVydmlld193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHgsIHksIFwiYWJpbGl0aWVzX2ljb25zXCIsIHVuZGVmaW5lZCwgYWJpbGl0eV9rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytjb3VudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9wZW5fbWVudShjbG9zZV9jYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLmNoYXJzX21lbnUub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cub3Blbih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSk7XHJcbiAgICAgICAgdGhpcy5zZXRfcHN5bmVyZ3lfaWNvbnMoKTtcclxuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3cgPSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnNob3J0Y3V0c193aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbC5qcyc7XHJcblxyXG5jb25zdCBXSU5fV0lEVEggPSAxMzI7XHJcbmNvbnN0IFdJTl9IRUlHSFQgPSA3NjtcclxuY29uc3QgV0lOX1ggPSAxMDQ7XHJcbmNvbnN0IFdJTl9ZID0gMjY7XHJcbmNvbnN0IElORk9fWCA9IDE2O1xyXG5jb25zdCBRVUVTVElPTl9ZID0gMjI7XHJcbmNvbnN0IEFOU1dFUl9YID0gMzI7XHJcbmNvbnN0IFlFU19ZID0gNDY7XHJcbmNvbnN0IE5PX1kgPSA2MjtcclxuY29uc3QgSUNPTl9ZID0gNDtcclxuY29uc3QgSUNPTl9OQU1FX1ggPSAzMjtcclxuY29uc3QgSUNPTl9OQU1FX1kgPSA4O1xyXG5jb25zdCBQT1NTSUJMRV9BTlNXRVJTX0NPVU5UID0gMjtcclxuY29uc3QgQ1VSU09SX1ggPSAxNjtcclxuY29uc3QgQ1VSU09SX1lfU0hJRlQgPSA1O1xyXG5jb25zdCBTVUJfSUNPTl9YID0gNztcclxuY29uc3QgU1VCX0lDT05fWSA9IDg7XHJcblxyXG5leHBvcnQgY2xhc3MgRHJvcEl0ZW1XaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFdJTl9YLCBXSU5fWSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLml0ZW1fb2JqID0gbnVsbDtcclxuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHQoW1wiQXJlIHlvdSBzdXJlIHlvdVwiLCBcIndhbnQgdG8gZHJvcCBpdD9cIl0sIElORk9fWCwgUVVFU1RJT05fWSwgMSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlllc1wiLCBBTlNXRVJfWCwgWUVTX1kpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJOb1wiLCBBTlNXRVJfWCwgTk9fWSk7XHJcbiAgICAgICAgdGhpcy5pY29uX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIElDT05fTkFNRV9YLCBJQ09OX05BTUVfWSk7XHJcbiAgICAgICAgdGhpcy5pY29uID0gbnVsbDtcclxuICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmRyb3BwZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCBmYWxzZSwgdHJ1ZSwgdW5kZWZpbmVkLCAoKSA9PiBQT1NTSUJMRV9BTlNXRVJTX0NPVU5ULFxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRoaXMuZ2V0X2Fuc3dlcl9pbmRleC5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLnNldF9hbnN3ZXJfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X2N1cnNvcl94LmJpbmQodGhpcyksIHRoaXMuZ2V0X2N1cnNvcl95LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29udHJvbCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgdGhpcy5kcm9wcGVkKSk7XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4pIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UoKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfY3Vyc29yX3goKSB7XHJcbiAgICAgICAgcmV0dXJuIENVUlNPUl9YO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJzb3JfeSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYW5zd2VyX2luZGV4ID8gTk9fWSA6IFlFU19ZKSArIENVUlNPUl9ZX1NISUZUO1xyXG4gICAgfVxyXG5cclxuICAgIGlzX2FjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfYWN0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzX29wZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2Fuc3dlcl9pbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hbnN3ZXJfaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2Fuc3dlcl9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIFdJTl9YO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIFdJTl9ZO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9pbmZvKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5pdGVtLm5hbWUsIHRoaXMuaWNvbl9uYW1lKTtcclxuICAgICAgICB0aGlzLmljb24gPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJTkZPX1gsIElDT05fWSwgXCJpdGVtc19pY29uc1wiLCB1bmRlZmluZWQsIHRoaXMuaXRlbS5rZXlfbmFtZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVhbnRpdHlfdG9fcmVtb3ZlID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KElORk9fWCArIFNVQl9JQ09OX1gsIElDT05fWSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5xdWFudGl0eV90b19yZW1vdmUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfaW5mbygpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25fY2hvb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFuc3dlcl9pbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXIucmVtb3ZlX2l0ZW0odGhpcy5pdGVtX29iaiwgdGhpcy5xdWFudGl0eV90b19yZW1vdmUpO1xyXG4gICAgICAgICAgICB0aGlzLmRyb3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2suYmluZCh0aGlzLCB0aGlzLmRyb3BwZWQpKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGl0ZW1fb2JqLCBpdGVtLCBjaGFyLCBxdWFudGl0eV90b19yZW1vdmUsIGNsb3NlX2NhbGxiYWNrLCBvcGVuX2NhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IGl0ZW1fb2JqO1xyXG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLnF1YW50aXR5X3RvX3JlbW92ZSA9IHF1YW50aXR5X3RvX3JlbW92ZTtcclxuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2luZm8oKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKG9wZW5fY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgb3Blbl9jYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy51bnNldF9pbmZvKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG59IiwiY29uc3QgR1JJRF9DT0xPUiA9IDB4MDAwMDAwO1xyXG5jb25zdCBJTkFDVElWRV9CQVJfQ09MT1IgPSAweDk4OTg5ODtcclxuY29uc3QgQUNUSVZFX0JBUl9DT0xPUiA9IDB4RjhCMDcwO1xyXG5jb25zdCBNQVhfSVRFTVMgPSAzMDtcclxuY29uc3QgR1JJRF9XSURUSCA9IE1BWF9JVEVNUyAqIDIgKyAxO1xyXG5jb25zdCBHUklEX0hFSUdIVCA9IDg7XHJcbmNvbnN0IEZPUldBUkQgPSAxO1xyXG5jb25zdCBCQUNLV0FSRCA9IC0xO1xyXG5cclxuZXhwb3J0IGNsYXNzIEl0ZW1Db3VudGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGdyb3VwLCB4LCB5LCBvbl9jaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcclxuICAgICAgICB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMub25fY2hhbmdlID0gb25fY2hhbmdlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX2NoYW5nZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSAxO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC54ID0gdGhpcy54O1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAueSA9IHRoaXMueTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmdyYXBoaWNzKTtcclxuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAuYWRkKHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0aGlzLmludGVybmFsX2dyb3VwKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaW5kZXhfY2hhbmdlX3RpbWUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUi8yO1xyXG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbHMoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZV9ncmlkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2xzKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0X3ByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhGT1JXQVJEKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25VcC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlIHx8ICF0aGlzLnJpZ2h0X3ByZXNzZWQpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yaWdodF9wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoQkFDS1dBUkQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uVXAuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSB8fCAhdGhpcy5sZWZ0X3ByZXNzZWQpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jaGFuZ2VfdGltZXJzKHN0ZXApIHtcclxuICAgICAgICB0aGlzLmFkdmFuY2Vfc3RlcChzdGVwKTtcclxuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5hZGQoUGhhc2VyLlRpbWVyLlFVQVJURVIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0Lmxvb3AodGhpcy5pbmRleF9jaGFuZ2VfdGltZSwgdGhpcy5hZHZhbmNlX3N0ZXAuYmluZCh0aGlzLCBzdGVwKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcF90aW1lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWR2YW5jZV9zdGVwKHN0ZXApIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgKz0gc3RlcDtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X3F1YW50aXR5ID4gdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gMVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X3F1YW50aXR5ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSA9IHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY3VycmVudF9xdWFudGl0eTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lU3R5bGUoMSwgQUNUSVZFX0JBUl9DT0xPUik7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBpICogMiArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5tb3ZlVG8oeCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UodGhpcy5jdXJyZW50X3F1YW50aXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVfZ3JpZCgpIHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygwLCAwKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyhHUklEX1dJRFRILCAwKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgR1JJRF9DT0xPUik7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oR1JJRF9XSURUSCAtIDEsIDApO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKEdSSURfV0lEVEggLSAxLCBHUklEX0hFSUdIVCAtIDEpO1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhHUklEX1dJRFRIIC0gMSwgR1JJRF9IRUlHSFQgLSAxKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygwLCBHUklEX0hFSUdIVCAtIDEpO1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygwLCBHUklEX0hFSUdIVCAtIDEpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDAsIDApO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1BWF9JVEVNUyAtIDE7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcclxuICAgICAgICAgICAgY29uc3QgeCA9IDIgKyAoaSAqIDIpO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh4LCAwKTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlX2luYWN0aXZlX2JhcigpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gTUFYX0lURU1TOyBpID4gdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQ7IC0taSkge1xyXG4gICAgICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lU3R5bGUoMSwgSU5BQ1RJVkVfQkFSX0NPTE9SKTtcclxuICAgICAgICAgICAgY29uc3QgeCA9IChpICogMikgLSAxO1xyXG4gICAgICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5tb3ZlVG8oeCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzLmxpbmVUbyh4LCBHUklEX0hFSUdIVCAtIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH0gXHJcblxyXG4gICAgY29uZmlnKGF2YWlsYWJsZV9pdGVtc19jb3VudCwgaW5pdGlhbF9xdWFudGl0eSkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSBpbml0aWFsX3F1YW50aXR5O1xyXG4gICAgICAgIHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50ID0gYXZhaWxhYmxlX2l0ZW1zX2NvdW50O1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNyZWF0ZV9pbmFjdGl2ZV9iYXIoKTtcclxuICAgICAgICB0aGlzLmFkdmFuY2Vfc3RlcCgwKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBkZWFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBJdGVtQ291bnRlciB9IGZyb20gJy4uLy4uL3V0aWxzL0l0ZW1zQ291bnRlci5qcyc7XHJcblxyXG5jb25zdCBXSU5fV0lEVEggPSAxMzI7XHJcbmNvbnN0IFdJTl9IRUlHSFQgPSA1MjtcclxuY29uc3QgV0lOX1ggPSAxMDQ7XHJcbmNvbnN0IFdJTl9ZID0gMDtcclxuY29uc3QgUVVFU1RJT05fVEVYVF9YID0gNDA7XHJcbmNvbnN0IFFVRVNUSU9OX1RFWFRfWSA9IDg7XHJcbmNvbnN0IElURU1fTkFNRV9YID0gMjc7XHJcbmNvbnN0IElURU1fTkFNRV9ZID0gMTY7XHJcbmNvbnN0IENIQVJfTkFNRV9YID0gMjc7XHJcbmNvbnN0IERFU1RfQ0hBUl9OQU1FX1ggPSA4NDtcclxuY29uc3QgQ0hBUl9OQU1FX1kgPSBJVEVNX05BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xyXG5jb25zdCBJVEVNX0lDT05fWCA9IDg7XHJcbmNvbnN0IElURU1fSUNPTl9ZID0gODtcclxuY29uc3QgU1VCX0lDT05fWCA9IDc7XHJcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xyXG5jb25zdCBJVEVNX0NPVU5URVJfWCA9IDU2O1xyXG5jb25zdCBJVEVNX0NPVU5URVJfWSA9IDQwO1xyXG5jb25zdCBSRU1BSU5fVEVYVF9DSEFSX0NPVU5UX1ggPSAzNztcclxuY29uc3QgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9ZID0gQ0hBUl9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcclxuY29uc3QgUkVNQUlOX1RFWFRfREVTVF9DSEFSX0NPVU5UX1ggPSA5NDtcclxuY29uc3QgUkVNT1ZFX1RFWFRfQ09VTlRfWCA9IDUzO1xyXG5jb25zdCBSRU1PVkVfVEVYVF9DT1VOVF9ZID0gSVRFTV9DT1VOVEVSX1k7XHJcblxyXG5leHBvcnQgY2xhc3MgSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXRlbSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy54ID0gV0lOX1g7XHJcbiAgICAgICAgdGhpcy55ID0gV0lOX1k7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJIb3cgbWFueT9cIiwgUVVFU1RJT05fVEVYVF9YLCBRVUVTVElPTl9URVhUX1kpO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSA9IDE7XHJcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIgPSBuZXcgSXRlbUNvdW50ZXIodGhpcy5nYW1lLCB0aGlzLmdyb3VwLCBJVEVNX0NPVU5URVJfWCwgSVRFTV9DT1VOVEVSX1ksIHRoaXMub25fY2hhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMucmVtYWluaW5nX3dpdGhfY2hhcl9jb3VudCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9YLCBSRU1BSU5fVEVYVF9DSEFSX0NPVU5UX1ksIHRydWUpO1xyXG4gICAgICAgIHRoaXMubmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUkVNQUlOX1RFWFRfREVTVF9DSEFSX0NPVU5UX1gsIFJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy50b19yZW1vdmVfY291bnQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFJFTU9WRV9URVhUX0NPVU5UX1gsIFJFTU9WRV9URVhUX0NPVU5UX1ksIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29udHJvbCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNob29zZW5fcXVhbnRpdHkgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBvbl9jaGFuZ2UocXVhbnRpdHkpIHtcclxuICAgICAgICB0aGlzLmNob29zZW5fcXVhbnRpdHkgPSBxdWFudGl0eTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hvb3Nlbl9xdWFudGl0eS50b1N0cmluZygpLCB0aGlzLnRvX3JlbW92ZV9jb3VudCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCgodGhpcy5pdGVtX29iai5xdWFudGl0eSAtIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSkudG9TdHJpbmcoKSwgdGhpcy5yZW1haW5pbmdfd2l0aF9jaGFyX2NvdW50KTtcclxuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbl9jaGFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoKHRoaXMuZGVzdF9pdGVtX29iai5xdWFudGl0eSArIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSkudG9TdHJpbmcoKSwgdGhpcy5uZXdfYW1vdW50X3dpdGhfZGVzdF9jaGFyX2NvdW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2hlYWRlcigpIHtcclxuICAgICAgICB0aGlzLmljb25fc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1gsIElURU1fSUNPTl9ZLCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgdGhpcy5pdGVtLmtleV9uYW1lKTtcclxuICAgICAgICB0aGlzLmNoYXJfbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5jaGFyLm5hbWUsIENIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25fY2hhcikge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3RfY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmRlc3RpbmF0aW9uX2NoYXIubmFtZSwgREVTVF9DSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XHJcbiAgICAgICAgdGhpcy5lcXVpcF9zcHJpdGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLmVxdWlwcGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLCAnZ3MtaXRlbS1ibXAtZm9udCcsIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfaGVhZGVyKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pY29uX3Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25fY2hhcikge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMuZGVzdF9jaGFyX25hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMubmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5pdGVtX25hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLmVxdWlwX3Nwcml0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuZXF1aXBfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihpdGVtX29iaiwgaXRlbSwgY2hhciwgY2xvc2VfY2FsbGJhY2ssIGRlc3RpbmF0aW9uX2NoYXIsIG9wZW5fY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XHJcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25fY2hhciA9IGRlc3RpbmF0aW9uX2NoYXI7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25fY2hhcikge1xyXG4gICAgICAgICAgICBjb25zdCBkZXN0X2l0ZW1fb2JqID0gdGhpcy5kZXN0aW5hdGlvbl9jaGFyLml0ZW1zLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmtleV9uYW1lID09PSBpdGVtX29iai5rZXlfbmFtZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdF9pdGVtX29iaiA9IGRlc3RfaXRlbV9vYmoubGVuZ3RoID8gZGVzdF9pdGVtX29ialswXSA6IHsgcXVhbnRpdHk6IDAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaG9vc2VuX3F1YW50aXR5ID0gMTtcclxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9oZWFkZXIoKTtcclxuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5jb25maWcodGhpcy5pdGVtX29iai5xdWFudGl0eSwgdGhpcy5jaG9vc2VuX3F1YW50aXR5KTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZSh0aGlzLmNob29zZW5fcXVhbnRpdHkpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAob3Blbl9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xyXG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9xdWFudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfaGVhZGVyKCk7XHJcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZSh0aGlzLmNob29zZW5fcXVhbnRpdHkpO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZGVhY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xyXG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sLmpzJztcclxuXHJcbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcclxuY29uc3QgV0lOX0hFSUdIVCA9IDM2O1xyXG5jb25zdCBXSU5fWCA9IDEwNDtcclxuY29uc3QgV0lOX1kgPSAwO1xyXG5jb25zdCBDSEFSX05BTUVfWCA9IDI3O1xyXG5jb25zdCBDSEFSX05BTUVfWSA9IDg7XHJcbmNvbnN0IElURU1fTkFNRV9YID0gMjc7XHJcbmNvbnN0IElURU1fTkFNRV9ZID0gQ0hBUl9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcclxuY29uc3QgQUNUSU9OX1RFWFRfWCA9IDg7XHJcbmNvbnN0IEFDVElPTl9URVhUX1kgPSBJVEVNX05BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xyXG5jb25zdCBJVEVNX0lDT05fWCA9IDg7XHJcbmNvbnN0IElURU1fSUNPTl9ZID0gODtcclxuY29uc3QgU1VCX0lDT05fWCA9IDc7XHJcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xyXG5jb25zdCBQT1NTSUJMRV9BTlNXRVJTX0NPVU5UID0gMjtcclxuY29uc3QgQU5TV0VSX1ggPSAxMTI7XHJcbmNvbnN0IFlFU19ZID0gODtcclxuY29uc3QgTk9fWSA9IDI0O1xyXG5jb25zdCBDVVJTT1JfWCA9IDk2O1xyXG5jb25zdCBDVVJTT1JfWV9TSElGVCA9IDU7XHJcbmNvbnN0IFlFUyA9IDA7XHJcbmNvbnN0IE5PID0gMTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHaXZlSXRlbU9wdGlvbnNXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pdGVtID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNob29zaW5nX2NoYXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFza2luZ19mb3JfZXF1aXAgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLnllc190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlllc1wiLCBBTlNXRVJfWCwgWUVTX1kpO1xyXG4gICAgICAgIHRoaXMubm9fdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJOb1wiLCBBTlNXRVJfWCwgTk9fWSk7XHJcbiAgICAgICAgdGhpcy55ZXNfdGV4dC50ZXh0LmFscGhhID0gdGhpcy5ub190ZXh0LnRleHQuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMueWVzX3RleHQuc2hhZG93LmFscGhhID0gdGhpcy5ub190ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbCA9IG5ldyBDdXJzb3JDb250cm9sKHRoaXMuZ2FtZSwgZmFsc2UsIHRydWUsIHVuZGVmaW5lZCwgKCkgPT4gUE9TU0lCTEVfQU5TV0VSU19DT1VOVCxcclxuICAgICAgICAgICAgdGhpcy5ncm91cCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLmdldF9hbnN3ZXJfaW5kZXguYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5zZXRfYW5zd2VyX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgZmFsc2UsIGZhbHNlKSk7XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2suYmluZCh0aGlzLCB0cnVlLCB0aGlzLmFuc3dlcl9pbmRleCA9PT0gWUVTKSk7XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2N1cnNvcl94KCkge1xyXG4gICAgICAgIHJldHVybiBDVVJTT1JfWDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfY3Vyc29yX3koKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmFuc3dlcl9pbmRleCA/IE5PX1kgOiBZRVNfWSkgKyBDVVJTT1JfWV9TSElGVDtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBpc19vcGVuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19vcGVuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9hbnN3ZXJfaW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5zd2VyX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9hbnN3ZXJfaW5kZXgoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyBXSU5fWDtcclxuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBXSU5fWTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfaGVhZGVyKCkge1xyXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJVEVNX0lDT05fWCwgSVRFTV9JQ09OX1ksIFwiaXRlbXNfaWNvbnNcIiwgdW5kZWZpbmVkLCB0aGlzLml0ZW0ua2V5X25hbWUpO1xyXG4gICAgICAgIHRoaXMuY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmNoYXIubmFtZSwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcclxuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfY2hhcikge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkdpdmUgaXQgdG8gd2hvbT9cIiwgSVRFTV9OQU1FX1gsIEFDVElPTl9URVhUX1kpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hc2tpbmdfZm9yX2VxdWlwKSB7XHJcbiAgICAgICAgICAgIHRoaXMueWVzX3RleHQudGV4dC5hbHBoYSA9IHRoaXMubm9fdGV4dC50ZXh0LmFscGhhID0gMTtcclxuICAgICAgICAgICAgdGhpcy55ZXNfdGV4dC5zaGFkb3cuYWxwaGEgPSB0aGlzLm5vX3RleHQuc2hhZG93LmFscGhhID0gMTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25fdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJFcXVpcCB0aGlzIGl0ZW0/XCIsIEFDVElPTl9URVhUX1gsIEFDVElPTl9URVhUX1kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lcXVpcF9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsIElURU1fSUNPTl9ZICsgU1VCX0lDT05fWSwgXCJlcXVpcHBlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmoucXVhbnRpdHkgPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29iai5xdWFudGl0eS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1bnNldF9oZWFkZXIoKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMuY2hhcl9uYW1lKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMuaXRlbV9uYW1lKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMuYWN0aW9uX3RleHQpO1xyXG4gICAgICAgIHRoaXMueWVzX3RleHQudGV4dC5hbHBoYSA9IHRoaXMubm9fdGV4dC50ZXh0LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnllc190ZXh0LnNoYWRvdy5hbHBoYSA9IHRoaXMubm9fdGV4dC5zaGFkb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmVxdWlwX3Nwcml0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuZXF1aXBfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihpdGVtX29iaiwgaXRlbSwgY2hhciwgY2hvb3NpbmdfY2hhciwgYXNraW5nX2Zvcl9lcXVpcCwgY2xvc2VfY2FsbGJhY2ssIG9wZW5fY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XHJcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfY2hhciA9IGNob29zaW5nX2NoYXI7XHJcbiAgICAgICAgdGhpcy5hc2tpbmdfZm9yX2VxdWlwID0gYXNraW5nX2Zvcl9lcXVpcDtcclxuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuYXNraW5nX2Zvcl9lcXVpcCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAob3Blbl9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmUoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVhY3RpdmUoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbC5qcyc7XHJcbmltcG9ydCB7IERyb3BJdGVtV2luZG93IH0gZnJvbSAnLi9Ecm9wSXRlbVdpbmRvdy5qcyc7XHJcbmltcG9ydCB7IEl0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3cgfSBmcm9tICcuL0l0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBHaXZlSXRlbU9wdGlvbnNXaW5kb3cgfSBmcm9tICcuL0dpdmVJdGVtT3B0aW9uc1dpbmRvdy5qcyc7XHJcblxyXG5jb25zdCBXSU5fV0lEVEggPSAxMzI7XHJcbmNvbnN0IFdJTl9IRUlHSFQgPSA1MjtcclxuY29uc3QgV0lOX1ggPSAxMDQ7XHJcbmNvbnN0IFdJTl9ZID0gMDtcclxuY29uc3QgT1BUSU9OX1RFWFRfSE9SSVpPTlRBTF9QQURESU5HID0gODtcclxuY29uc3QgT1BUSU9OX1RFWFRfTUFYX1dJREhUID0gNDA7XHJcbmNvbnN0IE9QVElPTl9URVhUX1lfUE9TID0gMzI7XHJcbmNvbnN0IE1BWF9IT1JJWk9OVEFMID0gMztcclxuY29uc3QgTUFYX1ZFUlRJQ0FMID0gMjtcclxuY29uc3QgQ1VSU09SX1hfU0hJRlQgPSAtMTU7XHJcbmNvbnN0IENVUlNPUl9ZX1NISUZUID0gNDtcclxuY29uc3QgQ0hBUl9OQU1FX1ggPSAyNztcclxuY29uc3QgQ0hBUl9OQU1FX1kgPSA4O1xyXG5jb25zdCBJVEVNX05BTUVfWCA9IDI3O1xyXG5jb25zdCBJVEVNX05BTUVfWSA9IENIQVJfTkFNRV9ZICsgbnVtYmVycy5GT05UX1NJWkU7XHJcbmNvbnN0IElURU1fSUNPTl9YID0gODtcclxuY29uc3QgSVRFTV9JQ09OX1kgPSA4O1xyXG5jb25zdCBTVUJfSUNPTl9YID0gNztcclxuY29uc3QgU1VCX0lDT05fWSA9IDg7XHJcbmNvbnN0IERJU0FCTEVfQ09MT1IgPSAweDYwNjA2MDtcclxuY29uc3QgRU5BQkxFX0NPTE9SID0gMHhGRkZGRkY7XHJcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1ggPSAxMjI7XHJcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1kgPSA2NjtcclxuY29uc3QgQUNUSU9OX1dJTkRPV19NU0dfV0lEVEggPSA2NztcclxuY29uc3QgQUNUSU9OX1dJTkRPV19NU0dfSEVJR0hUID0gMjA7XHJcblxyXG5leHBvcnQgY2xhc3MgSXRlbU9wdGlvbnNXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLml0ZW1fb2JqID0gbnVsbDtcclxuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMueCA9IFdJTl9YO1xyXG4gICAgICAgIHRoaXMueSA9IFdJTl9ZO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54LCB0aGlzLnksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlcyA9IHtcclxuICAgICAgICAgICAgdXNlOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiVXNlXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORywgT1BUSU9OX1RFWFRfWV9QT1MpLFxyXG4gICAgICAgICAgICBlcXVpcDogdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkVxdWlwXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIE9QVElPTl9URVhUX01BWF9XSURIVCwgT1BUSU9OX1RFWFRfWV9QT1MpLFxyXG4gICAgICAgICAgICBkZXRhaWxzOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiRGV0YWlsc1wiLCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgKyAyICogT1BUSU9OX1RFWFRfTUFYX1dJREhULCBPUFRJT05fVEVYVF9ZX1BPUyksXHJcbiAgICAgICAgICAgIGdpdmU6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJHaXZlXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORywgT1BUSU9OX1RFWFRfWV9QT1MgKyBudW1iZXJzLkZPTlRfU0laRSksXHJcbiAgICAgICAgICAgIHJlbW92ZTogdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlJlbW92ZVwiLCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgKyBPUFRJT05fVEVYVF9NQVhfV0lESFQsIE9QVElPTl9URVhUX1lfUE9TICsgbnVtYmVycy5GT05UX1NJWkUpLFxyXG4gICAgICAgICAgICBkcm9wOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiRHJvcFwiLCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgKyAyICogT1BUSU9OX1RFWFRfTUFYX1dJREhULCBPUFRJT05fVEVYVF9ZX1BPUyArIG51bWJlcnMuRk9OVF9TSVpFKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlID0ge1xyXG4gICAgICAgICAgICB1c2U6IHRydWUsXHJcbiAgICAgICAgICAgIGVxdWlwOiB0cnVlLFxyXG4gICAgICAgICAgICBkZXRhaWxzOiB0cnVlLFxyXG4gICAgICAgICAgICBnaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICByZW1vdmU6IHRydWUsXHJcbiAgICAgICAgICAgIGRyb3A6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNhbF9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbCA9IG5ldyBDdXJzb3JDb250cm9sKHRoaXMuZ2FtZSwgdHJ1ZSwgdHJ1ZSwgKCkgPT4gTUFYX0hPUklaT05UQUwsICgpID0+IE1BWF9WRVJUSUNBTCwgdGhpcy5ncm91cCxcclxuICAgICAgICAgICAgdGhpcy5vbl9jaGFuZ2UuYmluZCh0aGlzKSwgdGhpcy5vbl9jaGFuZ2UuYmluZCh0aGlzKSwgdGhpcy5nZXRfaG9yaXpvbnRhbF9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9ob3Jpem9udGFsX2luZGV4LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0X3ZlcnRpY2FsX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X3ZlcnRpY2FsX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdyA9IG5ldyBHaXZlSXRlbU9wdGlvbnNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMiwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDIpO1xyXG4gICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdyA9IG5ldyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICAgICAgdGhpcy5kcm9wX2l0ZW1fd2luZG93ID0gbmV3IERyb3BJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxKTtcclxuICAgICAgICB0aGlzLmFjdGlvbl9tZXNzYWdlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBBQ1RJT05fV0lORE9XX01TR19YLCBBQ1RJT05fV0lORE9XX01TR19ZLCBBQ1RJT05fV0lORE9XX01TR19XSURUSCwgQUNUSU9OX1dJTkRPV19NU0dfSEVJR0hUKTtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93Lmdyb3VwLmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVfdGV4dCgpIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy50ZXh0X3Nwcml0ZXMpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNba2V5XS50ZXh0LmFscGhhID0gdGhpcy50ZXh0X3Nwcml0ZXNba2V5XS5zaGFkb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzaG93X3RleHQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGV4dF9zcHJpdGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzW2tleV0udGV4dC5hbHBoYSA9IHRoaXMudGV4dF9zcHJpdGVzW2tleV0uc2hhZG93LmFscGhhID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXNfb3BlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfY3Vyc29yX3goKSB7XHJcbiAgICAgICAgcmV0dXJuIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIHRoaXMuaG9yaXpvbnRhbF9pbmRleCAqIE9QVElPTl9URVhUX01BWF9XSURIVCArIENVUlNPUl9YX1NISUZUO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJzb3JfeSgpIHtcclxuICAgICAgICByZXR1cm4gT1BUSU9OX1RFWFRfWV9QT1MgKyBudW1iZXJzLkZPTlRfU0laRSAqIHRoaXMudmVydGljYWxfaW5kZXggKyBDVVJTT1JfWV9TSElGVDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfdmVydGljYWxfaW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljYWxfaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X3ZlcnRpY2FsX2luZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNhbF9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9ob3Jpem9udGFsX2luZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhvcml6b250YWxfaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2hvcml6b250YWxfaW5kZXgoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLmhvcml6b250YWxfaW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93Lm9wZW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cub3Blbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25fY2hvb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYXZhaWxhYmxlX29wdGlvbnMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLml0ZW0udXNlX2FiaWxpdHkgfHwgdGhpcy5pdGVtLmJyb2tlbikge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy51c2UudGV4dC50aW50ID0gRElTQUJMRV9DT0xPUjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLnVzZSA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLnVzZS50ZXh0LnRpbnQgPSBFTkFCTEVfQ09MT1I7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS51c2UgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXRlbS5lcXVpcGFibGUgfHwgdGhpcy5pdGVtX29iai5lcXVpcHBlZCB8fCAhdGhpcy5pdGVtLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyh0aGlzLmNoYXIua2V5X25hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmVxdWlwLnRleHQudGludCA9IERJU0FCTEVfQ09MT1I7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5lcXVpcCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmVxdWlwLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmVxdWlwID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5naXZlLnRleHQudGludCA9IERJU0FCTEVfQ09MT1I7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMuZ2l2ZS50ZXh0LnRpbnQgPSBFTkFCTEVfQ09MT1I7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLml0ZW0uZXF1aXBhYmxlIHx8ICF0aGlzLml0ZW1fb2JqLmVxdWlwcGVkIHx8ICF0aGlzLml0ZW0uZXF1aXBhYmxlX2NoYXJzLmluY2x1ZGVzKHRoaXMuY2hhci5rZXlfbmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMucmVtb3ZlLnRleHQudGludCA9IERJU0FCTEVfQ09MT1I7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5yZW1vdmUgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5yZW1vdmUudGV4dC50aW50ID0gRU5BQkxFX0NPTE9SO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUucmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbS5pbXBvcmFudF9pdGVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmRyb3AudGV4dC50aW50ID0gRElTQUJMRV9DT0xPUjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3AgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5kcm9wLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3AgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfaGVhZGVyKCkge1xyXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJVEVNX0lDT05fWCwgSVRFTV9JQ09OX1ksIFwiaXRlbXNfaWNvbnNcIiwgdW5kZWZpbmVkLCB0aGlzLml0ZW0ua2V5X25hbWUpO1xyXG4gICAgICAgIHRoaXMuY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmNoYXIubmFtZSwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcclxuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XHJcbiAgICAgICAgdGhpcy5lcXVpcF9zcHJpdGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLmVxdWlwcGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLCAnZ3MtaXRlbS1ibXAtZm9udCcsIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZXRfaGVhZGVyKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pY29uX3Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLml0ZW1fbmFtZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZXF1aXBfc3ByaXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5lcXVpcF9zcHJpdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54O1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyh0ZXh0LCBjbG9zZV9jYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93LnNldF90ZXh0KFt0ZXh0XSk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHNfdXBkYXRlX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0c191cGRhdGVfY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIHRydWUsICgpID0+IHtcclxuICAgICAgICAgICAgY2xvc2VfY2FsbGJhY2soKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbl9jaG9vc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9yaXpvbnRhbF9pbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMSAmJiB0aGlzLm9wdGlvbl9hY3RpdmUuZ2l2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdy5kZWFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9naXZlX2NhbGxiYWNrKChkZXN0aW5hdGlvbl9jaGFyLCBhZnRlcl9jaG9vc2VfY2FsbGJhY2ssIHVubW91bnRfZ2l2ZV93aW5kb3dfc2V0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uX2NoYXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5naXZlX2l0ZW1fb3B0aW9uc193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdGluYXRpb25fY2hhci5rZXlfbmFtZSAhPT0gdGhpcy5jaGFyLmtleV9uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZXN0X2l0ZW1fb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X25hbWU6IHRoaXMuaXRlbV9vYmoua2V5X25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcHBlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogdGhpcy5pdGVtX29iai5xdWFudGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyhkZXN0aW5hdGlvbl9jaGFyLmtleV9uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5naXZlX2l0ZW1fb3B0aW9uc193aW5kb3cub3BlbihkZXN0X2l0ZW1fb2JqLCB0aGlzLml0ZW0sIGRlc3RpbmF0aW9uX2NoYXIsIGZhbHNlLCB0cnVlLCAoYW5zd2VyLCBlcXVpcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbnN3ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIucmVtb3ZlX2l0ZW0odGhpcy5pdGVtX29iaiwgdGhpcy5pdGVtX29iai5xdWFudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYXIuYWRkX2l0ZW0oZGVzdF9pdGVtX29iai5rZXlfbmFtZSwgZGVzdF9pdGVtX29iai5xdWFudGl0eSwgZXF1aXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1vdW50X2dpdmVfd2luZG93X3NldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93KFwiR2l2ZW4uXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1vdW50X2dpdmVfd2luZG93X3NldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmoucXVhbnRpdHkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX3F1YW50aXR5X21hbmFnZXJfd2luZG93Lm9wZW4oZGVzdF9pdGVtX29iaiwgdGhpcy5pdGVtLCB0aGlzLmNoYXIsIHF1YW50aXR5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1YW50aXR5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdF9pdGVtX29iai5xdWFudGl0eSA9IHF1YW50aXR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyLnJlbW92ZV9pdGVtKHRoaXMuaXRlbV9vYmosIHF1YW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYXIuYWRkX2l0ZW0oZGVzdF9pdGVtX29iai5rZXlfbmFtZSwgZGVzdF9pdGVtX29iai5xdWFudGl0eSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJHaXZlbi5cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc3RpbmF0aW9uX2NoYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyLnJlbW92ZV9pdGVtKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYXIuYWRkX2l0ZW0oZGVzdF9pdGVtX29iai5rZXlfbmFtZSwgZGVzdF9pdGVtX29iai5xdWFudGl0eSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVubW91bnRfZ2l2ZV93aW5kb3dfc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyhcIkdpdmVuLlwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlcl9jaG9vc2VfY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ob3Jpem9udGFsX2luZGV4ID09PSAxKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAwICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5lcXVpcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyLmVxdWlwX2l0ZW0odGhpcy5pdGVtX29iai5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93KFwiRXF1aXBwZWQuXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLnJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyLnVuZXF1aXBfaXRlbSh0aGlzLml0ZW1fb2JqLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJSZW1vdmVkLlwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3ApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wZW5fZHJvcF93aW5kb3cgPSAocXVhbnRpdHkgPSAxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wX2l0ZW1fd2luZG93Lm9wZW4odGhpcy5pdGVtX29iaiwgdGhpcy5pdGVtLCB0aGlzLmNoYXIsIHF1YW50aXR5LCBkcm9wcGVkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyhcIkRyb3BwZWQgaXQuXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX29iai5xdWFudGl0eSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3cub3Blbih0aGlzLml0ZW1fb2JqLCB0aGlzLml0ZW0sIHRoaXMuY2hhciwgcXVhbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpdHkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuX2Ryb3Bfd2luZG93KHF1YW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuX2Ryb3Bfd2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25fY2hhbmdlKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmhpZGVfYXJyb3dzKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuc2hvdygpO1xyXG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDAgJiYgdGhpcy5vcHRpb25fYWN0aXZlLnVzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlICYmIHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXModHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaG9yaXpvbnRhbF9pbmRleCA9PT0gMSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMCAmJiB0aGlzLm9wdGlvbl9hY3RpdmUuZXF1aXApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMSAmJiB0aGlzLm9wdGlvbl9hY3RpdmUucmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3AgJiYgdGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY29tcGFyZV9pdGVtcyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGl0ZW1fb2JqLCBpdGVtLCBjaGFyLCBzdGF0c193aW5kb3csIG9uX2dpdmVfY2FsbGJhY2ssIGNsb3NlX2NhbGxiYWNrLCBzdGF0c191cGRhdGVfY2FsbGJhY2ssIG9wZW5fY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XHJcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93ID0gc3RhdHNfd2luZG93O1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLm9uX2dpdmVfY2FsbGJhY2sgPSBvbl9naXZlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLnN0YXRzX3VwZGF0ZV9jYWxsYmFjayA9IHN0YXRzX3VwZGF0ZV9jYWxsYmFjaztcclxuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2F2YWlsYWJsZV9vcHRpb25zKCk7XHJcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKG9wZW5fY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgb3Blbl9jYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfaGVhZGVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfYXZhaWxhYmxlX29wdGlvbnMoKTtcclxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCB7IGl0ZW1fdHlwZXMgfSBmcm9tICcuLi8uLi9JdGVtLmpzJztcclxuaW1wb3J0IHsgZWZmZWN0X3R5cGVzLCBlZmZlY3Rfb3BlcmF0b3JzIH0gZnJvbSAnLi4vLi4vRWZmZWN0LmpzJztcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTAwO1xyXG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSA5MjtcclxuY29uc3QgQkFTRV9XSU5fWCA9IDA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcclxuY29uc3QgQVJST1dfWCA9IDUzO1xyXG5jb25zdCBBUlJPV19ZX1NISUZUID0gMjtcclxuY29uc3QgUFJFVklFV19URVhUX1ggPSA5NDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YO1xyXG4gICAgICAgIHRoaXMueSA9IEJBU0VfV0lOX1k7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLnhfYXZhdGFyID0gdGhpcy54ICsgODtcclxuICAgICAgICB0aGlzLnlfYXZhdGFyID0gdGhpcy55ICsgODtcclxuICAgICAgICB0aGlzLmF2YXRhciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMudXBfYXJyb3dzID0gIHtcclxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChBUlJPV19YLCA0OCAtIEFSUk9XX1lfU0hJRlQsIFwidXBfYXJyb3dcIiksXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDY0IC0gQVJST1dfWV9TSElGVCwgXCJ1cF9hcnJvd1wiKSxcclxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BR0lMSVRZXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgODAgLSBBUlJPV19ZX1NISUZULCBcInVwX2Fycm93XCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRvd25fYXJyb3dzID0gIHtcclxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChBUlJPV19YLCA0OCAtIEFSUk9XX1lfU0hJRlQsIFwiZG93bl9hcnJvd1wiKSxcclxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgNjQgLSBBUlJPV19ZX1NISUZULCBcImRvd25fYXJyb3dcIiksXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDgwIC0gQVJST1dfWV9TSElGVCwgXCJkb3duX2Fycm93XCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHMgPSAge1xyXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkFUVEFDS106IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIFBSRVZJRVdfVEVYVF9YLCA0OCwgdHJ1ZSksXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIFBSRVZJRVdfVEVYVF9YLCA2NCwgdHJ1ZSksXHJcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIFBSRVZJRVdfVEVYVF9YLCA4MCwgdHJ1ZSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaGlkZV9hcnJvd3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkx2XCIsIDQ4LCAyNCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkF0dGFja1wiLCA4LCA0MCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkRlZmVuc2VcIiwgOCwgNTYpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJBZ2lsaXR5XCIsIDgsIDcyKTtcclxuXHJcbiAgICAgICAgdGhpcy5uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgOCk7XHJcbiAgICAgICAgdGhpcy5sdl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgODAsIDI0KTtcclxuICAgICAgICB0aGlzLmF0dGFja190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNDAsIDQ4LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmRlZmVuc2VfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDQwLCA2NCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5hZ2lsaXR5X3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgODAsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcclxuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54X2F2YXRhcjtcclxuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55X2F2YXRhcjtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfaW5mbyhzZXRfY29tcGFyZV9hcnJvd3MgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5uYW1lX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmxldmVsLnRvU3RyaW5nKCksIHRoaXMubHZfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY3VycmVudF9hdGsudG9TdHJpbmcoKSwgdGhpcy5hdHRhY2tfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY3VycmVudF9kZWYudG9TdHJpbmcoKSwgdGhpcy5kZWZlbnNlX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmN1cnJlbnRfYWdpLnRvU3RyaW5nKCksIHRoaXMuYWdpbGl0eV90ZXh0KTtcclxuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdmF0YXIuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmF2YXRhciA9IHRoaXMuYXZhdGFyX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImF2YXRhcnNcIiwgdGhpcy5jaGFyLmtleV9uYW1lKTtcclxuICAgICAgICBpZiAoc2V0X2NvbXBhcmVfYXJyb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFyZV9pdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29tcGFyZV9hcnJvd3MoZWZmZWN0X3R5cGUsIGVxdWlwX3Nsb3RfcHJvcGVydHksIGN1cnJlbnRfc3RhdHNfcHJvcGVydHksIGNvbXBhcmVfcmVtb3ZpbmcpIHtcclxuICAgICAgICBsZXQgZWZmZWN0X29iaiA9IF8uZmluZCh0aGlzLml0ZW0uZWZmZWN0cywge3R5cGU6IGVmZmVjdF90eXBlfSk7XHJcbiAgICAgICAgbGV0IHByZXZpZXdfc3RhdHM7XHJcbiAgICAgICAgaWYgKGVmZmVjdF9vYmogIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBlcXVpcF9zbG90X2tleV9uYW1lID0gdGhpcy5jaGFyLmVxdWlwX3Nsb3RzW2VxdWlwX3Nsb3RfcHJvcGVydHldID09PSBudWxsID8gbnVsbCA6IHRoaXMuY2hhci5lcXVpcF9zbG90c1tlcXVpcF9zbG90X3Byb3BlcnR5XS5rZXlfbmFtZTtcclxuICAgICAgICAgICAgcHJldmlld19zdGF0cyA9IHRoaXMuY2hhci5wcmV2aWV3X3N0YXRzX2J5X2VmZmVjdChlZmZlY3RfdHlwZSwgZWZmZWN0X29iaiwgZXF1aXBfc2xvdF9rZXlfbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGVmZmVjdF9vYmogPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9wcmV2aWV3X3RleHQocHJldmlld19zdGF0cywgZWZmZWN0X3R5cGUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVxdWlwcGVkX2VmZmVjdF9vYmogPSBfLmZpbmQodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0ua2V5X25hbWVdLmVmZmVjdHMsIHt0eXBlOiBlZmZlY3RfdHlwZX0pO1xyXG4gICAgICAgICAgICBpZiAoZXF1aXBwZWRfZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkICYmIGVmZmVjdF9vYmogPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkIHx8IGNvbXBhcmVfcmVtb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdF9vYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZWZmZWN0X3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IGVmZmVjdF9vcGVyYXRvcnMuUExVU1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHByZXZpZXdfc3RhdHMgPSB0aGlzLmNoYXIucHJldmlld19zdGF0c19ieV9lZmZlY3QoZWZmZWN0X3R5cGUsIGVmZmVjdF9vYmosIHRoaXMuY2hhci5lcXVpcF9zbG90c1tlcXVpcF9zbG90X3Byb3BlcnR5XS5rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY3VycmVudF9zdGF0cyA9IHRoaXMuY2hhcltjdXJyZW50X3N0YXRzX3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgaWYgKHByZXZpZXdfc3RhdHMgPiBjdXJyZW50X3N0YXRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfcHJldmlld190ZXh0KHByZXZpZXdfc3RhdHMsIGVmZmVjdF90eXBlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aWV3X3N0YXRzIDwgY3VycmVudF9zdGF0cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfcHJldmlld190ZXh0KHByZXZpZXdfc3RhdHMsIGVmZmVjdF90eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcHJldmlld190ZXh0KHZhbHVlLCBlZmZlY3RfdHlwZSkge1xyXG4gICAgICAgIHRoaXMucHJldmlld19zdGF0c190ZXh0c1tlZmZlY3RfdHlwZV0udGV4dC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzW2VmZmVjdF90eXBlXS5zaGFkb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodmFsdWUudG9TdHJpbmcoKSwgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzW2VmZmVjdF90eXBlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZV9hcnJvd3MoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudXBfYXJyb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW2tleV0uYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW2tleV0uYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNba2V5XS50ZXh0LmFscGhhID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzW2tleV0uc2hhZG93LmFscGhhID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZV9pdGVtcyhjb21wYXJlX3JlbW92aW5nID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQgJiYgIWNvbXBhcmVfcmVtb3ZpbmcpIHJldHVybjtcclxuICAgICAgICBpZiAoIXRoaXMuaXRlbS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXModGhpcy5jaGFyLmtleV9uYW1lKSkgcmV0dXJuO1xyXG4gICAgICAgIGxldCBlcXVpcF9zbG90X3Byb3BlcnR5O1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5pdGVtLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLldFQVBPTlM6IGVxdWlwX3Nsb3RfcHJvcGVydHkgPSBcIndlYXBvblwiOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SOiBlcXVpcF9zbG90X3Byb3BlcnR5ID0gXCJoZWFkXCI7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuQ0hFU1RfUFJPVEVDVE9SOiBlcXVpcF9zbG90X3Byb3BlcnR5ID0gXCJjaGVzdFwiOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkFSTU9SOiBlcXVpcF9zbG90X3Byb3BlcnR5ID0gXCJib2R5XCI7IGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldF9jb21wYXJlX2Fycm93cyhlZmZlY3RfdHlwZXMuQVRUQUNLLCBlcXVpcF9zbG90X3Byb3BlcnR5LCBcImN1cnJlbnRfYXRrXCIsIGNvbXBhcmVfcmVtb3ZpbmcpO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbXBhcmVfYXJyb3dzKGVmZmVjdF90eXBlcy5ERUZFTlNFLCBlcXVpcF9zbG90X3Byb3BlcnR5LCBcImN1cnJlbnRfZGVmXCIsIGNvbXBhcmVfcmVtb3ZpbmcpO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbXBhcmVfYXJyb3dzKGVmZmVjdF90eXBlcy5BR0lMSVRZLCBlcXVpcF9zbG90X3Byb3BlcnR5LCBcImN1cnJlbnRfYWdpXCIsIGNvbXBhcmVfcmVtb3ZpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2hhciwgaXRlbSwgaXRlbV9vYmosIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC5hbHBoYSA9IDE7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xyXG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBpdGVtX29iajtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9pbmZvKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENoYXJzTWVudSB9IGZyb20gJy4uL21lbnVzL0NoYXJzTWVudS5qcyc7XHJcbmltcG9ydCB7IEJhc2ljSW5mb1dpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvQmFzaWNJbmZvV2luZG93LmpzJztcclxuaW1wb3J0IHsgSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93IH0gZnJvbSAnLi4vd2luZG93cy9JdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBJdGVtT3B0aW9uc1dpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvaXRlbS9JdGVtT3B0aW9uc1dpbmRvdy5qcyc7XHJcbmltcG9ydCB7IFN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvaXRlbS9TdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBpdGVtX3R5cGVzIH0gZnJvbSAnLi4vSXRlbS5qcyc7XHJcblxyXG5jb25zdCBHVUlERV9XSU5ET1dfWCA9IDEwNDtcclxuY29uc3QgR1VJREVfV0lORE9XX1kgPSAwO1xyXG5jb25zdCBHVUlERV9XSU5ET1dfV0lEVEggPSAxMzI7XHJcbmNvbnN0IEdVSURFX1dJTkRPV19IRUlHSFQgPSAyMDtcclxuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1ggPSAwO1xyXG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWSA9IDEzNjtcclxuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1dJRFRIID0gMjM2O1xyXG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfSEVJR0hUID0gMjA7XHJcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX1ggPSAxMDQ7XHJcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX1kgPSAyNDtcclxuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fV0lEVEggPSAxMzI7XHJcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX0hFSUdIVCA9IDc2O1xyXG5jb25zdCBBUlJBTkdFX1dJTkRPV19YID0gMTA0O1xyXG5jb25zdCBBUlJBTkdFX1dJTkRPV19ZID0gMTA0O1xyXG5jb25zdCBBUlJBTkdFX1dJTkRPV19XSURUSCA9IDEzMjtcclxuY29uc3QgQVJSQU5HRV9XSU5ET1dfSEVJR0hUID0gMjg7XHJcblxyXG5jb25zdCBUT1RBTF9CT1JERVIgPSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggKyBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIO1xyXG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19IID0gMTE7XHJcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX1YgPSAxMjtcclxuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgPSA1O1xyXG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9MSU5FID0gMztcclxuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPID0gKChJVEVNX09WRVJWSUVXX1dJTl9XSURUSCAtIDIqKG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCArIElURU1fT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX0gpKSAtXHJcbiAgICAoSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgKiBudW1iZXJzLklDT05fV0lEVEgpKS8oSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgLSAxKTtcclxuY29uc3QgU1VCX0lDT05fWCA9IDc7XHJcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xyXG5jb25zdCBJVEVNX09WRVJWSUVXX1lfU0hJRlQgPSAxNjtcclxuY29uc3QgSVRFTV9PVkVSVklFV19IRUlHSFRfU0hJRlQgPSAxNjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtTWVudVNjcmVlbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudSA9IG5ldyBDaGFyc01lbnUoXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcclxuICAgICAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICB0aGlzLmNoYXJfY2hvb3NlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaGFuZ2UuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5jaGFyX2Nob29zZV9jYW5jZWwuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksXHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cgPSBuZXcgQmFzaWNJbmZvV2luZG93KHRoaXMuZ2FtZSk7XHJcbiAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cgPSBuZXcgU3RhdHNDaGVja1dpdGhJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBHVUlERV9XSU5ET1dfWCwgR1VJREVfV0lORE9XX1ksIEdVSURFX1dJTkRPV19XSURUSCwgR1VJREVfV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfaXRlbSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93X21zZ3MgPSB7XHJcbiAgICAgICAgICAgIGNob29zaW5nX2NoYXI6IFwiV2hvc2UgaXRlbT9cIixcclxuICAgICAgICAgICAgY2hvb3NpbmdfaXRlbTogXCJXaGljaCBpdGVtP1wiLFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBERVNDUklQVElPTl9XSU5ET1dfWCwgREVTQ1JJUFRJT05fV0lORE9XX1ksIERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCwgREVTQ1JJUFRJT05fV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCA9IHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xyXG4gICAgICAgIHRoaXMuYXJyYW5nZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQVJSQU5HRV9XSU5ET1dfWCwgQVJSQU5HRV9XSU5ET1dfWSwgQVJSQU5HRV9XSU5ET1dfV0lEVEgsIEFSUkFOR0VfV0lORE9XX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5hcnJhbmdlX3dpbmRvd190ZXh0ID0gdGhpcy5hcnJhbmdlX3dpbmRvdy5zZXRfdGV4dChbXCJBcnJhbmdlIGluZm8gaGVyZS4uLlwiXSwgdW5kZWZpbmVkLCA3LCAzKTtcclxuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIElURU1fT1ZFUlZJRVdfV0lOX1gsIElURU1fT1ZFUlZJRVdfV0lOX1ksIElURU1fT1ZFUlZJRVdfV0lOX1dJRFRILCBJVEVNX09WRVJWSUVXX1dJTl9IRUlHSFQpO1xyXG4gICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93ID0gbmV3IEl0ZW1Qc3luZXJneUNob29zZVdpbmRvdyhcclxuICAgICAgICAgICAgdGhpcy5nYW1lLFxyXG4gICAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2UuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdyA9IG5ldyBJdGVtT3B0aW9uc1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jb250cm9sKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzX29wZW4pIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudSgpO1xyXG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBzaGlmdF9pdGVtX292ZXJ2aWV3KGRvd24pIHtcclxuICAgICAgICBpZiAoZG93bikge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93Lmdyb3VwLnkgKz0gSVRFTV9PVkVSVklFV19ZX1NISUZUO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuZ3JvdXAueSAtPSBJVEVNX09WRVJWSUVXX1lfU0hJRlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYXJfY2hhbmdlKHBhcnR5X2luZGV4KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzX29wZW4pIHJldHVybjtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSBwYXJ0eV9pbmRleDtcclxuICAgICAgICB0aGlzLmJhc2ljX2luZm9fd2luZG93LnNldF9jaGFyKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF0pO1xyXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcclxuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbS50eXBlICE9PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlld19vYmogPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbV9vYmosIHtlcXVpcHBlZCA6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5vcGVuKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld19vYmpcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hhcl9jaG9vc2UocGFydHlfaW5kZXgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF0ua2V5X25hbWUgPT09IHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5jaGFyLmtleV9uYW1lKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZSh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbcGFydHlfaW5kZXhdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGlmdF9pdGVtX292ZXJ2aWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93LnNob3coKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LnVwZGF0ZV9zaXplKHtoZWlnaHQ6IHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuaGVpZ2h0IC0gSVRFTV9PVkVSVklFV19IRUlHSFRfU0hJRlR9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19pdGVtID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cub3BlbihwYXJ0eV9pbmRleCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbl9pdGVtX2Nob29zZV9jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25faXRlbV9jaG9vc2VfY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jaG9vc2luZ19pdGVtID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcclxuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcclxuICAgICAgICBpZiAodGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cud2luZG93X29wZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hhcl9jaG9vc2VfY2FuY2VsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2hpZnRfaXRlbV9vdmVydmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93LnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93LnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmhlaWdodCAtIElURU1fT1ZFUlZJRVdfSEVJR0hUX1NISUZUfSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZShudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyX2NoYW5nZSh0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5jaGFyX2luZGV4KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5pdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQUJJTElUWV9HUkFOVE9SKSB7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5pdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5vcGVuKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5jaGFyX2luZGV4XSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbV9vYmpcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LnNldF9jaGFyX2J5X2luZGV4KHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93LmNoYXJfaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXModHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9tZW51KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGl0ZW1fY2hhbmdlKGl0ZW0sIGl0ZW1fb2JqKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQoaXRlbS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LndpbmRvd19vcGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQUJJTElUWV9HUkFOVE9SKSB7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlICE9PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5vcGVuKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLCBpdGVtLCBpdGVtX29iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGl0ZW1fY2hvb3NlKGl0ZW0sIGl0ZW1fb2JqKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lm9wZW4oaXRlbV9vYmosIGl0ZW0sIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLFxyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdyxcclxuICAgICAgICAgICAgYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGlmdF9pdGVtX292ZXJ2aWV3KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmhlaWdodCArIElURU1fT1ZFUlZJRVdfSEVJR0hUX1NISUZUfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJfY2hhbmdlKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFmdGVyX2NoYXJfY2hvb3NlX29uX2dpdmUgPSBhZnRlcl9jaGFyX2Nob29zZV9vbl9naXZlO1xyXG4gICAgICAgICAgICB9LCBjbG9zZV9pdGVtX2Nob29zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSAhPT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VfaXRlbV9jaG9vc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlICE9PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LnVwZGF0ZV9pbmZvKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5oaWRlX2Fycm93cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfZ3VpZGVfd2luZG93X3RleHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfaXRlbSkge1xyXG4gICAgICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmd1aWRlX3dpbmRvd19tc2dzLmNob29zaW5nX2l0ZW0sIHRoaXMuZ3VpZGVfd2luZG93X3RleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZ3VpZGVfd2luZG93X21zZ3MuY2hvb3NpbmdfY2hhciwgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dChkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2l0ZW0pIHtcclxuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoZGVzY3JpcHRpb24sIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuY29pbnMgKyBcIiAgICBDb2luc1wiLCB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvd190ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2l0ZW1faWNvbnMoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCgpO1xyXG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLml0ZW1zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1fb2JqID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uaXRlbXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1fa2V5X25hbWUgPSBpdGVtX29iai5rZXlfbmFtZTtcclxuICAgICAgICAgICAgaWYgKGl0ZW1fa2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IFRPVEFMX0JPUkRFUiArIElURU1fT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX0ggKyBNYXRoLmNlaWwoKGNvdW50ZXIlSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpICogKElURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyArIG51bWJlcnMuSUNPTl9XSURUSCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IFRPVEFMX0JPUkRFUiArIElURU1fT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX1YgKyBwYXJzZUludChjb3VudGVyL0lURU1fT1ZFUlZJRVdfV0lOX0lDT05TX1BFUl9MSU5FKSAqIChJVEVNX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9MSU5FICsgbnVtYmVycy5JQ09OX0hFSUdIVCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCB5LCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgaXRlbV9rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbV9vYmouZXF1aXBwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4ICsgU1VCX0lDT05fWCwgeSArIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbV9vYmoucXVhbnRpdHkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1fY291bnQgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeCArIFNVQl9JQ09OX1gsIHkgKyBTVUJfSUNPTl9ZLCAnZ3MtaXRlbS1ibXAtZm9udCcsIGl0ZW1fb2JqLnF1YW50aXR5LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cChpdGVtX2NvdW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICsrY291bnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcGVuX21lbnUoY2xvc2VfY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jaGFyc19tZW51Lm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcclxuICAgICAgICB0aGlzLmJhc2ljX2luZm9fd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0pO1xyXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcclxuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xyXG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmFycmFuZ2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3cgPSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuYXJyYW5nZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5cclxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMDA7XHJcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDM2O1xyXG5jb25zdCBCQVNFX1dJTl9YID0gMDtcclxuY29uc3QgQkFTRV9XSU5fWSA9IDA7XHJcbmNvbnN0IE5BTUVfWCA9IDg7XHJcbmNvbnN0IE5BTUVfWSA9IDhcclxuY29uc3QgQ0xBU1NfWSA9IE5BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xyXG5jb25zdCBMVl9YID0gNTY7XHJcbmNvbnN0IExWX1kgPSA4O1xyXG5jb25zdCBMVl9OVU1CRVJfUklHSFRfWCA9IDk0O1xyXG5cclxuZXhwb3J0IGNsYXNzIENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWDtcclxuICAgICAgICB0aGlzLnkgPSBCQVNFX1dJTl9ZO1xyXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5jaGFyX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIE5BTUVfWCwgTkFNRV9ZKTtcclxuICAgICAgICB0aGlzLmNoYXJfY2xhc3MgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIE5BTUVfWCwgQ0xBU1NfWSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkx2XCIsIExWX1gsIExWX1kpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxfbnVtYmVyID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBMVl9OVU1CRVJfUklHSFRfWCwgTFZfWSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3RleHQoKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5jaGFyX25hbWUpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmNsYXNzLm5hbWUsIHRoaXMuY2hhcl9jbGFzcyk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubGV2ZWwudG9TdHJpbmcoKSwgdGhpcy5sZXZlbF9udW1iZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jaGFyKGNoYXIpIHtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3RleHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGNoYXIsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLnVwZGF0ZV90ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGNhcGl0YWxpemUsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgZGppbm5fZm9udF9jb2xvcnMgfSBmcm9tICcuLi8uLi9Eamlubi5qcyc7XHJcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycy5qcyc7XHJcblxyXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDIzNjtcclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XHJcbmNvbnN0IEJBU0VfV0lOX1ggPSAwO1xyXG5jb25zdCBCQVNFX1dJTl9ZID0gMDtcclxuY29uc3QgT0tfTVNHX1ggPSAxMDQ7XHJcbmNvbnN0IE9LX01TR19YXzIgPSAxMzI7XHJcbmNvbnN0IE9LX01TR19ZID0gMjQ7XHJcbmNvbnN0IE9LX01TR19ZXzIgPSAxNjtcclxuY29uc3QgREpJTk5fU1RBVFVTX1ggPSAxMDQ7XHJcbmNvbnN0IERKSU5OX1NUQVRVU19YXzIgPSAxMzI7XHJcbmNvbnN0IERKSU5OX1NUQVRVU19ZID0gODtcclxuY29uc3QgU1RBUl9CRUZPUkVfWCA9IDQ5O1xyXG5jb25zdCBTVEFSX0JFRk9SRV9ZID0gOTtcclxuY29uc3QgU1RBUl9BRlRFUl9YID0gNDk7XHJcbmNvbnN0IFNUQVJfQUZURVJfWSA9IDI1O1xyXG5jb25zdCBESklOTl9OQU1FX0JFRk9SRV9YID0gNTY7XHJcbmNvbnN0IERKSU5OX05BTUVfQkVGT1JFX1kgPSA4O1xyXG5jb25zdCBESklOTl9OQU1FX0FGVEVSX1ggPSA1NjtcclxuY29uc3QgREpJTk5fTkFNRV9BRlRFUl9ZID0gMjQ7XHJcbmNvbnN0IERKSU5OX1ggPSAzMjtcclxuY29uc3QgREpJTk5fWSA9IDMxO1xyXG5jb25zdCBESklOTl9NVUxUX1ggPSBbMzIsIDk5XTtcclxuY29uc3QgREpJTk5fTVVMVF9ZID0gWzIxLCAzN107XHJcbmNvbnN0IENIQVJTX1ggPSBbMTYsIDExN107XHJcbmNvbnN0IENIQVJTX1kgPSBbMzQsIDM0XTtcclxuY29uc3QgQVJST1dfQ0hBTkdFX0RKSU5OX1ggPSA2NDtcclxuY29uc3QgQVJST1dfQ0hBTkdFX0RKSU5OX1kgPSAxNjtcclxuY29uc3QgU1BBQ0VCQVJfS0VZX1ggPSAxMzI7XHJcbmNvbnN0IFNQQUNFQkFSX0tFWV9ZID0gMjQ7XHJcblxyXG5leHBvcnQgY2xhc3MgRGppbm5Nb2RlSGVhZGVyV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1g7XHJcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLm9rX21zZ190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIklzIHRoaXMgT0s/XCIsIE9LX01TR19YLCBPS19NU0dfWSk7XHJcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgREpJTk5fU1RBVFVTX1gsIERKSU5OX1NUQVRVU19ZKTtcclxuICAgICAgICB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERKSU5OX05BTUVfQkVGT1JFX1gsIERKSU5OX05BTUVfQkVGT1JFX1kpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9OQU1FX0FGVEVSX1gsIERKSU5OX05BTUVfQUZURVJfWSk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5kamlubl9zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy50d2VlbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdyA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX0NIQU5HRV9ESklOTl9YLCBBUlJPV19DSEFOR0VfREpJTk5fWSwgXCJhcnJvd19jaGFuZ2VcIik7XHJcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9rZXkgPSB7XHJcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1BBQ0VCQVJfS0VZX1ggKyAxLCBTUEFDRUJBUl9LRVlfWSArIDEsIFwic3BhY2ViYXJfa2V5Ym9hcmRcIiwgMHgwKSxcclxuICAgICAgICAgICAgdGV4dDogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1BBQ0VCQVJfS0VZX1gsIFNQQUNFQkFSX0tFWV9ZLCBcInNwYWNlYmFyX2tleWJvYXJkXCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFjdGlvbl9pbmZvX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQud2lkdGggKyBTUEFDRUJBUl9LRVlfWCArIDIsIFNQQUNFQkFSX0tFWV9ZKTtcclxuICAgICAgICB0aGlzLmluaXRfYXJyb3dfYmxpbmtzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIEJBU0VfV0lOX1g7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgQkFTRV9XSU5fWTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0X2Fycm93X2JsaW5rcygpIHtcclxuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIubG9vcCg5MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IHRoaXMuZGppbm5fc3RhdHVzX2Fycm93LmFscGhhID8gMCA6IDE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIuc3RhcnQoKTtcclxuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9hY3Rpb25faW5mb190ZXh0KHRleHQpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRleHQsIHRoaXMuYWN0aW9uX2luZm9fdGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91bnRfd2luZG93KCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hhcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uX3RleHQgPSBjYXBpdGFsaXplKHRoaXMubmV4dF9kamlubmlfc3RhdHVzWzBdKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmFjdGlvbl90ZXh0LCB0aGlzLmRqaW5uX3N0YXR1c190ZXh0LCBESklOTl9TVEFUVVNfWCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQuYWxwaGEgPSB0aGlzLnNwYWNlYmFyX2tleS5zaGFkb3cuYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX2luZm9fdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IE9LX01TR19YLCB5OiBPS19NU0dfWX0sIHRoaXMub2tfbXNnX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZGppbm5pWzBdLm5hbWUsIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbdGhpcy5kamlubmlbMF0uc3RhdHVzXSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogREpJTk5fTkFNRV9CRUZPUkVfWCwgeTogREpJTk5fTkFNRV9CRUZPUkVfWX0sIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IERKSU5OX05BTUVfQUZURVJfWH0sIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmRqaW5uaVswXS5uYW1lLCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXNbMF1dLCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQkVGT1JFX1gsIFNUQVJfQkVGT1JFX1ksIHRoaXMuZGppbm5pWzBdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2godGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBUl9BRlRFUl9YLCBTVEFSX0FGVEVSX1ksIHRoaXMuZGppbm5pWzBdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3cuYWxwaGEgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5yZXN1bWUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuYWN0aW9uX3RleHQsIHRoaXMuZGppbm5fc3RhdHVzX3RleHQsIERKSU5OX1NUQVRVU19YXzIpO1xyXG4gICAgICAgICAgICB0aGlzLnNwYWNlYmFyX2tleS50ZXh0LmFscGhhID0gdGhpcy5zcGFjZWJhcl9rZXkuc2hhZG93LmFscGhhID0gMTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChgOiAke3RoaXMuY2hhcnNbMF0ubmFtZX0ncyBQc3lgLCB0aGlzLmFjdGlvbl9pbmZvX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBPS19NU0dfWF8yLCB5OiBPS19NU0dfWV8yfSwgdGhpcy5va19tc2dfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMF0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihkamlubl9mb250X2NvbG9yc1t0aGlzLmRqaW5uaVswXS5zdGF0dXNdLCB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25fdGV4dCA9PT0gXCJUcmFkZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0JFRk9SRV9YIC0gNSwgU1RBUl9CRUZPUkVfWSwgdGhpcy5kamlubmlbMF0uZWxlbWVudCArIFwiX3N0YXJcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmRqaW5uaVsxXS5uYW1lLCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKGRqaW5uX2ZvbnRfY29sb3JzW3RoaXMuZGppbm5pWzFdLnN0YXR1c10sIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQUZURVJfWCAtIDUsIFNUQVJfQUZURVJfWSwgdGhpcy5kamlubmlbMV0uZWxlbWVudCArIFwiX3N0YXJcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogREpJTk5fTkFNRV9BRlRFUl9YIC0gNX0sIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IERKSU5OX05BTUVfQkVGT1JFX1ggLSA1LCB5OiBESklOTl9OQU1FX0JFRk9SRV9ZfSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbl90ZXh0ID09PSBcIkdpdmVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBESklOTl9OQU1FX0JFRk9SRV9YIC0gNSwgeTogREpJTk5fTkFNRV9CRUZPUkVfWSArIG51bWJlcnMuRk9OVF9TSVpFfSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQkVGT1JFX1ggLSA1LCBTVEFSX0JFRk9SRV9ZICsgbnVtYmVycy5GT05UX1NJWkUsIHRoaXMuZGppbm5pWzBdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0X2NoYXJfYW5kX2RqaW5uX3Nwcml0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9jaGFyX2FuZF9kamlubl9zcHJpdGUoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuY2hhcnNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRqaW5uaVtpXTtcclxuICAgICAgICAgICAgbGV0IGRqaW5uX3gsIGRqaW5uX3k7XHJcbiAgICAgICAgICAgIGlmIChbXCJUcmFkZVwiLCBcIkdpdmVcIl0uaW5jbHVkZXModGhpcy5hY3Rpb25fdGV4dCkpIHtcclxuICAgICAgICAgICAgICAgIGRqaW5uX3ggPSBESklOTl9NVUxUX1hbaV07XHJcbiAgICAgICAgICAgICAgICBkamlubl95ID0gREpJTk5fTVVMVF9ZW2ldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGppbm5feCA9IERKSU5OX1g7XHJcbiAgICAgICAgICAgICAgICBkamlubl95ID0gREpJTk5fWTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFjdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXJfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQ0hBUlNfWFtpXSwgQ0hBUlNfWVtpXSwgYWN0aW9uX2tleSk7XHJcbiAgICAgICAgICAgIGNoYXJfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEuMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSB0aGlzX2NoYXIuc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5kb3duXSk7XHJcbiAgICAgICAgICAgIGNoYXJfc3ByaXRlLmFuaW1hdGlvbnMuYWRkKGFuaW1hdGlvbl9rZXksIHRoaXNfY2hhci5zcHJpdGVfYmFzZS5hbmltYXRpb25zLmlkbGUuZG93biwgdGhpc19jaGFyLnNwcml0ZV9iYXNlLmFjdGlvbnMuaWRsZS5mcmFtZV9yYXRlLCB0cnVlKTtcclxuICAgICAgICAgICAgY2hhcl9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1hdGlvbl9rZXksIHRoaXNfY2hhci5zcHJpdGVfYmFzZS5hY3Rpb25zLmlkbGUuZnJhbWVfcmF0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGNoYXJfc3ByaXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbl90ZXh0ID09PSBcIkdpdmVcIiAmJiBpID09PSAxKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX3Nwcml0ZSA9IHRoaXMuZ3JvdXAuY3JlYXRlKGRqaW5uX3gsIGRqaW5uX3ksIHRoaXNfZGppbm4uZWxlbWVudCArIFwiX2RqaW5uX1wiICsgdGhpc19kamlubi5zdGF0dXMpO1xyXG4gICAgICAgICAgICBkamlubl9zcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMS4wKTtcclxuICAgICAgICAgICAgZGppbm5fc3ByaXRlLnNjYWxlLnggPSAtMC44O1xyXG4gICAgICAgICAgICBkamlubl9zcHJpdGUuc2NhbGUueSA9IDAuODtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX3Nwcml0ZXNbdGhpc19kamlubi5lbGVtZW50XS5zZXRBbmltYXRpb24oZGppbm5fc3ByaXRlLCB0aGlzX2RqaW5uLnN0YXR1cyk7XHJcbiAgICAgICAgICAgIGRqaW5uX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkodGhpc19kamlubi5zdGF0dXMgKyBcIl9kb3duXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMucHVzaChkamlubl9zcHJpdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFtcIlRyYWRlXCIsIFwiR2l2ZVwiXS5pbmNsdWRlcyh0aGlzLmFjdGlvbl90ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbiA9IGkgPT09IDAgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gc2lnbiAqIDE3LCBiID0gc2lnbiAqIDMzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeV9zaGlmdCA9IC1zaWduICogNTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbihkamlubl9zcHJpdGUpLnRvKFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogW2RqaW5uX3ksIGRqaW5uX3kgKyB5X3NoaWZ0LCBkamlubl95ICsgeV9zaGlmdCwgZGppbm5feV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFtkamlubl94LCBkamlubl94K2EsIGRqaW5uX3grYStiLCBkamlubl94K2ErYithXVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgNzAwLFxyXG4gICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgIC0xLFxyXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdHdlZW4ucmVwZWF0RGVsYXkoMzAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHdlZW5zLnB1c2godHdlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVubW91bnRfd2luZG93KCkge1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudHdlZW5zLmZvckVhY2godHdlZW4gPT4ge1xyXG4gICAgICAgICAgICB0d2Vlbi5zdG9wKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5kamlubl9zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy50d2VlbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IDA7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5wYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIucGF1c2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihjaGFycywgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMsIGFjdGlvbl90ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2hhcnMgPSBjaGFycztcclxuICAgICAgICB0aGlzLmRqaW5uaSA9IGRqaW5uaTtcclxuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG5leHRfZGppbm5pX3N0YXR1cztcclxuICAgICAgICB0aGlzLmFjdGlvbl90ZXh0ID0gYWN0aW9uX3RleHQ7XHJcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnVubW91bnRfd2luZG93KCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMuanMnO1xyXG5pbXBvcnQgeyBvcmRlcmVkX2VsZW1lbnRzIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMTY7XHJcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDExNjtcclxuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xyXG5jb25zdCBBVkFUQVJfWCA9IDg7XHJcbmNvbnN0IEFWQVRBUl9ZID0gODtcclxuY29uc3QgQ0hBUl9OQU1FX1ggPSA0ODtcclxuY29uc3QgQ0hBUl9OQU1FX1kgPSA4O1xyXG5jb25zdCBMVl9YID0gNDg7XHJcbmNvbnN0IExWX1kgPSAyNDtcclxuY29uc3QgTFZfTlVNQkVSX1ggPSAxMTA7XHJcbmNvbnN0IExWX05VTUJFUl9ZID0gMjQ7XHJcbmNvbnN0IENMQVNTX1ggPSA4O1xyXG5jb25zdCBDTEFTU19ZID0gNDA7XHJcbmNvbnN0IERKSU5OX05VTUJFUl9TTE9UX1dJRFRIID0gMTc7XHJcbmNvbnN0IERKSU5OX05VTUJFUl9YID0gMTEwO1xyXG5jb25zdCBESklOTl9OVU1CRVJfWSA9IDQ4O1xyXG5jb25zdCBzdGF0cyA9IFtcIkhQXCIsIFwiUFBcIiwgXCJBdHRhY2tcIiwgXCJEZWZlbnNlXCIsIFwiQWdpbGl0eVwiLCBcIkx1Y2tcIl07XHJcbmNvbnN0IHN0YXRzX2tleXMgPSBbXCJtYXhfaHBcIiwgXCJtYXhfcHBcIiwgXCJhdGtcIiwgXCJkZWZcIiwgXCJhZ2lcIiwgXCJsdWtcIl07XHJcbmNvbnN0IFNUQVRTX1ggPSA4O1xyXG5jb25zdCBTVEFUU19CQVNFX1kgPSA2NDtcclxuY29uc3QgU1RBVFNfQ1VSUkVOVF9YID0gNzg7XHJcbmNvbnN0IFNUQVRTX05FWFRfWCA9IDExMDtcclxuY29uc3QgTkVXX0NMQVNTX1ggPSA4O1xyXG5jb25zdCBORVdfQ0xBU1NfWSA9IDU2O1xyXG5jb25zdCBlbGVtZW50c19saXN0ID0gb3JkZXJlZF9lbGVtZW50cy5zbGljZSgpLnJldmVyc2UoKTtcclxuY29uc3QgQVJST1dfQ0hBTkdFX0NMQVNTX1ggPSAyNDtcclxuY29uc3QgQVJST1dfQ0hBTkdFX0NMQVNTX1kgPSA0ODtcclxuXHJcbmV4cG9ydCBjbGFzcyBEamlubkNoYXJTdGF0c1dpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB3aW5feCA9IDApIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHdpbl94LCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmNoYXJfbmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJMdlwiLCBMVl9YLCBMVl9ZKTtcclxuICAgICAgICB0aGlzLmxldmVsX251bWJlcl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBMVl9OVU1CRVJfWCwgTFZfTlVNQkVSX1ksIHRydWUpO1xyXG4gICAgICAgIHRoaXMuY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQ0xBU1NfWCwgQ0xBU1NfWSk7XHJcbiAgICAgICAgdGhpcy5uZXdfY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgTkVXX0NMQVNTX1gsIE5FV19DTEFTU19ZKTtcclxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcl90ZXh0cyA9IHt9O1xyXG4gICAgICAgIGVsZW1lbnRzX2xpc3QuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gREpJTk5fTlVNQkVSX1ggLSBpICogREpJTk5fTlVNQkVSX1NMT1RfV0lEVEg7XHJcbiAgICAgICAgICAgIHRoaXMuZGppbm5fbnVtYmVyX3RleHRzW2VsZW1lbnRdID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCB4LCBESklOTl9OVU1CRVJfWSwgdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdGF0c19jdXJyZW50X3RleHRzID0ge307XHJcbiAgICAgICAgdGhpcy5zdGF0c19uZXh0X3RleHRzID0ge307XHJcbiAgICAgICAgc3RhdHMuZm9yRWFjaCgoc3RhdCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gU1RBVFNfQkFTRV9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHN0YXQsIFNUQVRTX1gsIHkpO1xyXG4gICAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoW1wiSFBcIiwgXCJQUFwiXS5pbmNsdWRlcyhzdGF0KSkge1xyXG4gICAgICAgICAgICAgICAgc2hpZnQgPSAtODtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0YXRzX2N1cnJlbnRfdGV4dHNbc3RhdF0gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFNUQVRTX0NVUlJFTlRfWCArIHNoaWZ0LCB5LCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0c19uZXh0X3RleHRzW3N0YXRdID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBTVEFUU19ORVhUX1gsIHksIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvdyA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX0NIQU5HRV9DTEFTU19YLCBBUlJPV19DSEFOR0VfQ0xBU1NfWSwgXCJhcnJvd19jaGFuZ2VcIik7XHJcbiAgICAgICAgdGhpcy5pbml0X2Fycm93X2JsaW5rcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRfYXJyb3dfYmxpbmtzKCkge1xyXG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLmxvb3AoOTAsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93LmFscGhhID0gdGhpcy5jbGFzc19uYW1lX2Fycm93LmFscGhhID8gMCA6IDE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnN0YXJ0KCk7XHJcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnBhdXNlKCk7XHJcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93LmFscGhhID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBtb3VudF93aW5kb3coKSB7XHJcbiAgICAgICAgY29uc3QgYXZhdGFyX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFWQVRBUl9YLCBBVkFUQVJfWSwgXCJhdmF0YXJzXCIsIHVuZGVmaW5lZCAsIHRoaXMuY2hhci5rZXlfbmFtZSk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goYXZhdGFyX3Nwcml0ZSk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5jaGFyX25hbWVfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubGV2ZWwudG9TdHJpbmcoKSwgdGhpcy5sZXZlbF9udW1iZXJfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY2xhc3MubmFtZSwgdGhpcy5jbGFzc190ZXh0KTtcclxuICAgICAgICBlbGVtZW50c19saXN0LmZvckVhY2goKGVsZW1lbnQsIGkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXJbZWxlbWVudCArIFwiX2RqaW5uaVwiXS5sZW5ndGgudG9TdHJpbmcoKSwgdGhpcy5kamlubl9udW1iZXJfdGV4dHNbZWxlbWVudF0pO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFyX3dpZHRoID0gNiwgY2hhcl93aWR0aCA9IDY7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBESklOTl9OVU1CRVJfWCAtIHN0YXJfd2lkdGggLSBjaGFyX3dpZHRoIC0gMSAtIGkgKiBESklOTl9OVU1CRVJfU0xPVF9XSURUSDtcclxuICAgICAgICAgICAgY29uc3Qgc3Rhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCBESklOTl9OVU1CRVJfWSArIDEsIGVsZW1lbnQgKyBcIl9zdGFyXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChzdGFyX3Nwcml0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcHJldmlld192YWx1ZXMgPSB0aGlzLmNoYXIucHJldmlld19kamlubl9jaGFuZ2Uoc3RhdHNfa2V5cywgdGhpcy5kamlubmkubWFwKGQgPT4gZC5rZXlfbmFtZSksIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLCB0aGlzLmFjdGlvbik7XHJcbiAgICAgICAgaWYgKHByZXZpZXdfdmFsdWVzLmNsYXNzX2tleV9uYW1lICE9PSB0aGlzLmNoYXIuY2xhc3Mua2V5X25hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChwcmV2aWV3X3ZhbHVlcy5jbGFzc19uYW1lLCB0aGlzLm5ld19jbGFzc190ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnJlc3VtZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5uZXdfY2xhc3NfdGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRzLmZvckVhY2goKHN0YXQsIGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudF9zdGF0ID0gdGhpcy5jaGFyW3N0YXRzX2tleXNbaV1dO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0X3N0YXQgPSBwcmV2aWV3X3ZhbHVlc1tzdGF0c19rZXlzW2ldXTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChjdXJyZW50X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5zdGF0c19jdXJyZW50X3RleHRzW3N0YXRdKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChuZXh0X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5zdGF0c19uZXh0X3RleHRzW3N0YXRdKTtcclxuICAgICAgICAgICAgY29uc3QgeSA9IFNUQVRTX0JBU0VfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSAtIDM7XHJcbiAgICAgICAgICAgIGxldCBzaGlmdCA9IDA7XHJcbiAgICAgICAgICAgIGlmIChbXCJIUFwiLCBcIlBQXCJdLmluY2x1ZGVzKHN0YXQpKSB7XHJcbiAgICAgICAgICAgICAgICBzaGlmdCA9IC04O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50X3N0YXQgIT09IG5leHRfc3RhdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyb3dfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBVFNfQ1VSUkVOVF9YICsgc2hpZnQsIHksIFwic3RhdF9cIiArIChuZXh0X3N0YXQgPiBjdXJyZW50X3N0YXQgPyBcInVwXCIgOiBcImRvd25cIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goYXJyb3dfc3ByaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVubW91bnRfd2luZG93KCkge1xyXG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIHNwcml0ZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93LmFscGhhID0gMDtcclxuICAgICAgICBpZiAoIXRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lci5wYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnBhdXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oY2hhciwgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMsIGFjdGlvbiwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIHRoaXMuZGppbm5pID0gZGppbm5pO1xyXG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xyXG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy51bm1vdW50X3dpbmRvdygpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93LmpzJztcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi8uLi9tYWdpY19udW1iZXJzLmpzJztcclxuXHJcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTE2O1xyXG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAxMTY7XHJcbmNvbnN0IEJBU0VfV0lOX1ggPSAxMjA7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcclxuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XHJcbmNvbnN0IEVMRU1fUEFERElOR19UT1AgPSAxMjtcclxuY29uc3QgRUxFTV9QQURESU5HX0xFRlQgPSA4O1xyXG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gMjtcclxuY29uc3QgUFNZX1BQX1ggPSAxMDk7XHJcbmNvbnN0IFBTWV9QUF9DT1NUX1ggPSA4NjtcclxuY29uc3QgUFNZX1BQX0NPU1RfWSA9IDg7XHJcbmNvbnN0IEVMRU1fTkFNRV9JQ09OX1NISUZUID0gNDtcclxuY29uc3QgRk9SV0FSRCA9IDE7XHJcbmNvbnN0IEJBQ0tXQVJEID0gLTE7XHJcbmNvbnN0IFBTWV9HQUlOX0NPTE9SID0gbnVtYmVycy5ZRUxMT1dfRk9OVF9DT0xPUjtcclxuY29uc3QgUFNZX0xPU1RfQ09MT1IgPSBudW1iZXJzLlJFRF9GT05UX0NPTE9SO1xyXG5jb25zdCBQU1lfSU5GT18xX1kgPSA5NjtcclxuY29uc3QgUFNZX0lORk9fWCA9IDg7XHJcbmNvbnN0IFBTWV9JTkZPXzJfWSA9IFBTWV9JTkZPXzFfWSArIDEgKyBudW1iZXJzLkZPTlRfU0laRTtcclxuXHJcbmV4cG9ydCBjbGFzcyBEamlublBzeW5lcmd5V2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcclxuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLnNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5fWCwgQkFTRV9XSU5fWSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5pbml0X3BhZ2VfaW5kaWNhdG9yX2JhcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJQUFwiLCBQU1lfUFBfQ09TVF9YLCBQU1lfUFBfQ09TVF9ZKTtcclxuICAgICAgICB0aGlzLnBzeV9pbmZvXzFfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUFNZX0lORk9fWCwgUFNZX0lORk9fMV9ZKTtcclxuICAgICAgICB0aGlzLnBzeV9pbmZvXzJfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUFNZX0lORk9fWCwgUFNZX0lORk9fMl9ZKTtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4pIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZV9vcGVyYXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVfb3BlcmF0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25Eb3duLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKEZPUldBUkQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uRG93bi5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4pIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfcGFnZShCQUNLV0FSRCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLnNwYWNlYmFyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuc3BhY2ViYXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zcGFjZWJhcl9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwYWNlYmFyX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzLCB0aGlzLnNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdF9sZW5ndGggPSB0aGlzLmFsbF9hYmlsaXRpZXMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSBwYXJzZUludCgobGlzdF9sZW5ndGggLSAxKS9FTEVNX1BFUl9QQUdFKSArIDE7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRleCA+PSB0aGlzLnBhZ2VfbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VfcGFnZShwYWdlX3NoaWZ0KSB7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ICs9IHBhZ2Vfc2hpZnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRleCA9PT0gdGhpcy5wYWdlX251bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYWdlX2luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSB0aGlzLnBhZ2VfbnVtYmVyIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRfYWJpbGl0aWVzX2xpc3QoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYWJpbGl0aWVzX2xpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB0aGlzLmFsbF9hYmlsaXRpZXMuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFiaWxpdGllcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlfbmFtZSA9IHRoaXMuYWJpbGl0aWVzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gRUxFTV9QQURESU5HX0xFRlQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBFTEVNX1BBRERJTkdfVE9QICsgaSAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25feCA9IHggKyAobnVtYmVycy5JQ09OX1dJRFRIID4+IDEpO1xyXG4gICAgICAgICAgICBjb25zdCBpY29uX3kgPSB5ICsgKG51bWJlcnMuSUNPTl9IRUlHSFQgPj4gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHhfZWxlbV9uYW1lID0gRUxFTV9QQURESU5HX0xFRlQgKyBudW1iZXJzLklDT05fV0lEVEggKyAyO1xyXG4gICAgICAgICAgICBjb25zdCBwc3luZXJneV9uYW1lX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLm5hbWUsIHhfZWxlbV9uYW1lLCB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwc3luZXJneV9uYW1lX3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGljb25feCwgaWNvbl95LCBcImFiaWxpdGllc19pY29uc1wiLCB1bmRlZmluZWQsIGtleV9uYW1lKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgICAgICAgICBjb25zdCBwc3luZXJneV9jb3N0X3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLnBwX2Nvc3QsIFBTWV9QUF9YLCB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwc3luZXJneV9jb3N0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMuaW5jbHVkZXMoa2V5X25hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9uYW1lX3Nwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9jb3N0X3Nwcml0ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sb3N0X2FiaWxpdGllcy5pbmNsdWRlcyhrZXlfbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfYWJpbGl0aWVzKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9hYmlsaXRpZXMgPSB0aGlzLmNoYXIuYWJpbGl0aWVzLmZpbHRlcihrZXlfbmFtZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlcyA9IHRoaXMuY2hhci5wcmV2aWV3X2RqaW5uX2NoYW5nZShbXSwgdGhpcy5kamlubmkubWFwKGQgPT4gZC5rZXlfbmFtZSksIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLCB0aGlzLmFjdGlvbik7XHJcbiAgICAgICAgdGhpcy5uZXh0X2FiaWxpdGllcyA9IHByZXZpZXdfdmFsdWVzLmFiaWxpdGllcy5maWx0ZXIoa2V5X25hbWUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRfc2V0ID0gbmV3IFNldCh0aGlzLmN1cnJlbnRfYWJpbGl0aWVzKTtcclxuICAgICAgICBsZXQgbmV4dF9zZXQgPSBuZXcgU2V0KHRoaXMubmV4dF9hYmlsaXRpZXMpO1xyXG4gICAgICAgIHRoaXMuZ2FpbmVkX2FiaWxpdGllcyA9IFsuLi5uZXh0X3NldF0uZmlsdGVyKHggPT4gIWN1cnJlbnRfc2V0Lmhhcyh4KSk7XHJcbiAgICAgICAgdGhpcy5sb3N0X2FiaWxpdGllcyA9IFsuLi5jdXJyZW50X3NldF0uZmlsdGVyKHggPT4gIW5leHRfc2V0Lmhhcyh4KSk7XHJcbiAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzID0gWy4uLmN1cnJlbnRfc2V0XS5maWx0ZXIoeCA9PiBuZXh0X3NldC5oYXMoeCkpO1xyXG4gICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5jb25jYXQodGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzLCB0aGlzLmxvc3RfYWJpbGl0aWVzKTtcclxuICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBObyBjaGFuZ2VcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgR2FpbmVkXCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb3VudF93aW5kb3coKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfYWJpbGl0aWVzKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfYWJpbGl0aWVzX2xpc3QoKTtcclxuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3BhZ2VfaW5kaWNhdG9yKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJfc3ByaXRlcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2luZm8oY2hhciwgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMpIHtcclxuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVuc2V0X3BhZ2VfaW5kaWNhdG9yKCk7XHJcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcclxuICAgICAgICB0aGlzLmRqaW5uaSA9IGRqaW5uaTtcclxuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG5leHRfZGppbm5pX3N0YXR1cztcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihjaGFyLCBkamlubmksIG5leHRfZGppbm5pX3N0YXR1cywgY2xvc2VfY2FsbGJhY2ssIGhpZGRlbiA9IGZhbHNlLCBzcGFjZWJhcl9jYWxsYmFjaywgYWN0aW9uLCBjYWxsYmFjayA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XHJcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XHJcbiAgICAgICAgdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXMgPSBuZXh0X2RqaW5uaV9zdGF0dXM7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZV9vcGVyYXRpb24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XHJcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9jYWxsYmFjayA9IHNwYWNlYmFyX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xyXG4gICAgICAgIGlmIChoaWRkZW4pIHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmV4ZWN1dGVfb3BlcmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdy5qcyc7XHJcbmltcG9ydCB7IGRqaW5uX3N0YXR1cywgZGppbm5fZm9udF9jb2xvcnMgfSBmcm9tICcuLi8uLi9Eamlubi5qcyc7XHJcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sLmpzJztcclxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi8uLi9tYWdpY19udW1iZXJzLmpzJztcclxuaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBjYXBpdGFsaXplLCBjaGFuZ2VfYnJpZ2h0bmVzcywgZGlyZWN0aW9ucywgZWxlbWVudHMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgRGppbm5Nb2RlSGVhZGVyV2luZG93IH0gZnJvbSAnLi9Eamlubk1vZGVIZWFkZXJXaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBEamlubkNoYXJTdGF0c1dpbmRvdyB9IGZyb20gJy4vRGppbm5DaGFyU3RhdHNXaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBEamlublBzeW5lcmd5V2luZG93IH0gZnJvbSAnLi9EamlublBzeW5lcmd5V2luZG93LmpzJztcclxuXHJcbmNvbnN0IFdJTl9XSURUSCA9IDIzNjtcclxuY29uc3QgV0lOX0hFSUdIVCA9IDExNjtcclxuY29uc3QgV0lOX1ggPSAwO1xyXG5jb25zdCBXSU5fWSA9IDQwO1xyXG5jb25zdCBDSEFSX1hfUEFERElORyA9IDMyO1xyXG5jb25zdCBDSEFSX1lfUEFERElORyA9IDIzO1xyXG5jb25zdCBDSEFSX1hfQkVUV0VFTiA9IDU2O1xyXG5jb25zdCBDSEFSU19QRVJfUEFHRSA9IDQ7XHJcbmNvbnN0IEhJR0hMSUdIVF9IRUlHSFQgPSA4O1xyXG5jb25zdCBISUdITElHSFRfV0lEVEggPSA0ODtcclxuY29uc3QgSElHSExJR0hUX1hfUEFERElORyA9IDE2O1xyXG5jb25zdCBISUdITElHSFRfWV9QQURESU5HID0gMjQ7XHJcbmNvbnN0IERKSU5OX05BTUVfWF9QQURESU5HID0gMjQ7XHJcbmNvbnN0IERKSU5OX05BTUVfWV9QQURESU5HID0gMjQ7XHJcbmNvbnN0IFNUQVJfWF9QQURESU5HID0gSElHSExJR0hUX1hfUEFERElORyArIDE7XHJcbmNvbnN0IFNUQVJfWV9QQURESU5HID0gSElHSExJR0hUX1lfUEFERElORyArIDE7XHJcbmNvbnN0IERKSU5OX05BTUVfQkVUV0VFTiA9IDU2O1xyXG5jb25zdCBESklOTl9ERVNDUklQVElPTl9YID0gODtcclxuY29uc3QgREpJTk5fREVTQ1JJUFRJT05fWSA9IDEwNDtcclxuY29uc3QgREpJTk5fU1BSSVRFX1ggPSA1MDtcclxuY29uc3QgREpJTk5fQ0hBUl9XSU5fU1RBVFNfUklHSFRfWCA9IDEyMDtcclxuY29uc3QgVklFV19TVEFURVMgPSB7XHJcbiAgICBTVEFUUzogMCxcclxuICAgIFRISVNfQ0hBUjogMSxcclxuICAgIE5FWFRfQ0hBUjogMlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGppbm5MaXN0V2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yIChnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGhpcy5jaGFyc19zcHJpdGVzX2dyb3VwKTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLnNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzID0gW107XHJcbiAgICAgICAgdGhpcy5kamlubl9kZXNjcmlwdGlvbiA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgREpJTk5fREVTQ1JJUFRJT05fWCwgREpJTk5fREVTQ1JJUFRJT05fWSk7XHJcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0ID0gIHRoaXMuZ2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0ID0gIHRoaXMuZ2V0X2hpZ2hsaWdodF9iYXIoKTtcclxuICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfY2hhcnMuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfbWF4X2RqaW5uLmJpbmQodGhpcyksIHRoaXMuZ3JvdXAsIHRoaXMub25fY2hhcl9jaGFuZ2UuYmluZCh0aGlzKSwgdGhpcy5vbl9kamlubl9jaGFuZ2UuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRfY2hhcl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9jaGFyX2luZGV4LmJpbmQodGhpcyksIHRoaXMuZ2V0X2RqaW5uX2luZGV4LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2RqaW5uX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICB0aGlzLmdldF94X2N1cnNvci5iaW5kKHRoaXMpLCB0aGlzLmdldF95X2N1cnNvci5iaW5kKHRoaXMpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNpemVzID0gW107XHJcbiAgICAgICAgdGhpcy5kamlubl9uYW1lcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlX2RqaW5uX3Nwcml0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cgPSBuZXcgRGppbm5Nb2RlSGVhZGVyV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQgPSBuZXcgRGppbm5DaGFyU3RhdHNXaW5kb3codGhpcy5nYW1lKTtcclxuICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0ID0gbmV3IERqaW5uQ2hhclN0YXRzV2luZG93KHRoaXMuZ2FtZSwgREpJTk5fQ0hBUl9XSU5fU1RBVFNfUklHSFRfWCk7XHJcbiAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cgPSBuZXcgRGppbm5Qc3luZXJneVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRoaXMuc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuaW5pdF9kamlubl9zcHJpdGVzKCk7XHJcbiAgICAgICAgdGhpcy5pbml0X2RqaW5uaV9zdGF0dXNfdGV4dHMoKTtcclxuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2hpZ2hsaWdodF9iYXIoKSB7XHJcbiAgICAgICAgY29uc3QgYmFyX2hpZ2hsaWdodCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgYmFyX2hpZ2hsaWdodC5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKGJhcl9oaWdobGlnaHQpO1xyXG4gICAgICAgIGJhcl9oaWdobGlnaHQuYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xyXG4gICAgICAgIGJhcl9oaWdobGlnaHQuZHJhd1JlY3QoMCwgMCwgSElHSExJR0hUX1dJRFRILCBISUdITElHSFRfSEVJR0hUKTtcclxuICAgICAgICBiYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcclxuICAgICAgICByZXR1cm4gYmFyX2hpZ2hsaWdodDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgV0lOX1g7XHJcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgV0lOX1k7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbF9kamlubl9zdGF0dXNfc2V0KHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfZGppbm5fb3BlcmF0aW9uKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2Nob29zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLnNoaWZ0X2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlIHx8IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnNoaWZ0X2lucHV0LmhhbHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfZGppbm5fc3RhdHVzKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCwgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCk7XHJcbiAgICAgICAgfSwgdGhpcywgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X3hfY3Vyc29yKCkge1xyXG4gICAgICAgIHJldHVybiBISUdITElHSFRfWF9QQURESU5HICsgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ICogREpJTk5fTkFNRV9CRVRXRUVOIC0gMTQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X3lfY3Vyc29yKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBISUdITElHSFRfWV9QQURESU5HIC0gbnVtYmVycy5GT05UX1NJWkU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPT09IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLmRqaW5uaS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEhJR0hMSUdIVF9ZX1BBRERJTkcgLSBudW1iZXJzLkZPTlRfU0laRTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gSElHSExJR0hUX1lfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggKiBudW1iZXJzLkZPTlRfU0laRSArIDM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlzX29wZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XHJcbiAgICB9XHJcblxyXG4gICAgaXNfYWN0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19hY3RpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2NoYXJfaW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY2hhcl9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9kamlubl9pbmRleCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleDtcclxuICAgICAgICB9IGVsc2UgeyBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9kamlubl9pbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfbWF4X2NoYXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemVzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfbWF4X2RqaW5uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRfZGppbm5fc3ByaXRlcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlcy5wdXNoKHt9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gZWxlbWVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBlbGVtZW50cy5OT19FTEVNRU5UKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBESklOTl9TUFJJVEVfWCArIGkgKiBDSEFSX1hfQkVUV0VFTjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0gPSB0aGlzLmNoYXJzX3Nwcml0ZXNfZ3JvdXAuY3JlYXRlKHgsIENIQVJfWV9QQURESU5HLCBlbGVtICsgXCJfZGppbm5fc2V0XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS5hbmNob3Iuc2V0VG8oMC41LCAxLjApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS5zY2FsZS54ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzW2ldW2VsZW1dLmFscGhhID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0X2RqaW5uaV9zdGF0dXNfdGV4dHMoKSB7XHJcbiAgICAgICAgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBTVEFSX1hfUEFERElORyAtIDEgKyBpICogREpJTk5fTkFNRV9CRVRXRUVOO1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gMTZcclxuICAgICAgICAgICAgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzLnB1c2godGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCB4LCB5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9kamlubl9zcHJpdGUodHdlZW4gPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gdGhpc19jaGFyLmRqaW5uaS5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpc19jaGFyLmRqaW5uaVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XV07XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlX2RqaW5uX3Nwcml0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUuYWxwaGEgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUuYW5pbWF0aW9ucy5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRoaXNfc3ByaXRlID0gdGhpcy5kamlubnNfc3ByaXRlc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdW3RoaXNfZGppbm4uZWxlbWVudF07XHJcbiAgICAgICAgdGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlID0gdGhpc19zcHJpdGU7XHJcbiAgICAgICAgaWYgKHR3ZWVuKSB7XHJcbiAgICAgICAgICAgIHRoaXNfc3ByaXRlLnNjYWxlLnNldFRvKDAsIDApO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXNfc3ByaXRlLnNjYWxlKS50byhcclxuICAgICAgICAgICAgICAgIHsgeDogLTEsIHk6IDEgfSxcclxuICAgICAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDEsXHJcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzX3Nwcml0ZS5hbHBoYSA9IDE7XHJcbiAgICAgICAgbGV0IGFjdGlvbiwgZGlyZWN0aW9uO1xyXG4gICAgICAgIHN3aXRjaCAodGhpc19kamlubi5zdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTpcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiZG93blwiO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uID0gXCJzdGFuZGJ5XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOlxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJkb3duXCI7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBcInNldFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEuaW5mby5kamlubmlfc3ByaXRlc1t0aGlzX2RqaW5uLmVsZW1lbnRdLnNldEFuaW1hdGlvbih0aGlzX3Nwcml0ZSwgYWN0aW9uKTtcclxuICAgICAgICB0aGlzX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYWN0aW9uICsgXCJfXCIgKyBkaXJlY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRfcGFnZSgpIHtcclxuICAgICAgICB0aGlzLnNpemVzID0gbmV3IEFycmF5KHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnR5X2luZGV4ID0gdGhpcy5wYWdlX2luZGV4ICogQ0hBUlNfUEVSX1BBR0UgKyBpO1xyXG4gICAgICAgICAgICBpZiAocGFydHlfaW5kZXggPj0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXJfa2V5X25hbWUgPSB0aGlzX2NoYXIua2V5X25hbWU7XHJcbiAgICAgICAgICAgIGlmICghKGNoYXJfa2V5X25hbWUgaW4gdGhpcy5jaGFyc19zcHJpdGVzKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXNfY2hhci5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoYmFzZV9hY3Rpb25zLklETEUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdID0gdGhpcy5jaGFyc19zcHJpdGVzX2dyb3VwLmNyZWF0ZSgwLCAwLCBhY3Rpb25fa2V5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS5hbmNob3Iuc2V0VG8oMC41LCAxLjApO1xyXG4gICAgICAgICAgICAgICAgdGhpc19jaGFyLnNwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0sIGJhc2VfYWN0aW9ucy5JRExFKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0pO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0uYW5pbWF0aW9ucy5wbGF5KGFuaW1hdGlvbl9rZXkpO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gQ0hBUl9YX1BBRERJTkcgKyBpICogQ0hBUl9YX0JFVFdFRU47XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS54ID0geDtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdLnkgPSBDSEFSX1lfUEFERElORztcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdLmFscGhhID0gMTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFycy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fbGlzdChpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2RqaW5uX2xpc3QoY2hhcl9pbmRleCkge1xyXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF0uZm9yRWFjaChzcHJpdGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHNwcml0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdGFyc1tjaGFyX2luZGV4XS5mb3JFYWNoKHNwcml0ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbY2hhcl9pbmRleF07XHJcbiAgICAgICAgY29uc3QgY2hhcl9kamlubmkgPSB0aGlzX2NoYXIuZGppbm5pO1xyXG4gICAgICAgIGxldCB0aGlzX2RqaW5uX25hbWVzID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFyX2RqaW5uaS5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbY2hhcl9kamlubmlbal1dO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFyX3ggPSBTVEFSX1hfUEFERElORyArIGNoYXJfaW5kZXggKiBESklOTl9OQU1FX0JFVFdFRU47XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJfeSA9IFNUQVJfWV9QQURESU5HICsgaiAqIG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgICAgICBzdGFycy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHN0YXJfeCwgc3Rhcl95LCB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcclxuICAgICAgICAgICAgY29uc3QgZGppbm5feCA9IERKSU5OX05BTUVfWF9QQURESU5HICsgY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcclxuICAgICAgICAgICAgY29uc3QgZGppbm5feSA9IERKSU5OX05BTUVfWV9QQURESU5HICsgaiAqIG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgICAgICBsZXQgY29sb3I7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpc19kamlubi5zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogY29sb3IgPSBkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuU0VUXTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TVEFOREJZXTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5SRUNPVkVSWTogY29sb3IgPSBkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuUkVDT1ZFUlldOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBkamlubl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzX2RqaW5uLm5hbWUsIGRqaW5uX3gsIGRqaW5uX3ksIGZhbHNlLCBmYWxzZSwgY29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzX2RqaW5uX25hbWVzLnB1c2goZGppbm5fbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2l6ZXNbY2hhcl9pbmRleF0gPSBjaGFyX2RqaW5uaS5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5kamlubl9uYW1lc1tjaGFyX2luZGV4XSA9IHRoaXNfZGppbm5fbmFtZXM7XHJcbiAgICAgICAgdGhpcy5zdGFyc1tjaGFyX2luZGV4XSA9IHN0YXJzO1xyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0X3BhZ2UoKSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS5hbmltYXRpb25zLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2tleV0uYWxwaGEgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRqaW5uX25hbWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gdGhpcy5kamlubl9uYW1lc1tpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuYW1lcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dChuYW1lc1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2hpZ2hsaWdodF9iYXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uZGppbm5pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC5hbHBoYSA9IDE7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC54ID0gSElHSExJR0hUX1hfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcclxuICAgICAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LnkgPSBISUdITElHSFRfWV9QQURESU5HICsgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCAqIG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggIT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMTtcclxuICAgICAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodC54ID0gSElHSExJR0hUX1hfUEFERElORyArIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcclxuICAgICAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodC55ID0gSElHSExJR0hUX1lfUEFERElORyArIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggKiBudW1iZXJzLkZPTlRfU0laRTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPT09IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLmRqaW5uaS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLmRqaW5uX2Rlc2NyaXB0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleF1dO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfZGppbm4uZGVzY3JpcHRpb24sIHRoaXMuZGppbm5fZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfYWN0aW9uX3RleHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMpIHtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW3RoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXhdXTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9hY3Rpb25fd2luZG93LnNldF9hY3Rpb25fdGV4dCh0aGlzX2RqaW5uLnN0YXR1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uX2NoYXJfY2hhbmdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSBhZnRlcl9pbmRleDtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA+PSB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cuc2V0X2NoYXIodGhpc19jaGFyKTtcclxuICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfZGppbm5fc3ByaXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25fZGppbm5fY2hhbmdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gYWZ0ZXJfaW5kZXg7XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fZGVzY3JpcHRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbl9jaG9vc2UoKSB7XHJcbiAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleF1dO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzIHx8IHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHJldHVybjsgXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS55IC09IG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gZWxlbWVudHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBlbGVtZW50cy5OT19FTEVNRU5UKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0ueSAtPSBudW1iZXJzLkZPTlRfU0laRTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHN0YXR1c190ZXh0O1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXNfZGppbm4uc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOiBzdGF0dXNfdGV4dCA9IGNhcGl0YWxpemUoZGppbm5fc3RhdHVzLlNUQU5EQlkpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiBzdGF0dXNfdGV4dCA9IGNhcGl0YWxpemUoZGppbm5fc3RhdHVzLlNFVCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChvdGhlcl9jaGFyID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG90aGVyX2NoYXIuZGppbm5pLmxlbmd0aCA8IHRoaXNfY2hhci5kamlubmkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzX3RleHQgPSBcIkdpdmVcIjtcclxuICAgICAgICAgICAgICAgICAgICArK3RoaXMuc2l6ZXNbaV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c190ZXh0ID0gXCJUcmFkZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoc3RhdHVzX3RleHQsIHRoaXMuZGppbm5pX3N0YXR1c190ZXh0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCA9IHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleDtcclxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4ID0gdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleDtcclxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cuc2V0X2FjdGlvbl9mb3Jfc3BlY2lmaWNfZGppbm4odGhpc19jaGFyLCB0aGlzX2RqaW5uKTtcclxuICAgICAgICB0aGlzLmRhcmtlbl9mb250X2NvbG9yKCk7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGFya2VuX2ZvbnRfY29sb3IoZGFya2VuID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kamlubl9uYW1lc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW2ldXTtcclxuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBkYXJrZW4gPyBjaGFuZ2VfYnJpZ2h0bmVzcyhkamlubl9mb250X2NvbG9yc1t0aGlzX2RqaW5uLnN0YXR1c10sIDAuNykgOiBkamlubl9mb250X2NvbG9yc1t0aGlzX2RqaW5uLnN0YXR1c107XHJcbiAgICAgICAgICAgIGlmIChkYXJrZW4gJiYgaSA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoY29sb3IsIHRoaXMuZGppbm5fbmFtZXNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbF9kamlubl9zdGF0dXNfc2V0KHJlc2V0X2luZGV4ID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMpIHJldHVybjtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jaGFyc19zcHJpdGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1trZXldLnkgKz0gbnVtYmVycy5GT05UX1NJWkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBlbGVtZW50c1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS55ICs9IG51bWJlcnMuRk9OVF9TSVpFO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzW2ldKTtcclxuICAgICAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldO1xyXG4gICAgICAgICAgICBpZiAodGhpc19jaGFyID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNpemVzW2ldID0gdGhpc19jaGFyLmRqaW5uaS5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXNldF9pbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4O1xyXG4gICAgICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGFya2VuX2ZvbnRfY29sb3IoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fZGVzY3JpcHRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcclxuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLnNldF9jdXJzb3JfcG9zaXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfZGppbm5fb3BlcmF0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW3RoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXhdXTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4ICE9PSB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dF9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XHJcbiAgICAgICAgICAgIGxldCB0aGlzX3N0YXR1c2VzLCBuZXh0X3N0YXR1c2VzLCB0aGlzX2RqaW5uaSwgbmV4dF9kamlubmksIGFjdGlvbl90ZXh0LCBuZXh0X2RqaW5uO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gbmV4dF9jaGFyLmRqaW5uaS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNfc3RhdHVzZXMgPSBbdGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZID8gXCJpcnJlbGV2YW50XCIgOiBkamlubl9zdGF0dXMuU1RBTkRCWV07XHJcbiAgICAgICAgICAgICAgICBuZXh0X3N0YXR1c2VzID0gW3RoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogdGhpc19kamlubi5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgdGhpc19kamlubmkgPSBbdGhpc19kamlubl07XHJcbiAgICAgICAgICAgICAgICBuZXh0X2RqaW5uaSA9IFt0aGlzX2RqaW5uXTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbl90ZXh0ID0gXCJHaXZlXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0X2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbbmV4dF9jaGFyLmRqaW5uaVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XV07XHJcbiAgICAgICAgICAgICAgICB0aGlzX3N0YXR1c2VzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogbmV4dF9kamlubi5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZID8gXCJpcnJlbGV2YW50XCIgOiBkamlubl9zdGF0dXMuU1RBTkRCWVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZID8gXCJpcnJlbGV2YW50XCIgOiB0aGlzX2RqaW5uLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICBuZXh0X2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkgPyBcImlycmVsZXZhbnRcIiA6IGRqaW5uX3N0YXR1cy5TVEFOREJZXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgdGhpc19kamlubmkgPSBbbmV4dF9kamlubiwgdGhpc19kamlubl07XHJcbiAgICAgICAgICAgICAgICBuZXh0X2RqaW5uaSA9IFt0aGlzX2RqaW5uLCBuZXh0X2RqaW5uXTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbl90ZXh0ID0gXCJUcmFkZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5vcGVuKFxyXG4gICAgICAgICAgICAgICAgdGhpc19jaGFyLFxyXG4gICAgICAgICAgICAgICAgdGhpc19kamlubmksXHJcbiAgICAgICAgICAgICAgICB0aGlzX3N0YXR1c2VzLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodC5vcGVuKFxyXG4gICAgICAgICAgICAgICAgbmV4dF9jaGFyLFxyXG4gICAgICAgICAgICAgICAgbmV4dF9kamlubmksXHJcbiAgICAgICAgICAgICAgICBuZXh0X3N0YXR1c2VzLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodC5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IERKSU5OX0NIQVJfV0lOX1NUQVRTX1JJR0hUX1h9KTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cub3BlbihcclxuICAgICAgICAgICAgICAgIFt0aGlzX2NoYXIsIG5leHRfY2hhcl0sXHJcbiAgICAgICAgICAgICAgICBuZXh0X2RqaW5uaSxcclxuICAgICAgICAgICAgICAgIHRoaXNfc3RhdHVzZXMsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25fdGV4dFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3X3N0YXRlID0gVklFV19TVEFURVMuU1RBVFM7XHJcbiAgICAgICAgICAgIHRoaXMuZGppbm5fcHN5bmVyZ3lfd2luZG93Lm9wZW4odGhpc19jaGFyLCB0aGlzX2RqaW5uaSwgdGhpc19zdGF0dXNlcywgKGV4ZWN1dGVfb3BlcmF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhlY3V0ZV9vcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uX3RleHQgPT09IFwiVHJhZGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2NoYXIucmVwbGFjZV9kamlubih0aGlzX2RqaW5uLmtleV9uYW1lLCBuZXh0X2RqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLnJlcGxhY2VfZGppbm4obmV4dF9kamlubi5rZXlfbmFtZSwgdGhpc19kamlubi5rZXlfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb25fdGV4dCA9PT0gXCJHaXZlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19jaGFyLnJlbW92ZV9kamlubih0aGlzX2RqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLmFkZF9kamlubih0aGlzX2RqaW5uLmtleV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2xpc3QodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9saXN0KHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxfZGppbm5fc3RhdHVzX3NldCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICB9LCB0cnVlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICArK3RoaXMudmlld19zdGF0ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdfc3RhdGUgPiBWSUVXX1NUQVRFUy5ORVhUX0NIQVIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdfc3RhdGUgPSBWSUVXX1NUQVRFUy5TVEFUUztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3X3N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5TVEFUUzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0LmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogREpJTk5fQ0hBUl9XSU5fU1RBVFNfUklHSFRfWH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5zZXRfYWN0aW9uX2luZm9fdGV4dChgOiAke3RoaXNfY2hhci5uYW1lfSdzIFBzeWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFZJRVdfU1RBVEVTLlRISVNfQ0hBUjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cudXBkYXRlX2luZm8odGhpc19jaGFyLCB0aGlzX2RqaW5uaSwgdGhpc19zdGF0dXNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fcHN5bmVyZ3lfd2luZG93LmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LnNldF9hY3Rpb25faW5mb190ZXh0KGA6ICR7bmV4dF9jaGFyLm5hbWV9J3MgUHN5YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuTkVYVF9DSEFSOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy51cGRhdGVfaW5mbyhuZXh0X2NoYXIsIG5leHRfZGppbm5pLCBuZXh0X3N0YXR1c2VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0LmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0LmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiAwfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LnNldF9hY3Rpb25faW5mb190ZXh0KFwiOiBTdGF0dXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBhY3Rpb25fdGV4dCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IG5leHRfc3RhdHVzO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXNfZGppbm4uc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TRVQ6IG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlNUQU5EQlk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTogbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU0VUOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cub3BlbihbdGhpc19jaGFyXSwgW3RoaXNfZGppbm5dLCBbbmV4dF9zdGF0dXNdKTtcclxuICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0Lm9wZW4odGhpc19jaGFyLCBbdGhpc19kamlubl0sIFtuZXh0X3N0YXR1c10pO1xyXG4gICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy5vcGVuKHRoaXNfY2hhciwgW3RoaXNfZGppbm5dLCBbbmV4dF9zdGF0dXNdLCAoZXhlY3V0ZV9vcGVyYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChleGVjdXRlX29wZXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2RqaW5uX3N0YXR1cyh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgsIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsX2RqaW5uX3N0YXR1c19zZXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZV9kamlubl9zdGF0dXMoY2hhcl9pbmRleCwgZGppbm5faW5kZXgpIHtcclxuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbY2hhcl9pbmRleF07XHJcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbZGppbm5faW5kZXhdXTtcclxuICAgICAgICBpZiAodGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TRVQpIHtcclxuICAgICAgICAgICAgdGhpc19kamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TVEFOREJZLCB0aGlzX2NoYXIpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TVEFOREJZXSwgdGhpcy5kamlubl9uYW1lc1tjaGFyX2luZGV4XVtkamlubl9pbmRleF0pO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93LnVwZGF0ZV90ZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2RqaW5uX3Nwcml0ZShmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzX2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkpIHtcclxuICAgICAgICAgICAgdGhpc19kamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TRVQsIHRoaXNfY2hhcik7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlNFVF0sIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF1bZGppbm5faW5kZXhdKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy51cGRhdGVfdGV4dCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGNoYXJzX3F1aWNrX2luZm9fd2luZG93LCBkamlubl9hY3Rpb25fd2luZG93LCBjbG9zZV9jYWxsYmFjaywgb3Blbl9jYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcclxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cgPSBjaGFyc19xdWlja19pbmZvX3dpbmRvdztcclxuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cgPSBkamlubl9hY3Rpb25fd2luZG93O1xyXG4gICAgICAgIHRoaXMubG9hZF9wYWdlKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XHJcbiAgICAgICAgdGhpcy5zZXRfYWN0aW9uX3RleHQoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc2V0X2RqaW5uX3Nwcml0ZSgpO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2hhbmdpbmdfZGppbm5fc3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICBpZiAob3Blbl9jYWxsYmFjaykge1xyXG4gICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKGNsb3NlX2NhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHRoaXMudW5zZXRfcGFnZSgpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKGNsb3NlX2NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNsb3NlX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cuanMnO1xyXG5pbXBvcnQgeyBkamlubl9zdGF0dXMgfSBmcm9tICcuLi8uLi9Eamlubi5qcyc7XHJcblxyXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDEzMjtcclxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XHJcbmNvbnN0IEJBU0VfV0lOX1ggPSAxMDQ7XHJcbmNvbnN0IEJBU0VfV0lOX1kgPSAwO1xyXG5jb25zdCBDSE9PU0VfQV9ESl9YID0gODtcclxuY29uc3QgQ0hPT1NFX0FfREpfWSA9IDg7XHJcbmNvbnN0IENIQVJfTkFNRV9YID0gODtcclxuY29uc3QgQ0hBUl9OQU1FX1kgPSAxNjtcclxuY29uc3QgREpJTk5fTkFNRV9YID0gNjQ7XHJcbmNvbnN0IERKSU5OX05BTUVfWSA9IDE2O1xyXG5jb25zdCBTSElGVF9LRVlfWCA9IDg7XHJcbmNvbnN0IFNISUZUX0tFWV9ZID0gMjQ7XHJcbmNvbnN0IERKSU5OX0FDVElPTl9YID0gU0hJRlRfS0VZX1ggKyAyMztcclxuY29uc3QgREpJTk5fQUNUSU9OX1kgPSAyNDtcclxuXHJcbmV4cG9ydCBjbGFzcyBEamlubkFjdGlvbldpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcclxuICAgICAgICB0aGlzLmFjdGlvbl9kZXNjcmlwdGlvbl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDSE9PU0VfQV9ESl9YLCBDSE9PU0VfQV9ESl9ZKTtcclxuICAgICAgICB0aGlzLmNoYXJfbmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xyXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9OQU1FX1gsIERKSU5OX05BTUVfWSk7XHJcbiAgICAgICAgdGhpcy5zdGFyX3Nwcml0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9rZXkgPSB7XHJcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfS0VZX1ggKyAxLCBTSElGVF9LRVlfWSArIDEsIFwic2hpZnRfa2V5Ym9hcmRcIiwgMHgwKSxcclxuICAgICAgICAgICAgdGV4dDogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfS0VZX1gsIFNISUZUX0tFWV9ZLCBcInNoaWZ0X2tleWJvYXJkXCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFjdGlvbl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9BQ1RJT05fWCwgREpJTk5fQUNUSU9OX1kpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldF9hY3Rpb25fdGV4dChzdGF0dXMpIHtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiQ2hvb3NlIGEgZGppbm4uXCIsIHRoaXMuYWN0aW9uX2Rlc2NyaXB0aW9uX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5jaGFyX25hbWVfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLmRqaW5uX25hbWVfdGV4dCk7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9rZXkudGV4dC5hbHBoYSA9IHRoaXMuc2hpZnRfa2V5LnNoYWRvdy5hbHBoYSA9IDE7XHJcbiAgICAgICAgaWYgKHRoaXMuc3Rhcl9zcHJpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFyX3Nwcml0ZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3Rhcl9zcHJpdGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2goc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIjogU3RhbmRieVwiLCB0aGlzLmFjdGlvbl90ZXh0KTsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6IHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCI6IFNldFwiLCB0aGlzLmFjdGlvbl90ZXh0KTsgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldF9hY3Rpb25fZm9yX3NwZWNpZmljX2RqaW5uKHRoaXNfY2hhciwgdGhpc19kamlubikge1xyXG4gICAgICAgIHRoaXMuc3Rhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChESklOTl9OQU1FX1ggLSA3LCBESklOTl9OQU1FX1kgKyAxLCB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJXaGF0IHdpbGwgeW91IGRvP1wiLCB0aGlzLmFjdGlvbl9kZXNjcmlwdGlvbl90ZXh0KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfY2hhci5uYW1lICsgXCInc1wiLCB0aGlzLmNoYXJfbmFtZV90ZXh0KTtcclxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfZGppbm4ubmFtZSwgdGhpcy5kamlubl9uYW1lX3RleHQpO1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5hY3Rpb25fdGV4dCk7XHJcbiAgICAgICAgdGhpcy5zaGlmdF9rZXkudGV4dC5hbHBoYSA9IHRoaXMuc2hpZnRfa2V5LnNoYWRvdy5hbHBoYSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvZGppbm4vQ2hhcnNRdWlja0luZm9EamlubldpbmRvdy5qcyc7XHJcbmltcG9ydCB7IERqaW5uTGlzdFdpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvZGppbm4vRGppbm5MaXN0V2luZG93LmpzJztcclxuaW1wb3J0IHsgRGppbm5BY3Rpb25XaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL2RqaW5uL0RqaW5uQWN0aW9uV2luZG93LmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEamlubk1lbnVTY3JlZW4ge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xyXG4gICAgICAgIHRoaXMuc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XHJcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcclxuICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93ID0gbmV3IENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3codGhpcy5nYW1lKTtcclxuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cgPSBuZXcgRGppbm5BY3Rpb25XaW5kb3codGhpcy5nYW1lKTtcclxuICAgICAgICB0aGlzLmRqaW5uaV9saXN0X3dpbmRvdyA9IG5ldyBEamlubkxpc3RXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCB0aGlzLnNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCB0aGlzLnNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY29udHJvbCgpIHtcclxuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUoKTtcclxuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3Blbl9tZW51KGNsb3NlX2NhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy5vcGVuKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdKTtcclxuICAgICAgICB0aGlzLmRqaW5uaV9saXN0X3dpbmRvdy5vcGVuKHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3csIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdyk7XHJcbiAgICAgICAgdGhpcy5kamlubl9hY3Rpb25fd2luZG93Lm9wZW4oKTtcclxuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlX21lbnUoY2xvc2VfbWVudV9iZWxvdyA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuZGppbm5pX2xpc3Rfd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5kamlubl9hY3Rpb25fd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsTWVudSB9IGZyb20gJy4uL21lbnVzL0hvcml6b250YWxNZW51LmpzJztcclxuaW1wb3J0IHsgUHN5bmVyZ3lNZW51U2NyZWVuIH0gZnJvbSAnLi9wc3luZXJneV9tZW51LmpzJztcclxuaW1wb3J0IHsgSXRlbU1lbnVTY3JlZW4gfSBmcm9tICcuL2l0ZW1fbWVudS5qcyc7XHJcbmltcG9ydCB7IERqaW5uTWVudVNjcmVlbiB9IGZyb20gJy4vZGppbm5pX21lbnUuanMnO1xyXG5pbXBvcnQgeyBDaGFyc1N0YXR1c1dpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvQ2hhcnNTdGF0dXNXaW5kb3cuanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbnVTY3JlZW4ge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cgPSBuZXcgQ2hhcnNTdGF0dXNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uc19rZXlzID0gW1wicHN5bmVyZ3lcIiwgXCJkamlubmlcIiwgXCJpdGVtXCIsIFwic3RhdHVzXCJdO1xyXG4gICAgICAgIGxldCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xyXG4gICAgICAgIGxldCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IDA7XHJcbiAgICAgICAgbGV0IHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gMDtcclxuICAgICAgICBsZXQgc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51ID0gbmV3IEhvcml6b250YWxNZW51KFxyXG4gICAgICAgICAgICB0aGlzLmdhbWUsXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMsXHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLm1hcChiID0+IGNhcGl0YWxpemUoYikpLFxyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbl9wcmVzcy5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSxcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgKytlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XHJcbiAgICAgICAgKytlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcclxuICAgICAgICB0aGlzLnBzeW5lcmd5X21lbnUgPSBuZXcgUHN5bmVyZ3lNZW51U2NyZWVuKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgICAgICB0aGlzLml0ZW1fbWVudSA9IG5ldyBJdGVtTWVudVNjcmVlbih0aGlzLmdhbWUsIHRoaXMuZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XHJcbiAgICAgICAgdGhpcy5kamlubl9tZW51ID0gbmV3IERqaW5uTWVudVNjcmVlbih0aGlzLmdhbWUsIHRoaXMuZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBidXR0b25fcHJlc3MoaW5kZXgpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuYnV0dG9uc19rZXlzW2luZGV4XSkge1xyXG4gICAgICAgICAgICBjYXNlIFwicHN5bmVyZ3lcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLnBzeW5lcmd5X21lbnUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkamlubmlcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLmRqaW5uX21lbnUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpdGVtXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbl9wcmVzc19hY3Rpb24odGhpcy5pdGVtX21lbnUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbl9wcmVzc19hY3Rpb24obWVudSkge1xyXG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUoKTtcclxuICAgICAgICBtZW51Lm9wZW5fbWVudShjbG9zZV90aGlzX21lbnUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcclxuICAgICAgICAgICAgaWYgKGNsb3NlX3RoaXNfbWVudSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZV9tZW51KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih0cnVlKTtcclxuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS51cGRhdGVfcG9zaXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBpc19hY3RpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW5fbWVudSgpIHtcclxuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfY2hhcnNfaW5mbygpO1xyXG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VfbWVudSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNfYWN0aXZlKCkpIHJldHVybjtcclxuICAgICAgICB0aGlzLmRhdGEubWVudV9vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cuY2xvc2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfbWVudShnYW1lLCBkYXRhKSB7XHJcbiAgICBkYXRhLnNwYWNlYmFyX2lucHV0LmFkZCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGRhdGEuaGVyby5pbl9hY3Rpb24oKSB8fCBkYXRhLmluX2JhdHRsZSB8fCAhZGF0YS5jcmVhdGVkKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCFkYXRhLm1lbnVfb3Blbikge1xyXG4gICAgICAgICAgICBkYXRhLm1lbnVfb3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGRhdGEuaGVyby5zdG9wX2NoYXIoKTtcclxuICAgICAgICAgICAgZGF0YS5oZXJvLnVwZGF0ZV9zaGFkb3coKTtcclxuICAgICAgICAgICAgZGF0YS5tZW51X3NjcmVlbi5vcGVuX21lbnUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEubWVudV9zY3JlZW4uaXNfYWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgZGF0YS5tZW51X3NjcmVlbi5jbG9zZV9tZW51KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGhpcyk7XHJcbiAgICByZXR1cm4gbmV3IE1lbnVTY3JlZW4oZ2FtZSwgZGF0YSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgaW5pdGlhbGl6ZV9tYWluX2NoYXJzLCBpbml0aWFsaXplX2NsYXNzZXMgfSBmcm9tICcuL21haW5fY2hhcnMuanMnO1xyXG5pbXBvcnQgeyBpbml0aWFsaXplX2FiaWxpdGllcywgaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMgfSBmcm9tICcuL2FiaWxpdGllcy5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfaXRlbXMgfSBmcm9tICcuL2l0ZW1zLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZV9kamlubmksIGluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMgfSBmcm9tICcuL2RqaW5uaS5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfZW5lbWllcyB9IGZyb20gJy4vZW5lbWllcy5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfbWFwcyB9IGZyb20gJy4vbWFwcy5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfbWVudSB9IGZyb20gJy4uL3NjcmVlbnMvbWVudS5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVfbWlzY19kYXRhIH0gZnJvbSAnLi9taXNjX2RhdGEuanMnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVfZ2FtZV9kYXRhKGdhbWUsIGRhdGEpIHtcclxuICAgIGxldCBsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgY29uc3QgbG9hZF9tYXBzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG4gICAgZGF0YS5pbmZvLm1hcHNfbGlzdCA9IGluaXRpYWxpemVfbWFwcyhnYW1lLCBkYXRhLCBkYXRhLmRicy5tYXBzX2RiLCBsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgIGF3YWl0IGxvYWRfbWFwc19wcm9taXNlO1xyXG5cclxuICAgIGRhdGEuaW5mby5jbGFzc2VzX2xpc3QgPSBpbml0aWFsaXplX2NsYXNzZXMoZGF0YS5kYnMuY2xhc3Nlc19kYik7XHJcblxyXG4gICAgbGV0IGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgIGNvbnN0IGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgICBkYXRhLmluZm8uZW5lbWllc19saXN0ID0gaW5pdGlhbGl6ZV9lbmVtaWVzKGdhbWUsIGRhdGEuZGJzLmVuZW1pZXNfZGIsIGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICBhd2FpdCBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlO1xyXG5cclxuICAgIGRhdGEuaW5mby5kamlubmlfbGlzdCA9IGluaXRpYWxpemVfZGppbm5pKGRhdGEuZGJzLmRqaW5uaV9kYik7XHJcblxyXG4gICAgbGV0IGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgY29uc3QgbG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgbG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgICBkYXRhLmluZm8uZGppbm5pX3Nwcml0ZXMgPSBpbml0aWFsaXplX2RqaW5uaV9zcHJpdGVzKGdhbWUsIGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgIGF3YWl0IGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZTtcclxuICAgIFxyXG4gICAgbGV0IGxvYWRfYWJpbGl0aWVzX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgIGNvbnN0IGxvYWRfYWJpbGl0aWVzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgICBkYXRhLmluZm8uYWJpbGl0aWVzX2xpc3QgPSBpbml0aWFsaXplX2FiaWxpdGllcyhnYW1lLCBkYXRhLmRicy5hYmlsaXRpZXNfZGIsIGxvYWRfYWJpbGl0aWVzX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICBhd2FpdCBsb2FkX2FiaWxpdGllc19wcm9taXNlO1xyXG4gICAgXHJcbiAgICBsZXQgbG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmU7XHJcbiAgICBjb25zdCBsb2FkX2l0ZW1zX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkX2l0ZW1zX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICB9KTtcclxuICAgIGRhdGEuaW5mby5pdGVtc19saXN0ID0gaW5pdGlhbGl6ZV9pdGVtcyhnYW1lLCBkYXRhLmRicy5pdGVtc19kYiwgbG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgYXdhaXQgbG9hZF9pdGVtc19wcm9taXNlO1xyXG5cclxuICAgIGRhdGEuaW5mby5wYXJ0eV9kYXRhID0ge1xyXG4gICAgICAgIG1lbWJlcnM6IFtdLFxyXG4gICAgICAgIGNvaW5zOiBkYXRhLmRicy5pbml0X2RiLmNvaW5zXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBsb2FkX2NoYXJzX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgIGNvbnN0IGxvYWRfY2hhcnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG4gICAgZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0ID0gaW5pdGlhbGl6ZV9tYWluX2NoYXJzKGdhbWUsIGRhdGEuaW5mbywgZGF0YS5kYnMubWFpbl9jaGFyc19kYiwgZGF0YS5kYnMuY2xhc3Nlc19kYiwgbG9hZF9jaGFyc19wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgYXdhaXQgbG9hZF9jaGFyc19wcm9taXNlO1xyXG5cclxuICAgIGxldCBsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgY29uc3QgbG9hZF9taXNjX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG4gICAgZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdCA9IGluaXRpYWxpemVfbWlzY19kYXRhKGdhbWUsIGRhdGEuZGJzLm1pc2NfYW5pbWF0aW9uc19kYiwgbG9hZF9taXNjX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICBhd2FpdCBsb2FkX21pc2NfcHJvbWlzZTtcclxuXHJcbiAgICAvL2luaXRpYWxpemUgZmllbGQgYWJpbGl0aWVzXHJcbiAgICBkYXRhLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3QgPSBpbml0aWFsaXplX2ZpZWxkX2FiaWxpdGllcyhnYW1lLCBkYXRhKTtcclxuXHJcbiAgICAvL2luaXRpYWxpemUgc2NyZWVuc1xyXG4gICAgZGF0YS5tZW51X3NjcmVlbiA9IGluaXRpYWxpemVfbWVudShnYW1lLCBkYXRhKTtcclxufSIsImltcG9ydCB7IE1hcCB9IGZyb20gXCIuLi9NYXAuanNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21hcHMoZ2FtZSwgZGF0YSwgbWFwc19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcclxuICAgIGxldCBtYXBzID0ge307XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcHNfZGIubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBtYXBfZGF0YSA9IG1hcHNfZGJbaV07XHJcbiAgICAgICAgbWFwc1ttYXBfZGF0YS5rZXlfbmFtZV0gPSBuZXcgTWFwKFxyXG4gICAgICAgICAgICBnYW1lLFxyXG4gICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICBtYXBfZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICBtYXBfZGF0YS5rZXlfbmFtZSxcclxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9rZXlfbmFtZSxcclxuICAgICAgICAgICAgbWFwX2RhdGEuY29sbGlzaW9uX2tleV9uYW1lcyxcclxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9maWxlcy5pbWFnZSxcclxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9maWxlcy5qc29uLFxyXG4gICAgICAgICAgICBtYXBfZGF0YS5jb2xsaXNpb25fZmlsZXMsXHJcbiAgICAgICAgICAgIG1hcF9kYXRhLmxhenlfbG9hZFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBsZXQgbG9hZF9wcm9taXNlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgbWFwIGluIG1hcHMpIHtcclxuICAgICAgICBpZiAobWFwc1ttYXBdLmxhenlfbG9hZCkgY29udGludWU7XHJcbiAgICAgICAgbGV0IGxvYWRfbWFwX3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBsb2FkX21hcF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGxvYWRfbWFwX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfbWFwX3Byb21pc2UpO1xyXG4gICAgICAgIG1hcHNbbWFwXS5sb2FkX21hcF9hc3NldHModHJ1ZSwgbG9hZF9tYXBfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgIH1cclxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgcmV0dXJuIG1hcHM7XHJcbn0iLCJpbXBvcnQgeyBDbGFzc2VzIH0gZnJvbSAnLi4vQ2xhc3Nlcy5qcyc7XHJcbmltcG9ydCB7IE1haW5DaGFyLCBNYWluQ2hhckJhc2UgfSBmcm9tICcuLi9NYWluQ2hhci5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9jbGFzc2VzKGNsYXNzZXNfZGIpIHtcclxuICAgIGxldCBjbGFzc2VzX2xpc3QgPSB7fTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlc19kYi5jbGFzc2VzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2xhc3NfZGF0YSA9IGNsYXNzZXNfZGIuY2xhc3Nlc1tpXTtcclxuICAgICAgICBjbGFzc2VzX2xpc3RbY2xhc3NfZGF0YS5rZXlfbmFtZV0gPSBuZXcgQ2xhc3NlcyhcclxuICAgICAgICAgICAgY2xhc3NfZGF0YS5rZXlfbmFtZSxcclxuICAgICAgICAgICAgY2xhc3NfZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX3ZlbnVzX2xldmVsLFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX21lcmN1cnlfbGV2ZWwsXHJcbiAgICAgICAgICAgIGNsYXNzX2RhdGEucmVxdWlyZWRfbWFyc19sZXZlbCxcclxuICAgICAgICAgICAgY2xhc3NfZGF0YS5yZXF1aXJlZF9qdXBpdGVyX2xldmVsLFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLmhwX2Jvb3N0LFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLnBwX2Jvb3N0LFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLmF0a19ib29zdCxcclxuICAgICAgICAgICAgY2xhc3NfZGF0YS5kZWZfYm9vc3QsXHJcbiAgICAgICAgICAgIGNsYXNzX2RhdGEuYWdpX2Jvb3N0LFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLmx1a19ib29zdCxcclxuICAgICAgICAgICAgY2xhc3NfZGF0YS5hYmlsaXR5X2xldmVsX3BhaXJzLFxyXG4gICAgICAgICAgICBjbGFzc19kYXRhLmNsYXNzX3R5cGUsXHJcbiAgICAgICAgICAgIGNsYXNzX2RhdGEudnVsbmVyYWJpbGl0aWVzXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjbGFzc2VzX2xpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21haW5fY2hhcnMoZ2FtZSwgaW5mbywgbWFpbl9jaGFyc19kYiwgY2xhc3Nlc19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcclxuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XHJcbiAgICBsZXQgbWFpbl9jaGFyX2xpc3QgPSB7fTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFpbl9jaGFyc19kYi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGNoYXJfZGF0YSA9IG1haW5fY2hhcnNfZGJbaV07XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2Jhc2UgPSBuZXcgTWFpbkNoYXJCYXNlKFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEua2V5X25hbWUsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5hY3Rpb25zLm1hcChhY3Rpb24gPT4gYWN0aW9uLmtleSksXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS53YWxrX3NwZWVkLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEuZGFzaF9zcGVlZCxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmNsaW1iX3NwZWVkLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEucHVzaF9zcGVlZCxcclxuICAgICAgICApO1xyXG4gICAgICAgIG1haW5fY2hhcl9saXN0W2NoYXJfZGF0YS5rZXlfbmFtZV0gPSBuZXcgTWFpbkNoYXIoXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5rZXlfbmFtZSxcclxuICAgICAgICAgICAgaW5mbyxcclxuICAgICAgICAgICAgc3ByaXRlX2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEuaHBfY3VydmUsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5wcF9jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmF0a19jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmRlZl9jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmFnaV9jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmx1a19jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmV4cF9jdXJ2ZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLnN0YXJ0aW5nX2xldmVsLFxyXG4gICAgICAgICAgICBjbGFzc2VzX2RiLmNsYXNzX3RhYmxlLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEuYmF0dGxlX3NjYWxlLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEudmVudXNfbGV2ZWxfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLm1lcmN1cnlfbGV2ZWxfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLm1hcnNfbGV2ZWxfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmp1cGl0ZXJfbGV2ZWxfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLnZlbnVzX3Bvd2VyX2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tZXJjdXJ5X3Bvd2VyX2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tYXJzX3Bvd2VyX2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5qdXBpdGVyX3Bvd2VyX2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS52ZW51c19yZXNpc3RfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLm1lcmN1cnlfcmVzaXN0X2Jhc2UsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tYXJzX3Jlc2lzdF9iYXNlLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEuanVwaXRlcl9yZXNpc3RfYmFzZSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmlubmF0ZV9hYmlsaXRpZXMsXHJcbiAgICAgICAgICAgIGNoYXJfZGF0YS5pbl9wYXJ0eSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLmRqaW5uaSxcclxuICAgICAgICAgICAgY2hhcl9kYXRhLml0ZW1zLFxyXG4gICAgICAgICAgICBjaGFyX2RhdGEuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9uc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGNoYXJfZGF0YS5pbl9wYXJ0eSkge1xyXG4gICAgICAgICAgICBpbmZvLnBhcnR5X2RhdGEubWVtYmVycy5wdXNoKG1haW5fY2hhcl9saXN0W2NoYXJfZGF0YS5rZXlfbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYXJfZGF0YS5hY3Rpb25zLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGNoYXJfZGF0YS5hY3Rpb25zW2pdO1xyXG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25TcHJpdGVzaGVldChhY3Rpb24ua2V5LCBhY3Rpb24uc3ByaXRlc2hlZXRfaW1nLCBhY3Rpb24uc3ByaXRlc2hlZXQpO1xyXG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKGFjdGlvbi5rZXksIGFjdGlvbi5kaXJlY3Rpb25zLCBhY3Rpb24uZGlyZWN0aW9uc19mcmFtZXNfbnVtYmVyKTtcclxuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbi5rZXksIGFjdGlvbi5mcmFtZV9yYXRlKTtcclxuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uTG9vcChhY3Rpb24ua2V5LCBhY3Rpb24ubG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XHJcblxyXG4gICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxvYWRfcHJvbWlzZXMucHVzaChsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UpO1xyXG4gICAgICAgIHNwcml0ZV9iYXNlLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgfVxyXG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICByZXR1cm4gbWFpbl9jaGFyX2xpc3Q7XHJcbn0iLCJpbXBvcnQgeyBFbmVteUJhc2UgfSBmcm9tICcuLi9FbmVteS5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9lbmVtaWVzKGdhbWUsIGVuZW1pZXNfZGIsIGxvYWRfcHJvbWlzZV9yZXNvbHZlKSB7XHJcbiAgICBsZXQgbG9hZF9wcm9taXNlcyA9IFtdO1xyXG4gICAgbGV0IGVuZW1pZXNfbGlzdCA9IHt9O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmVtaWVzX2RiLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgZW5lbXlfZGF0YSA9IGVuZW1pZXNfZGJbaV07XHJcbiAgICAgICAgZW5lbWllc19saXN0W2VuZW15X2RhdGEua2V5X25hbWVdID0gbmV3IEVuZW15QmFzZShlbmVteV9kYXRhLmtleV9uYW1lLCBlbmVteV9kYXRhLmJhdHRsZV9zY2FsZSwgZW5lbXlfZGF0YSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGVuZW15X2RhdGEuYmF0dGxlX3Nwcml0ZXNoZWV0O1xyXG4gICAgICAgIGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbmVtaWVzX2xpc3RbZW5lbXlfZGF0YS5rZXlfbmFtZV0uc2V0QWN0aW9uU3ByaXRlc2hlZXQoXCJiYXR0bGVcIiwgYWN0aW9uLnNwcml0ZXNoZWV0X2ltZywgYWN0aW9uLnNwcml0ZXNoZWV0KTtcclxuICAgICAgICAgICAgZW5lbWllc19saXN0W2VuZW15X2RhdGEua2V5X25hbWVdLnNldEFjdGlvbkRpcmVjdGlvbnMoXCJiYXR0bGVcIiwgYWN0aW9uLnBvc2l0aW9ucywgYWN0aW9uLmZyYW1lc19udW1iZXIpO1xyXG4gICAgICAgICAgICBlbmVtaWVzX2xpc3RbZW5lbXlfZGF0YS5rZXlfbmFtZV0uc2V0QWN0aW9uRnJhbWVSYXRlKFwiYmF0dGxlXCIsIGFjdGlvbi5mcmFtZV9yYXRlKTtcclxuICAgICAgICAgICAgZW5lbWllc19saXN0W2VuZW15X2RhdGEua2V5X25hbWVdLnNldEFjdGlvbkxvb3AoXCJiYXR0bGVcIiwgYWN0aW9uLmxvb3ApO1xyXG4gICAgICAgICAgICBlbmVtaWVzX2xpc3RbZW5lbXlfZGF0YS5rZXlfbmFtZV0uZ2VuZXJhdGVBbGxGcmFtZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICAgICAgY29uc3QgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2FkX3Byb21pc2VzLnB1c2gobG9hZF9zcHJpdGVzaGVldF9wcm9taXNlKTtcclxuICAgICAgICAgICAgZW5lbWllc19saXN0W2VuZW15X2RhdGEua2V5X25hbWVdLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgcmV0dXJuIGVuZW1pZXNfbGlzdDtcclxufSIsImltcG9ydCB7IERqaW5uIH0gZnJvbSAnLi4vRGppbm4uanMnO1xyXG5pbXBvcnQgeyBTcHJpdGVCYXNlIH0gZnJvbSAnLi4vU3ByaXRlQmFzZS5qcyc7XHJcbmltcG9ydCB7IGVsZW1lbnRzIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfZGppbm5pKGRqaW5uaV9kYikge1xyXG4gICAgbGV0IGRqaW5uaV9saXN0ID0ge307XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRqaW5uaV9kYi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGRqaW5uX2RhdGEgPSBkamlubmlfZGJbaV07XHJcbiAgICAgICAgZGppbm5pX2xpc3RbZGppbm5fZGF0YS5rZXlfbmFtZV0gPSBuZXcgRGppbm4oXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEua2V5X25hbWUsXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEubmFtZSxcclxuICAgICAgICAgICAgZGppbm5fZGF0YS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgZGppbm5fZGF0YS5lbGVtZW50LFxyXG4gICAgICAgICAgICBkamlubl9kYXRhLmFiaWxpdHlfa2V5X25hbWUsXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuaHBfYm9vc3QsXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEucHBfYm9vc3QsXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuYXRrX2Jvb3N0LFxyXG4gICAgICAgICAgICBkamlubl9kYXRhLmRlZl9ib29zdCxcclxuICAgICAgICAgICAgZGppbm5fZGF0YS5hZ2lfYm9vc3QsXHJcbiAgICAgICAgICAgIGRqaW5uX2RhdGEubHVrX2Jvb3N0LFxyXG4gICAgICAgICAgICBpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkamlubmlfbGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMoZ2FtZSwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcclxuICAgIGNvbnN0IGFjdGlvbnMgPSBbXCJzZXRcIiwgXCJzdGFuZGJ5XCJdO1xyXG4gICAgY29uc3QgZGlyZWN0aW9ucyA9IHtcclxuICAgICAgICBzZXQ6IFtcImRvd25cIl0sXHJcbiAgICAgICAgc3RhbmRieTogW1wibGVmdFwiLCBcImRvd25cIl1cclxuICAgIH07XHJcbiAgICBjb25zdCBmcmFtZXNfbnVtYmVyID0gNDtcclxuICAgIGNvbnN0IGZyYW1lc19yYXRlID0ge1xyXG4gICAgICAgIHNldDogNixcclxuICAgICAgICBzdGFuZGJ5OiAyXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYmFzZV9wYXRoID0gXCJhc3NldHMvaW1hZ2VzL3Nwcml0ZXNoZWV0cy9kamlubi9cIjtcclxuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XHJcbiAgICBsZXQgZGppbm5pX3Nwcml0ZXMgPSB7fTtcclxuICAgIGZvciAobGV0IGtleSBpbiBlbGVtZW50cykge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1trZXldO1xyXG4gICAgICAgIGlmIChlbGVtZW50ID09PSBlbGVtZW50cy5OT19FTEVNRU5UKSBjb250aW51ZTtcclxuICAgICAgICBkamlubmlfc3ByaXRlc1tlbGVtZW50XSA9IG5ldyBTcHJpdGVCYXNlKGVsZW1lbnQgKyBcIl9kamlublwiLCBhY3Rpb25zKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFjdGlvbnMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gYWN0aW9uc1tqXTtcclxuICAgICAgICAgICAgZGppbm5pX3Nwcml0ZXNbZWxlbWVudF0uc2V0QWN0aW9uU3ByaXRlc2hlZXQoYWN0aW9uLCBgJHtiYXNlX3BhdGh9JHtlbGVtZW50fV9kamlubi5wbmdgLCBgJHtiYXNlX3BhdGh9JHtlbGVtZW50fV9kamlubi5qc29uYCk7XHJcbiAgICAgICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLnNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLCBkaXJlY3Rpb25zW2FjdGlvbl0sIG5ldyBBcnJheShkaXJlY3Rpb25zW2FjdGlvbl0ubGVuZ3RoKS5maWxsKGZyYW1lc19udW1iZXIpKTtcclxuICAgICAgICAgICAgZGppbm5pX3Nwcml0ZXNbZWxlbWVudF0uc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbiwgZnJhbWVzX3JhdGVbYWN0aW9uXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLmdlbmVyYXRlQWxsRnJhbWVzKCk7XHJcblxyXG4gICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcclxuICAgICAgICBjb25zdCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxvYWRfcHJvbWlzZXMucHVzaChsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UpO1xyXG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xyXG4gICAgfVxyXG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICByZXR1cm4gZGppbm5pX3Nwcml0ZXM7XHJcbn0iLCJpbXBvcnQgeyBBYmlsaXR5IH0gZnJvbSAnLi4vQWJpbGl0eS5qcyc7XHJcbmltcG9ydCB7IE1vdmVGaWVsZFBzeW5lcmd5IH0gZnJvbSAnLi4vZmllbGRfYWJpbGl0aWVzL21vdmUuanMnO1xyXG5pbXBvcnQgeyBGcm9zdEZpZWxkUHN5bmVyZ3kgfSBmcm9tICcuLi9maWVsZF9hYmlsaXRpZXMvZnJvc3QuanMnO1xyXG5pbXBvcnQgeyBHcm93dGhGaWVsZFBzeW5lcmd5IH0gZnJvbSAnLi4vZmllbGRfYWJpbGl0aWVzL2dyb3d0aC5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9hYmlsaXRpZXMoZ2FtZSwgYWJpbGl0aWVzX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xyXG4gICAgbGV0IGFiaWxpdGllc19saXN0ID0ge307XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFiaWxpdGllc19kYi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGFiaWxpdHlfZGF0YSA9IGFiaWxpdGllc19kYltpXTtcclxuICAgICAgICBhYmlsaXRpZXNfbGlzdFthYmlsaXR5X2RhdGEua2V5X25hbWVdID0gbmV3IEFiaWxpdHkoXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5rZXlfbmFtZSxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLm5hbWUsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLnR5cGUsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5lbGVtZW50LFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuYmF0dGxlX3RhcmdldCxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLnJhbmdlLFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEucHBfY29zdCxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmFiaWxpdHlfcG93ZXIsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5lZmZlY3RzX291dHNpZGVfYmF0dGxlLFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaXNfYmF0dGxlX2FiaWxpdHksXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5pc19maWVsZF9wc3luZXJneSxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmVmZmVjdHMsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5hYmlsaXR5X2NhdGVnb3J5LFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuYmF0dGxlX2FuaW1hdGlvbl9rZXksXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5wcmlvcml0eV9tb3ZlLFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaGFzX2NyaXRpY2FsLFxyXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuY3JpdF9tdWx0X2ZhY3RvcixcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmNhbl9zd2l0Y2hfdG9fdW5sZWFzaCxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmNhbl9iZV9ldmFkZWQsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS51c2VfZGltaW5pc2hpbmdfcmF0aW8sXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5tc2dfdHlwZSxcclxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmFmZmVjdHNfcHAsXHJcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5oYXNfYW5pbWF0aW9uX3ZhcmlhdGlvblxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsb2FkZXIgPSBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgnYWJpbGl0aWVzX2ljb25zJywgJ2Fzc2V0cy9pbWFnZXMvaWNvbnMvYWJpbGl0aWVzL2FiaWxpdGllc19pY29ucy5wbmcnLCAnYXNzZXRzL2ltYWdlcy9pY29ucy9hYmlsaXRpZXMvYWJpbGl0aWVzX2ljb25zLmpzb24nKTtcclxuICAgIGxvYWRlci5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgIGdhbWUubG9hZC5zdGFydCgpO1xyXG4gICAgcmV0dXJuIGFiaWxpdGllc19saXN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMoZ2FtZSwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtb3ZlOiBuZXcgTW92ZUZpZWxkUHN5bmVyZ3koZ2FtZSwgZGF0YSksXHJcbiAgICAgICAgZnJvc3Q6IG5ldyBGcm9zdEZpZWxkUHN5bmVyZ3koZ2FtZSwgZGF0YSksXHJcbiAgICAgICAgZ3Jvd3RoOiBuZXcgR3Jvd3RoRmllbGRQc3luZXJneShnYW1lLCBkYXRhKVxyXG4gICAgfTtcclxufSIsImltcG9ydCB7IEl0ZW0gfSBmcm9tICcuLi9JdGVtLmpzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2l0ZW1zKGdhbWUsIGl0ZW1zX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xyXG4gICAgbGV0IGl0ZW1zX2xpc3QgPSB7fTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNfZGIubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtX2RhdGEgPSBpdGVtc19kYltpXTtcclxuICAgICAgICBpdGVtc19saXN0W2l0ZW1fZGF0YS5rZXlfbmFtZV0gPSBuZXcgSXRlbShcclxuICAgICAgICAgICAgaXRlbV9kYXRhLmtleV9uYW1lLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEubmFtZSxcclxuICAgICAgICAgICAgaXRlbV9kYXRhLnR5cGUsXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgaXRlbV9kYXRhLnVzZV90eXBlLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEuY3Vyc2VzX3doZW5fZXF1aXBwZWQsXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5jYW50X2JlX3JlbW92ZWQsXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5yYXJlX2l0ZW0sXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5pbXBvcmFudF9pdGVtLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEuY2FycnlfdXBfdG9fMzAsXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5lZmZlY3RzLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEuYXR0cmlidXRlLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEudW5sZWFzaF9hYmlsaXR5LFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEudW5sZWFzaF9yYXRlLFxyXG4gICAgICAgICAgICBpdGVtX2RhdGEudXNlX2FiaWxpdHksXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5lcXVpcGFibGVfY2hhcnMsXHJcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5wcmljZSxcclxuICAgICAgICAgICAgaXRlbV9kYXRhLmdyYW50ZWRfYWJpbGl0eSxcclxuICAgICAgICAgICAgaXRlbV9kYXRhLmljb25fcGF0aFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsb2FkZXIgPSBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgnaXRlbXNfaWNvbnMnLCAnYXNzZXRzL2ltYWdlcy9pY29ucy9pdGVtcy9pdGVtc19pY29ucy5wbmcnLCAnYXNzZXRzL2ltYWdlcy9pY29ucy9pdGVtcy9pdGVtc19pY29ucy5qc29uJyk7XHJcbiAgICBsb2FkZXIub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICBnYW1lLmxvYWQuc3RhcnQoKTtcclxuICAgIHJldHVybiBpdGVtc19saXN0O1xyXG59XHJcbiIsImltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tICcuLi9TcHJpdGVCYXNlLmpzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21pc2NfZGF0YShnYW1lLCBtaXNjX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xyXG4gICAgbGV0IG1pc2Nfc3ByaXRlX2Jhc2VfbGlzdCA9IHt9O1xyXG4gICAgbGV0IGxvYWRfcHJvbWlzZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWlzY19kYi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IG1pc2NfZGF0YSA9IG1pc2NfZGJbaV07XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2Jhc2UgPSBuZXcgU3ByaXRlQmFzZShtaXNjX2RhdGEua2V5X25hbWUsIG1pc2NfZGF0YS5hY3Rpb25zLm1hcChhY3Rpb24gPT4gYWN0aW9uLmtleV9uYW1lKSk7XHJcbiAgICAgICAgbWlzY19zcHJpdGVfYmFzZV9saXN0W21pc2NfZGF0YS5rZXlfbmFtZV0gPSBzcHJpdGVfYmFzZTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1pc2NfZGF0YS5hY3Rpb25zLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IG1pc2NfZGF0YS5hY3Rpb25zW2pdO1xyXG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25TcHJpdGVzaGVldChhY3Rpb24ua2V5X25hbWUsIGFjdGlvbi5zcHJpdGVzaGVldC5pbWFnZSwgYWN0aW9uLnNwcml0ZXNoZWV0Lmpzb24pO1xyXG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKGFjdGlvbi5rZXlfbmFtZSwgYWN0aW9uLmFuaW1hdGlvbnMsIGFjdGlvbi5mcmFtZXNfY291bnQpO1xyXG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25GcmFtZVJhdGUoYWN0aW9uLmtleV9uYW1lLCBhY3Rpb24uZnJhbWVfcmF0ZSk7XHJcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkxvb3AoYWN0aW9uLmtleV9uYW1lLCBhY3Rpb24ubG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XHJcbiAgICAgICAgbGV0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlO1xyXG4gICAgICAgIGNvbnN0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSk7XHJcbiAgICAgICAgc3ByaXRlX2Jhc2UubG9hZFNwcml0ZXNoZWV0cyhnYW1lLCB0cnVlLCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSk7XHJcbiAgICB9XHJcbiAgICBQcm9taXNlLmFsbChsb2FkX3Byb21pc2VzKS50aGVuKGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcclxuICAgIHJldHVybiBtaXNjX3Nwcml0ZV9iYXNlX2xpc3Q7XHJcbn0iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycy5qcyc7XHJcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBXaW5kb3cgfSBmcm9tICcuL1dpbmRvdy5qcyc7XHJcblxyXG5jb25zdCBESUFMT0dfQ1JZU1RBTF9LRVkgPSBcImRpYWxvZ19jcnlzdGFsXCI7XHJcblxyXG4vL0EgZGlhbG9nIGNhbiBiZSBkaXZpZGVkIGluIE4gd2luZG93cy4gRWFjaCBkaXZpc2lvbiBoYXMgYSBzdGVwIGluZGV4LlxyXG4vL1RvIHNldCBhIGRpYWxvZywgY2FsbCB0aGUgRGlhbG9nTWFuYWdlci5zZXRfZGlhbG9nIGZ1bmN0aW9uIGFuZCBwYXNzIHRoZSBlbnRpcmUgZGlhbG9nIHRleHQuXHJcbi8vVG8gYWR2YW5jZSB0aGUgZGlhbG9nIChjYWxsIG5leHQgd2luZG93KSwgY2FsbCB0aGUgRGlhbG9nTWFuYWdlci5uZXh0IGZ1bmN0aW9uLlxyXG5leHBvcnQgY2xhc3MgRGlhbG9nTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBpdGFsaWNfZm9udCA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IG51bGw7IC8vcGFydHMgb2YgdGhlIGRpYWxvZyB0ZXh0XHJcbiAgICAgICAgdGhpcy5zdGVwID0gMDsgLy9zdGVwIGluZGV4XHJcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXZhdGFyID0gbnVsbDtcclxuICAgICAgICB0aGlzLndpbmRvdyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93ID0gbnVsbDtcclxuICAgICAgICB0aGlzLml0YWxpY19mb250ID0gaXRhbGljX2ZvbnQ7XHJcbiAgICAgICAgdGhpcy5oZXJvX2RpcmVjdGlvbiA9IHV0aWxzLmRpcmVjdGlvbnMuZG93bjtcclxuICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsX3Nwcml0ZV9iYXNlID0gdGhpcy5kYXRhLmluZm8ubWlzY19zcHJpdGVfYmFzZV9saXN0W0RJQUxPR19DUllTVEFMX0tFWV07XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KERJQUxPR19DUllTVEFMX0tFWSk7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbCA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsIHNwcml0ZV9rZXkpO1xyXG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2Uuc2V0QW5pbWF0aW9uKHRoaXMuZGlhbG9nX2NyeXN0YWwsIERJQUxPR19DUllTVEFMX0tFWSk7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF9hbmltX2tleSA9IHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KERJQUxPR19DUllTVEFMX0tFWSwgXCJyb3RhdGVcIik7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2VlbiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy9JbnRlcm5hbCBtZXRob2QuIFRyeSB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkaWFsb2cgd2luZG93XHJcbiAgICBnZXRfZGlhbG9nX3dpbmRvd19wb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgY29uc3QgeCA9IChudW1iZXJzLkdBTUVfV0lEVEggLSB3aWR0aCkgPj4gMTtcclxuICAgICAgICBsZXQgeSA9IChudW1iZXJzLk1BWF9ESUFHX1dJTl9IRUlHSFQgLSBoZWlnaHQpID4+IDE7XHJcbiAgICAgICAgaWYgKCFbdXRpbHMuZGlyZWN0aW9ucy51cCwgdXRpbHMuZGlyZWN0aW9ucy51cF9sZWZ0LCB1dGlscy5kaXJlY3Rpb25zLnVwX3JpZ2h0XS5pbmNsdWRlcyh0aGlzLmhlcm9fZGlyZWN0aW9uKSkge1xyXG4gICAgICAgICAgICB5ID0gbnVtYmVycy5HQU1FX0hFSUdIVCAtIChudW1iZXJzLk1BWF9ESUFHX1dJTl9IRUlHSFQgKyA0KSArIHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XHJcbiAgICB9XHJcblxyXG4gICAgLy9JbnRlcm5hbCBtZXRob2QuIFRyeSB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBhdmF0YXIgd2luZG93XHJcbiAgICBnZXRfYXZhdGFyX3Bvc2l0aW9uKHdpbl9wb3MpIHtcclxuICAgICAgICBjb25zdCB4ID0gKCh0aGlzLnBhcnRzW3RoaXMuc3RlcF0ud2lkdGggPj4gMikgKyB3aW5fcG9zLngpIHwgMDtcclxuICAgICAgICBsZXQgeTtcclxuICAgICAgICBpZiAod2luX3Bvcy55ID49IG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkge1xyXG4gICAgICAgICAgICB5ID0gd2luX3Bvcy55IC0gbnVtYmVycy5BVkFUQVJfU0laRSAtIDg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeSA9IHdpbl9wb3MueSArIHRoaXMucGFydHNbdGhpcy5zdGVwXS5oZWlnaHQgKyA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge3g6IHgsIHk6IHl9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vc2V0IGN1cnJlbnQgYXZhdGFyIGtleSBuYW1lXHJcbiAgICBzZXRfYXZhdGFyKGF2YXRhcikge1xyXG4gICAgICAgIHRoaXMuYXZhdGFyID0gYXZhdGFyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vc2V0IGN1cnJlbnQgaGVybyBkaXJlY3Rpb25cclxuICAgIHNldF9oZXJvX2RpcmVjdGlvbihoZXJvX2RpcmVjdGlvbikge1xyXG4gICAgICAgIGlmIChoZXJvX2RpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVyb19kaXJlY3Rpb24gPSBoZXJvX2RpcmVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9DYWxscyB0aGUgbmV4dCBkaWFsb2cgd2luZG93LiBJZiB0aGUgZGlhbG9nIGlzIGZpbmlzaGVkLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZS5cclxuICAgIG5leHQoY2FsbGJhY2ssIGN1c3RvbV9wb3MsIGN1c3RvbV9hdmF0YXJfcG9zKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXZhdGFyX3dpbmRvdykge1xyXG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cuZGVzdHJveShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN0ZXAgPj0gdGhpcy5wYXJ0cy5sZW5ndGgpIHsgLy9maW5pc2hlcyB0aGUgZGlhbG9nXHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5kZXN0cm95KHRydWUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy53aW5kb3cpIHsgLy9kZXN0cm95cyB0aGUgY3VycmVudCB3aW5kb3dcclxuICAgICAgICAgICAgdGhpcy53aW5kb3cuZGVzdHJveShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIGxldCB3aW5fcG9zID0gdGhpcy5nZXRfZGlhbG9nX3dpbmRvd19wb3NpdGlvbih0aGlzLnBhcnRzW3RoaXMuc3RlcF0ud2lkdGgsIHRoaXMucGFydHNbdGhpcy5zdGVwXS5oZWlnaHQpO1xyXG4gICAgICAgIGlmIChjdXN0b21fcG9zICYmIGN1c3RvbV9wb3MueCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdpbl9wb3MueCA9IGN1c3RvbV9wb3MueDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN1c3RvbV9wb3MgJiYgY3VzdG9tX3Bvcy55ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgd2luX3Bvcy55ID0gY3VzdG9tX3Bvcy55O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB3aW5fcG9zLngsIHdpbl9wb3MueSwgdGhpcy5wYXJ0c1t0aGlzLnN0ZXBdLndpZHRoLCB0aGlzLnBhcnRzW3RoaXMuc3RlcF0uaGVpZ2h0LCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdygoKHN0ZXAsIGl0YWxpY19mb250LCBuZXh0X2NhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0KHRoaXMucGFydHNbc3RlcF0ubGluZXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQgLCBpdGFsaWNfZm9udCwgdHJ1ZSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA8IHRoaXMucGFydHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC54ID0gdGhpcy53aW5kb3cucmVhbF94ICsgdGhpcy5wYXJ0c1tzdGVwXS53aWR0aCAtIHRoaXMuZGlhbG9nX2NyeXN0YWwud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC55ID0gdGhpcy53aW5kb3cucmVhbF95ICsgdGhpcy5wYXJ0c1tzdGVwXS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5kaWFsb2dfY3J5c3RhbC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnNldENoaWxkSW5kZXgodGhpcy5kaWFsb2dfY3J5c3RhbCwgcGFyZW50LmdldENoaWxkSW5kZXgodGhpcy53aW5kb3cuZ3JvdXApKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsLnBsYXkodGhpcy5kaWFsb2dfY3J5c3RhbF9hbmltX2tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHdlZW5fdG9feSA9IFt0aGlzLmRpYWxvZ19jcnlzdGFsLnkgLSAodGhpcy5kaWFsb2dfY3J5c3RhbC5oZWlnaHQgPj4gMSksIHRoaXMuZGlhbG9nX2NyeXN0YWwueV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gJiYgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gPSB0aGlzLmdhbWUudHdlZW5zLmNyZWF0ZSh0aGlzLmRpYWxvZ19jcnlzdGFsKS50byh7eTogdHdlZW5fdG9feX0sIDE0MDAsIFBoYXNlci5FYXNpbmcuUXVhZHJhdGljLkluT3V0LCB0cnVlLCAwLCAtMSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpYWxvZ19jcnlzdGFsX3R3ZWVuICYmIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4uaXNSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4uc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHRfY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuYmluZCh0aGlzLCB0aGlzLnN0ZXAsIHRoaXMuaXRhbGljX2ZvbnQsIGNhbGxiYWNrKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYXZhdGFyKSB7XHJcbiAgICAgICAgICAgIGxldCBhdmF0YXJfcG9zID0gdGhpcy5nZXRfYXZhdGFyX3Bvc2l0aW9uKHdpbl9wb3MpO1xyXG4gICAgICAgICAgICBpZiAoY3VzdG9tX2F2YXRhcl9wb3MgJiYgY3VzdG9tX2F2YXRhcl9wb3MueCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhdmF0YXJfcG9zLnggPSBjdXN0b21fYXZhdGFyX3Bvcy54O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXN0b21fYXZhdGFyX3BvcyAmJiBjdXN0b21fYXZhdGFyX3Bvcy55ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGF2YXRhcl9wb3MueSA9IGN1c3RvbV9hdmF0YXJfcG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgd2luZG93X3NpemUgPSBudW1iZXJzLkFWQVRBUl9TSVpFICsgNDtcclxuICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIGF2YXRhcl9wb3MueCwgYXZhdGFyX3Bvcy55LCB3aW5kb3dfc2l6ZSwgd2luZG93X3NpemUpO1xyXG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKDQsIDQsIFwiYXZhdGFyc1wiLCB1bmRlZmluZWQsIHRoaXMuYXZhdGFyKTtcclxuICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93LnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKyt0aGlzLnN0ZXA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy9SZWNlaXZlcyBhIHRleHQgc3RyaW5nIGFuZCBtb3VudCB0aGUgdGhlIGRpYWxvZyBzZWN0aW9ucyB0aGF0IHdpbGwgZ28gdG8gZWFjaCB3aW5kb3cgb2YgdGhlIGRpYWxvZy5cclxuICAgIC8vT3B0aW9uYWxseSwgYWxzbyByZWNlaXZlcyBhbiBpbml0aWFsIGF2YXRhciBhbmQgdGhlIGhlcm8gdGFsa2luZyBkaXJlY3Rpb25cclxuICAgIHNldF9kaWFsb2codGV4dCwgYXZhdGFyLCBoZXJvX2RpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuc2V0X2F2YXRhcihhdmF0YXIpO1xyXG4gICAgICAgIHRoaXMuc2V0X2hlcm9fZGlyZWN0aW9uKGhlcm9fZGlyZWN0aW9uKTtcclxuICAgICAgICBjb25zdCBtYXhfZWZlY3RpdmVfd2lkdGggPSBudW1iZXJzLk1BWF9ESUFHX1dJTl9XSURUSCAtIDIgKiBudW1iZXJzLldJTkRPV19QQURESU5HX0ggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEg7XHJcbiAgICAgICAgbGV0IHdvcmRzID0gdGV4dC5zcGxpdCgnICcpO1xyXG4gICAgICAgIGxldCB3aW5kb3dzID0gW107IC8vYXJyYXkgb2YgbGluZXNcclxuICAgICAgICBsZXQgbGluZXMgPSBbXTsgLy9hcnJheSBvZiBzdHJpbmdzXHJcbiAgICAgICAgbGV0IGxpbmUgPSBbXTsgLy9hcnJheSBvZiB3b3Jkc1xyXG4gICAgICAgIGxldCBsaW5lX3dpZHRoID0gMDsgLy9pbiBweFxyXG4gICAgICAgIGxldCBtYXhfd2luZG93X3dpZHRoID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmQgPSB3b3Jkc1tpXTtcclxuICAgICAgICAgICAgbGluZV93aWR0aCA9IHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgbGluZS5qb2luKCcgJykgKyB3b3JkLCB0aGlzLml0YWxpY19mb250KTtcclxuICAgICAgICAgICAgaWYgKGxpbmVfd2lkdGggPj0gbWF4X2VmZWN0aXZlX3dpZHRoKSB7IC8vY2hlY2sgaWYgaXQncyB0aGUgZW5kIG9mIHRoZSBsaW5lXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lX3RleHQgPSBsaW5lLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2gobGluZV90ZXh0KTtcclxuICAgICAgICAgICAgICAgIG1heF93aW5kb3dfd2lkdGggPSBNYXRoLm1heChtYXhfd2luZG93X3dpZHRoLCB1dGlscy5nZXRfdGV4dF93aWR0aCh0aGlzLmdhbWUsIGxpbmVfdGV4dCwgdGhpcy5pdGFsaWNfZm9udCkpO1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGluZS5wdXNoKHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgbGluZV93aWR0aCA9IHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgd29yZCwgdGhpcy5pdGFsaWNfZm9udCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID09PSBudW1iZXJzLk1BWF9MSU5FU19QRVJfRElBR19XSU4pIHsgLy9jaGVjayBpZiBpdCdzIHRoZSBlbmQgb2YgdGhlIHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBsaW5lcy5zbGljZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbWF4X3dpbmRvd193aWR0aCArIDIgKiBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgKyBudW1iZXJzLldJTkRPV19QQURESU5HX0JPVFRPTSArIGxpbmVzLmxlbmd0aCAqIChudW1iZXJzLkZPTlRfU0laRSArIG51bWJlcnMuU1BBQ0VfQkVUV0VFTl9MSU5FUykgLSBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVNcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXhfd2luZG93X3dpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGluZS5wdXNoKHdvcmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCkgeyAvL2RlYWwgd2l0aCB0aGUgbGFzdCB3aW5kb3cgdGhhdCBkb2VzIG5vdCBoYXZlIDMgbGluZXNcclxuICAgICAgICAgICAgbWF4X3dpbmRvd193aWR0aCA9IE1hdGgubWF4KG1heF93aW5kb3dfd2lkdGgsIHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgbGluZS5qb2luKCcgJyksIHRoaXMuaXRhbGljX2ZvbnQpKTtcclxuICAgICAgICAgICAgbGluZXMucHVzaChsaW5lLmpvaW4oJyAnKSk7XHJcbiAgICAgICAgICAgIHdpbmRvd3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBsaW5lczogbGluZXMuc2xpY2UoKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBtYXhfd2luZG93X3dpZHRoICsgMiAqIG51bWJlcnMuV0lORE9XX1BBRERJTkdfSCArIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCArIDIsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG51bWJlcnMuV0lORE9XX1BBRERJTkdfVE9QICsgbnVtYmVycy5XSU5ET1dfUEFERElOR19CT1RUT00gKyBsaW5lcy5sZW5ndGggKiAobnVtYmVycy5GT05UX1NJWkUgKyBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMpIC0gbnVtYmVycy5TUEFDRV9CRVRXRUVOX0xJTkVTXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IHdpbmRvd3M7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCBpc19jbG9zZSwgcmV2ZXJzZV9kaXJlY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7IERpYWxvZ01hbmFnZXIgfSBmcm9tIFwiLi4vRGlhbG9nTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQgeyBucGNfdHlwZXMgfSBmcm9tIFwiLi4vTlBDLmpzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaW50ZXJhY3Rpb25fcGF0dGVybnMgPSB7XHJcbiAgICBUSUtfVEFLX1RPRTogXCJ0aWtfdGFrX3RvZVwiLFxyXG4gICAgQ1JPU1M6IFwiY3Jvc3NcIlxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVFdmVudE1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLm9uX2V2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5maXJlX25leHRfc3RlcCA9ICgpID0+IHt9O1xyXG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2xzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2NvbnRyb2xzKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5kYXRhLmluX2JhdHRsZSB8fCAhdGhpcy5jb250cm9sX2VuYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbl9ldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlX25leHRfc3RlcCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZm9yX25wYygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoX2Zvcl9ucGMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLm5wY3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgbnBjID0gdGhpcy5kYXRhLm1hcC5ucGNzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBpc19jbG9zZV9jaGVjayA9IGlzX2Nsb3NlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUueCxcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55LFxyXG4gICAgICAgICAgICAgICAgbnBjLnNwcml0ZS54LFxyXG4gICAgICAgICAgICAgICAgbnBjLnNwcml0ZS55LFxyXG4gICAgICAgICAgICAgICAgbnBjLnRhbGtfcmFuZ2VfZmFjdG9yXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChpc19jbG9zZV9jaGVjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3RvcF9jaGFyKClcclxuICAgICAgICAgICAgICAgIHRoaXMub25fZXZlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfbnBjX2V2ZW50KG5wYyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRfbnBjX2V2ZW50KG5wYykge1xyXG4gICAgICAgIGlmIChucGMubnBjX3R5cGUgPT09IG5wY190eXBlcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgaWYgKG5wYy5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaWFsb2dfbWFuYWdlciA9IG5ldyBEaWFsb2dNYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGRpYWxvZ19tYW5hZ2VyLnNldF9kaWFsb2cobnBjLm1lc3NhZ2UsIG5wYy5hdmF0YXIsIHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5wY194ID0gbnBjLnNwcml0ZS54O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbnBjX3kgPSBucGMuc3ByaXRlLnk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcmFjdGlvbl9wYXR0ZXJuID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbbnBjLmtleV9uYW1lXS5pbnRlcmFjdGlvbl9wYXR0ZXJuO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJhY3Rpb25fZGlyZWN0aW9ucyA9IEdhbWVFdmVudE1hbmFnZXIuZ2V0X2ludGVyYWN0aW9uX2RpcmVjdGlvbnMoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLngsIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55LCBucGNfeCwgbnBjX3ksIGludGVyYWN0aW9uX3BhdHRlcm4sIG5wYy5ib2R5X3JhZGl1cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZGlyZWN0aW9uKGludGVyYWN0aW9uX2RpcmVjdGlvbnMuaGVyb19kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2ludGVyYWN0aW9uX2RpcmVjdGlvbnMuaGVyb19kaXJlY3Rpb25dKTtcclxuICAgICAgICAgICAgICAgIG5wYy5wbGF5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbaW50ZXJhY3Rpb25fZGlyZWN0aW9ucy50YXJnZXRfZGlyZWN0aW9uXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVfbmV4dF9zdGVwID0gZGlhbG9nX21hbmFnZXIubmV4dC5iaW5kKGRpYWxvZ19tYW5hZ2VyLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpYWxvZ19tYW5hZ2VyLmZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25fZXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbF9hY3Rpb24gPSB0aGlzLmRhdGEuZGJzLm5wY19kYltucGMua2V5X25hbWVdLmluaXRpYWxfYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsX2RpcmVjdGlvbiA9IHRoaXMuZGF0YS5kYnMubnBjX2RiW25wYy5rZXlfbmFtZV0uYWN0aW9uc1tpbml0aWFsX2FjdGlvbl0uaW5pdGlhbF9kaXJlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wYy5wbGF5KGluaXRpYWxfYWN0aW9uLCBpbml0aWFsX2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9ucGNfZXZlbnRzKG5wYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9lbmFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVfbmV4dF9zdGVwKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVfbnBjX2V2ZW50cyhucGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpcmVfbnBjX2V2ZW50cyhucGMpIHtcclxuICAgICAgICBucGMuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5maXJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldF9pbnRlcmFjdGlvbl9kaXJlY3Rpb25zKGhlcm9feCwgaGVyb195LCB0YXJnZXRfeCwgdGFyZ2V0X3ksIGludGVyYWN0aW9uX3BhdHRlcm4sIHRhcmdldF9ib2R5X3JhZGl1cykge1xyXG4gICAgICAgIGxldCB0YXJnZXRfZGlyZWN0aW9uO1xyXG4gICAgICAgIGlmIChpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5DUk9TUykge1xyXG4gICAgICAgICAgICBsZXQgcG9zaXRpdmVfbGltaXQgPSBoZXJvX3ggKyAoLXRhcmdldF95IC0gdGFyZ2V0X3gpO1xyXG4gICAgICAgICAgICBsZXQgbmVnYXRpdmVfbGltaXQgPSAtaGVyb194ICsgKC10YXJnZXRfeSArIHRhcmdldF94KTtcclxuICAgICAgICAgICAgaWYgKC1oZXJvX3kgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWhlcm9feSA+PSBuZWdhdGl2ZV9saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMudXA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLWhlcm9feSA8PSBwb3NpdGl2ZV9saW1pdCAmJiAtaGVyb195ID49IG5lZ2F0aXZlX2xpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5yaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgtaGVyb195IDw9IHBvc2l0aXZlX2xpbWl0ICYmIC1oZXJvX3kgPD0gbmVnYXRpdmVfbGltaXQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd247XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLWhlcm9feSA+PSBwb3NpdGl2ZV9saW1pdCAmJiAtaGVyb195IDw9IG5lZ2F0aXZlX2xpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVyb19kaXJlY3Rpb247XHJcbiAgICAgICAgaWYgKGhlcm9feCA8PSB0YXJnZXRfeCAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcclxuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwX3JpZ2h0O1xyXG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLmRvd25fbGVmdCA6IHRhcmdldF9kaXJlY3Rpb247XHJcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPD0gdGFyZ2V0X3ggLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195ID49IHRhcmdldF95IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA8PSB0YXJnZXRfeSArIHRhcmdldF9ib2R5X3JhZGl1cykge1xyXG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XHJcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMubGVmdCA6IHRhcmdldF9kaXJlY3Rpb247XHJcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPD0gdGFyZ2V0X3ggLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195IDw9IHRhcmdldF95IC0gdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XHJcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5kb3duX3JpZ2h0O1xyXG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnVwX2xlZnQgOiB0YXJnZXRfZGlyZWN0aW9uO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194ID49IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feCA8PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPD0gdGFyZ2V0X3kgLSB0YXJnZXRfYm9keV9yYWRpdXMpIHtcclxuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd247XHJcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMudXAgOiB0YXJnZXRfZGlyZWN0aW9uO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194ID49IHRhcmdldF94ICsgdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA8PSB0YXJnZXRfeSAtIHRhcmdldF9ib2R5X3JhZGl1cykge1xyXG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bl9sZWZ0O1xyXG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnVwX3JpZ2h0IDogdGFyZ2V0X2RpcmVjdGlvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKGhlcm9feCA+PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195IDw9IHRhcmdldF95ICsgdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XHJcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5sZWZ0O1xyXG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnJpZ2h0IDogdGFyZ2V0X2RpcmVjdGlvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKGhlcm9feCA+PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcclxuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwX2xlZnQ7XHJcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMuZG93bl9yaWdodCA6IHRhcmdldF9kaXJlY3Rpb247XHJcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPj0gdGFyZ2V0X3ggLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb194IDw9IHRhcmdldF94ICsgdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA+PSB0YXJnZXRfeSArIHRhcmdldF9ib2R5X3JhZGl1cykge1xyXG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMudXA7XHJcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMuZG93biA6IHRhcmdldF9kaXJlY3Rpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge2hlcm9fZGlyZWN0aW9uOiBoZXJvX2RpcmVjdGlvbiwgdGFyZ2V0X2RpcmVjdGlvbjogdGFyZ2V0X2RpcmVjdGlvbn07XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9