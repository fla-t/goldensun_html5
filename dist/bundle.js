!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=32)}([function(t,e,i){"use strict";i.r(e),i.d(e,"GAME_WIDTH",(function(){return s})),i.d(e,"GAME_HEIGHT",(function(){return n})),i.d(e,"TARGET_FPS",(function(){return a})),i.d(e,"HERO_BODY_RADIUS",(function(){return r})),i.d(e,"INV_SQRT2",(function(){return _})),i.d(e,"DELTA_TIME_FACTOR",(function(){return o})),i.d(e,"MAP_DAMPING",(function(){return h})),i.d(e,"DEFAULT_WINDOW_COLOR",(function(){return c})),i.d(e,"DEFAULT_FONT_COLOR",(function(){return l})),i.d(e,"YELLOW_FONT_COLOR",(function(){return d})),i.d(e,"RED_FONT_COLOR",(function(){return p})),i.d(e,"BLUE_FONT_COLOR",(function(){return u})),i.d(e,"PURPLE_FONT_COLOR",(function(){return g})),i.d(e,"FONT_SIZE",(function(){return m})),i.d(e,"INSIDE_BORDER_WIDTH",(function(){return y})),i.d(e,"OUTSIDE_BORDER_WIDTH",(function(){return b})),i.d(e,"WINDOW_PADDING_H",(function(){return f})),i.d(e,"WINDOW_PADDING_TOP",(function(){return w})),i.d(e,"WINDOW_PADDING_BOTTOM",(function(){return v})),i.d(e,"SPACE_BETWEEN_LINES",(function(){return x})),i.d(e,"MAX_DIAG_WIN_WIDTH",(function(){return k})),i.d(e,"MAX_LINES_PER_DIAG_WIN",(function(){return E})),i.d(e,"MAX_DIAG_WIN_HEIGHT",(function(){return j})),i.d(e,"PUSH_TIME",(function(){return T})),i.d(e,"ICON_WIDTH",(function(){return A})),i.d(e,"ICON_HEIGHT",(function(){return S})),i.d(e,"degree15",(function(){return O})),i.d(e,"degree30",(function(){return I})),i.d(e,"degree60",(function(){return P})),i.d(e,"degree90",(function(){return R})),i.d(e,"degree180",(function(){return M})),i.d(e,"degree270",(function(){return N})),i.d(e,"degree360",(function(){return D})),i.d(e,"degree540",(function(){return q})),i.d(e,"CAMERA_LERP",(function(){return L})),i.d(e,"ELEM_ATTR_MIN",(function(){return C})),i.d(e,"ELEM_ATTR_MAX",(function(){return H})),i.d(e,"AVATAR_SIZE",(function(){return W}));const s=240,n=160,a=60,r=7,_=1/Math.sqrt(2),o=50/3,h=1,c=24704,l=16316664,d=16316480,p=16252928,u=248,g=14708912,m=8,y=3,b=1,f=4,w=8,v=4,x=8,k=180,E=3,j=m*E+x*(E-1)+w+v,T=850,A=14,S=14,O=15*Math.PI/180,I=30*Math.PI/180,P=60*Math.PI/180,R=Math.PI/2,M=Math.PI,N=3*Math.PI/2,D=2*Math.PI,q=3*Math.PI,L=.15,C=-200,H=200,W=32},function(t,e,i){"use strict";i.r(e),i.d(e,"elements",(function(){return n})),i.d(e,"ordered_elements",(function(){return a})),i.d(e,"element_names",(function(){return r})),i.d(e,"directions",(function(){return o})),i.d(e,"directions_count",(function(){return h})),i.d(e,"reverse_directions",(function(){return c})),i.d(e,"base_actions",(function(){return l})),i.d(e,"directions_angles",(function(){return d})),i.d(e,"map_directions",(function(){return p})),i.d(e,"split_direction",(function(){return u})),i.d(e,"join_directions",(function(){return g})),i.d(e,"variation",(function(){return m})),i.d(e,"range_360",(function(){return y})),i.d(e,"is_inside_sector",(function(){return b})),i.d(e,"is_close",(function(){return f})),i.d(e,"transitions",(function(){return w})),i.d(e,"get_opposite_direction",(function(){return v})),i.d(e,"get_transition_directions",(function(){return x})),i.d(e,"get_text_width",(function(){return k})),i.d(e,"kill_all_sprites",(function(){return E})),i.d(e,"get_surroundings",(function(){return j})),i.d(e,"get_directions",(function(){return T})),i.d(e,"capitalize",(function(){return A})),i.d(e,"change_brightness",(function(){return S})),i.d(e,"rgb2hsv",(function(){return O})),i.d(e,"hsv2rgb",(function(){return I})),i.d(e,"mount_collision_polygon",(function(){return P}));var s=i(0);const n={VENUS:"venus",MERCURY:"mercury",MARS:"mars",JUPITER:"jupiter",NO_ELEMENT:"no_element"},a=[n.VENUS,n.MERCURY,n.MARS,n.JUPITER],r={[n.VENUS]:"Earth",[n.MERCURY]:"Water",[n.MARS]:"Fire",[n.JUPITER]:"Wind"},o={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},h=Object.keys(o).length,c={[o.right]:"right",[o.up_right]:"up_right",[o.up]:"up",[o.up_left]:"up_left",[o.left]:"left",[o.down_left]:"down_left",[o.down]:"down",[o.down_right]:"down_right"},l={IDLE:"idle",WALK:"walk",DASH:"dash",PUSH:"push",CLIMB:"climb",CAST:"cast"};function d(t){return t*Math.PI/4}function p(t){return void 0===t?t:(t=Array.isArray(t)?t:[t]).map(t=>o[t])}function u(t){if(t%2==0)return[t];let e=new Array(2);return e[0]=t===o.right?t.up_right:t-1,e[1]=t===o.up_right?o.right:t+1,e}function g(t,e){return e=t===o.up&&e===o.right?h:e,Math.min(t,e)+1}function m(){return _.random(0,4)}function y(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function b(t,e,i,n,a,r,_){const o=e*i*(e*i),h=Math.pow(r-n,2)+Math.pow(_-a,2),c=y(Math.atan2(a-_,r-n)),l=[0,s.degree90,Math.PI,s.degree270,s.degree360];let d=!1;for(let e=0;e<t.length;++e){let i=t[e],s=l[i-1];if(d=l[i]>=c&&c>=s,d)break}return h<=o&&d}function f(t,e,i,n,a,r){switch(t){case o.up:return b([1,2],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.up_right:return b([1],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.right:return b([1,4],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.down_right:return b([4],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.down:return b([3,4],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.down_left:return b([3],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.left:return b([2,3],s.HERO_BODY_RADIUS,r,e,i,n,a);case o.up_left:return b([2],s.HERO_BODY_RADIUS,r,e,i,n,a)}}const w={[o.up]:{[o.up]:o.up,[o.down]:o.down_left,[o.left]:o.up_left,[o.right]:o.up_right,[o.down_left]:o.left,[o.down_right]:o.right,[o.up_left]:o.up,[o.up_right]:o.up},[o.down]:{[o.up]:o.up_left,[o.down]:o.down,[o.left]:o.down_left,[o.right]:o.down_right,[o.down_left]:o.down,[o.down_right]:o.down,[o.up_left]:o.left,[o.up_right]:o.right},[o.left]:{[o.up]:o.up_left,[o.down]:o.down_left,[o.left]:o.left,[o.right]:o.up_right,[o.down_left]:o.left,[o.down_right]:o.down,[o.up_left]:o.left,[o.up_right]:o.up},[o.right]:{[o.up]:o.up_right,[o.down]:o.down_right,[o.left]:o.down_left,[o.right]:o.right,[o.down_left]:o.down,[o.down_right]:o.right,[o.up_left]:o.up,[o.up_right]:o.right},[o.down_left]:{[o.up]:o.up_left,[o.down]:o.down_left,[o.left]:o.down_left,[o.right]:o.down_right,[o.down_left]:o.down_left,[o.down_right]:o.down,[o.up_left]:o.left,[o.up_right]:o.up},[o.down_right]:{[o.up]:o.up_right,[o.down]:o.down_right,[o.left]:o.down_left,[o.right]:o.down_right,[o.down_left]:o.down,[o.down_right]:o.down_right,[o.up_left]:o.left,[o.up_right]:o.right},[o.up_left]:{[o.up]:o.up_left,[o.down]:o.down_left,[o.left]:o.up_left,[o.right]:o.up_right,[o.down_left]:o.left,[o.down_right]:o.right,[o.up_left]:o.up_left,[o.up_right]:o.up},[o.up_right]:{[o.up]:o.up_right,[o.down]:o.down_right,[o.left]:o.up_left,[o.right]:o.up_right,[o.down_left]:o.left,[o.down_right]:o.right,[o.up_left]:o.up,[o.up_right]:o.up_right}};function v(t){switch(t){case o.up:return o.down;case o.down:return o.up;case o.left:return o.right;case o.right:return o.left}}function x(t,e){return w[e][t]}function k(t,e,i=!1){const n=i?"gs-italic-bmp-font":"gs-bmp-font";let a=t.add.bitmapText(0,0,n,e,s.FONT_SIZE);const r=a.width;return a.destroy(),r}function E(t,e=!1){t.children.forEach(t=>{e?t.parent.remove(t,!0):t.kill()})}function j(t,e,i=!1,s=1){let n=[{x:t-s,y:e,diag:!1,direction:o.left},{x:t+s,y:e,diag:!1,direction:o.right},{x:t,y:e-s,diag:!1,direction:o.up},{x:t,y:e+s,diag:!1,direction:o.down}];return i&&(n=n.concat([{x:t-s,y:e-s,diag:!0,direction:o.up_left},{x:t+s,y:e-s,diag:!0,direction:o.up_right},{x:t-s,y:e+s,diag:!0,direction:o.down_left},{x:t+s,y:e+s,diag:!0,direction:o.down_right}])),n}function T(t=!1){let e=[o.up,o.down,o.left,o.right];return t&&e.push(o.up_left,o.up_right,o.down_left,o.down_right),e}function A(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())}function S(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,n,a=parseInt(t.substr(0,2),16),r=parseInt(t.substr(2,2),16),_=parseInt(t.substr(4,2),16);return[i,s,n]=O(a,r,_),n=n*e|0,[a,r,_]=I(i,s,n),t=((1<<24)+(a<<16)+(r<<8)+_).toString(16).slice(1),parseInt(t,16)}function O(t,e,i){let s=Math.max(t,e,i),n=s-Math.min(t,e,i),a=n&&(s===t?(e-i)/n:s===e?2+(i-t)/n:4+(t-e)/n);return[60*(a<0?a+6:a),s&&n/s,s]}function I(t,e,i){let s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function P(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Djinn=e.djinn_font_colors=e.djinn_status=void 0;const s=i(0),n=i(1),a=i(10);e.djinn_status={SET:"set",STANDBY:"standby",RECOVERY:"recovery"},e.djinn_font_colors={[e.djinn_status.RECOVERY]:s.YELLOW_FONT_COLOR,[e.djinn_status.STANDBY]:s.RED_FONT_COLOR,[e.djinn_status.SET]:s.DEFAULT_FONT_COLOR};e.Djinn=class{constructor(t,i,s,n,a,r,_,o,h,c,l,d){this.key_name=t,this.name=i,this.description=s,this.element=n,this.ability_key_name=a,this.hp_boost=r,this.pp_boost=_,this.atk_boost=o,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.status=e.djinn_status.SET,this.index=d,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,i){return a.some(i.map(t=>t.djinni).map(i=>i.filter(i=>t[i].status===e.djinn_status.STANDBY).length))}static get_standby_djinni(t,i){let s=a.mapValues(a.groupBy(i.map(t=>t.djinni).flat(),e=>t[e].element),i=>i.filter(i=>t[i].status===e.djinn_status.STANDBY).length);for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];e in s||(s[e]=0)}return s}static set_to_recovery(t,i,s){let n=Object.assign({},s),r=!1;for(let s=0;s<i.length;++s){const _=i[s],o=_.djinni;let h=1;for(let i=0;i<o.length;++i){const s=t[o[i]];if(s.status===e.djinn_status.STANDBY&&(n[s.element]>0&&(s.recovery_turn=h,++h,s.set_status(e.djinn_status.RECOVERY,_),--n[s.element],!a.some(n,Boolean)))){r=!0;break}}if(r)break}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Window=void 0;const s=i(0),n=i(1),a=Phaser.Timer.QUARTER>>2;e.Window=class{constructor(t,e,i,n,a,r=!0,_=s.DEFAULT_WINDOW_COLOR,o=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=n,this.height=a,this.color=_,this.font_color=o,this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.need_pos_update=r,this.open=!1,this.lines_sprites=[],this.extra_sprites=[],this.internal_groups={}}get real_x(){return this.group.x}get real_y(){return this.group.y}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,a=!0){const r=n.change_brightness(this.color,1.3),_=n.change_brightness(this.color,.8),o=[n.change_brightness(this.color,.9),_,r];for(let n=0;n<o.length;++n){const r=o[n],_=n-1;this.separators_graphics.lineStyle(1,r),this.separators_graphics.moveTo(t+_*+a,e+_*+!a),this.separators_graphics.lineTo(i+_*+a,s+_*+!a)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.open=!0,this.close_callback=i,this.page_indicator_is_set=!1,e?this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{void 0!==t&&t()}):(this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,n,a){let r=this.group;if(void 0!==a){const t=this.get_internal_group(a);t&&(r=t)}let _=r.create(t,e,i,n);return void 0!==s&&(_.tint=s),this.extra_sprites.push(_),_}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,n,a=!1,r=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const _=a?-2:0,o=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+_:i;const c=a?"gs-italic-bmp-font":"gs-bmp-font";let l,d,p=[];r&&(l=new Promise(t=>d=t));for(let e=0;e<t.length;++e){let i=t[e],a=this.game.add.bitmapText(o,h,c,r?"":i,s.FONT_SIZE),_=this.game.add.bitmapText(o+1,h+1,c,r?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===n?s.SPACE_BETWEEN_LINES:n),this.remove_smooth(a),a.tint=this.font_color,this.remove_smooth(_),_.tint=0,r){const t=i.split(" ");let e,s=0;const n=()=>{this.game.time.events.repeat(25,t.length,()=>{a.text+=t[s]+" ",_.text+=t[s]+" ",++s,s===t.length&&e()})};p.length?p.pop().then(n):n(),p.push(new Promise(t=>e=t))}this.group.add(_),this.group.add(a),this.lines_sprites.push({text:a,shadow:_})}return Promise.all(p).then(d),l}set_single_line_text(t,e=!1,i=!1){const n=i?s.WINDOW_PADDING_H+2:s.WINDOW_PADDING_H+4;let a=i?s.WINDOW_PADDING_TOP-2:s.WINDOW_PADDING_TOP;const r=i?"gs-italic-bmp-font":"gs-bmp-font";let _=this.game.add.bitmapText(n,a,r,t,s.FONT_SIZE),o=this.game.add.bitmapText(n+1,a+1,r,t,s.FONT_SIZE);return e&&(_.x-=_.width,o.x-=o.width),this.remove_smooth(_),_.tint=this.font_color,this.remove_smooth(o),o.tint=0,this.group.add(o),this.group.add(_),{text:_,shadow:o,right_align:e,initial_x:n}}set_text_in_position(t,e,i,n=!1,a=!1,r=this.font_color,_=!1,o,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let l,d=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),p=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);a&&(d.centerX=e,d.centerY=i,p.centerX=e+1,p.centerY=i+1),n&&(d.x-=d.width,p.x-=p.width),_&&(l=this.game.add.graphics(d.x-1,d.y),l.beginFill(this.color,1),l.drawRect(0,0,d.width+3,s.FONT_SIZE),l.endFill(),void 0!==o&&this.add_to_internal_group(o,l)||this.group.add(l)),this.remove_smooth(d),d.tint=r,this.remove_smooth(p),p.tint=0;let u=!1;return void 0!==o&&(u=this.add_to_internal_group(o,p)&&this.add_to_internal_group(o,d)),u||(this.group.add(p),this.group.add(d)),{text:d,shadow:p,right_align:n,initial_x:e,text_bg:l}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator_is_set&&this.unset_page_indicator(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.create_at_group(this.width-3,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}set_page_indicator(t,e){if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=this.width-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(t,e),this.set_page_indicator_arrow(t)}}set_page_indicator_highlight(t,e){this.page_number_bar_highlight.x=this.width-5-8*(t-e)}set_page_indicator_arrow(t){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=this.width-5-8*t-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=this.width-3-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Effect=e.effect_msg=e.effect_usages=e.effect_operators=e.effect_names=e.effect_type_stat=e.effect_types=void 0;const s=i(1);e.effect_types={MAX_HP:"max_hp",MAX_PP:"max_pp",ATTACK:"attack",DEFENSE:"defense",AGILITY:"agility",LUCK:"luck",POWER:"power",RESIST:"resist",CURRENT_HP:"current_hp",CURRENT_PP:"current_pp",HP_RECOVERY:"hp_recovery",PP_RECOVERY:"pp_recovery",CRITICALS:"criticals",COUNTER_STRIKE:"counter_strike",TEMPORARY_STATUS:"temporary_status",PERMANENT_STATUS:"permanent_status",TURNS:"turns",ENCOUNTERS:"encounters",FLEE:"flee",END_THE_ROUND:"end_the_round",ABILITY_POWER:"ability_power",SET_DJINN:"set_djinn",DAMAGE_MODIFIER:"damage_modifier",DAMAGE_INPUT:"damage_input"},e.effect_type_stat={[e.effect_types.MAX_HP]:"max_hp",[e.effect_types.MAX_PP]:"max_pp",[e.effect_types.ATTACK]:"atk",[e.effect_types.DEFENSE]:"def",[e.effect_types.AGILITY]:"agi",[e.effect_types.LUCK]:"luk",[e.effect_types.CURRENT_HP]:"current_hp",[e.effect_types.CURRENT_PP]:"current_pp"},e.effect_names={[e.effect_types.MAX_HP]:"HP",[e.effect_types.MAX_PP]:"PP",[e.effect_types.ATTACK]:"Attack",[e.effect_types.DEFENSE]:"Defense",[e.effect_types.AGILITY]:"Agility",[e.effect_types.LUCK]:"Luck",[e.effect_types.POWER]:"Power",[e.effect_types.RESIST]:"Resist"},e.effect_operators={PLUS:"plus",MINUS:"minus",TIMES:"times",DIVIDE:"divide"},e.effect_usages={NOT_APPLY:"not_apply",ON_USE:"on_use",ON_TAKE:"on_take",BATTLE_ROUND_START:"battle_round_start",BATTLE_ROUND_END:"battle_round_end",PLAYER_TURN_START:"player_turn_start",PLAYER_TURN_END:"player_turn_end"},e.effect_msg={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class n{constructor(t,i,n,a,r,_,o,h,c,l,d,p,u,g,m,y,b,f,w,v){this.type=t,this.quantity=i,this.operator=n,this.effect_owner_instance=a,this.quantity_is_absolute=void 0!==r&&r,this.rate=void 0===_?1:_,this.chance=void 0===o?1:o,this.attribute=void 0===h?s.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=l,this.turns_quantity=d,this.turn_count=d,this.variation_on_final_result=void 0!==p&&p,this.damage_formula_key_name=u,this.usage=void 0===g?e.effect_usages.NOT_APPLY:g,this.on_caster=void 0!==m&&m,this.relative_to_property=y,this.effect_msg=f,this.show_msg=void 0===w||w,this.char=v,this.sub_effect=b,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,i,s){switch(s){case e.effect_operators.PLUS:return t+i;case e.effect_operators.MINUS:return t-i;case e.effect_operators.TIMES:return t*i;case e.effect_operators.DIVIDE:return t/i}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?s.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?e.effect_usages.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let a;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),a=this.quantity;else{let i,r=this.quantity;r*=this.rate,this.variation_on_final_result&&(r+=s.variation()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const _=0|n.apply_operator(i,r,this.operator);void 0!==t&&(this.char[t]=_),a=_}return{before:i,after:a}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=s.variation()),this.char[t]=0|n.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,n.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case e.effect_types.MAX_HP:case e.effect_types.MAX_PP:case e.effect_types.ATTACK:case e.effect_types.DEFENSE:case e.effect_types.AGILITY:case e.effect_types.LUCK:return this.apply_general_value(e.effect_type_stat[this.type]);case e.effect_types.HP_RECOVERY:return this.apply_general_value("hp_recovery");case e.effect_types.PP_RECOVERY:return this.apply_general_value("pp_recovery");case e.effect_types.CURRENT_HP:const i=this.apply_general_value("current_hp");return this.check_caps("current_hp","max_hp",0,i),i;case e.effect_types.CURRENT_PP:const s=this.apply_general_value("current_pp");return this.check_caps("current_pp","max_pp",0,s),s;case e.effect_types.POWER:return this.apply_general_value(this.attribute+"_power_current");case e.effect_types.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case e.effect_types.TURNS:return this.turn_count=1,this.apply_general_value("turns");case e.effect_types.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case e.effect_types.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case e.effect_types.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case e.effect_types.DAMAGE_INPUT:let n=this.apply_general_value(void 0,t);const a=e.effect_type_stat[this.sub_effect.type];switch(n.before=this.char[a],n.after=this.apply_subeffect(a,n.after),this.sub_effect.type){case e.effect_types.CURRENT_HP:this.check_caps("current_hp","max_hp",0,n);break;case e.effect_types.CURRENT_PP:this.check_caps("current_pp","max_pp",0,n)}return n}}}e.Effect=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Player=e.on_remove_status_msg=e.on_catch_status_msg=e.permanent_status=e.temporary_status=e.fighter_types=void 0;const s=i(4),n=i(1);e.fighter_types={ALLY:1,ENEMY:2},e.temporary_status={DELUSION:"delusion",STUN:"stun",SLEEP:"sleep",SEAL:"seal",DEATH_CURSE:"death_curse"},e.permanent_status={DOWNED:"downed",POISON:"poison",VENOM:"venom",EQUIP_CURSE:"equip_curse",HAUNT:"haunt"},e.on_catch_status_msg={[e.temporary_status.DELUSION]:t=>t.name+" is wrapped in delusion!",[e.temporary_status.STUN]:t=>t.name+" has been stunned!",[e.temporary_status.SLEEP]:t=>t.name+" falls asleep!",[e.temporary_status.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[e.temporary_status.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[e.permanent_status.DOWNED]:t=>t.fighter_type===e.fighter_types.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[e.permanent_status.POISON]:t=>t.name+" is infected with poison!",[e.permanent_status.VENOM]:t=>t.name+" is infected with deadly poison!",[e.permanent_status.HAUNT]:t=>`An evil spirit grips ${t.name}!`},e.on_remove_status_msg={[e.temporary_status.DELUSION]:t=>t.name+" sees clearly once again!",[e.temporary_status.STUN]:t=>t.name+" is no longer stunned!",[e.temporary_status.SLEEP]:t=>t.name+" wakes from slumber!",[e.temporary_status.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[e.permanent_status.DOWNED]:t=>t.name+"'s has been revived!",[e.permanent_status.POISON]:t=>`The poison is purged from ${t.name}!`,[e.permanent_status.VENOM]:t=>`The venom is purged from ${t.name}!`};e.Player=class{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[e.temporary_status.DELUSION]:0,[e.temporary_status.STUN]:0,[e.temporary_status.SLEEP]:0,[e.temporary_status.SEAL]:0,[e.temporary_status.DEATH_CURSE]:0,[s.effect_types.MAX_HP]:0,[s.effect_types.MAX_PP]:0,[s.effect_types.ATTACK]:0,[s.effect_types.DEFENSE]:0,[s.effect_types.AGILITY]:0,[s.effect_types.LUCK]:0,[s.effect_types.POWER]:{},[s.effect_types.RESIST]:{}};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.effect_turns_count[s.effect_types.POWER][e]=0,this.effect_turns_count[s.effect_types.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return t.status_key_name;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return t.type;case s.effect_types.POWER:case s.effect_types.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type];case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.effect_types.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let n,a=new s.Effect(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(a),i&&(n=a.apply_effect()),{effect:a,changes:n}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(e.temporary_status.SLEEP)||this.temporary_status.has(e.temporary_status.STUN)}is_poisoned(){return this.permanent_status.has(e.permanent_status.POISON)?e.permanent_status.POISON:!!this.permanent_status.has(e.permanent_status.VENOM)&&e.permanent_status.VENOM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Ability=e.diminishing_ratios=e.ability_categories=e.ability_target_types=e.ability_msg_types=e.ability_types=void 0,e.ability_types={HEALING:"healing",EFFECT_ONLY:"effect_only",ADDED_DAMAGE:"added_damage",MULTIPLIER:"multiplier",BASE_DAMAGE:"base_damage",SUMMON:"summon",UTILITY:"utility",DIRECT_DAMAGE:"direct_damage"},e.ability_msg_types={CAST:"cast",ATTACK:"attack",USE:"use",SUMMON:"summon",UNLEASH:"unleash",DEFEND:"defend",ITEM_UNLEASH:"item_unleash",SET_DJINN:"set_djinn",NO_MSG:"no_msg"},e.ability_target_types={NO_TARGET:"no_target",ALLY:"ally",ENEMY:"enemy",USER:"user"},e.ability_categories={PSYNERGY:"psynergy",DJINN:"djinn",SUMMON:"summon",ITEM:"item",WEAPON_UNLEASH:"weapon_unleash",NORMAL:"normal"},e.diminishing_ratios={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};e.Ability=class{constructor(t,i,s,n,a,r,_,o,h,c,l,d,p,u,g,m,y,b,f,w,v,x,k,E){this.key_name=t,this.name=i,this.description=s,this.type=n,this.element=a,this.battle_target=r,this.range=_,this.pp_cost=o,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=l,this.is_field_psynergy=d,this.effects=p,this.ability_category=u,this.battle_animation_key=g,this.priority_move=m||!1,this.has_critical=y||!1,this.crit_mult_factor=void 0!==b?b:1,this.can_switch_to_unleash=f||!1,this.can_be_evaded=w||!1,this.use_diminishing_ratio=v||!1,this.msg_type=void 0===x?e.ability_msg_types.CAST:x,this.affects_pp=void 0!==k&&k,this.has_animation_variation=void 0!==E&&E}static get_diminishing_ratios(t,i){if(i)return e.diminishing_ratios.DIMINISH;switch(t){case e.ability_types.SUMMON:return e.diminishing_ratios.SUMMON;default:return e.diminishing_ratios.STANDARD}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Item=e.use_types=e.item_types=void 0,e.item_types={WEAPONS:"weapons",ARMOR:"armor",CHEST_PROTECTOR:"chest_protector",HEAD_PROTECTOR:"head_protector",LEG_PROTECTOR:"leg_protector",ABILITY_GRANTOR:"ability_grantor",LUCKY_CHARM:"lucky_charm",RING:"ring",UNDERWEAR:"underwear",GENERAL_ITEM:"general_item",SHIRT:"shirt"},e.use_types={MULTIPLE_USES:"multiple_uses",SINGLE_USE:"single_use",BREAKS_WHEN_USE:"breaks_when_use",NO_USE:"no_use"};e.Item=class{constructor(t,i,s,n,a,r,_,o,h,c,l,d,p,u,g,m,y,b){this.key_name=t,this.name=i,this.type=s,this.description=n,this.use_type=a,this.curses_when_equipped=r,this.cant_be_removed=_,this.rare_item=o,this.important_item=h,this.carry_up_to_30=c,this.effects=l,this.attribute=d,this.unleash_ability=p,this.unleash_rate=u,this.use_ability=g,this.equipable_chars=m,this.price=y,this.granted_ability=b,this.broken=!1,this.equipable=this.type!==e.item_types.GENERAL_ITEM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CursorControl=void 0;const s=Phaser.Timer.QUARTER>>1,n=Phaser.Timer.QUARTER>>1;e.CursorControl=class{constructor(t,e,i,s,n,a,r,_,o,h,c,l,d,p,u,g){this.game=t,this.is_right_left=e,this.is_up_down=i,this.max_right_left_getter=s,this.max_up_down_getter=n,this.base_group=a,this.on_right_left_change=void 0===r?()=>{}:r,this.on_up_down_change=void 0===_?()=>{}:_,this.right_left_index_getter=o,this.right_left_index_setter=h,this.up_down_index_getter=c,this.up_down_index_setter=l,this.open_checker=d,this.active_checker=p,this.cursor_base_x_getter=u,this.cursor_base_y_getter=g,this.right_pressed=!1,this.left_pressed=!1,this.up_pressed=!1,this.down_pressed=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.init_cursor(),this.init_cursor_tween(),this.signal_bindings=this.set_control()}set_control(){return[this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.right_pressed&&this.is_right_left&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.left_pressed&&this.is_right_left&&(this.left_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.down_pressed&&(this.down_pressed=!1,this.stop_timers()),this.up_pressed=!0,this.set_change_timers(-1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.up_pressed&&this.is_up_down&&(this.up_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.up_pressed&&(this.up_pressed=!1,this.stop_timers()),this.down_pressed=!0,this.set_change_timers(1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.down_pressed&&this.is_up_down&&(this.down_pressed=!1,this.stop_timers())})]}set_change_timers(t,e){this.change_index(t,e),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(s,this.change_index.bind(this,t,e)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_index(t,e){const i=e?this.right_left_index_getter:this.up_down_index_getter,s=e?this.right_left_index_setter:this.up_down_index_setter,n=e?this.on_right_left_change:this.on_up_down_change,a=e?this.max_right_left_getter:this.max_up_down_getter,r=i();s((i()+t)%a()),i()<0&&s(a()-1),this.set_cursor_position(),n(r,i())}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}init_cursor(){this.cursor_group=this.game.add.group(),this.cursor=this.cursor_group.create(0,0,"cursor"),this.cursor_group.alpha=0,this.base_group.add(this.cursor_group),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter(),this.cursor_tween=this.game.tweens.create(this.cursor)}init_cursor_tween(){this.cursor_tween.to({x:this.cursor.x-4,y:this.cursor.y+4},n,Phaser.Easing.Linear.None,!1,0,-1,!0)}set_cursor_position(){this.cursor_tween.isRunning&&this.cursor_tween.isPaused?this.cursor_tween.resume():this.cursor_tween.isRunning||(this.cursor_tween.start(),this.cursor_tween.isPaused&&this.cursor_tween.resume()),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter()}activate(){this.up_pressed=!1,this.down_pressed=!1,this.cursor_group.alpha=1,this.set_cursor_position()}deactivate(){this.stop_timers(),this.cursor_group.alpha=0,this.cursor_tween.pause()}destroy(){this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()}),this.cursor_tween.stop(),this.cursor_group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEvent=e.event_types=void 0;const s=i(1),n=i(10);e.event_types={CLIMB:"climb",SPEED:"speed",TELEPORT:"teleport",JUMP:"jump",STEP:"step",COLLISION:"collision"};class a{constructor(t,e,i,n,r,_,o,h,c,l){this.game=t,this.data=e,this.type=i,this.x=n,this.y=r,this.location_key=a.get_location_key(this.x,this.y),this.id=a.id_incrementer++,this.activation_collision_layers=Array.isArray(o)?o:[o],void 0===_&&(_=s.get_directions(!0)),this.activation_directions=Array.isArray(_)?_:[_],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(c),this.origin_interactable_object=void 0===l?null:l,a.events[this.id]=this}is_active(t){const e=s.split_direction(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return n.find(t,{id:e})}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}e.TileEvent=a,a.reset()},function(t,e,i){(function(t,s){var n;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a="Expected a function",r="__lodash_placeholder__",_=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],o="[object Arguments]",h="[object Array]",c="[object Boolean]",l="[object Date]",d="[object Error]",p="[object Function]",u="[object GeneratorFunction]",g="[object Map]",m="[object Number]",y="[object Object]",b="[object RegExp]",f="[object Set]",w="[object String]",v="[object Symbol]",x="[object WeakMap]",k="[object ArrayBuffer]",E="[object DataView]",j="[object Float32Array]",T="[object Float64Array]",A="[object Int8Array]",S="[object Int16Array]",O="[object Int32Array]",I="[object Uint8Array]",P="[object Uint16Array]",R="[object Uint32Array]",M=/\b__p \+= '';/g,N=/\b(__p \+=) '' \+/g,D=/(__e\(.*?\)|\b__t\)) \+\n'';/g,q=/&(?:amp|lt|gt|quot|#39);/g,L=/[&<>"']/g,C=RegExp(q.source),H=RegExp(L.source),W=/<%-([\s\S]+?)%>/g,U=/<%([\s\S]+?)%>/g,G=/<%=([\s\S]+?)%>/g,F=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,z=/^\w*$/,B=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,K=/[\\^$.*+?()[\]{}|]/g,Y=RegExp(K.source),$=/^\s+|\s+$/g,X=/^\s+/,J=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,V=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,it=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,st=/\w*$/,nt=/^[-+]0x[0-9a-f]+$/i,at=/^0b[01]+$/i,rt=/^\[object .+?Constructor\]$/,_t=/^0o[0-7]+$/i,ot=/^(?:0|[1-9]\d*)$/,ht=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,dt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ut="[\\ud800-\\udfff]",gt="["+pt+"]",mt="["+dt+"]",yt="\\d+",bt="[\\u2700-\\u27bf]",ft="[a-z\\xdf-\\xf6\\xf8-\\xff]",wt="[^\\ud800-\\udfff"+pt+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",vt="\\ud83c[\\udffb-\\udfff]",xt="[^\\ud800-\\udfff]",kt="(?:\\ud83c[\\udde6-\\uddff]){2}",Et="[\\ud800-\\udbff][\\udc00-\\udfff]",jt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Tt="(?:"+ft+"|"+wt+")",At="(?:"+jt+"|"+wt+")",St="(?:"+mt+"|"+vt+")"+"?",Ot="[\\ufe0e\\ufe0f]?"+St+("(?:\\u200d(?:"+[xt,kt,Et].join("|")+")[\\ufe0e\\ufe0f]?"+St+")*"),It="(?:"+[bt,kt,Et].join("|")+")"+Ot,Pt="(?:"+[xt+mt+"?",mt,kt,Et,ut].join("|")+")",Rt=RegExp("['’]","g"),Mt=RegExp(mt,"g"),Nt=RegExp(vt+"(?="+vt+")|"+Pt+Ot,"g"),Dt=RegExp([jt+"?"+ft+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[gt,jt,"$"].join("|")+")",At+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[gt,jt+Tt,"$"].join("|")+")",jt+"?"+Tt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",jt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,It].join("|"),"g"),qt=RegExp("[\\u200d\\ud800-\\udfff"+dt+"\\ufe0e\\ufe0f]"),Lt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ct=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ht=-1,Wt={};Wt[j]=Wt[T]=Wt[A]=Wt[S]=Wt[O]=Wt[I]=Wt["[object Uint8ClampedArray]"]=Wt[P]=Wt[R]=!0,Wt[o]=Wt[h]=Wt[k]=Wt[c]=Wt[E]=Wt[l]=Wt[d]=Wt[p]=Wt[g]=Wt[m]=Wt[y]=Wt[b]=Wt[f]=Wt[w]=Wt[x]=!1;var Ut={};Ut[o]=Ut[h]=Ut[k]=Ut[E]=Ut[c]=Ut[l]=Ut[j]=Ut[T]=Ut[A]=Ut[S]=Ut[O]=Ut[g]=Ut[m]=Ut[y]=Ut[b]=Ut[f]=Ut[w]=Ut[v]=Ut[I]=Ut["[object Uint8ClampedArray]"]=Ut[P]=Ut[R]=!0,Ut[d]=Ut[p]=Ut[x]=!1;var Gt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ft=parseFloat,zt=parseInt,Bt="object"==typeof t&&t&&t.Object===Object&&t,Kt="object"==typeof self&&self&&self.Object===Object&&self,Yt=Bt||Kt||Function("return this")(),$t=e&&!e.nodeType&&e,Xt=$t&&"object"==typeof s&&s&&!s.nodeType&&s,Jt=Xt&&Xt.exports===$t,Zt=Jt&&Bt.process,Vt=function(){try{var t=Xt&&Xt.require&&Xt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),Qt=Vt&&Vt.isArrayBuffer,te=Vt&&Vt.isDate,ee=Vt&&Vt.isMap,ie=Vt&&Vt.isRegExp,se=Vt&&Vt.isSet,ne=Vt&&Vt.isTypedArray;function ae(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function re(t,e,i,s){for(var n=-1,a=null==t?0:t.length;++n<a;){var r=t[n];e(s,r,i(r),t)}return s}function _e(t,e){for(var i=-1,s=null==t?0:t.length;++i<s&&!1!==e(t[i],i,t););return t}function oe(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function he(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(!e(t[i],i,t))return!1;return!0}function ce(t,e){for(var i=-1,s=null==t?0:t.length,n=0,a=[];++i<s;){var r=t[i];e(r,i,t)&&(a[n++]=r)}return a}function le(t,e){return!!(null==t?0:t.length)&&ve(t,e,0)>-1}function de(t,e,i){for(var s=-1,n=null==t?0:t.length;++s<n;)if(i(e,t[s]))return!0;return!1}function pe(t,e){for(var i=-1,s=null==t?0:t.length,n=Array(s);++i<s;)n[i]=e(t[i],i,t);return n}function ue(t,e){for(var i=-1,s=e.length,n=t.length;++i<s;)t[n+i]=e[i];return t}function ge(t,e,i,s){var n=-1,a=null==t?0:t.length;for(s&&a&&(i=t[++n]);++n<a;)i=e(i,t[n],n,t);return i}function me(t,e,i,s){var n=null==t?0:t.length;for(s&&n&&(i=t[--n]);n--;)i=e(i,t[n],n,t);return i}function ye(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(e(t[i],i,t))return!0;return!1}var be=je("length");function fe(t,e,i){var s;return i(t,(function(t,i,n){if(e(t,i,n))return s=i,!1})),s}function we(t,e,i,s){for(var n=t.length,a=i+(s?1:-1);s?a--:++a<n;)if(e(t[a],a,t))return a;return-1}function ve(t,e,i){return e==e?function(t,e,i){var s=i-1,n=t.length;for(;++s<n;)if(t[s]===e)return s;return-1}(t,e,i):we(t,ke,i)}function xe(t,e,i,s){for(var n=i-1,a=t.length;++n<a;)if(s(t[n],e))return n;return-1}function ke(t){return t!=t}function Ee(t,e){var i=null==t?0:t.length;return i?Se(t,e)/i:NaN}function je(t){return function(e){return null==e?void 0:e[t]}}function Te(t){return function(e){return null==t?void 0:t[e]}}function Ae(t,e,i,s,n){return n(t,(function(t,n,a){i=s?(s=!1,t):e(i,t,n,a)})),i}function Se(t,e){for(var i,s=-1,n=t.length;++s<n;){var a=e(t[s]);void 0!==a&&(i=void 0===i?a:i+a)}return i}function Oe(t,e){for(var i=-1,s=Array(t);++i<t;)s[i]=e(i);return s}function Ie(t){return function(e){return t(e)}}function Pe(t,e){return pe(e,(function(e){return t[e]}))}function Re(t,e){return t.has(e)}function Me(t,e){for(var i=-1,s=t.length;++i<s&&ve(e,t[i],0)>-1;);return i}function Ne(t,e){for(var i=t.length;i--&&ve(e,t[i],0)>-1;);return i}function De(t,e){for(var i=t.length,s=0;i--;)t[i]===e&&++s;return s}var qe=Te({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Le=Te({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ce(t){return"\\"+Gt[t]}function He(t){return qt.test(t)}function We(t){var e=-1,i=Array(t.size);return t.forEach((function(t,s){i[++e]=[s,t]})),i}function Ue(t,e){return function(i){return t(e(i))}}function Ge(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var _=t[i];_!==e&&_!==r||(t[i]=r,a[n++]=i)}return a}function Fe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function ze(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function Be(t){return He(t)?function(t){var e=Nt.lastIndex=0;for(;Nt.test(t);)++e;return e}(t):be(t)}function Ke(t){return He(t)?function(t){return t.match(Nt)||[]}(t):function(t){return t.split("")}(t)}var Ye=Te({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $e=function t(e){var i,s=(e=null==e?Yt:$e.defaults(Yt.Object(),e,$e.pick(Yt,Ct))).Array,n=e.Date,dt=e.Error,pt=e.Function,ut=e.Math,gt=e.Object,mt=e.RegExp,yt=e.String,bt=e.TypeError,ft=s.prototype,wt=pt.prototype,vt=gt.prototype,xt=e["__core-js_shared__"],kt=wt.toString,Et=vt.hasOwnProperty,jt=0,Tt=(i=/[^.]+$/.exec(xt&&xt.keys&&xt.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",At=vt.toString,St=kt.call(gt),Ot=Yt._,It=mt("^"+kt.call(Et).replace(K,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pt=Jt?e.Buffer:void 0,Nt=e.Symbol,qt=e.Uint8Array,Gt=Pt?Pt.allocUnsafe:void 0,Bt=Ue(gt.getPrototypeOf,gt),Kt=gt.create,$t=vt.propertyIsEnumerable,Xt=ft.splice,Zt=Nt?Nt.isConcatSpreadable:void 0,Vt=Nt?Nt.iterator:void 0,be=Nt?Nt.toStringTag:void 0,Te=function(){try{var t=Qn(gt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Xe=e.clearTimeout!==Yt.clearTimeout&&e.clearTimeout,Je=n&&n.now!==Yt.Date.now&&n.now,Ze=e.setTimeout!==Yt.setTimeout&&e.setTimeout,Ve=ut.ceil,Qe=ut.floor,ti=gt.getOwnPropertySymbols,ei=Pt?Pt.isBuffer:void 0,ii=e.isFinite,si=ft.join,ni=Ue(gt.keys,gt),ai=ut.max,ri=ut.min,_i=n.now,oi=e.parseInt,hi=ut.random,ci=ft.reverse,li=Qn(e,"DataView"),di=Qn(e,"Map"),pi=Qn(e,"Promise"),ui=Qn(e,"Set"),gi=Qn(e,"WeakMap"),mi=Qn(gt,"create"),yi=gi&&new gi,bi={},fi=Ta(li),wi=Ta(di),vi=Ta(pi),xi=Ta(ui),ki=Ta(gi),Ei=Nt?Nt.prototype:void 0,ji=Ei?Ei.valueOf:void 0,Ti=Ei?Ei.toString:void 0;function Ai(t){if(Fr(t)&&!Rr(t)&&!(t instanceof Pi)){if(t instanceof Ii)return t;if(Et.call(t,"__wrapped__"))return Aa(t)}return new Ii(t)}var Si=function(){function t(){}return function(e){if(!Gr(e))return{};if(Kt)return Kt(e);t.prototype=e;var i=new t;return t.prototype=void 0,i}}();function Oi(){}function Ii(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pi(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Ri(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Mi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Ni(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Di(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Ni;++e<i;)this.add(t[e])}function qi(t){var e=this.__data__=new Mi(t);this.size=e.size}function Li(t,e){var i=Rr(t),s=!i&&Pr(t),n=!i&&!s&&qr(t),a=!i&&!s&&!n&&Zr(t),r=i||s||n||a,_=r?Oe(t.length,yt):[],o=_.length;for(var h in t)!e&&!Et.call(t,h)||r&&("length"==h||n&&("offset"==h||"parent"==h)||a&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||ra(h,o))||_.push(h);return _}function Ci(t){var e=t.length;return e?t[Ds(0,e-1)]:void 0}function Hi(t,e){return ka(yn(t),$i(e,0,t.length))}function Wi(t){return ka(yn(t))}function Ui(t,e,i){(void 0!==i&&!Sr(t[e],i)||void 0===i&&!(e in t))&&Ki(t,e,i)}function Gi(t,e,i){var s=t[e];Et.call(t,e)&&Sr(s,i)&&(void 0!==i||e in t)||Ki(t,e,i)}function Fi(t,e){for(var i=t.length;i--;)if(Sr(t[i][0],e))return i;return-1}function zi(t,e,i,s){return Qi(t,(function(t,n,a){e(s,t,i(t),a)})),s}function Bi(t,e){return t&&bn(e,f_(e),t)}function Ki(t,e,i){"__proto__"==e&&Te?Te(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function Yi(t,e){for(var i=-1,n=e.length,a=s(n),r=null==t;++i<n;)a[i]=r?void 0:u_(t,e[i]);return a}function $i(t,e,i){return t==t&&(void 0!==i&&(t=t<=i?t:i),void 0!==e&&(t=t>=e?t:e)),t}function Xi(t,e,i,s,n,a){var r,_=1&e,h=2&e,d=4&e;if(i&&(r=n?i(t,s,n,a):i(t)),void 0!==r)return r;if(!Gr(t))return t;var x=Rr(t);if(x){if(r=function(t){var e=t.length,i=new t.constructor(e);e&&"string"==typeof t[0]&&Et.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!_)return yn(t,r)}else{var M=ia(t),N=M==p||M==u;if(qr(t))return ln(t,_);if(M==y||M==o||N&&!n){if(r=h||N?{}:na(t),!_)return h?function(t,e){return bn(t,ea(t),e)}(t,function(t,e){return t&&bn(e,w_(e),t)}(r,t)):function(t,e){return bn(t,ta(t),e)}(t,Bi(r,t))}else{if(!Ut[M])return n?t:{};r=function(t,e,i){var s=t.constructor;switch(e){case k:return dn(t);case c:case l:return new s(+t);case E:return function(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case j:case T:case A:case S:case O:case I:case"[object Uint8ClampedArray]":case P:case R:return pn(t,i);case g:return new s;case m:case w:return new s(t);case b:return function(t){var e=new t.constructor(t.source,st.exec(t));return e.lastIndex=t.lastIndex,e}(t);case f:return new s;case v:return n=t,ji?gt(ji.call(n)):{}}var n}(t,M,_)}}a||(a=new qi);var D=a.get(t);if(D)return D;a.set(t,r),$r(t)?t.forEach((function(s){r.add(Xi(s,e,i,s,t,a))})):zr(t)&&t.forEach((function(s,n){r.set(n,Xi(s,e,i,n,t,a))}));var q=x?void 0:(d?h?Kn:Bn:h?w_:f_)(t);return _e(q||t,(function(s,n){q&&(s=t[n=s]),Gi(r,n,Xi(s,e,i,n,t,a))})),r}function Ji(t,e,i){var s=i.length;if(null==t)return!s;for(t=gt(t);s--;){var n=i[s],a=e[n],r=t[n];if(void 0===r&&!(n in t)||!a(r))return!1}return!0}function Zi(t,e,i){if("function"!=typeof t)throw new bt(a);return fa((function(){t.apply(void 0,i)}),e)}function Vi(t,e,i,s){var n=-1,a=le,r=!0,_=t.length,o=[],h=e.length;if(!_)return o;i&&(e=pe(e,Ie(i))),s?(a=de,r=!1):e.length>=200&&(a=Re,r=!1,e=new Di(e));t:for(;++n<_;){var c=t[n],l=null==i?c:i(c);if(c=s||0!==c?c:0,r&&l==l){for(var d=h;d--;)if(e[d]===l)continue t;o.push(c)}else a(e,l,s)||o.push(c)}return o}Ai.templateSettings={escape:W,evaluate:U,interpolate:G,variable:"",imports:{_:Ai}},Ai.prototype=Oi.prototype,Ai.prototype.constructor=Ai,Ii.prototype=Si(Oi.prototype),Ii.prototype.constructor=Ii,Pi.prototype=Si(Oi.prototype),Pi.prototype.constructor=Pi,Ri.prototype.clear=function(){this.__data__=mi?mi(null):{},this.size=0},Ri.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Ri.prototype.get=function(t){var e=this.__data__;if(mi){var i=e[t];return"__lodash_hash_undefined__"===i?void 0:i}return Et.call(e,t)?e[t]:void 0},Ri.prototype.has=function(t){var e=this.__data__;return mi?void 0!==e[t]:Et.call(e,t)},Ri.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=mi&&void 0===e?"__lodash_hash_undefined__":e,this},Mi.prototype.clear=function(){this.__data__=[],this.size=0},Mi.prototype.delete=function(t){var e=this.__data__,i=Fi(e,t);return!(i<0)&&(i==e.length-1?e.pop():Xt.call(e,i,1),--this.size,!0)},Mi.prototype.get=function(t){var e=this.__data__,i=Fi(e,t);return i<0?void 0:e[i][1]},Mi.prototype.has=function(t){return Fi(this.__data__,t)>-1},Mi.prototype.set=function(t,e){var i=this.__data__,s=Fi(i,t);return s<0?(++this.size,i.push([t,e])):i[s][1]=e,this},Ni.prototype.clear=function(){this.size=0,this.__data__={hash:new Ri,map:new(di||Mi),string:new Ri}},Ni.prototype.delete=function(t){var e=Zn(this,t).delete(t);return this.size-=e?1:0,e},Ni.prototype.get=function(t){return Zn(this,t).get(t)},Ni.prototype.has=function(t){return Zn(this,t).has(t)},Ni.prototype.set=function(t,e){var i=Zn(this,t),s=i.size;return i.set(t,e),this.size+=i.size==s?0:1,this},Di.prototype.add=Di.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Di.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.clear=function(){this.__data__=new Mi,this.size=0},qi.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},qi.prototype.get=function(t){return this.__data__.get(t)},qi.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.set=function(t,e){var i=this.__data__;if(i instanceof Mi){var s=i.__data__;if(!di||s.length<199)return s.push([t,e]),this.size=++i.size,this;i=this.__data__=new Ni(s)}return i.set(t,e),this.size=i.size,this};var Qi=vn(_s),ts=vn(os,!0);function es(t,e){var i=!0;return Qi(t,(function(t,s,n){return i=!!e(t,s,n)})),i}function is(t,e,i){for(var s=-1,n=t.length;++s<n;){var a=t[s],r=e(a);if(null!=r&&(void 0===_?r==r&&!Jr(r):i(r,_)))var _=r,o=a}return o}function ss(t,e){var i=[];return Qi(t,(function(t,s,n){e(t,s,n)&&i.push(t)})),i}function ns(t,e,i,s,n){var a=-1,r=t.length;for(i||(i=aa),n||(n=[]);++a<r;){var _=t[a];e>0&&i(_)?e>1?ns(_,e-1,i,s,n):ue(n,_):s||(n[n.length]=_)}return n}var as=xn(),rs=xn(!0);function _s(t,e){return t&&as(t,e,f_)}function os(t,e){return t&&rs(t,e,f_)}function hs(t,e){return ce(e,(function(e){return Hr(t[e])}))}function cs(t,e){for(var i=0,s=(e=_n(e,t)).length;null!=t&&i<s;)t=t[ja(e[i++])];return i&&i==s?t:void 0}function ls(t,e,i){var s=e(t);return Rr(t)?s:ue(s,i(t))}function ds(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":be&&be in gt(t)?function(t){var e=Et.call(t,be),i=t[be];try{t[be]=void 0;var s=!0}catch(t){}var n=At.call(t);s&&(e?t[be]=i:delete t[be]);return n}(t):function(t){return At.call(t)}(t)}function ps(t,e){return t>e}function us(t,e){return null!=t&&Et.call(t,e)}function gs(t,e){return null!=t&&e in gt(t)}function ms(t,e,i){for(var n=i?de:le,a=t[0].length,r=t.length,_=r,o=s(r),h=1/0,c=[];_--;){var l=t[_];_&&e&&(l=pe(l,Ie(e))),h=ri(l.length,h),o[_]=!i&&(e||a>=120&&l.length>=120)?new Di(_&&l):void 0}l=t[0];var d=-1,p=o[0];t:for(;++d<a&&c.length<h;){var u=l[d],g=e?e(u):u;if(u=i||0!==u?u:0,!(p?Re(p,g):n(c,g,i))){for(_=r;--_;){var m=o[_];if(!(m?Re(m,g):n(t[_],g,i)))continue t}p&&p.push(g),c.push(u)}}return c}function ys(t,e,i){var s=null==(t=ga(t,e=_n(e,t)))?t:t[ja(Ca(e))];return null==s?void 0:ae(s,t,i)}function bs(t){return Fr(t)&&ds(t)==o}function fs(t,e,i,s,n){return t===e||(null==t||null==e||!Fr(t)&&!Fr(e)?t!=t&&e!=e:function(t,e,i,s,n,a){var r=Rr(t),_=Rr(e),p=r?h:ia(t),u=_?h:ia(e),x=(p=p==o?y:p)==y,j=(u=u==o?y:u)==y,T=p==u;if(T&&qr(t)){if(!qr(e))return!1;r=!0,x=!1}if(T&&!x)return a||(a=new qi),r||Zr(t)?Fn(t,e,i,s,n,a):function(t,e,i,s,n,a,r){switch(i){case E:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case k:return!(t.byteLength!=e.byteLength||!a(new qt(t),new qt(e)));case c:case l:case m:return Sr(+t,+e);case d:return t.name==e.name&&t.message==e.message;case b:case w:return t==e+"";case g:var _=We;case f:var o=1&s;if(_||(_=Fe),t.size!=e.size&&!o)return!1;var h=r.get(t);if(h)return h==e;s|=2,r.set(t,e);var p=Fn(_(t),_(e),s,n,a,r);return r.delete(t),p;case v:if(ji)return ji.call(t)==ji.call(e)}return!1}(t,e,p,i,s,n,a);if(!(1&i)){var A=x&&Et.call(t,"__wrapped__"),S=j&&Et.call(e,"__wrapped__");if(A||S){var O=A?t.value():t,I=S?e.value():e;return a||(a=new qi),n(O,I,i,s,a)}}if(!T)return!1;return a||(a=new qi),function(t,e,i,s,n,a){var r=1&i,_=Bn(t),o=_.length,h=Bn(e).length;if(o!=h&&!r)return!1;var c=o;for(;c--;){var l=_[c];if(!(r?l in e:Et.call(e,l)))return!1}var d=a.get(t),p=a.get(e);if(d&&p)return d==e&&p==t;var u=!0;a.set(t,e),a.set(e,t);var g=r;for(;++c<o;){l=_[c];var m=t[l],y=e[l];if(s)var b=r?s(y,m,l,e,t,a):s(m,y,l,t,e,a);if(!(void 0===b?m===y||n(m,y,i,s,a):b)){u=!1;break}g||(g="constructor"==l)}if(u&&!g){var f=t.constructor,w=e.constructor;f==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof f&&f instanceof f&&"function"==typeof w&&w instanceof w||(u=!1)}return a.delete(t),a.delete(e),u}(t,e,i,s,n,a)}(t,e,i,s,fs,n))}function ws(t,e,i,s){var n=i.length,a=n,r=!s;if(null==t)return!a;for(t=gt(t);n--;){var _=i[n];if(r&&_[2]?_[1]!==t[_[0]]:!(_[0]in t))return!1}for(;++n<a;){var o=(_=i[n])[0],h=t[o],c=_[1];if(r&&_[2]){if(void 0===h&&!(o in t))return!1}else{var l=new qi;if(s)var d=s(h,c,o,t,e,l);if(!(void 0===d?fs(c,h,3,s,l):d))return!1}}return!0}function vs(t){return!(!Gr(t)||(e=t,Tt&&Tt in e))&&(Hr(t)?It:rt).test(Ta(t));var e}function xs(t){return"function"==typeof t?t:null==t?B_:"object"==typeof t?Rr(t)?Ss(t[0],t[1]):As(t):to(t)}function ks(t){if(!la(t))return ni(t);var e=[];for(var i in gt(t))Et.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Es(t){if(!Gr(t))return function(t){var e=[];if(null!=t)for(var i in gt(t))e.push(i);return e}(t);var e=la(t),i=[];for(var s in t)("constructor"!=s||!e&&Et.call(t,s))&&i.push(s);return i}function js(t,e){return t<e}function Ts(t,e){var i=-1,n=Nr(t)?s(t.length):[];return Qi(t,(function(t,s,a){n[++i]=e(t,s,a)})),n}function As(t){var e=Vn(t);return 1==e.length&&e[0][2]?pa(e[0][0],e[0][1]):function(i){return i===t||ws(i,t,e)}}function Ss(t,e){return oa(t)&&da(e)?pa(ja(t),e):function(i){var s=u_(i,t);return void 0===s&&s===e?g_(i,t):fs(e,s,3)}}function Os(t,e,i,s,n){t!==e&&as(e,(function(a,r){if(n||(n=new qi),Gr(a))!function(t,e,i,s,n,a,r){var _=ya(t,i),o=ya(e,i),h=r.get(o);if(h)return void Ui(t,i,h);var c=a?a(_,o,i+"",t,e,r):void 0,l=void 0===c;if(l){var d=Rr(o),p=!d&&qr(o),u=!d&&!p&&Zr(o);c=o,d||p||u?Rr(_)?c=_:Dr(_)?c=yn(_):p?(l=!1,c=ln(o,!0)):u?(l=!1,c=pn(o,!0)):c=[]:Kr(o)||Pr(o)?(c=_,Pr(_)?c=a_(_):Gr(_)&&!Hr(_)||(c=na(o))):l=!1}l&&(r.set(o,c),n(c,o,s,a,r),r.delete(o));Ui(t,i,c)}(t,e,r,i,Os,s,n);else{var _=s?s(ya(t,r),a,r+"",t,e,n):void 0;void 0===_&&(_=a),Ui(t,r,_)}}),w_)}function Is(t,e){var i=t.length;if(i)return ra(e+=e<0?i:0,i)?t[e]:void 0}function Ps(t,e,i){e=e.length?pe(e,(function(t){return Rr(t)?function(e){return cs(e,1===t.length?t[0]:t)}:t})):[B_];var s=-1;return e=pe(e,Ie(Jn())),function(t,e){var i=t.length;for(t.sort(e);i--;)t[i]=t[i].value;return t}(Ts(t,(function(t,i,n){return{criteria:pe(e,(function(e){return e(t)})),index:++s,value:t}})),(function(t,e){return function(t,e,i){var s=-1,n=t.criteria,a=e.criteria,r=n.length,_=i.length;for(;++s<r;){var o=un(n[s],a[s]);if(o){if(s>=_)return o;var h=i[s];return o*("desc"==h?-1:1)}}return t.index-e.index}(t,e,i)}))}function Rs(t,e,i){for(var s=-1,n=e.length,a={};++s<n;){var r=e[s],_=cs(t,r);i(_,r)&&Ws(a,_n(r,t),_)}return a}function Ms(t,e,i,s){var n=s?xe:ve,a=-1,r=e.length,_=t;for(t===e&&(e=yn(e)),i&&(_=pe(t,Ie(i)));++a<r;)for(var o=0,h=e[a],c=i?i(h):h;(o=n(_,c,o,s))>-1;)_!==t&&Xt.call(_,o,1),Xt.call(t,o,1);return t}function Ns(t,e){for(var i=t?e.length:0,s=i-1;i--;){var n=e[i];if(i==s||n!==a){var a=n;ra(n)?Xt.call(t,n,1):Vs(t,n)}}return t}function Ds(t,e){return t+Qe(hi()*(e-t+1))}function qs(t,e){var i="";if(!t||e<1||e>9007199254740991)return i;do{e%2&&(i+=t),(e=Qe(e/2))&&(t+=t)}while(e);return i}function Ls(t,e){return wa(ua(t,e,B_),t+"")}function Cs(t){return Ci(S_(t))}function Hs(t,e){var i=S_(t);return ka(i,$i(e,0,i.length))}function Ws(t,e,i,s){if(!Gr(t))return t;for(var n=-1,a=(e=_n(e,t)).length,r=a-1,_=t;null!=_&&++n<a;){var o=ja(e[n]),h=i;if("__proto__"===o||"constructor"===o||"prototype"===o)return t;if(n!=r){var c=_[o];void 0===(h=s?s(c,o,_):void 0)&&(h=Gr(c)?c:ra(e[n+1])?[]:{})}Gi(_,o,h),_=_[o]}return t}var Us=yi?function(t,e){return yi.set(t,e),t}:B_,Gs=Te?function(t,e){return Te(t,"toString",{configurable:!0,enumerable:!1,value:G_(e),writable:!0})}:B_;function Fs(t){return ka(S_(t))}function zs(t,e,i){var n=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(i=i>a?a:i)<0&&(i+=a),a=e>i?0:i-e>>>0,e>>>=0;for(var r=s(a);++n<a;)r[n]=t[n+e];return r}function Bs(t,e){var i;return Qi(t,(function(t,s,n){return!(i=e(t,s,n))})),!!i}function Ks(t,e,i){var s=0,n=null==t?s:t.length;if("number"==typeof e&&e==e&&n<=2147483647){for(;s<n;){var a=s+n>>>1,r=t[a];null!==r&&!Jr(r)&&(i?r<=e:r<e)?s=a+1:n=a}return n}return Ys(t,e,B_,i)}function Ys(t,e,i,s){var n=0,a=null==t?0:t.length;if(0===a)return 0;for(var r=(e=i(e))!=e,_=null===e,o=Jr(e),h=void 0===e;n<a;){var c=Qe((n+a)/2),l=i(t[c]),d=void 0!==l,p=null===l,u=l==l,g=Jr(l);if(r)var m=s||u;else m=h?u&&(s||d):_?u&&d&&(s||!p):o?u&&d&&!p&&(s||!g):!p&&!g&&(s?l<=e:l<e);m?n=c+1:a=c}return ri(a,4294967294)}function $s(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var r=t[i],_=e?e(r):r;if(!i||!Sr(_,o)){var o=_;a[n++]=0===r?0:r}}return a}function Xs(t){return"number"==typeof t?t:Jr(t)?NaN:+t}function Js(t){if("string"==typeof t)return t;if(Rr(t))return pe(t,Js)+"";if(Jr(t))return Ti?Ti.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Zs(t,e,i){var s=-1,n=le,a=t.length,r=!0,_=[],o=_;if(i)r=!1,n=de;else if(a>=200){var h=e?null:Ln(t);if(h)return Fe(h);r=!1,n=Re,o=new Di}else o=e?[]:_;t:for(;++s<a;){var c=t[s],l=e?e(c):c;if(c=i||0!==c?c:0,r&&l==l){for(var d=o.length;d--;)if(o[d]===l)continue t;e&&o.push(l),_.push(c)}else n(o,l,i)||(o!==_&&o.push(l),_.push(c))}return _}function Vs(t,e){return null==(t=ga(t,e=_n(e,t)))||delete t[ja(Ca(e))]}function Qs(t,e,i,s){return Ws(t,e,i(cs(t,e)),s)}function tn(t,e,i,s){for(var n=t.length,a=s?n:-1;(s?a--:++a<n)&&e(t[a],a,t););return i?zs(t,s?0:a,s?a+1:n):zs(t,s?a+1:0,s?n:a)}function en(t,e){var i=t;return i instanceof Pi&&(i=i.value()),ge(e,(function(t,e){return e.func.apply(e.thisArg,ue([t],e.args))}),i)}function sn(t,e,i){var n=t.length;if(n<2)return n?Zs(t[0]):[];for(var a=-1,r=s(n);++a<n;)for(var _=t[a],o=-1;++o<n;)o!=a&&(r[a]=Vi(r[a]||_,t[o],e,i));return Zs(ns(r,1),e,i)}function nn(t,e,i){for(var s=-1,n=t.length,a=e.length,r={};++s<n;){var _=s<a?e[s]:void 0;i(r,t[s],_)}return r}function an(t){return Dr(t)?t:[]}function rn(t){return"function"==typeof t?t:B_}function _n(t,e){return Rr(t)?t:oa(t,e)?[t]:Ea(r_(t))}var on=Ls;function hn(t,e,i){var s=t.length;return i=void 0===i?s:i,!e&&i>=s?t:zs(t,e,i)}var cn=Xe||function(t){return Yt.clearTimeout(t)};function ln(t,e){if(e)return t.slice();var i=t.length,s=Gt?Gt(i):new t.constructor(i);return t.copy(s),s}function dn(t){var e=new t.constructor(t.byteLength);return new qt(e).set(new qt(t)),e}function pn(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function un(t,e){if(t!==e){var i=void 0!==t,s=null===t,n=t==t,a=Jr(t),r=void 0!==e,_=null===e,o=e==e,h=Jr(e);if(!_&&!h&&!a&&t>e||a&&r&&o&&!_&&!h||s&&r&&o||!i&&o||!n)return 1;if(!s&&!a&&!h&&t<e||h&&i&&n&&!s&&!a||_&&i&&n||!r&&n||!o)return-1}return 0}function gn(t,e,i,n){for(var a=-1,r=t.length,_=i.length,o=-1,h=e.length,c=ai(r-_,0),l=s(h+c),d=!n;++o<h;)l[o]=e[o];for(;++a<_;)(d||a<r)&&(l[i[a]]=t[a]);for(;c--;)l[o++]=t[a++];return l}function mn(t,e,i,n){for(var a=-1,r=t.length,_=-1,o=i.length,h=-1,c=e.length,l=ai(r-o,0),d=s(l+c),p=!n;++a<l;)d[a]=t[a];for(var u=a;++h<c;)d[u+h]=e[h];for(;++_<o;)(p||a<r)&&(d[u+i[_]]=t[a++]);return d}function yn(t,e){var i=-1,n=t.length;for(e||(e=s(n));++i<n;)e[i]=t[i];return e}function bn(t,e,i,s){var n=!i;i||(i={});for(var a=-1,r=e.length;++a<r;){var _=e[a],o=s?s(i[_],t[_],_,i,t):void 0;void 0===o&&(o=t[_]),n?Ki(i,_,o):Gi(i,_,o)}return i}function fn(t,e){return function(i,s){var n=Rr(i)?re:zi,a=e?e():{};return n(i,t,Jn(s,2),a)}}function wn(t){return Ls((function(e,i){var s=-1,n=i.length,a=n>1?i[n-1]:void 0,r=n>2?i[2]:void 0;for(a=t.length>3&&"function"==typeof a?(n--,a):void 0,r&&_a(i[0],i[1],r)&&(a=n<3?void 0:a,n=1),e=gt(e);++s<n;){var _=i[s];_&&t(e,_,s,a)}return e}))}function vn(t,e){return function(i,s){if(null==i)return i;if(!Nr(i))return t(i,s);for(var n=i.length,a=e?n:-1,r=gt(i);(e?a--:++a<n)&&!1!==s(r[a],a,r););return i}}function xn(t){return function(e,i,s){for(var n=-1,a=gt(e),r=s(e),_=r.length;_--;){var o=r[t?_:++n];if(!1===i(a[o],o,a))break}return e}}function kn(t){return function(e){var i=He(e=r_(e))?Ke(e):void 0,s=i?i[0]:e.charAt(0),n=i?hn(i,1).join(""):e.slice(1);return s[t]()+n}}function En(t){return function(e){return ge(H_(P_(e).replace(Rt,"")),t,"")}}function jn(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Si(t.prototype),s=t.apply(i,e);return Gr(s)?s:i}}function Tn(t){return function(e,i,s){var n=gt(e);if(!Nr(e)){var a=Jn(i,3);e=f_(e),i=function(t){return a(n[t],t,n)}}var r=t(e,i,s);return r>-1?n[a?e[r]:r]:void 0}}function An(t){return zn((function(e){var i=e.length,s=i,n=Ii.prototype.thru;for(t&&e.reverse();s--;){var r=e[s];if("function"!=typeof r)throw new bt(a);if(n&&!_&&"wrapper"==$n(r))var _=new Ii([],!0)}for(s=_?s:i;++s<i;){var o=$n(r=e[s]),h="wrapper"==o?Yn(r):void 0;_=h&&ha(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?_[$n(h[0])].apply(_,h[3]):1==r.length&&ha(r)?_[o]():_.thru(r)}return function(){var t=arguments,s=t[0];if(_&&1==t.length&&Rr(s))return _.plant(s).value();for(var n=0,a=i?e[n].apply(this,t):s;++n<i;)a=e[n].call(this,a);return a}}))}function Sn(t,e,i,n,a,r,_,o,h,c){var l=128&e,d=1&e,p=2&e,u=24&e,g=512&e,m=p?void 0:jn(t);return function y(){for(var b=arguments.length,f=s(b),w=b;w--;)f[w]=arguments[w];if(u)var v=Xn(y),x=De(f,v);if(n&&(f=gn(f,n,a,u)),r&&(f=mn(f,r,_,u)),b-=x,u&&b<c){var k=Ge(f,v);return Dn(t,e,Sn,y.placeholder,i,f,k,o,h,c-b)}var E=d?i:this,j=p?E[t]:t;return b=f.length,o?f=ma(f,o):g&&b>1&&f.reverse(),l&&h<b&&(f.length=h),this&&this!==Yt&&this instanceof y&&(j=m||jn(j)),j.apply(E,f)}}function On(t,e){return function(i,s){return function(t,e,i,s){return _s(t,(function(t,n,a){e(s,i(t),n,a)})),s}(i,t,e(s),{})}}function In(t,e){return function(i,s){var n;if(void 0===i&&void 0===s)return e;if(void 0!==i&&(n=i),void 0!==s){if(void 0===n)return s;"string"==typeof i||"string"==typeof s?(i=Js(i),s=Js(s)):(i=Xs(i),s=Xs(s)),n=t(i,s)}return n}}function Pn(t){return zn((function(e){return e=pe(e,Ie(Jn())),Ls((function(i){var s=this;return t(e,(function(t){return ae(t,s,i)}))}))}))}function Rn(t,e){var i=(e=void 0===e?" ":Js(e)).length;if(i<2)return i?qs(e,t):e;var s=qs(e,Ve(t/Be(e)));return He(e)?hn(Ke(s),0,t).join(""):s.slice(0,t)}function Mn(t){return function(e,i,n){return n&&"number"!=typeof n&&_a(e,i,n)&&(i=n=void 0),e=e_(e),void 0===i?(i=e,e=0):i=e_(i),function(t,e,i,n){for(var a=-1,r=ai(Ve((e-t)/(i||1)),0),_=s(r);r--;)_[n?r:++a]=t,t+=i;return _}(e,i,n=void 0===n?e<i?1:-1:e_(n),t)}}function Nn(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=n_(e),i=n_(i)),t(e,i)}}function Dn(t,e,i,s,n,a,r,_,o,h){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var l=[t,e,n,c?a:void 0,c?r:void 0,c?void 0:a,c?void 0:r,_,o,h],d=i.apply(void 0,l);return ha(t)&&ba(d,l),d.placeholder=s,va(d,t,e)}function qn(t){var e=ut[t];return function(t,i){if(t=n_(t),(i=null==i?0:ri(i_(i),292))&&ii(t)){var s=(r_(t)+"e").split("e");return+((s=(r_(e(s[0]+"e"+(+s[1]+i)))+"e").split("e"))[0]+"e"+(+s[1]-i))}return e(t)}}var Ln=ui&&1/Fe(new ui([,-0]))[1]==1/0?function(t){return new ui(t)}:J_;function Cn(t){return function(e){var i=ia(e);return i==g?We(e):i==f?ze(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Hn(t,e,i,n,_,o,h,c){var l=2&e;if(!l&&"function"!=typeof t)throw new bt(a);var d=n?n.length:0;if(d||(e&=-97,n=_=void 0),h=void 0===h?h:ai(i_(h),0),c=void 0===c?c:i_(c),d-=_?_.length:0,64&e){var p=n,u=_;n=_=void 0}var g=l?void 0:Yn(t),m=[t,e,i,n,_,p,u,o,h,c];if(g&&function(t,e){var i=t[1],s=e[1],n=i|s,a=n<131,_=128==s&&8==i||128==s&&256==i&&t[7].length<=e[8]||384==s&&e[7].length<=e[8]&&8==i;if(!a&&!_)return t;1&s&&(t[2]=e[2],n|=1&i?0:4);var o=e[3];if(o){var h=t[3];t[3]=h?gn(h,o,e[4]):o,t[4]=h?Ge(t[3],r):e[4]}(o=e[5])&&(h=t[5],t[5]=h?mn(h,o,e[6]):o,t[6]=h?Ge(t[5],r):e[6]);(o=e[7])&&(t[7]=o);128&s&&(t[8]=null==t[8]?e[8]:ri(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=n}(m,g),t=m[0],e=m[1],i=m[2],n=m[3],_=m[4],!(c=m[9]=void 0===m[9]?l?0:t.length:ai(m[9]-d,0))&&24&e&&(e&=-25),e&&1!=e)y=8==e||16==e?function(t,e,i){var n=jn(t);return function a(){for(var r=arguments.length,_=s(r),o=r,h=Xn(a);o--;)_[o]=arguments[o];var c=r<3&&_[0]!==h&&_[r-1]!==h?[]:Ge(_,h);if((r-=c.length)<i)return Dn(t,e,Sn,a.placeholder,void 0,_,c,void 0,void 0,i-r);var l=this&&this!==Yt&&this instanceof a?n:t;return ae(l,this,_)}}(t,e,c):32!=e&&33!=e||_.length?Sn.apply(void 0,m):function(t,e,i,n){var a=1&e,r=jn(t);return function e(){for(var _=-1,o=arguments.length,h=-1,c=n.length,l=s(c+o),d=this&&this!==Yt&&this instanceof e?r:t;++h<c;)l[h]=n[h];for(;o--;)l[h++]=arguments[++_];return ae(d,a?i:this,l)}}(t,e,i,n);else var y=function(t,e,i){var s=1&e,n=jn(t);return function e(){var a=this&&this!==Yt&&this instanceof e?n:t;return a.apply(s?i:this,arguments)}}(t,e,i);return va((g?Us:ba)(y,m),t,e)}function Wn(t,e,i,s){return void 0===t||Sr(t,vt[i])&&!Et.call(s,i)?e:t}function Un(t,e,i,s,n,a){return Gr(t)&&Gr(e)&&(a.set(e,t),Os(t,e,void 0,Un,a),a.delete(e)),t}function Gn(t){return Kr(t)?void 0:t}function Fn(t,e,i,s,n,a){var r=1&i,_=t.length,o=e.length;if(_!=o&&!(r&&o>_))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var l=-1,d=!0,p=2&i?new Di:void 0;for(a.set(t,e),a.set(e,t);++l<_;){var u=t[l],g=e[l];if(s)var m=r?s(g,u,l,e,t,a):s(u,g,l,t,e,a);if(void 0!==m){if(m)continue;d=!1;break}if(p){if(!ye(e,(function(t,e){if(!Re(p,e)&&(u===t||n(u,t,i,s,a)))return p.push(e)}))){d=!1;break}}else if(u!==g&&!n(u,g,i,s,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function zn(t){return wa(ua(t,void 0,Ma),t+"")}function Bn(t){return ls(t,f_,ta)}function Kn(t){return ls(t,w_,ea)}var Yn=yi?function(t){return yi.get(t)}:J_;function $n(t){for(var e=t.name+"",i=bi[e],s=Et.call(bi,e)?i.length:0;s--;){var n=i[s],a=n.func;if(null==a||a==t)return n.name}return e}function Xn(t){return(Et.call(Ai,"placeholder")?Ai:t).placeholder}function Jn(){var t=Ai.iteratee||K_;return t=t===K_?xs:t,arguments.length?t(arguments[0],arguments[1]):t}function Zn(t,e){var i,s,n=t.__data__;return("string"==(s=typeof(i=e))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==i:null===i)?n["string"==typeof e?"string":"hash"]:n.map}function Vn(t){for(var e=f_(t),i=e.length;i--;){var s=e[i],n=t[s];e[i]=[s,n,da(n)]}return e}function Qn(t,e){var i=function(t,e){return null==t?void 0:t[e]}(t,e);return vs(i)?i:void 0}var ta=ti?function(t){return null==t?[]:(t=gt(t),ce(ti(t),(function(e){return $t.call(t,e)})))}:so,ea=ti?function(t){for(var e=[];t;)ue(e,ta(t)),t=Bt(t);return e}:so,ia=ds;function sa(t,e,i){for(var s=-1,n=(e=_n(e,t)).length,a=!1;++s<n;){var r=ja(e[s]);if(!(a=null!=t&&i(t,r)))break;t=t[r]}return a||++s!=n?a:!!(n=null==t?0:t.length)&&Ur(n)&&ra(r,n)&&(Rr(t)||Pr(t))}function na(t){return"function"!=typeof t.constructor||la(t)?{}:Si(Bt(t))}function aa(t){return Rr(t)||Pr(t)||!!(Zt&&t&&t[Zt])}function ra(t,e){var i=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==i||"symbol"!=i&&ot.test(t))&&t>-1&&t%1==0&&t<e}function _a(t,e,i){if(!Gr(i))return!1;var s=typeof e;return!!("number"==s?Nr(i)&&ra(e,i.length):"string"==s&&e in i)&&Sr(i[e],t)}function oa(t,e){if(Rr(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!Jr(t))||(z.test(t)||!F.test(t)||null!=e&&t in gt(e))}function ha(t){var e=$n(t),i=Ai[e];if("function"!=typeof i||!(e in Pi.prototype))return!1;if(t===i)return!0;var s=Yn(i);return!!s&&t===s[0]}(li&&ia(new li(new ArrayBuffer(1)))!=E||di&&ia(new di)!=g||pi&&"[object Promise]"!=ia(pi.resolve())||ui&&ia(new ui)!=f||gi&&ia(new gi)!=x)&&(ia=function(t){var e=ds(t),i=e==y?t.constructor:void 0,s=i?Ta(i):"";if(s)switch(s){case fi:return E;case wi:return g;case vi:return"[object Promise]";case xi:return f;case ki:return x}return e});var ca=xt?Hr:no;function la(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vt)}function da(t){return t==t&&!Gr(t)}function pa(t,e){return function(i){return null!=i&&(i[t]===e&&(void 0!==e||t in gt(i)))}}function ua(t,e,i){return e=ai(void 0===e?t.length-1:e,0),function(){for(var n=arguments,a=-1,r=ai(n.length-e,0),_=s(r);++a<r;)_[a]=n[e+a];a=-1;for(var o=s(e+1);++a<e;)o[a]=n[a];return o[e]=i(_),ae(t,this,o)}}function ga(t,e){return e.length<2?t:cs(t,zs(e,0,-1))}function ma(t,e){for(var i=t.length,s=ri(e.length,i),n=yn(t);s--;){var a=e[s];t[s]=ra(a,i)?n[a]:void 0}return t}function ya(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ba=xa(Us),fa=Ze||function(t,e){return Yt.setTimeout(t,e)},wa=xa(Gs);function va(t,e,i){var s=e+"";return wa(t,function(t,e){var i=e.length;if(!i)return t;var s=i-1;return e[s]=(i>1?"& ":"")+e[s],e=e.join(i>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(s,function(t,e){return _e(_,(function(i){var s="_."+i[0];e&i[1]&&!le(t,s)&&t.push(s)})),t.sort()}(function(t){var e=t.match(V);return e?e[1].split(Q):[]}(s),i)))}function xa(t){var e=0,i=0;return function(){var s=_i(),n=16-(s-i);if(i=s,n>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function ka(t,e){var i=-1,s=t.length,n=s-1;for(e=void 0===e?s:e;++i<e;){var a=Ds(i,n),r=t[a];t[a]=t[i],t[i]=r}return t.length=e,t}var Ea=function(t){var e=xr(t,(function(t){return 500===i.size&&i.clear(),t})),i=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(B,(function(t,i,s,n){e.push(s?n.replace(et,"$1"):i||t)})),e}));function ja(t){if("string"==typeof t||Jr(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Ta(t){if(null!=t){try{return kt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Aa(t){if(t instanceof Pi)return t.clone();var e=new Ii(t.__wrapped__,t.__chain__);return e.__actions__=yn(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Sa=Ls((function(t,e){return Dr(t)?Vi(t,ns(e,1,Dr,!0)):[]})),Oa=Ls((function(t,e){var i=Ca(e);return Dr(i)&&(i=void 0),Dr(t)?Vi(t,ns(e,1,Dr,!0),Jn(i,2)):[]})),Ia=Ls((function(t,e){var i=Ca(e);return Dr(i)&&(i=void 0),Dr(t)?Vi(t,ns(e,1,Dr,!0),void 0,i):[]}));function Pa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:i_(i);return n<0&&(n=ai(s+n,0)),we(t,Jn(e,3),n)}function Ra(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s-1;return void 0!==i&&(n=i_(i),n=i<0?ai(s+n,0):ri(n,s-1)),we(t,Jn(e,3),n,!0)}function Ma(t){return(null==t?0:t.length)?ns(t,1):[]}function Na(t){return t&&t.length?t[0]:void 0}var Da=Ls((function(t){var e=pe(t,an);return e.length&&e[0]===t[0]?ms(e):[]})),qa=Ls((function(t){var e=Ca(t),i=pe(t,an);return e===Ca(i)?e=void 0:i.pop(),i.length&&i[0]===t[0]?ms(i,Jn(e,2)):[]})),La=Ls((function(t){var e=Ca(t),i=pe(t,an);return(e="function"==typeof e?e:void 0)&&i.pop(),i.length&&i[0]===t[0]?ms(i,void 0,e):[]}));function Ca(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Ha=Ls(Wa);function Wa(t,e){return t&&t.length&&e&&e.length?Ms(t,e):t}var Ua=zn((function(t,e){var i=null==t?0:t.length,s=Yi(t,e);return Ns(t,pe(e,(function(t){return ra(t,i)?+t:t})).sort(un)),s}));function Ga(t){return null==t?t:ci.call(t)}var Fa=Ls((function(t){return Zs(ns(t,1,Dr,!0))})),za=Ls((function(t){var e=Ca(t);return Dr(e)&&(e=void 0),Zs(ns(t,1,Dr,!0),Jn(e,2))})),Ba=Ls((function(t){var e=Ca(t);return e="function"==typeof e?e:void 0,Zs(ns(t,1,Dr,!0),void 0,e)}));function Ka(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(Dr(t))return e=ai(t.length,e),!0})),Oe(e,(function(e){return pe(t,je(e))}))}function Ya(t,e){if(!t||!t.length)return[];var i=Ka(t);return null==e?i:pe(i,(function(t){return ae(e,void 0,t)}))}var $a=Ls((function(t,e){return Dr(t)?Vi(t,e):[]})),Xa=Ls((function(t){return sn(ce(t,Dr))})),Ja=Ls((function(t){var e=Ca(t);return Dr(e)&&(e=void 0),sn(ce(t,Dr),Jn(e,2))})),Za=Ls((function(t){var e=Ca(t);return e="function"==typeof e?e:void 0,sn(ce(t,Dr),void 0,e)})),Va=Ls(Ka);var Qa=Ls((function(t){var e=t.length,i=e>1?t[e-1]:void 0;return i="function"==typeof i?(t.pop(),i):void 0,Ya(t,i)}));function tr(t){var e=Ai(t);return e.__chain__=!0,e}function er(t,e){return e(t)}var ir=zn((function(t){var e=t.length,i=e?t[0]:0,s=this.__wrapped__,n=function(e){return Yi(e,t)};return!(e>1||this.__actions__.length)&&s instanceof Pi&&ra(i)?((s=s.slice(i,+i+(e?1:0))).__actions__.push({func:er,args:[n],thisArg:void 0}),new Ii(s,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(n)}));var sr=fn((function(t,e,i){Et.call(t,i)?++t[i]:Ki(t,i,1)}));var nr=Tn(Pa),ar=Tn(Ra);function rr(t,e){return(Rr(t)?_e:Qi)(t,Jn(e,3))}function _r(t,e){return(Rr(t)?oe:ts)(t,Jn(e,3))}var or=fn((function(t,e,i){Et.call(t,i)?t[i].push(e):Ki(t,i,[e])}));var hr=Ls((function(t,e,i){var n=-1,a="function"==typeof e,r=Nr(t)?s(t.length):[];return Qi(t,(function(t){r[++n]=a?ae(e,t,i):ys(t,e,i)})),r})),cr=fn((function(t,e,i){Ki(t,i,e)}));function lr(t,e){return(Rr(t)?pe:Ts)(t,Jn(e,3))}var dr=fn((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]}));var pr=Ls((function(t,e){if(null==t)return[];var i=e.length;return i>1&&_a(t,e[0],e[1])?e=[]:i>2&&_a(e[0],e[1],e[2])&&(e=[e[0]]),Ps(t,ns(e,1),[])})),ur=Je||function(){return Yt.Date.now()};function gr(t,e,i){return e=i?void 0:e,Hn(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function mr(t,e){var i;if("function"!=typeof e)throw new bt(a);return t=i_(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=void 0),i}}var yr=Ls((function(t,e,i){var s=1;if(i.length){var n=Ge(i,Xn(yr));s|=32}return Hn(t,s,e,i,n)})),br=Ls((function(t,e,i){var s=3;if(i.length){var n=Ge(i,Xn(br));s|=32}return Hn(e,s,t,i,n)}));function fr(t,e,i){var s,n,r,_,o,h,c=0,l=!1,d=!1,p=!0;if("function"!=typeof t)throw new bt(a);function u(e){var i=s,a=n;return s=n=void 0,c=e,_=t.apply(a,i)}function g(t){return c=t,o=fa(y,e),l?u(t):_}function m(t){var i=t-h;return void 0===h||i>=e||i<0||d&&t-c>=r}function y(){var t=ur();if(m(t))return b(t);o=fa(y,function(t){var i=e-(t-h);return d?ri(i,r-(t-c)):i}(t))}function b(t){return o=void 0,p&&s?u(t):(s=n=void 0,_)}function f(){var t=ur(),i=m(t);if(s=arguments,n=this,h=t,i){if(void 0===o)return g(h);if(d)return cn(o),o=fa(y,e),u(h)}return void 0===o&&(o=fa(y,e)),_}return e=n_(e)||0,Gr(i)&&(l=!!i.leading,r=(d="maxWait"in i)?ai(n_(i.maxWait)||0,e):r,p="trailing"in i?!!i.trailing:p),f.cancel=function(){void 0!==o&&cn(o),c=0,s=h=n=o=void 0},f.flush=function(){return void 0===o?_:b(ur())},f}var wr=Ls((function(t,e){return Zi(t,1,e)})),vr=Ls((function(t,e,i){return Zi(t,n_(e)||0,i)}));function xr(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new bt(a);var i=function(){var s=arguments,n=e?e.apply(this,s):s[0],a=i.cache;if(a.has(n))return a.get(n);var r=t.apply(this,s);return i.cache=a.set(n,r)||a,r};return i.cache=new(xr.Cache||Ni),i}function kr(t){if("function"!=typeof t)throw new bt(a);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}xr.Cache=Ni;var Er=on((function(t,e){var i=(e=1==e.length&&Rr(e[0])?pe(e[0],Ie(Jn())):pe(ns(e,1),Ie(Jn()))).length;return Ls((function(s){for(var n=-1,a=ri(s.length,i);++n<a;)s[n]=e[n].call(this,s[n]);return ae(t,this,s)}))})),jr=Ls((function(t,e){return Hn(t,32,void 0,e,Ge(e,Xn(jr)))})),Tr=Ls((function(t,e){return Hn(t,64,void 0,e,Ge(e,Xn(Tr)))})),Ar=zn((function(t,e){return Hn(t,256,void 0,void 0,void 0,e)}));function Sr(t,e){return t===e||t!=t&&e!=e}var Or=Nn(ps),Ir=Nn((function(t,e){return t>=e})),Pr=bs(function(){return arguments}())?bs:function(t){return Fr(t)&&Et.call(t,"callee")&&!$t.call(t,"callee")},Rr=s.isArray,Mr=Qt?Ie(Qt):function(t){return Fr(t)&&ds(t)==k};function Nr(t){return null!=t&&Ur(t.length)&&!Hr(t)}function Dr(t){return Fr(t)&&Nr(t)}var qr=ei||no,Lr=te?Ie(te):function(t){return Fr(t)&&ds(t)==l};function Cr(t){if(!Fr(t))return!1;var e=ds(t);return e==d||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Kr(t)}function Hr(t){if(!Gr(t))return!1;var e=ds(t);return e==p||e==u||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Wr(t){return"number"==typeof t&&t==i_(t)}function Ur(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Gr(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Fr(t){return null!=t&&"object"==typeof t}var zr=ee?Ie(ee):function(t){return Fr(t)&&ia(t)==g};function Br(t){return"number"==typeof t||Fr(t)&&ds(t)==m}function Kr(t){if(!Fr(t)||ds(t)!=y)return!1;var e=Bt(t);if(null===e)return!0;var i=Et.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&kt.call(i)==St}var Yr=ie?Ie(ie):function(t){return Fr(t)&&ds(t)==b};var $r=se?Ie(se):function(t){return Fr(t)&&ia(t)==f};function Xr(t){return"string"==typeof t||!Rr(t)&&Fr(t)&&ds(t)==w}function Jr(t){return"symbol"==typeof t||Fr(t)&&ds(t)==v}var Zr=ne?Ie(ne):function(t){return Fr(t)&&Ur(t.length)&&!!Wt[ds(t)]};var Vr=Nn(js),Qr=Nn((function(t,e){return t<=e}));function t_(t){if(!t)return[];if(Nr(t))return Xr(t)?Ke(t):yn(t);if(Vt&&t[Vt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Vt]());var e=ia(t);return(e==g?We:e==f?Fe:S_)(t)}function e_(t){return t?(t=n_(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function i_(t){var e=e_(t),i=e%1;return e==e?i?e-i:e:0}function s_(t){return t?$i(i_(t),0,4294967295):0}function n_(t){if("number"==typeof t)return t;if(Jr(t))return NaN;if(Gr(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Gr(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace($,"");var i=at.test(t);return i||_t.test(t)?zt(t.slice(2),i?2:8):nt.test(t)?NaN:+t}function a_(t){return bn(t,w_(t))}function r_(t){return null==t?"":Js(t)}var __=wn((function(t,e){if(la(e)||Nr(e))bn(e,f_(e),t);else for(var i in e)Et.call(e,i)&&Gi(t,i,e[i])})),o_=wn((function(t,e){bn(e,w_(e),t)})),h_=wn((function(t,e,i,s){bn(e,w_(e),t,s)})),c_=wn((function(t,e,i,s){bn(e,f_(e),t,s)})),l_=zn(Yi);var d_=Ls((function(t,e){t=gt(t);var i=-1,s=e.length,n=s>2?e[2]:void 0;for(n&&_a(e[0],e[1],n)&&(s=1);++i<s;)for(var a=e[i],r=w_(a),_=-1,o=r.length;++_<o;){var h=r[_],c=t[h];(void 0===c||Sr(c,vt[h])&&!Et.call(t,h))&&(t[h]=a[h])}return t})),p_=Ls((function(t){return t.push(void 0,Un),ae(x_,void 0,t)}));function u_(t,e,i){var s=null==t?void 0:cs(t,e);return void 0===s?i:s}function g_(t,e){return null!=t&&sa(t,e,gs)}var m_=On((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=At.call(e)),t[e]=i}),G_(B_)),y_=On((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=At.call(e)),Et.call(t,e)?t[e].push(i):t[e]=[i]}),Jn),b_=Ls(ys);function f_(t){return Nr(t)?Li(t):ks(t)}function w_(t){return Nr(t)?Li(t,!0):Es(t)}var v_=wn((function(t,e,i){Os(t,e,i)})),x_=wn((function(t,e,i,s){Os(t,e,i,s)})),k_=zn((function(t,e){var i={};if(null==t)return i;var s=!1;e=pe(e,(function(e){return e=_n(e,t),s||(s=e.length>1),e})),bn(t,Kn(t),i),s&&(i=Xi(i,7,Gn));for(var n=e.length;n--;)Vs(i,e[n]);return i}));var E_=zn((function(t,e){return null==t?{}:function(t,e){return Rs(t,e,(function(e,i){return g_(t,i)}))}(t,e)}));function j_(t,e){if(null==t)return{};var i=pe(Kn(t),(function(t){return[t]}));return e=Jn(e),Rs(t,i,(function(t,i){return e(t,i[0])}))}var T_=Cn(f_),A_=Cn(w_);function S_(t){return null==t?[]:Pe(t,f_(t))}var O_=En((function(t,e,i){return e=e.toLowerCase(),t+(i?I_(e):e)}));function I_(t){return C_(r_(t).toLowerCase())}function P_(t){return(t=r_(t))&&t.replace(ht,qe).replace(Mt,"")}var R_=En((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),M_=En((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),N_=kn("toLowerCase");var D_=En((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()}));var q_=En((function(t,e,i){return t+(i?" ":"")+C_(e)}));var L_=En((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),C_=kn("toUpperCase");function H_(t,e,i){return t=r_(t),void 0===(e=i?void 0:e)?function(t){return Lt.test(t)}(t)?function(t){return t.match(Dt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var W_=Ls((function(t,e){try{return ae(t,void 0,e)}catch(t){return Cr(t)?t:new dt(t)}})),U_=zn((function(t,e){return _e(e,(function(e){e=ja(e),Ki(t,e,yr(t[e],t))})),t}));function G_(t){return function(){return t}}var F_=An(),z_=An(!0);function B_(t){return t}function K_(t){return xs("function"==typeof t?t:Xi(t,1))}var Y_=Ls((function(t,e){return function(i){return ys(i,t,e)}})),$_=Ls((function(t,e){return function(i){return ys(t,i,e)}}));function X_(t,e,i){var s=f_(e),n=hs(e,s);null!=i||Gr(e)&&(n.length||!s.length)||(i=e,e=t,t=this,n=hs(e,f_(e)));var a=!(Gr(i)&&"chain"in i&&!i.chain),r=Hr(t);return _e(n,(function(i){var s=e[i];t[i]=s,r&&(t.prototype[i]=function(){var e=this.__chain__;if(a||e){var i=t(this.__wrapped__),n=i.__actions__=yn(this.__actions__);return n.push({func:s,args:arguments,thisArg:t}),i.__chain__=e,i}return s.apply(t,ue([this.value()],arguments))})})),t}function J_(){}var Z_=Pn(pe),V_=Pn(he),Q_=Pn(ye);function to(t){return oa(t)?je(ja(t)):function(t){return function(e){return cs(e,t)}}(t)}var eo=Mn(),io=Mn(!0);function so(){return[]}function no(){return!1}var ao=In((function(t,e){return t+e}),0),ro=qn("ceil"),_o=In((function(t,e){return t/e}),1),oo=qn("floor");var ho,co=In((function(t,e){return t*e}),1),lo=qn("round"),po=In((function(t,e){return t-e}),0);return Ai.after=function(t,e){if("function"!=typeof e)throw new bt(a);return t=i_(t),function(){if(--t<1)return e.apply(this,arguments)}},Ai.ary=gr,Ai.assign=__,Ai.assignIn=o_,Ai.assignInWith=h_,Ai.assignWith=c_,Ai.at=l_,Ai.before=mr,Ai.bind=yr,Ai.bindAll=U_,Ai.bindKey=br,Ai.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Rr(t)?t:[t]},Ai.chain=tr,Ai.chunk=function(t,e,i){e=(i?_a(t,e,i):void 0===e)?1:ai(i_(e),0);var n=null==t?0:t.length;if(!n||e<1)return[];for(var a=0,r=0,_=s(Ve(n/e));a<n;)_[r++]=zs(t,a,a+=e);return _},Ai.compact=function(t){for(var e=-1,i=null==t?0:t.length,s=0,n=[];++e<i;){var a=t[e];a&&(n[s++]=a)}return n},Ai.concat=function(){var t=arguments.length;if(!t)return[];for(var e=s(t-1),i=arguments[0],n=t;n--;)e[n-1]=arguments[n];return ue(Rr(i)?yn(i):[i],ns(e,1))},Ai.cond=function(t){var e=null==t?0:t.length,i=Jn();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new bt(a);return[i(t[0]),t[1]]})):[],Ls((function(i){for(var s=-1;++s<e;){var n=t[s];if(ae(n[0],this,i))return ae(n[1],this,i)}}))},Ai.conforms=function(t){return function(t){var e=f_(t);return function(i){return Ji(i,t,e)}}(Xi(t,1))},Ai.constant=G_,Ai.countBy=sr,Ai.create=function(t,e){var i=Si(t);return null==e?i:Bi(i,e)},Ai.curry=function t(e,i,s){var n=Hn(e,8,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ai.curryRight=function t(e,i,s){var n=Hn(e,16,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ai.debounce=fr,Ai.defaults=d_,Ai.defaultsDeep=p_,Ai.defer=wr,Ai.delay=vr,Ai.difference=Sa,Ai.differenceBy=Oa,Ai.differenceWith=Ia,Ai.drop=function(t,e,i){var s=null==t?0:t.length;return s?zs(t,(e=i||void 0===e?1:i_(e))<0?0:e,s):[]},Ai.dropRight=function(t,e,i){var s=null==t?0:t.length;return s?zs(t,0,(e=s-(e=i||void 0===e?1:i_(e)))<0?0:e):[]},Ai.dropRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0,!0):[]},Ai.dropWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0):[]},Ai.fill=function(t,e,i,s){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&_a(t,e,i)&&(i=0,s=n),function(t,e,i,s){var n=t.length;for((i=i_(i))<0&&(i=-i>n?0:n+i),(s=void 0===s||s>n?n:i_(s))<0&&(s+=n),s=i>s?0:s_(s);i<s;)t[i++]=e;return t}(t,e,i,s)):[]},Ai.filter=function(t,e){return(Rr(t)?ce:ss)(t,Jn(e,3))},Ai.flatMap=function(t,e){return ns(lr(t,e),1)},Ai.flatMapDeep=function(t,e){return ns(lr(t,e),1/0)},Ai.flatMapDepth=function(t,e,i){return i=void 0===i?1:i_(i),ns(lr(t,e),i)},Ai.flatten=Ma,Ai.flattenDeep=function(t){return(null==t?0:t.length)?ns(t,1/0):[]},Ai.flattenDepth=function(t,e){return(null==t?0:t.length)?ns(t,e=void 0===e?1:i_(e)):[]},Ai.flip=function(t){return Hn(t,512)},Ai.flow=F_,Ai.flowRight=z_,Ai.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,s={};++e<i;){var n=t[e];s[n[0]]=n[1]}return s},Ai.functions=function(t){return null==t?[]:hs(t,f_(t))},Ai.functionsIn=function(t){return null==t?[]:hs(t,w_(t))},Ai.groupBy=or,Ai.initial=function(t){return(null==t?0:t.length)?zs(t,0,-1):[]},Ai.intersection=Da,Ai.intersectionBy=qa,Ai.intersectionWith=La,Ai.invert=m_,Ai.invertBy=y_,Ai.invokeMap=hr,Ai.iteratee=K_,Ai.keyBy=cr,Ai.keys=f_,Ai.keysIn=w_,Ai.map=lr,Ai.mapKeys=function(t,e){var i={};return e=Jn(e,3),_s(t,(function(t,s,n){Ki(i,e(t,s,n),t)})),i},Ai.mapValues=function(t,e){var i={};return e=Jn(e,3),_s(t,(function(t,s,n){Ki(i,s,e(t,s,n))})),i},Ai.matches=function(t){return As(Xi(t,1))},Ai.matchesProperty=function(t,e){return Ss(t,Xi(e,1))},Ai.memoize=xr,Ai.merge=v_,Ai.mergeWith=x_,Ai.method=Y_,Ai.methodOf=$_,Ai.mixin=X_,Ai.negate=kr,Ai.nthArg=function(t){return t=i_(t),Ls((function(e){return Is(e,t)}))},Ai.omit=k_,Ai.omitBy=function(t,e){return j_(t,kr(Jn(e)))},Ai.once=function(t){return mr(2,t)},Ai.orderBy=function(t,e,i,s){return null==t?[]:(Rr(e)||(e=null==e?[]:[e]),Rr(i=s?void 0:i)||(i=null==i?[]:[i]),Ps(t,e,i))},Ai.over=Z_,Ai.overArgs=Er,Ai.overEvery=V_,Ai.overSome=Q_,Ai.partial=jr,Ai.partialRight=Tr,Ai.partition=dr,Ai.pick=E_,Ai.pickBy=j_,Ai.property=to,Ai.propertyOf=function(t){return function(e){return null==t?void 0:cs(t,e)}},Ai.pull=Ha,Ai.pullAll=Wa,Ai.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?Ms(t,e,Jn(i,2)):t},Ai.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?Ms(t,e,void 0,i):t},Ai.pullAt=Ua,Ai.range=eo,Ai.rangeRight=io,Ai.rearg=Ar,Ai.reject=function(t,e){return(Rr(t)?ce:ss)(t,kr(Jn(e,3)))},Ai.remove=function(t,e){var i=[];if(!t||!t.length)return i;var s=-1,n=[],a=t.length;for(e=Jn(e,3);++s<a;){var r=t[s];e(r,s,t)&&(i.push(r),n.push(s))}return Ns(t,n),i},Ai.rest=function(t,e){if("function"!=typeof t)throw new bt(a);return Ls(t,e=void 0===e?e:i_(e))},Ai.reverse=Ga,Ai.sampleSize=function(t,e,i){return e=(i?_a(t,e,i):void 0===e)?1:i_(e),(Rr(t)?Hi:Hs)(t,e)},Ai.set=function(t,e,i){return null==t?t:Ws(t,e,i)},Ai.setWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Ws(t,e,i,s)},Ai.shuffle=function(t){return(Rr(t)?Wi:Fs)(t)},Ai.slice=function(t,e,i){var s=null==t?0:t.length;return s?(i&&"number"!=typeof i&&_a(t,e,i)?(e=0,i=s):(e=null==e?0:i_(e),i=void 0===i?s:i_(i)),zs(t,e,i)):[]},Ai.sortBy=pr,Ai.sortedUniq=function(t){return t&&t.length?$s(t):[]},Ai.sortedUniqBy=function(t,e){return t&&t.length?$s(t,Jn(e,2)):[]},Ai.split=function(t,e,i){return i&&"number"!=typeof i&&_a(t,e,i)&&(e=i=void 0),(i=void 0===i?4294967295:i>>>0)?(t=r_(t))&&("string"==typeof e||null!=e&&!Yr(e))&&!(e=Js(e))&&He(t)?hn(Ke(t),0,i):t.split(e,i):[]},Ai.spread=function(t,e){if("function"!=typeof t)throw new bt(a);return e=null==e?0:ai(i_(e),0),Ls((function(i){var s=i[e],n=hn(i,0,e);return s&&ue(n,s),ae(t,this,n)}))},Ai.tail=function(t){var e=null==t?0:t.length;return e?zs(t,1,e):[]},Ai.take=function(t,e,i){return t&&t.length?zs(t,0,(e=i||void 0===e?1:i_(e))<0?0:e):[]},Ai.takeRight=function(t,e,i){var s=null==t?0:t.length;return s?zs(t,(e=s-(e=i||void 0===e?1:i_(e)))<0?0:e,s):[]},Ai.takeRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!1,!0):[]},Ai.takeWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3)):[]},Ai.tap=function(t,e){return e(t),t},Ai.throttle=function(t,e,i){var s=!0,n=!0;if("function"!=typeof t)throw new bt(a);return Gr(i)&&(s="leading"in i?!!i.leading:s,n="trailing"in i?!!i.trailing:n),fr(t,e,{leading:s,maxWait:e,trailing:n})},Ai.thru=er,Ai.toArray=t_,Ai.toPairs=T_,Ai.toPairsIn=A_,Ai.toPath=function(t){return Rr(t)?pe(t,ja):Jr(t)?[t]:yn(Ea(r_(t)))},Ai.toPlainObject=a_,Ai.transform=function(t,e,i){var s=Rr(t),n=s||qr(t)||Zr(t);if(e=Jn(e,4),null==i){var a=t&&t.constructor;i=n?s?new a:[]:Gr(t)&&Hr(a)?Si(Bt(t)):{}}return(n?_e:_s)(t,(function(t,s,n){return e(i,t,s,n)})),i},Ai.unary=function(t){return gr(t,1)},Ai.union=Fa,Ai.unionBy=za,Ai.unionWith=Ba,Ai.uniq=function(t){return t&&t.length?Zs(t):[]},Ai.uniqBy=function(t,e){return t&&t.length?Zs(t,Jn(e,2)):[]},Ai.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Zs(t,void 0,e):[]},Ai.unset=function(t,e){return null==t||Vs(t,e)},Ai.unzip=Ka,Ai.unzipWith=Ya,Ai.update=function(t,e,i){return null==t?t:Qs(t,e,rn(i))},Ai.updateWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Qs(t,e,rn(i),s)},Ai.values=S_,Ai.valuesIn=function(t){return null==t?[]:Pe(t,w_(t))},Ai.without=$a,Ai.words=H_,Ai.wrap=function(t,e){return jr(rn(e),t)},Ai.xor=Xa,Ai.xorBy=Ja,Ai.xorWith=Za,Ai.zip=Va,Ai.zipObject=function(t,e){return nn(t||[],e||[],Gi)},Ai.zipObjectDeep=function(t,e){return nn(t||[],e||[],Ws)},Ai.zipWith=Qa,Ai.entries=T_,Ai.entriesIn=A_,Ai.extend=o_,Ai.extendWith=h_,X_(Ai,Ai),Ai.add=ao,Ai.attempt=W_,Ai.camelCase=O_,Ai.capitalize=I_,Ai.ceil=ro,Ai.clamp=function(t,e,i){return void 0===i&&(i=e,e=void 0),void 0!==i&&(i=(i=n_(i))==i?i:0),void 0!==e&&(e=(e=n_(e))==e?e:0),$i(n_(t),e,i)},Ai.clone=function(t){return Xi(t,4)},Ai.cloneDeep=function(t){return Xi(t,5)},Ai.cloneDeepWith=function(t,e){return Xi(t,5,e="function"==typeof e?e:void 0)},Ai.cloneWith=function(t,e){return Xi(t,4,e="function"==typeof e?e:void 0)},Ai.conformsTo=function(t,e){return null==e||Ji(t,e,f_(e))},Ai.deburr=P_,Ai.defaultTo=function(t,e){return null==t||t!=t?e:t},Ai.divide=_o,Ai.endsWith=function(t,e,i){t=r_(t),e=Js(e);var s=t.length,n=i=void 0===i?s:$i(i_(i),0,s);return(i-=e.length)>=0&&t.slice(i,n)==e},Ai.eq=Sr,Ai.escape=function(t){return(t=r_(t))&&H.test(t)?t.replace(L,Le):t},Ai.escapeRegExp=function(t){return(t=r_(t))&&Y.test(t)?t.replace(K,"\\$&"):t},Ai.every=function(t,e,i){var s=Rr(t)?he:es;return i&&_a(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ai.find=nr,Ai.findIndex=Pa,Ai.findKey=function(t,e){return fe(t,Jn(e,3),_s)},Ai.findLast=ar,Ai.findLastIndex=Ra,Ai.findLastKey=function(t,e){return fe(t,Jn(e,3),os)},Ai.floor=oo,Ai.forEach=rr,Ai.forEachRight=_r,Ai.forIn=function(t,e){return null==t?t:as(t,Jn(e,3),w_)},Ai.forInRight=function(t,e){return null==t?t:rs(t,Jn(e,3),w_)},Ai.forOwn=function(t,e){return t&&_s(t,Jn(e,3))},Ai.forOwnRight=function(t,e){return t&&os(t,Jn(e,3))},Ai.get=u_,Ai.gt=Or,Ai.gte=Ir,Ai.has=function(t,e){return null!=t&&sa(t,e,us)},Ai.hasIn=g_,Ai.head=Na,Ai.identity=B_,Ai.includes=function(t,e,i,s){t=Nr(t)?t:S_(t),i=i&&!s?i_(i):0;var n=t.length;return i<0&&(i=ai(n+i,0)),Xr(t)?i<=n&&t.indexOf(e,i)>-1:!!n&&ve(t,e,i)>-1},Ai.indexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:i_(i);return n<0&&(n=ai(s+n,0)),ve(t,e,n)},Ai.inRange=function(t,e,i){return e=e_(e),void 0===i?(i=e,e=0):i=e_(i),function(t,e,i){return t>=ri(e,i)&&t<ai(e,i)}(t=n_(t),e,i)},Ai.invoke=b_,Ai.isArguments=Pr,Ai.isArray=Rr,Ai.isArrayBuffer=Mr,Ai.isArrayLike=Nr,Ai.isArrayLikeObject=Dr,Ai.isBoolean=function(t){return!0===t||!1===t||Fr(t)&&ds(t)==c},Ai.isBuffer=qr,Ai.isDate=Lr,Ai.isElement=function(t){return Fr(t)&&1===t.nodeType&&!Kr(t)},Ai.isEmpty=function(t){if(null==t)return!0;if(Nr(t)&&(Rr(t)||"string"==typeof t||"function"==typeof t.splice||qr(t)||Zr(t)||Pr(t)))return!t.length;var e=ia(t);if(e==g||e==f)return!t.size;if(la(t))return!ks(t).length;for(var i in t)if(Et.call(t,i))return!1;return!0},Ai.isEqual=function(t,e){return fs(t,e)},Ai.isEqualWith=function(t,e,i){var s=(i="function"==typeof i?i:void 0)?i(t,e):void 0;return void 0===s?fs(t,e,void 0,i):!!s},Ai.isError=Cr,Ai.isFinite=function(t){return"number"==typeof t&&ii(t)},Ai.isFunction=Hr,Ai.isInteger=Wr,Ai.isLength=Ur,Ai.isMap=zr,Ai.isMatch=function(t,e){return t===e||ws(t,e,Vn(e))},Ai.isMatchWith=function(t,e,i){return i="function"==typeof i?i:void 0,ws(t,e,Vn(e),i)},Ai.isNaN=function(t){return Br(t)&&t!=+t},Ai.isNative=function(t){if(ca(t))throw new dt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return vs(t)},Ai.isNil=function(t){return null==t},Ai.isNull=function(t){return null===t},Ai.isNumber=Br,Ai.isObject=Gr,Ai.isObjectLike=Fr,Ai.isPlainObject=Kr,Ai.isRegExp=Yr,Ai.isSafeInteger=function(t){return Wr(t)&&t>=-9007199254740991&&t<=9007199254740991},Ai.isSet=$r,Ai.isString=Xr,Ai.isSymbol=Jr,Ai.isTypedArray=Zr,Ai.isUndefined=function(t){return void 0===t},Ai.isWeakMap=function(t){return Fr(t)&&ia(t)==x},Ai.isWeakSet=function(t){return Fr(t)&&"[object WeakSet]"==ds(t)},Ai.join=function(t,e){return null==t?"":si.call(t,e)},Ai.kebabCase=R_,Ai.last=Ca,Ai.lastIndexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s;return void 0!==i&&(n=(n=i_(i))<0?ai(s+n,0):ri(n,s-1)),e==e?function(t,e,i){for(var s=i+1;s--;)if(t[s]===e)return s;return s}(t,e,n):we(t,ke,n,!0)},Ai.lowerCase=M_,Ai.lowerFirst=N_,Ai.lt=Vr,Ai.lte=Qr,Ai.max=function(t){return t&&t.length?is(t,B_,ps):void 0},Ai.maxBy=function(t,e){return t&&t.length?is(t,Jn(e,2),ps):void 0},Ai.mean=function(t){return Ee(t,B_)},Ai.meanBy=function(t,e){return Ee(t,Jn(e,2))},Ai.min=function(t){return t&&t.length?is(t,B_,js):void 0},Ai.minBy=function(t,e){return t&&t.length?is(t,Jn(e,2),js):void 0},Ai.stubArray=so,Ai.stubFalse=no,Ai.stubObject=function(){return{}},Ai.stubString=function(){return""},Ai.stubTrue=function(){return!0},Ai.multiply=co,Ai.nth=function(t,e){return t&&t.length?Is(t,i_(e)):void 0},Ai.noConflict=function(){return Yt._===this&&(Yt._=Ot),this},Ai.noop=J_,Ai.now=ur,Ai.pad=function(t,e,i){t=r_(t);var s=(e=i_(e))?Be(t):0;if(!e||s>=e)return t;var n=(e-s)/2;return Rn(Qe(n),i)+t+Rn(Ve(n),i)},Ai.padEnd=function(t,e,i){t=r_(t);var s=(e=i_(e))?Be(t):0;return e&&s<e?t+Rn(e-s,i):t},Ai.padStart=function(t,e,i){t=r_(t);var s=(e=i_(e))?Be(t):0;return e&&s<e?Rn(e-s,i)+t:t},Ai.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),oi(r_(t).replace(X,""),e||0)},Ai.random=function(t,e,i){if(i&&"boolean"!=typeof i&&_a(t,e,i)&&(e=i=void 0),void 0===i&&("boolean"==typeof e?(i=e,e=void 0):"boolean"==typeof t&&(i=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=e_(t),void 0===e?(e=t,t=0):e=e_(e)),t>e){var s=t;t=e,e=s}if(i||t%1||e%1){var n=hi();return ri(t+n*(e-t+Ft("1e-"+((n+"").length-1))),e)}return Ds(t,e)},Ai.reduce=function(t,e,i){var s=Rr(t)?ge:Ae,n=arguments.length<3;return s(t,Jn(e,4),i,n,Qi)},Ai.reduceRight=function(t,e,i){var s=Rr(t)?me:Ae,n=arguments.length<3;return s(t,Jn(e,4),i,n,ts)},Ai.repeat=function(t,e,i){return e=(i?_a(t,e,i):void 0===e)?1:i_(e),qs(r_(t),e)},Ai.replace=function(){var t=arguments,e=r_(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ai.result=function(t,e,i){var s=-1,n=(e=_n(e,t)).length;for(n||(n=1,t=void 0);++s<n;){var a=null==t?void 0:t[ja(e[s])];void 0===a&&(s=n,a=i),t=Hr(a)?a.call(t):a}return t},Ai.round=lo,Ai.runInContext=t,Ai.sample=function(t){return(Rr(t)?Ci:Cs)(t)},Ai.size=function(t){if(null==t)return 0;if(Nr(t))return Xr(t)?Be(t):t.length;var e=ia(t);return e==g||e==f?t.size:ks(t).length},Ai.snakeCase=D_,Ai.some=function(t,e,i){var s=Rr(t)?ye:Bs;return i&&_a(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ai.sortedIndex=function(t,e){return Ks(t,e)},Ai.sortedIndexBy=function(t,e,i){return Ys(t,e,Jn(i,2))},Ai.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var s=Ks(t,e);if(s<i&&Sr(t[s],e))return s}return-1},Ai.sortedLastIndex=function(t,e){return Ks(t,e,!0)},Ai.sortedLastIndexBy=function(t,e,i){return Ys(t,e,Jn(i,2),!0)},Ai.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var i=Ks(t,e,!0)-1;if(Sr(t[i],e))return i}return-1},Ai.startCase=q_,Ai.startsWith=function(t,e,i){return t=r_(t),i=null==i?0:$i(i_(i),0,t.length),e=Js(e),t.slice(i,i+e.length)==e},Ai.subtract=po,Ai.sum=function(t){return t&&t.length?Se(t,B_):0},Ai.sumBy=function(t,e){return t&&t.length?Se(t,Jn(e,2)):0},Ai.template=function(t,e,i){var s=Ai.templateSettings;i&&_a(t,e,i)&&(e=void 0),t=r_(t),e=h_({},e,s,Wn);var n,a,r=h_({},e.imports,s.imports,Wn),_=f_(r),o=Pe(r,_),h=0,c=e.interpolate||ct,l="__p += '",d=mt((e.escape||ct).source+"|"+c.source+"|"+(c===G?it:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),p="//# sourceURL="+(Et.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ht+"]")+"\n";t.replace(d,(function(e,i,s,r,_,o){return s||(s=r),l+=t.slice(h,o).replace(lt,Ce),i&&(n=!0,l+="' +\n__e("+i+") +\n'"),_&&(a=!0,l+="';\n"+_+";\n__p += '"),s&&(l+="' +\n((__t = ("+s+")) == null ? '' : __t) +\n'"),h=o+e.length,e})),l+="';\n";var u=Et.call(e,"variable")&&e.variable;u||(l="with (obj) {\n"+l+"\n}\n"),l=(a?l.replace(M,""):l).replace(N,"$1").replace(D,"$1;"),l="function("+(u||"obj")+") {\n"+(u?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var g=W_((function(){return pt(_,p+"return "+l).apply(void 0,o)}));if(g.source=l,Cr(g))throw g;return g},Ai.times=function(t,e){if((t=i_(t))<1||t>9007199254740991)return[];var i=4294967295,s=ri(t,4294967295);t-=4294967295;for(var n=Oe(s,e=Jn(e));++i<t;)e(i);return n},Ai.toFinite=e_,Ai.toInteger=i_,Ai.toLength=s_,Ai.toLower=function(t){return r_(t).toLowerCase()},Ai.toNumber=n_,Ai.toSafeInteger=function(t){return t?$i(i_(t),-9007199254740991,9007199254740991):0===t?t:0},Ai.toString=r_,Ai.toUpper=function(t){return r_(t).toUpperCase()},Ai.trim=function(t,e,i){if((t=r_(t))&&(i||void 0===e))return t.replace($,"");if(!t||!(e=Js(e)))return t;var s=Ke(t),n=Ke(e);return hn(s,Me(s,n),Ne(s,n)+1).join("")},Ai.trimEnd=function(t,e,i){if((t=r_(t))&&(i||void 0===e))return t.replace(J,"");if(!t||!(e=Js(e)))return t;var s=Ke(t);return hn(s,0,Ne(s,Ke(e))+1).join("")},Ai.trimStart=function(t,e,i){if((t=r_(t))&&(i||void 0===e))return t.replace(X,"");if(!t||!(e=Js(e)))return t;var s=Ke(t);return hn(s,Me(s,Ke(e))).join("")},Ai.truncate=function(t,e){var i=30,s="...";if(Gr(e)){var n="separator"in e?e.separator:n;i="length"in e?i_(e.length):i,s="omission"in e?Js(e.omission):s}var a=(t=r_(t)).length;if(He(t)){var r=Ke(t);a=r.length}if(i>=a)return t;var _=i-Be(s);if(_<1)return s;var o=r?hn(r,0,_).join(""):t.slice(0,_);if(void 0===n)return o+s;if(r&&(_+=o.length-_),Yr(n)){if(t.slice(_).search(n)){var h,c=o;for(n.global||(n=mt(n.source,r_(st.exec(n))+"g")),n.lastIndex=0;h=n.exec(c);)var l=h.index;o=o.slice(0,void 0===l?_:l)}}else if(t.indexOf(Js(n),_)!=_){var d=o.lastIndexOf(n);d>-1&&(o=o.slice(0,d))}return o+s},Ai.unescape=function(t){return(t=r_(t))&&C.test(t)?t.replace(q,Ye):t},Ai.uniqueId=function(t){var e=++jt;return r_(t)+e},Ai.upperCase=L_,Ai.upperFirst=C_,Ai.each=rr,Ai.eachRight=_r,Ai.first=Na,X_(Ai,(ho={},_s(Ai,(function(t,e){Et.call(Ai.prototype,e)||(ho[e]=t)})),ho),{chain:!1}),Ai.VERSION="4.17.20",_e(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ai[t].placeholder=Ai})),_e(["drop","take"],(function(t,e){Pi.prototype[t]=function(i){i=void 0===i?1:ai(i_(i),0);var s=this.__filtered__&&!e?new Pi(this):this.clone();return s.__filtered__?s.__takeCount__=ri(i,s.__takeCount__):s.__views__.push({size:ri(i,4294967295),type:t+(s.__dir__<0?"Right":"")}),s},Pi.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),_e(["filter","map","takeWhile"],(function(t,e){var i=e+1,s=1==i||3==i;Pi.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Jn(t,3),type:i}),e.__filtered__=e.__filtered__||s,e}})),_e(["head","last"],(function(t,e){var i="take"+(e?"Right":"");Pi.prototype[t]=function(){return this[i](1).value()[0]}})),_e(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");Pi.prototype[t]=function(){return this.__filtered__?new Pi(this):this[i](1)}})),Pi.prototype.compact=function(){return this.filter(B_)},Pi.prototype.find=function(t){return this.filter(t).head()},Pi.prototype.findLast=function(t){return this.reverse().find(t)},Pi.prototype.invokeMap=Ls((function(t,e){return"function"==typeof t?new Pi(this):this.map((function(i){return ys(i,t,e)}))})),Pi.prototype.reject=function(t){return this.filter(kr(Jn(t)))},Pi.prototype.slice=function(t,e){t=i_(t);var i=this;return i.__filtered__&&(t>0||e<0)?new Pi(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),void 0!==e&&(i=(e=i_(e))<0?i.dropRight(-e):i.take(e-t)),i)},Pi.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pi.prototype.toArray=function(){return this.take(4294967295)},_s(Pi.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),s=/^(?:head|last)$/.test(e),n=Ai[s?"take"+("last"==e?"Right":""):e],a=s||/^find/.test(e);n&&(Ai.prototype[e]=function(){var e=this.__wrapped__,r=s?[1]:arguments,_=e instanceof Pi,o=r[0],h=_||Rr(e),c=function(t){var e=n.apply(Ai,ue([t],r));return s&&l?e[0]:e};h&&i&&"function"==typeof o&&1!=o.length&&(_=h=!1);var l=this.__chain__,d=!!this.__actions__.length,p=a&&!l,u=_&&!d;if(!a&&h){e=u?e:new Pi(this);var g=t.apply(e,r);return g.__actions__.push({func:er,args:[c],thisArg:void 0}),new Ii(g,l)}return p&&u?t.apply(this,r):(g=this.thru(c),p?s?g.value()[0]:g.value():g)})})),_e(["pop","push","shift","sort","splice","unshift"],(function(t){var e=ft[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",s=/^(?:pop|shift)$/.test(t);Ai.prototype[t]=function(){var t=arguments;if(s&&!this.__chain__){var n=this.value();return e.apply(Rr(n)?n:[],t)}return this[i]((function(i){return e.apply(Rr(i)?i:[],t)}))}})),_s(Pi.prototype,(function(t,e){var i=Ai[e];if(i){var s=i.name+"";Et.call(bi,s)||(bi[s]=[]),bi[s].push({name:e,func:i})}})),bi[Sn(void 0,2).name]=[{name:"wrapper",func:void 0}],Pi.prototype.clone=function(){var t=new Pi(this.__wrapped__);return t.__actions__=yn(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yn(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yn(this.__views__),t},Pi.prototype.reverse=function(){if(this.__filtered__){var t=new Pi(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pi.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=Rr(t),s=e<0,n=i?t.length:0,a=function(t,e,i){var s=-1,n=i.length;for(;++s<n;){var a=i[s],r=a.size;switch(a.type){case"drop":t+=r;break;case"dropRight":e-=r;break;case"take":e=ri(e,t+r);break;case"takeRight":t=ai(t,e-r)}}return{start:t,end:e}}(0,n,this.__views__),r=a.start,_=a.end,o=_-r,h=s?_:r-1,c=this.__iteratees__,l=c.length,d=0,p=ri(o,this.__takeCount__);if(!i||!s&&n==o&&p==o)return en(t,this.__actions__);var u=[];t:for(;o--&&d<p;){for(var g=-1,m=t[h+=e];++g<l;){var y=c[g],b=y.iteratee,f=y.type,w=b(m);if(2==f)m=w;else if(!w){if(1==f)continue t;break t}}u[d++]=m}return u},Ai.prototype.at=ir,Ai.prototype.chain=function(){return tr(this)},Ai.prototype.commit=function(){return new Ii(this.value(),this.__chain__)},Ai.prototype.next=function(){void 0===this.__values__&&(this.__values__=t_(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Ai.prototype.plant=function(t){for(var e,i=this;i instanceof Oi;){var s=Aa(i);s.__index__=0,s.__values__=void 0,e?n.__wrapped__=s:e=s;var n=s;i=i.__wrapped__}return n.__wrapped__=t,e},Ai.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pi){var e=t;return this.__actions__.length&&(e=new Pi(this)),(e=e.reverse()).__actions__.push({func:er,args:[Ga],thisArg:void 0}),new Ii(e,this.__chain__)}return this.thru(Ga)},Ai.prototype.toJSON=Ai.prototype.valueOf=Ai.prototype.value=function(){return en(this.__wrapped__,this.__actions__)},Ai.prototype.first=Ai.prototype.head,Vt&&(Ai.prototype[Vt]=function(){return this}),Ai}();Yt._=$e,void 0===(n=function(){return $e}.call(e,i,e,s))||(s.exports=n)}).call(this)}).call(this,i(33),i(34)(t))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainChar=e.MainCharBase=void 0;const s=i(12),n=i(23),a=i(2),r=i(4),_=i(7),o=i(5),h=i(1),c=i(0),l=i(10);class d extends s.SpriteBase{constructor(t,e,i,s,n,a){super(t,e),this.walk_speed=i,this.dash_speed=s,this.climb_speed=n,this.push_speed=a}}e.MainCharBase=d;class p extends o.Player{constructor(t,e,i,s,n,a,r,_,c,d,p,u,g,m,y,b,f,w,v,x,k,E,j,T,A,S,O,I,P,R,M){super(t,s),this.info=e,this.sprite_base=i,this.starting_level=u,this.level=this.starting_level,this.class_table=g,this.battle_scale=m,this.exp_curve=p,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=y,this.mercury_level_base=b,this.mars_level_base=f,this.jupiter_level_base=w,this.venus_power_base=v,this.mercury_power_base=x,this.mars_power_base=k,this.jupiter_power_base=E,this.venus_resist_base=j,this.mercury_resist_base=T,this.mars_resist_base=A,this.jupiter_resist_base=S,this.element_afinity=l.maxBy([{element:h.elements.VENUS,level:this.venus_level_base},{element:h.elements.MERCURY,level:this.mercury_level_base},{element:h.elements.MARS,level:this.mars_level_base},{element:h.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(P),this.update_class(),this.hp_curve=n,this.pp_curve=a,this.atk_curve=r,this.def_curve=_,this.agi_curve=c,this.luk_curve=d,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=R,this.equip_slots={weapon:null,head:null,chest:null,body:null,ring:null},this.equipped_abilities=[],this.innate_abilities=O,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=I,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=o.fighter_types.ALLY,this.battle_animations_variations=Object.assign({},M)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=n.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},after:null};return this.current_exp+=t,this.level=l.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===_.item_types.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,n)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(n),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,e=!1){let i=this.items[t];if(i.equipped&&!e)return;const s=this.info.items_list[i.key_name];switch(s.type===_.item_types.WEAPONS&&null!==this.equip_slots.weapon?this.unequip_item(this.equip_slots.weapon.index):s.type===_.item_types.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.unequip_item(this.equip_slots.head.index):s.type===_.item_types.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.unequip_item(this.equip_slots.chest.index):s.type===_.item_types.ARMOR&&null!==this.equip_slots.body?this.unequip_item(this.equip_slots.body.index):s.type===_.item_types.RING&&null!==this.equip_slots.ring&&this.unequip_item(this.equip_slots.ring.index),s.type){case _.item_types.WEAPONS:this.equip_slots.weapon=i;break;case _.item_types.HEAD_PROTECTOR:this.equip_slots.head=i;break;case _.item_types.CHEST_PROTECTOR:this.equip_slots.chest=i;break;case _.item_types.ARMOR:this.equip_slots.body=i;break;case _.item_types.RING:this.equip_slots.ring=i}i.equipped=!0;for(let t=0;t<s.effects.length;++t)this.add_effect(s.effects[t],s);this.update_attributes(),this.update_elemental_attributes(),s.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities.push(s.granted_ability),this.update_abilities())}unequip_item(t){let e=this.items[t];if(!e.equipped)return;const i=this.info.items_list[e.key_name];i.type===_.item_types.WEAPONS&&null!==this.equip_slots.weapon?this.equip_slots.weapon=null:i.type===_.item_types.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.equip_slots.head=null:i.type===_.item_types.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.equip_slots.chest=null:i.type===_.item_types.ARMOR&&null!==this.equip_slots.body?this.equip_slots.body=null:i.type===_.item_types.RING&&null!==this.equip_slots.ring&&(this.equip_slots.ring=null),e.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===i&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),i.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==i.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){let i=this.info.djinni_list[t[e]];switch(i.element){case h.elements.VENUS:this.venus_djinni.push(i.key_name);break;case h.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case h.elements.MARS:this.mars_djinni.push(i.key_name);break;case h.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){let e=this.info.djinni_list[t];switch(e.element){case h.elements.VENUS:this.venus_djinni.push(e.key_name);break;case h.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case h.elements.MARS:this.mars_djinni.push(e.key_name);break;case h.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case h.elements.VENUS:e=this.venus_djinni;break;case h.elements.MERCURY:e=this.mercury_djinni;break;case h.elements.MARS:e=this.mars_djinni;break;case h.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,s){const r=this.class;let _=this.venus_level_current,o=this.mercury_level_current,c=this.mars_level_current,l=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let n;switch(i[t]){case a.djinn_status.SET:n=1;break;case a.djinn_status.RECOVERY:case"irrelevant":n=0;break;default:n=-1}switch(s.element){case h.elements.VENUS:_+=n;break;case h.elements.MERCURY:o+=n;break;case h.elements.MARS:c+=n;break;case h.elements.JUPITER:l+=n}}this.class=n.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,_,o,c,l);let d={class_name:this.class.name,class_key_name:this.class.key_name,abilities:null};return d.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>"irrelevant"===t?a.djinn_status.STANDBY:t),t.forEach(t=>{d[t]=this.preview_stats_by_djinn(t,e,i,s)}),this.class=r,d}preview_stats_by_djinn(t,e,i,s){const n={djinni_key_name:e,djinni_next_status:i,action:s};switch(t){case"max_hp":return this.set_max_stat("hp",!0,n);case"max_pp":return this.set_max_stat("pp",!0,n);case"atk":return this.set_max_stat("atk",!0,n);case"def":return this.set_max_stat("def",!0,n);case"agi":return this.set_max_stat("agi",!0,n);case"luk":return this.set_max_stat("luk",!0,n)}}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i};switch(t){case r.effect_types.MAX_HP:return this.set_max_stat("hp",!0,s);case r.effect_types.MAX_PP:return this.set_max_stat("pp",!0,s);case r.effect_types.ATTACK:return this.set_max_stat("atk",!0,s);case r.effect_types.DEFENSE:return this.set_max_stat("def",!0,s);case r.effect_types.AGILITY:return this.set_max_stat("agi",!0,s);case r.effect_types.LUCK:return this.set_max_stat("luk",!0,s)}}set_max_stat(t,e=!1,i={}){const s=["hp","pp"].includes(t)?"max_"+t:t,n="current_"+t,_=t+"_boost",o=t+"_curve",h=t+"_extra",c=this[s];this[s]=this[o][this.level]*this.class[_]+this[h]|0;let l=this.djinni;if(e)if("Trade"===i.action){const t=l.indexOf(i.djinni_key_name[0]);t>=0?l[t]=i.djinni_key_name[1]:l[l.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&l.push(i.djinni_key_name[0]);for(let t=0;t<l.length;++t){let n=l[t],r=this.info.djinni_list[n],o=r.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(n)&&(o=i.djinni_next_status[i.djinni_key_name.indexOf(n)]),o===a.djinn_status.SET&&(this[s]+=r[_])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;let n;switch(t){case"hp":n=r.effect_types.MAX_HP;break;case"pp":n=r.effect_types.MAX_PP;break;case"atk":n=r.effect_types.ATTACK;break;case"def":n=r.effect_types.DEFENSE;break;case"agi":n=r.effect_types.AGILITY;break;case"luk":n=r.effect_types.LUCK}s.type===n&&s.apply_effect()}),e){const t=i.effect_obj?r.Effect.preview_value_applied(i.effect_obj,this[s]):this[s];return this[s]=c,t}void 0===this[n]?this[n]=this[s]:this[n]=Math.round(this[n]*this[s]/c)}update_attributes(){this.set_max_stat("hp"),this.set_max_stat("pp"),this.set_max_stat("atk"),this.set_max_stat("def"),this.set_max_stat("agi"),this.set_max_stat("luk")}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}init_elemental_attributes(){this.venus_level_current=this.venus_level_base,this.mercury_level_current=this.mercury_level_base,this.mars_level_current=this.mars_level_base,this.jupiter_level_current=this.jupiter_level_base,this.venus_power_current=this.venus_power_base,this.mercury_power_current=this.mercury_power_base,this.mars_power_current=this.mars_power_base,this.jupiter_power_current=this.jupiter_power_base,this.venus_resist_current=this.venus_resist_base,this.mercury_resist_current=this.mercury_resist_base,this.mars_resist_current=this.mars_resist_base,this.jupiter_resist_current=this.jupiter_resist_base}update_elemental_attributes(){this.init_elemental_attributes();for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===a.djinn_status.SET&&(this[e.element+"_level_current"]+=1,this[e.element+"_power_current"]+=5,this[e.element+"_resist_current"]+=5)}this.effects.forEach(t=>{t.type!==r.effect_types.POWER&&t.type!==r.effect_types.RESIST||t.apply_effect()});for(let t=0;t<h.ordered_elements.length;++t){const e=h.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=l.clamp(this[i],c.ELEM_ATTR_MIN,c.ELEM_ATTR_MAX),this[s]=l.clamp(this[s],c.ELEM_ATTR_MIN,c.ELEM_ATTR_MAX)}}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(o.permanent_status.DOWNED))}}e.MainChar=p},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpriteBase=void 0;e.SpriteBase=class{constructor(t,e){this.key_name=t,this.actions={},this.animations={},this.dash_speed=0,this.walk_speed=0,this.climb_speed=0,this.push_speed=0;for(let t=0;t<e.length;++t)this.actions[e[t]]={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let n=0;n<e.length;++n){const a=s?i[n]:i;this.actions[t].directions[n]=e[n],this.actions[t].frame_counts[n]=a}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let n;n=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=n}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const n=this.actions[s].spritesheet,a=this.getActionKey(s);let r=t.load.atlasJSONHash(a,n.spritesheet_image_url,n.spritesheet_json_url);e&&(r.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,n,a){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,n,a)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let n=0;n<i.length;++n){const a=i[n],r=this.actions[e].frame_rate[a],_=this.getAnimationKey(e,a);t.animations.add(_,this.animations[e][a],r,Array.isArray(s)?s[n]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const n=e[s];this.generateFrameNames(t,n,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JumpEvent=void 0;const s=i(9),n=i(0),a=i(1);class r extends s.TileEvent{constructor(t,e,i,n,a,r,_,o,h){super(t,e,s.event_types.JUMP,i,n,a,r,_,o,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event)return;let t,e,i=30,n={x:this.x,y:this.y},_={x:this.x,y:this.y};if(this.data.hero.current_direction===a.directions.left?(i=-i,t="x",n.x-=2,_.x-=1,e=a.directions.left):this.data.hero.current_direction===a.directions.right?(t="x",n.x+=2,_.x+=1,e=a.directions.right):this.data.hero.current_direction===a.directions.up?(i=-i,t="y",n.y-=2,_.y-=1,e=a.directions.up):this.data.hero.current_direction===a.directions.down&&(t="y",n.y+=2,_.y+=1,e=a.directions.down),void 0===e)return;let o=s.TileEvent.get_location_key(_.x,_.y);if(o in this.data.map.events)for(let t=0;t<this.data.map.events[o].length;++t){const e=this.data.map.events[o][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collider_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(n.x,n.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===n.x&&e.current_y===n.y&&this.data.map.collision_layer===e.base_collider_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const n=this.data.map.events[h][i];if(n.type===s.event_types.JUMP&&n.is_active(a.get_opposite_direction(e))&&n.is_set&&n.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,n.dynamic){r.set_jump_collision(this.game,this.data);break}this.dynamic&&r.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const l=this.data.map.sprite.tileWidth*(n.x+.5),d=this.data.map.sprite.tileHeight*(n.y+.5);"x"===t?c.y=[d-5,d-8,d-5,d]:c.x=l,this.game.physics.p2.pause(),this.data.hero.play("jump",a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.data.hero.shadow.x=l,this.data.hero.shadow.y=d,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.play("jump",a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=a.get_surroundings(e.x,e.y,!0),r=!1,_=a.split_direction(this.data.hero.current_direction);for(let t=0;t<_.length;++t)r=r||this.activation_directions.includes(_[t]);let o=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],l=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let n=0;n<this.data.map.events[e].length;++n){const _=this.data.map.events[e][n];if(_.type===s.event_types.JUMP&&r&&_.is_set&&_.activation_collision_layers.includes(this.data.map.collision_layer)){!_.dynamic&&!this.dynamic||i[t].diag||(l=!0);const s=a.get_surroundings(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&l){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),o(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(parseInt(e[0])+.5)*this.data.map.sprite.tileWidth,s=(parseInt(e[1])+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(a)})}this.dynamic||r||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),o())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let a=0;a<e.map.events[i].length;++a){const r=e.map.events[i][a];if(r.type===s.event_types.JUMP&&r.dynamic&&r.is_set&&r.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:r.x-1,y:r.y},{x:r.x+1,y:r.y},{x:r.x,y:r.y-1},{x:r.x,y:r.y+1}];for(let a=0;a<i.length;++a){const r=s.TileEvent.get_location_key(i[a].x,i[a].y);if(r in e.map.events){let t=!1;for(let i=0;i<e.map.events[r].length;++i){const n=e.map.events[r][i];if(n.dynamic&&n.type===s.event_types.JUMP&&n.is_set&&n.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let _=(i[a].x+.5)*e.map.sprite.tileWidth,o=(i[a].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(_,o,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=n.MAP_DAMPING,h.angularDamping=n.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let n=0;n<e.length;++n){const r=e[n],_=s.TileEvent.get_location_key(r.x,r.y);if(_ in t.map.events)for(let e=0;e<t.map.events[_].length;++e){const n=t.map.events[_][e];n.type===s.event_types.JUMP&&n.activation_collision_layers.includes(i)&&!1===n.dynamic&&n.is_set&&n.activate_at(a.get_opposite_direction(r.direction))}}}}e.JumpEvent=r},function(t,e,i){"use strict";i.r(e),i.d(e,"MAX_CHARS_IN_BATTLE",(function(){return S})),i.d(e,"Battle",(function(){return q}));var s=i(5),n=i(0),a=i(1),r=i(6);const o=n.GAME_WIDTH>>1,h=n.GAME_HEIGHT-35,c=.009*Math.PI,l=n.GAME_WIDTH/2-50,d=n.GAME_HEIGHT/50,p=[11,9,7,5,3,1,3,5,7,9,11],u=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class g{constructor(t,e,i,s,n,a,r){this.game=t,this.data=e,this.esc_propagation_priority=a,this.enter_propagation_priority=r,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=n,this.allies_count=s.length,this.enemies_count=n.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.choosing_targets&&(this.data.enter_input.halt(),this.set_targets())},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.choosing_targets&&(this.data.esc_input.halt(),this.choosing_targets_finished(null))},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.choosing_targets&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.choosing_targets&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.choosing_targets&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.choosing_targets&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}set_targets(){let t,e;switch(this.target_type){case r.ability_target_types.ALLY:t=this.allies_count,e=this.allies_info;break;case r.ability_target_types.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case r.ability_target_types.USER:t=this.ability_caster.fighter_type===s.fighter_types.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===s.fighter_types.ENEMY?this.allies_info:this.enemies_info}const i=_.zipWith(p.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===r.ability_target_types.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}set_change_timers(t){this.change_target(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_target.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_target(t,e=!0){this.target_type===r.ability_target_types.ENEMY&&(t*=-1);const i=this.target_type===r.ability_target_types.ALLY?this.allies_info:this.enemies_info,n=i.length,a=n%2?n>>1:(n>>1)-1;let _;do{this.range_cursor_position+=t,0===t&&(t=-1);_=a+(this.range_cursor_position-(p.length>>1)),_>=n?(this.range_cursor_position=(p.length>>1)-a,_=0):_<0&&(this.range_cursor_position=(p.length>>1)+a+!(n%2),_=n-1)}while(i[_].instance.has_permanent_status(s.permanent_status.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1),this.battle_bg2.scale.setTo(1);const t=(t,e,i,s,n)=>{const a=t.create(0,0,e.sprite_key);a.anchor.setTo(.5,1),a.scale.setTo(e.scale,e.scale),a.ellipses_semi_major=l,a.ellipses_semi_minor=d,a.is_ally=i;return n[e.sprite_key.slice(0,e.sprite_key.lastIndexOf("_"))].setAnimation(a,"battle"),a.animations.play(s),this.sprites.push(a),a};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",_.mapValues(this.data.info.main_char_list,t=>t.sprite_base));e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list.sprite_base);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,n.GAME_WIDTH,2+(n.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.right_pressed=!1,this.left_pressed=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:n.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:.7551327},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}async set_stage_default_position(){let t;const e=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:.7551327},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),await e}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.is_ally?88:106-40*(this.enemies_count>>1))+40*i,n=e.is_ally?160:98;e.x=s,e.y=n;const a=e.scale.x+.2*Math.sign(e.scale.x),r=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(a,r)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===r.ability_target_types.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,n=this.range_cursor_position-(p.length>>1);this.cursors.forEach((a,r)=>{let _=r-((this.cursors.length>>1)-i)+n;const o=e[_];if(o&&!o.instance.has_permanent_status(s.permanent_status.DOWNED)){const e=o.sprite,i=u[this.range_cursor_position-n-(this.cursors.length>>1)+r];a.scale.setTo(i,i),a.alpha=1,this.cursors_tweens[r]&&this.cursors_tweens[r].stop();const s=e.x,_=e.y-e.height-5;t?this.game.add.tween(a).to({centerX:s,y:_},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[r]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(a.centerX=s,a.y=_,this.cursors_tweens[r]=this.game.add.tween(a).to({y:a.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{a.alpha=0,_=_<0?0:e.length-1;const t=e[_].sprite;a.centerX=t.x,a.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()}),this.stop_timers()}choose_targets(t,e,i,s,n){this.choosing_targets_callback=n,this.range_cursor_position=p.length>>1,this.ability_range="all"===t?p[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===r.ability_target_types.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===r.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1)})}choosing_targets_finished(t){this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===r.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.choosing_targets=!1,this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=Object(a.range_360)(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad-=c,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad+=c,this.battle_bg.x+=2.4;else{const t=Object(a.range_360)(this.camera_angle.rad)-Object(a.range_360)(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.is_ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=g.get_angle(i),n=g.ellipse_position(e,s,!0),a=g.ellipse_position(e,s,!1),r=e.is_ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,_=e.is_ally?t:t-this.allies_count;e.x=n+(35*_-r+17)*Math.sin(i),e.y=a;const o=e.is_ally?this.allies_info[_]:this.enemies_info[_],h=g.get_scale(o.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.signal_bindings.forEach(t=>{t.detach()}),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=n.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=n.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:n.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?l:e)*(i=void 0===i?d:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return o+g.ellipse(e,i,d)*Math.cos(e)}{const i=t.ellipses_semi_minor;return h+g.ellipse(e,l,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((d-l)*Math.tan(t)/(l+d*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}var m=i(4);class y{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",n.FONT_SIZE);return e.tint=n.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}async add_ability(t,e,i,s){switch(e.msg_type){case r.ability_msg_types.ATTACK:await this.add(t.name+" attacks!");break;case r.ability_msg_types.CAST:await this.add(`${t.name} casts ${e.name}!`);break;case r.ability_msg_types.UNLEASH:await this.add(`${t.name} unleashes ${e.name}!`);break;case r.ability_msg_types.SUMMON:await this.add(`${t.name} summons ${e.name}!`);break;case r.ability_msg_types.USE:await this.add(`${t.name} uses ${e.name}!`);break;case r.ability_msg_types.DEFEND:await this.add(t.name+" is defending!");break;case r.ability_msg_types.ITEM_UNLEASH:await this.add(`${t.name}'s ${i}`),await this.add(`lets out a howl! ${e.name}!`);break;case r.ability_msg_types.SET_DJINN:await this.add(`${s} is set to ${t.name}!`)}}async add_recover_effect(t){const e=t.char;switch(t.type){case m.effect_types.MAX_HP:case m.effect_types.MAX_PP:case m.effect_types.ATTACK:case m.effect_types.DEFENSE:case m.effect_types.AGILITY:case m.effect_types.LUCK:await this.add(`${e.name}'s ${m.effect_names[t.type]} returns to normal!`);break;case m.effect_types.POWER:case m.effect_types.RESIST:await this.add(`${e.name}'s ${a.element_names[t.attribute]} ${m.effect_names[t.type]} returns to normal!`);break;case m.effect_types.TEMPORARY_STATUS:case m.effect_types.PERMANENT_STATUS:await this.add(s.on_remove_status_msg[t.status_key_name](e))}}async add_damage(t,e,i=!1){const s=i?"PP":"HP",n=i?"current_pp":"current_hp",a=i?"max_pp":"max_hp";t>=0?(e[n]-t<0&&(t=e[n]),await this.add(`${e.name} takes ${t.toString()} damage!`)):e[n]>=e[a]?await this.add(`${e.name}'s ${s} is fully restored`):await this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}var b=i(30),f=i(18),w=i(3);class v{constructor(t,e){this.game=t,this.data=e,this.base_window=new w.Window(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t=this.base_window.set_text_in_position(this.ability_name,this.ability_name_x,8);if(this.texts.push(t),this.element&&this.element!==a.elements.NO_ELEMENT&&"summon"!==this.action){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=_.pickBy(this.data.dbs.summons_db[this.ability_key_name].requirements,t=>t);let e=0;a.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,n=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(n);const a=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(a),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.ability_key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(n.ICON_WIDTH>>1),this.icon_group.y=5+(n.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,n,a){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=n,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=a}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}class x{static roll_action(t,e,i){let n=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(s.permanent_status.DOWNED);const a={magnitude:i&&!n?1:null,target:{instance:i&&!n?t:null},type:"attack"};return i&&!n&&(n=!0),a})}}}class k{static player_turn_speed(t,e=!1,i=!1){return(t+(t*_.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const n=s?1e4:0;if(1===e)return t+n;if(2===i)return(t>>1)+n;if(3===i)switch(e){case 2:return 3*t/4+n;case 3:return(t>>1)+n}return(t>>1)+n}static base_damage(t,e){const i=t.current_atk-e.current_def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,s=!0){let r=100,o=100;if(i!==a.elements.NO_ELEMENT){if(o=e[i+"_resist_current"],void 0!==t){r=t[i+"_power_current"]}}return 1+_.clamp(r-o,n.ELEM_ATTR_MIN,n.ELEM_ATTR_MAX)/(s?200:400)}static physical_attack(t,e,i,s,n){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,n,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let s=100;if(i!==a.elements.NO_ELEMENT){s=t[i+"_power_current"]}return e*s/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,n,a){const r=n+"_level_current";return 3*(t[r]-e[r]-(e.current_luk>>1))/100+i+(a=void 0===a?0:a)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.current_luk-5*e+100*i)>=_.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case s.permanent_status.POISON:i=1;break;case s.permanent_status.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=_.clamp(t,0,4))*t+t)}}var E=i(2),j=i(11);class T{constructor(t,e,i,s,n,a,r,_,o,h,c,l,d,p,u,g,m,y,b,f,w,v,x){this.game=t,this.key_name=e,this.sprites_keys=i,this.x_sequence=s,this.y_sequence=n,this.x_ellipse_axis_factor_sequence=a,this.y_ellipse_axis_factor_sequence=r,this.x_scale_sequence=_,this.y_scale_sequence=o,this.x_anchor_sequence=h,this.y_anchor_sequence=c,this.alpha_sequence=l,this.rotation_sequence=d,this.stage_angle_sequence=p,this.hue_angle_sequence=u,this.tint_sequence=g,this.grayscale_sequence=m,this.colorize_sequence=y,this.custom_filter_sequence=b,this.play_sequence=f,this.set_frame_sequence=w,this.blend_mode_sequence=v,this.is_party_animation=x,this.running=!1}initialize(t,e,i,s,n,a,r,_){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=_,this.group_caster=s,this.group_enemy=n,this.super_group=a,this.stage_camera=r,this.trails_objs=[];for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let r;if(i.trails&&(r=this.initialize_trail_textures(i.trail_frame_diff,i.trails_mode)),!i.per_target){const e=i.count?i.count:1;for(let _=0;_<e;++_){const e=this.game.add.sprite(this.x0,this.y0,t);let _,o;a.getChildIndex(s)<a.getChildIndex(n)?(_=s,o=n):(_=n,o=s),"over"===i.position?a.addChild(e):"between"===i.position?a.addChildAt(e,a.getChildIndex(o)):"behind"===i.position&&a.addChildAt(e,a.getChildIndex(_));const h=Phaser.Animation.generateFrameNames(i.key_name+"/",1,e.animations.frameTotal,"",3);e.animations.add(i.key_name,h),e.animations.frameName=h[0],e.battle_index=this.sprites.length,e.trails=i.trails,e.trails_info=r,i.trails&&(e.x_history=new Array(r.frame_diff+1).fill(e.x-this.game.camera.x),e.y_history=new Array(r.frame_diff+1).fill(e.y-this.game.camera.y)),this.sprites.push(e)}}}this.set_filters()}initialize_trail_textures(t,e){switch(e){case"screen":e=PIXI.blendModes.SCREEN;break;case"normal":e=PIXI.blendModes.NORMAL}const i=this.game.add.renderTexture(n.GAME_WIDTH,n.GAME_HEIGHT);let s=this.game.add.sprite(this.game.camera.x,this.game.camera.y,i);s.blendMode=e,s.alpha=.6;const a=this.game.add.renderTexture(n.GAME_WIDTH,n.GAME_HEIGHT);let r=this.game.add.sprite(this.game.camera.x,this.game.camera.y,a);return r.blendMode=e,r.alpha=.4,this.trails_objs=this.trails_objs.concat(i,a,s,r),{texture_1:i,texture_2:a,frame_diff:t}}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy()}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let s={},r={};for(let _=0;_<t.length;++_){const o=t[_];o.sprite_index in r||(r[o.sprite_index]=!0),o.sprite_index in s&&(r[o.sprite_index]=!1);let h=this.get_sprites(o,i),c=!1;h.forEach((t,i)=>{const _=t.key+"_"+t.battle_index;void 0===this.sprites_prev_properties[_]&&(this.sprites_prev_properties[_]={}),void 0===this.sprites_prev_properties[_][e]&&(this.sprites_prev_properties[_][e]=t[e]);const h=Array.isArray(o.to)?o.to[i]:o.to;let l=h;if("target"===h){const t=Array.isArray(o.shift)?o.shift[i]:o.shift;l=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[_][e]=Object(a.range_360)(this.sprites_prev_properties[_][e]),t[e]=this.sprites_prev_properties[_][e],l=T.get_angle_by_direction(this.sprites_prev_properties[_][e],h,o.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[_][e]-l)>n.degree360&&(l-=Math.sign(l)*n.degree360)),l=o.is_absolute?l:this.sprites_prev_properties[_][e]+h,o.yoyo||(this.sprites_prev_properties[_][e]=l),"initial"===o.tween)t[e]=l;else{o.sprite_index in s||(s[o.sprite_index]={[i]:[]}),i in s[o.sprite_index]||(s[o.sprite_index][i]=[]);const n=Array.isArray(o.start_delay)?o.start_delay[i]:o.start_delay;if("instantly"===o.duration){let i;if(!c){let t=new Promise(t=>{i=t});this.promises.push(t),c=!0}this.game.time.events.add(n,()=>{t[e]=l,o.force_stage_update&&this.stage_camera.update(),o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(a.range_360)(t[e])),void 0!==i&&i()})}else{const _=this.game.add.tween(t).to({[e]:l},Array.isArray(o.duration)?o.duration[i]:o.duration,o.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),r[o.sprite_index],n,0,void 0!==o.yoyo&&o.yoyo);if(!c){let i,s=new Promise(t=>{i=t});this.promises.push(s),_.onStart.addOnce(()=>{o.force_stage_update&&(this.stage_camera.spining=!0)}),_.onComplete.addOnce(()=>{o.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=Object(a.range_360)(t[e])),i(),o.force_stage_update&&(this.stage_camera.spining=!1)}),c=!0}s[o.sprite_index][i].length&&s[o.sprite_index][i][s[o.sprite_index][i].length-1].chain(_),s[o.sprite_index][i].push(_)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{e.reverse?t.animations.getAnimation(e.animation_key).reversed=!0:t.animations.getAnimation(e.animation_key).reversed=!1,t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const n=t[s];this.get_sprites(n).forEach((t,s)=>{let a,r=new Promise(t=>{a=t});this.promises.push(r);const _=Array.isArray(n.start_delay)?n.start_delay[s]:n.start_delay;this.game.time.events.add(_,()=>{const s=void 0!==n.filter?n.filter:e;t.filters[0][s]=n.value,i.forEach(e=>{t.filters[0][e]=n[e]})}),a()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let s;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?s=.7551327:i.is_absolute?(this.stage_prev_value=Object(a.range_360)(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,s=T.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-s)>n.degree360&&(s-=Math.sign(s)*n.degree360)):s=this.stage_prev_value+i.to,this.stage_prev_value=s,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=s:this.stage_camera.rad+=s;else{const e=this.game.add.tween(this.stage_camera).to({rad:s},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let n,r=new Promise(t=>{n=t});this.promises.push(r),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=Object(a.range_360)(this.stage_camera.rad)),this.stage_camera.spining=!1,n()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}render(){let t=!0;this.sprites.forEach(e=>{e.trails&&(e.x_history.unshift(e.x),e.y_history.unshift(e.y),t&&(e.trails_info.texture_1.clear(),e.trails_info.texture_2.clear(),t=!1),e.trails_info.texture_1.renderXY(e,e.x_history[e.trails_info.frame_diff>>1],e.y_history[e.trails_info.frame_diff>>1]),e.trails_info.texture_2.renderXY(e,e.x_history.pop(),e.y_history.pop()))})}static get_angle_by_direction(t,e,i,s=!1){let r;if(r=s?(e=n.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",r===i)return e;const _=e%n.degree360-t%n.degree360,o=Math.sign(_)*n.degree360-_,h=t%n.degree360-o;if("closest"===i){let i,s;return h>0?(s=h-Object(a.range_360)(t),i=n.degree360-s):(i=e-Object(a.range_360)(t),s=n.degree360-i),Math.abs(i)<Math.abs(s)?e:h}return h}}class A{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}async load_animation(t){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),n=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let a,r=!0;const _=new Promise(t=>{a=t});let o;s.onFileComplete.addOnce((t,e,i)=>{r=r&&i,a()});const h=new Promise(t=>{o=t});let c;n.onFileComplete.addOnce((t,e,i)=>{r=r&&i,o()});const l=new Promise(t=>c=t);if(this.game.load.onLoadComplete.addOnce(c),this.game.load.start(),await Promise.all([_,h,l]),r){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new T(this.game,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.is_party_animation)}else this.not_available.add(t)}animation_available(t){return t in this.animations}async play(t,e,i,s,n,a){if(!(t in this.animations))return;const r=t+"_battle_animation";let _;this.animations[t].initialize(r,e,i,s,n,a.battle_group,a.camera_angle,[a.battle_bg,a.battle_bg2]);const o=new Promise(t=>{_=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(_),await o,this.render_function=null}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}const S=4,O=0,I=1,P=2,R=3,M=4,N=5,D=6;class q{constructor(t,e,i,s){this.game=t,this.data=e,this.allies_info=this.data.info.party_data.members.slice(0,S).map(t=>(t.init_effect_turns_count(),{sprite_key:t.key_name+"_battle",scale:t.battle_scale,instance:t,entered_in_battle:!0})),this.enemies_party_data=this.data.dbs.enemies_parties_db[s],this.enemies_info=[],this.this_enemies_list={};let n={},a=0;this.enemies_party_data.members.forEach(t=>{const e=_.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle"}),this.enemies_info[a].sprite_key in n?n[this.enemies_info[a].sprite_key]+=1:n[this.enemies_info[a].sprite_key]=1;let e="",i="";n[this.enemies_info[a].sprite_key]>1&&(e="_"+n[this.enemies_info[a].sprite_key].toString(),i=" "+n[this.enemies_info[a].sprite_key].toString()),this.enemies_info[a].instance=Object(f.get_enemy_instance)(this.data.info.enemies_list[t.key].data,i),this.enemies_info[a].scale=this.enemies_info[a].instance.battle_scale,this.enemies_info[a].battle_key=this.enemies_info[a].sprite_key+e,this.this_enemies_list[this.enemies_info[a].battle_key]=this.enemies_info[a].instance,++a}}),this.enter_propagation_priority=0,this.esc_propagation_priority=0,this.battle_stage=new g(this.game,this.data,i,this.allies_info,this.enemies_info,this.esc_propagation_priority++,this.enter_propagation_priority++),this.battle_log=new y(this.game),this.battle_menu=new b.MainBattleMenu(this.game,this.data,++this.enter_propagation_priority,++this.esc_propagation_priority,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new v(this.game,this.data),this.animation_manager=new A(this.game,this.data),this.battle_phase=O,this.controls_enabled=!1,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,++this.enter_propagation_priority,++this.esc_propagation_priority,this.battle_finishing=!1,this.signal_bindings=this.set_controls()}set_controls(){return[this.data.enter_input.add(()=>{if(this.data.in_battle&&this.controls_enabled)switch(this.data.enter_input.halt(),this.battle_phase){case I:this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=P,this.check_phases();break;case M:case N:case D:this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)}},this,this.enter_propagation_priority)]}start_battle(){this.check_phases()}on_abilities_choose(t){this.player_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=R,this.check_phases()}choose_targets(t,e,i,s,n){const a=this.data.info.abilities_list[t];let r;"psynergy"===e&&(r=[a.pp_cost]),"defend"!==e&&this.target_window.open(e,a.name,a.element,t,r,n),this.battle_stage.choose_targets(a.range,a.battle_target,a.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(s.permanent_status.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(s.permanent_status.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=D)}check_phases(){switch(this.check_parties(),this.battle_phase){case O:this.battle_phase_none();break;case I:case P:this.battle_phase_menu();break;case R:this.battle_phase_round_start();break;case M:this.battle_phase_combat();break;case N:this.battle_phase_round_end();break;case D:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.battle_phase=I,this.data.in_battle=!0,this.data.battle_instance=this,this.battle_log.add(this.enemies_party_data.name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=_.mapValues(_.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=_.mapValues(_.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.controls_enabled=!0})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}async battle_phase_round_start(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=x.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.player_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.player_abilities[t].length;++i){const s=this.data.info.abilities_list[this.player_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.player_abilities[t][i].speed=k.player_turn_speed(e.current_agi,n,i>0),this.player_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=k.enemy_turn_speed(e.current_agi,i+1,e.turns,n),this.enemies_abilities[t][i].caster=e}}this.turns_actions=_.sortBy(Object.values(this.player_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,await this.animation_manager.load_animation(s)}this.battle_phase=M,this.controls_enabled=!0,this.check_phases()}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}async check_downed(t){0===t.current_hp&&(t.add_permanent_status(s.permanent_status.DOWNED),await this.battle_log.add(s.on_catch_status_msg[s.permanent_status.DOWNED](t)),await this.wait_for_key())}async battle_phase_combat(){if(!this.turns_actions.length)return this.battle_phase=N,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(s.permanent_status.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(s.temporary_status.SLEEP)?await this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(s.temporary_status.STUN)&&await this.battle_log.add(t.caster.name+" is paralyzed and cannot move!"),await this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==s.fighter_types.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,x.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let e=this.data.info.abilities_list[t.key_name],i="";if(t.caster.fighter_type===s.fighter_types.ALLY&&void 0!==e&&e.can_switch_to_unleash&&t.caster.equip_slots.weapon&&this.data.info.items_list[t.caster.equip_slots.weapon.key_name].unleash_ability){const s=this.data.info.items_list[t.caster.equip_slots.weapon.key_name];Math.random()<s.unleash_rate&&(i=s.name,t.key_name=s.unleash_ability,e=this.data.info.abilities_list[s.unleash_ability])}if(void 0===e)return await this.battle_log.add(t.key_name+" ability key not registered."),await this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(s.temporary_status.SEAL)&&e.ability_category===r.ability_categories.PSYNERGY)return await this.battle_log.add("But the Psynergy was blocked!"),await this.wait_for_key(),void this.check_phases();if(e.pp_cost>t.caster.current_pp)return await this.battle_log.add("... But doesn't have enough PP!"),await this.wait_for_key(),void this.check_phases();t.caster.current_pp-=e.pp_cost;let n=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(await this.battle_log.add_ability(t.caster,e,i,n),e.ability_category===r.ability_categories.DJINN)e.effects.some(t=>t.type===m.effect_types.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(E.djinn_status.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(E.djinn_status.STANDBY,t.caster);else if(e.ability_category===r.ability_categories.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements,s=E.Djinn.get_standby_djinni(this.data.info.djinni_list,j.MainChar.get_active_players(this.data.info.party_data,S));if(!_.every(i,(t,e)=>s[e]>=t))return await this.battle_log.add(`${t.caster.name} summons ${e.name} but`),await this.battle_log.add("doesn't have enough standby Djinn!"),await this.wait_for_key(),void this.check_phases();E.Djinn.set_to_recovery(this.data.info.djinni_list,j.MainChar.get_active_players(this.data.info.party_data,S),i)}if(this.battle_menu.chars_status_window.update_chars_info(),e.type===r.ability_types.UTILITY&&await this.wait_for_key(),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===s.fighter_types.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),n=t.caster.fighter_type===s.fighter_types.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===s.fighter_types.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;await this.animation_manager.play(t.battle_animation_key,e,i,n,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else await this.battle_log.add(`Animation for ${e.name} not available...`),await this.wait_for_key();[r.ability_types.UTILITY,r.ability_types.EFFECT_ONLY].includes(e.type)||await this.apply_damage(t,e);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(!m.effect_usages.ON_USE)continue;if(await this.apply_effects(t,e,s))return this.battle_phase=N,void this.check_phases()}if(await this.battle_stage.set_stage_default_position(),e.ability_category===r.ability_categories.SUMMON){const i=this.data.dbs.summons_db[e.key_name].requirements;for(let s=0;s<a.ordered_elements.length;++s){const n=a.ordered_elements[s],r=k.summon_power(i[n]);r>0&&(t.caster.add_effect({type:"power",quantity:r,operator:"plus",attribute:n},e,!0),await this.battle_log.add(`${t.caster.name}'s ${a.element_names[n]} Power rises by ${r.toString()}!`),await this.wait_for_key())}}const o=t.caster.is_poisoned();if(o){let e=k.battle_poison_damage(t.caster,o);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=_.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=o===s.permanent_status.POISON?"poison":"venom";await this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(t.caster)}if(t.caster.has_temporary_status(s.temporary_status.DEATH_CURSE)){const e=_.find(t.caster.effects,{status_key_name:s.temporary_status.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(s.permanent_status.DOWNED),await this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),await this.wait_for_key())}this.check_phases()}async apply_damage(t,e){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===m.effect_types.CRITICALS).reduce((t,e)=>m.Effect.apply_operator(t,e.quantity,e.operator),0));for(let n=0;n<t.targets.length;++n){const o=t.targets[n];if(null===o.magnitude)continue;const h=o.target.instance;if(h.has_permanent_status(s.permanent_status.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<1/32||t.caster.temporary_status.has(s.temporary_status.DELUSION)&&Math.random()<.66))return await this.battle_log.add(h.name+" nimbly dodges the blow!"),this.wait_for_key();let c=0;if(e.has_critical&&(Math.random()<1/32||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+h.level/5;c=k.physical_attack(t.caster,h,i,s,e.element)}else switch(e.type){case r.ability_types.ADDED_DAMAGE:c=k.physical_attack(t.caster,h,1,e.ability_power,e.element);break;case r.ability_types.MULTIPLIER:c=k.physical_attack(t.caster,h,e.ability_power/10,0,e.element);break;case r.ability_types.BASE_DAMAGE:c=k.psynergy_damage(t.caster,h,e.ability_power,e.element);break;case r.ability_types.HEALING:c=-k.heal_ability(t.caster,e.ability_power,e.element);break;case r.ability_types.SUMMON:const i=_.sum(_.values(this.data.dbs.summons_db[e.key_name].requirements));c=k.summon_damage(h,e.ability_power,i);break;case r.ability_types.DIRECT_DAMAGE:c=e.ability_power}const l=r.Ability.get_diminishing_ratios(e.type,e.use_diminishing_ratio);c=c*l[o.magnitude]|0,c+=Object(a.variation)(),c>=0&&h.effects.forEach(t=>{t.type===m.effect_types.DAMAGE_MODIFIER&&(c=t.apply_effect(c).after)}),await this.battle_log.add_damage(c,h,e.affects_pp);const d=e.affects_pp?"current_pp":"current_hp",p=e.affects_pp?"max_pp":"max_hp";h.current_hp=_.clamp(h[d]-c,0,h[p]),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key(),await this.check_downed(h);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===m.effect_types.DAMAGE_INPUT){const i=s.on_caster?t.caster:h,n=i.add_effect(s,e).effect,a=n.apply_effect(c);if([m.effect_types.CURRENT_HP,m.effect_types.CURRENT_PP].includes(n.sub_effect.type)){const t=a.before-a.after;0!==t&&(n.effect_msg?await this.battle_log.add(m.effect_msg[n.effect_msg](h)):await this.battle_log.add_damage(t,i,n.sub_effect.type===m.effect_types.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()),await this.check_downed(i)}i.remove_effect(n)}}}}async apply_effects(t,e,i){let n;for(let o=0;o<t.targets.length;++o){const h=t.targets[o];if(null===h.magnitude)continue;const c=h.target.instance;if(!c.has_permanent_status(s.permanent_status.DOWNED))switch(i.type){case m.effect_types.PERMANENT_STATUS:if(i.add_status){if(c.has_permanent_status(i.status_key_name))break;if(i.status_key_name===s.permanent_status.POISON&&c.has_permanent_status(s.permanent_status.VENOM))break}case m.effect_types.TEMPORARY_STATUS:if(i.add_status){let n=_.find(c.class.vulnerabilities,{status_key_name:i.status_key_name});n=void 0===n?0:n.chance;const a=r.diminishing_ratios.STATUS[h.magnitude];if(k.ailment_success(t.caster,c,i.chance,a,e.element,n)){const t=c.add_effect(i,e,!0).effect;if(t.type===m.effect_types.TEMPORARY_STATUS)c.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===s.temporary_status.DEATH_CURSE&&c.has_temporary_status(s.temporary_status.DEATH_CURSE)?c.set_effect_turns_count(t):c.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===s.permanent_status.VENOM&&c.has_permanent_status(s.permanent_status.POISON)){const t=_.find(c.effects,{status_key_name:s.permanent_status.POISON});c.remove_effect(t,!0)}await this.battle_log.add(s.on_catch_status_msg[i.status_key_name](c))}else await this.battle_log.add(`But it has no effect on ${c.name}!`);await this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=_.find(c.effects,{status_key_name:i.status_key_name});if(!t)break;c.remove_effect(t,!0),t.status_key_name===s.permanent_status.DOWNED&&c.init_effect_turns_count(),t.type===m.effect_types.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),await this.wait_for_key())}break;case m.effect_types.CURRENT_HP:if(n=c.add_effect(i,e,!0),n.effect.show_msg){const t=n.changes.before-n.changes.after;await this.battle_log.add_damage(t,c),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}await this.check_downed(c),void 0!==n.effect.turns_quantity?this.on_going_effects.push(n.effect):c.remove_effect(n.effect);break;case m.effect_types.MAX_HP:case m.effect_types.MAX_PP:case m.effect_types.ATTACK:case m.effect_types.DEFENSE:case m.effect_types.AGILITY:case m.effect_types.LUCK:case m.effect_types.POWER:case m.effect_types.RESIST:if(n=c.add_effect(i,e,!0),this.on_going_effects.push(n.effect),c.set_effect_turns_count(n.effect,n.effect.turn_count,!1),n.effect.show_msg){const t=n.changes.after-n.changes.before,e=t>=0?"rises":"drops";let s="";[m.effect_types.POWER,m.effect_types.RESIST].includes(i.type)&&(s=a.element_names[n.effect.attribute]+" "),await this.battle_log.add(`${c.name}'s ${s}${m.effect_names[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),await this.wait_for_key()}break;case m.effect_types.END_THE_ROUND:return await this.battle_log.add("Everybody is resting!"),await this.wait_for_key(),!0;case m.effect_types.TURNS:await this.battle_log.add(t.caster.name+" readies for action!"),await this.wait_for_key(),this.on_going_effects.push(c.add_effect(i,e,!0).effect);break;case m.effect_types.DAMAGE_MODIFIER:await this.battle_log.add(m.effect_msg[i.effect_msg](c)),await this.wait_for_key(),this.on_going_effects.push(c.add_effect(i,e,!0).effect);break;case m.effect_types.COUNTER_STRIKE:case m.effect_types.FLEE:break;default:this.on_going_effects.push(c.add_effect(i,e,!0).effect)}}return!1}async battle_phase_round_end(){let t=[],e={};for(let i=0;i<this.on_going_effects.length;++i){const n=this.on_going_effects[i];if(n.char.has_permanent_status(s.permanent_status.DOWNED)){n.char.remove_effect(n),n.char.update_all(),t.push(i);continue}let a=!1;void 0!==n.turn_count&&(null!==n.char.get_effect_turns_count(n)?(n.char.key_name in e&&n.char.get_effect_turns_key(n)in e[n.char.key_name]||n.char.set_effect_turns_count(n),n.turn_count=n.char.get_effect_turns_count(n),e[n.char.key_name]?e[n.char.key_name][n.char.get_effect_turns_key(n)]=n:e[n.char.key_name]={[n.char.get_effect_turns_key(n)]:n},a=!0):--n.turn_count,0===n.turn_count&&(n.char.remove_effect(n),n.char.update_all(),t.push(i),a||(this.battle_log.add_recover_effect(n),await this.wait_for_key())))}for(let t in e)for(let i in e[t]){const s=e[t][i];0===s.turn_count&&(this.battle_log.add_recover_effect(s),await this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<S;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],n=this.data.info.djinni_list[s];n.status===E.djinn_status.RECOVERY&&(0===n.recovery_turn?(n.set_status(E.djinn_status.SET,e),await this.battle_log.add(`${n.name} is set to ${e.name}!`),await this.wait_for_key()):--n.recovery_turn)}}this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=P,this.check_phases()}async battle_phase_end(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.char.remove_effect(e),e.char.update_all()}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_data.name+" has been defeated!"),await this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),await this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],n=i.instance;if(!n.has_permanent_status(s.permanent_status.DOWNED)){const e=n.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${n.name} is now a level ${n.level} ${n.class.name}!`),await this.wait_for_key();const t=_.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${n.class.name}'s ${i.name}!`),await this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case"max_hp":t="Maximum HP";break;case"max_pp":t="Maximum PP";break;case"atk":t="Attack";break;case"def":t="Defense";break;case"agi":t="Agility";break;case"luk":t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),await this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),await this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?(this.battle_log.add(`You got a ${t.name}.`),await this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),await this.wait_for_key())}}}this.unset_battle()}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.signal_bindings.forEach(t=>{t.detach()}),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEvent=e.event_types=void 0,e.event_types={BATTLE:"battle"};class s{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=s.id_incrementer++,s.events[this.id]=this}static get_event(t){return s.events[t]}static reset(){s.id_incrementer=0,s.events={}}}e.GameEvent=s,s.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldAbilities=void 0;const s=i(51),n=i(1),a=i(25),r=i(52);e.FieldAbilities=class{constructor(t,e,i,s,n,a){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=n,this.need_target=a,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new r.FieldPsynergyWindow(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===n.directions_count?n.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(n.base_actions.IDLE,n.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===n.directions.up||this.cast_direction===n.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===n.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===n.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let r=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[r.key_name].psynergy_keys))continue;const _=r.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),o=r.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=o>=i&&o<=s;if(_>=t&&_<=e&&h&&this.data.map.collision_layer===r.base_collider_layer){let t=Math.pow(_-this.controllable_char.sprite.x,2)+Math.pow(o-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=r)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===a.interactable_object_interaction_types.ONCE){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=s.init_cast_aura(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=s.tint_map_layers(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DialogManager=void 0;const s=i(0),n=i(1),a=i(3);e.DialogManager=class{constructor(t,e,i=!0){this.game=t,this.data=e,this.italic_font=i,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.hero_direction=n.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const s=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,s),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null,this.show_crystal=!1}update_position(){this.avatar&&this.avatar_window.update(!0),this.window.update(!0)}get_dialog_window_position(t,e){const i=s.GAME_WIDTH-t>>1;let a=s.MAX_DIAG_WIN_HEIGHT-e>>1;return[n.directions.up,n.directions.up_left,n.directions.up_right].includes(this.hero_direction)||(a=s.GAME_HEIGHT-(s.MAX_DIAG_WIN_HEIGHT+4)+a),{x:i,y:a}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=s.GAME_HEIGHT>>1?t.y-s.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t.bind(this,this.finished)),void this.dialog_crystal.destroy();this.window&&(this.window.destroy(!1),this.window=null),this.mount_window(t,e,i),++this.step}mount_window(t,e,i){this.dialog_crystal.visible=!1;let n=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(n.x=e.x),e&&void 0!==e.y&&(n.y=e.y),this.window=new a.Window(this.game,n.x,n.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1||this.show_crystal){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i&&i(this.finished)})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(n);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=s.AVATAR_SIZE+4;this.avatar_window=new a.Window(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const a=s.MAX_DIAG_WIN_WIDTH-2*s.WINDOW_PADDING_H-s.INSIDE_BORDER_WIDTH;let r=t.split(" "),_=[],o=[],h=[],c=0,l=0;for(let t=0;t<r.length;++t){const e=r[t];if(c=n.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=a){const t=h.join(" ");o.push(t),l=Math.max(l,n.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=n.get_text_width(this.game,e,this.italic_font),o.length===s.MAX_LINES_PER_DIAG_WIN&&(_.push({lines:o.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+o.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES}),l=0,o=[])}else h.push(e)}h.length&&(l=Math.max(l,n.get_text_width(this.game,h.join(" "),this.italic_font)),o.push(h.join(" ")),_.push({lines:o.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH+2,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+o.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES})),this.parts=_}quick_next(t,e,i,s,n,a,r=!1){this.parts=null,this.step=0,this.window&&(this.window.destroy(!1),this.window=null),this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.show_crystal=r,this.set_dialog(t,i,s),this.mount_window(e,n,a)}kill_dialog(t,e=!1,i=!1){e||this.avatar_window&&this.avatar_window.destroy(!1),this.window&&(this.finished=!0,this.window.destroy(!0,t),i&&this.dialog_crystal.destroy())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.get_enemy_instance=e.EnemyBase=e.Enemy=void 0;const s=i(12),n=i(5),a=i(1),r=i(10),_=i(0),o=i(4);class h extends n.Player{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_scale=t.battle_scale,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=n.fighter_types.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.current_atk=this.atk,this.current_def=this.def,this.current_agi=this.agi,this.current_luk=this.luk,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case o.effect_types.POWER:case o.effect_types.RESIST:case o.effect_types.MAX_HP:case o.effect_types.MAX_PP:case o.effect_types.ATTACK:case o.effect_types.DEFENSE:case o.effect_types.AGILITY:case o.effect_types.LUCK:t.apply_effect()}});for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=r.clamp(this[i],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX),this[s]=r.clamp(this[s],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX)}}}e.Enemy=h;class c extends s.SpriteBase{constructor(t){super(t,["battle"])}}e.EnemyBase=c,e.get_enemy_instance=function(t,e){return new h(t,t.name+e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControllableChar=void 0;const s=i(0),n=i(1),a=i(39),r={x:.5,y:.8};e.ControllableChar=class{constructor(t,e,i,s,n,r,_,o){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.stop_by_colliding=!1,this.force_direction=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=n,this.current_action=r,this.current_direction=_,this.required_direction=0,this.desired_direction=_,this.color_filter=this.game.add.filter("ColorFilters"),this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null,this.enable_footsteps=void 0!==o&&o,this.footsteps=new a.Footsteps(this.game,this.data)}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting}set_sprite(t,e,i,s,n,a){n=void 0===n?r.x:n,a=void 0===a?r.y:a,this.sprite_info=e;const _=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,_),this.sprite.centerX=(this.tile_x_pos+1.5)*i.tileWidth|0,this.sprite.centerY=(this.tile_y_pos+1.5)*i.tileHeight|0,this.sprite.base_collider_layer=s,this.sprite.roundPx=!0,this.sprite.anchor.setTo(n,a)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=r[t]:(this.sprite.anchor.x=r.x,this.sprite.anchor.y=r.y)}set_shadow(t,e,i,s,n){t=void 0===t?"shadow":t,s=void 0===s?.45:s,n=void 0===n?.05:n,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(s,n),this.shadow.base_collider_layer=i}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collider_layer(t){this.sprite.base_collider_layer=t,this.shadow.base_collider_layer=t}play(t,e){if(t=void 0===t?this.current_action:t,e=void 0===e?n.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const i=this.sprite_info.getAnimationKey(t,e);return this.sprite.animations.getAnimation(i)||this.sprite_info.setAnimation(this.sprite,t),this.sprite.animations.play(i),this.sprite.animations.getAnimation(i)}update_shadow(){this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y}stop_char(t=!0){this.sprite.body.velocity.y=this.sprite.body.velocity.x=0,t&&(this.current_action=n.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=n.base_actions.IDLE;const s=i?n.base_actions.IDLE:n.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===n.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action);const e=this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT);e&&this.current_action!==n.base_actions.DASH?this.current_action=n.base_actions.DASH:e||this.current_action===n.base_actions.WALK||(this.current_action=n.base_actions.WALK)}}else this.current_action=n.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;this.current_action===n.base_actions.DASH?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.dash_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.dash_speed+this.extra_speed)|0):this.current_action===n.base_actions.WALK?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.walk_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.walk_speed+this.extra_speed)|0):this.current_action===n.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.sprite_info.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.sprite_info.climb_speed|0):this.current_action===n.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[n.base_actions.WALK,n.base_actions.DASH,n.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fire_push_movement=e.target_only_push=e.normal_push=void 0;const s=i(0),n=i(9),a=i(1),r=i(13);function _(t,e,i,n,r,_=!1,c=!0,l){let d;if(!_){let t=e.hero.sprite.x+(-i.sprite.y-i.sprite.x),s=-e.hero.sprite.x+(-i.sprite.y+i.sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?d=a.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?d=a.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?d=a.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(d=a.directions.right)}if(_||d===e.hero.trying_to_push_direction){_||(e.hero.pushing=!0,e.hero.current_action=a.base_actions.PUSH,e.hero.set_action()),t.physics.p2.pause();let d=0,p=0,u=0,g=0;switch(e.hero.trying_to_push_direction){case a.directions.up:g=-1,p=-16;break;case a.directions.down:g=1,p=16;break;case a.directions.left:u=-1,d=-16;break;case a.directions.right:u=1,d=16}o(e,i,u,g);let m=[i.sprite.body];_||m.push(e.hero.shadow,e.hero.sprite.body);const y=i.current_x,b=i.current_y;i.current_x+=u,i.current_y+=g;let f=[];void 0!==r&&r(d,p),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=d,i.custom_data.blocking_stair_block.y+=p);for(let n=0;n<m.length;++n){let r,_=m[n],c=_.x+d,w=_.y+p;_!==e.hero.shadow&&_!==e.hero.sprite.body||(0===d?c=e.map.sprite.tileWidth*(y+u+.5):0===p&&(w=e.map.sprite.tileHeight*(b+g+.5))),f.push(new Promise(t=>{r=t}));const v=t.add.tween(_).to({x:c,y:w},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);l&&v.onUpdateCallback(l),v.onComplete.addOnce(()=>{let s=!1;n===m.length-1&&i.object_drop_tiles.forEach(n=>{if(n.x===i.current_x&&n.y===i.current_y){s=!0;const _=(n.dest_y-i.current_y)*e.map.sprite.tileHeight;return o(e,i,0,n.dest_y-i.current_y),i.current_y=n.dest_y,i.change_collider_layer(e,n.destination_collider_layer),void t.add.tween(i.sprite.body).to({y:i.sprite.body.y+_},n.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{n.dust_animation?(e.hero.current_action=a.base_actions.IDLE,e.hero.play(e.hero.current_action,a.reverse_directions[e.hero.current_direction]),h(t,e,i,r)):r()})}}),s||r()})}Promise.all(f).then(()=>{e.hero.pushing=!1,c&&t.physics.p2.resume(),void 0!==n&&n()})}}function o(t,e,i,s){let _=e.get_events();for(let o=0;o<_.length;++o){let h=_[o];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,l=h.y,d=c+i,p=l+s;const u=n.TileEvent.get_location_key(d,p);h.x=d,h.y=p,h.location_key=u,u in t.map.events||(t.map.events[u]=[]),t.map.events[u].push(h);const g=a.get_surroundings(d,p,!1,2);r.JumpEvent.active_jump_surroundings(t,g,e.collider_layer_shift+e.base_collider_layer);const m=a.get_surroundings(c,l,!1,2);for(let i=0;i<m.length;++i){const s=m[i],r=n.TileEvent.get_location_key(s.x,s.y);if(r in t.map.events)for(let i=0;i<t.map.events[r].length;++i){const _=t.map.events[r][i];if(_.type===n.event_types.JUMP){const t=e.collider_layer_shift+e.base_collider_layer;_.activation_collision_layers.includes(t)&&!1===_.dynamic&&_.deactivate_at(a.get_opposite_direction(s.direction))}}}}}function h(t,e,i,n){let a=new Array(7),r=new Array(7);const _=(i.current_x+.5)*e.map.sprite.tileWidth,o=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let n=0;n<7;++n){const c=(Math.PI+s.degree60)*n/6-s.degree30,l=_+18*Math.cos(c),d=o+18*Math.sin(c);let p=e.npc_group.create(_,o,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(p,e.npc_group.getChildIndex(i.sprite)),p.anchor.setTo(.5,.5),t.add.tween(p).to({x:l,y:d},400,Phaser.Easing.Linear.None,!0),r[n]=p,h.setAnimation(p,"dust");const u=h.getAnimationKey("dust","spread");let g;a[n]=new Promise(t=>{g=t}),p.animations.getAnimation(u).onComplete.addOnce(g),p.animations.play(u)}Promise.all(a).then(()=>{r.forEach(t=>{e.npc_group.remove(t,!0)}),n()})}e.normal_push=function(t,e,i){!e.hero.trying_to_push||![a.directions.up,a.directions.down,a.directions.left,a.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||_(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null},e.target_only_push=function(t,e,i,s,n,a=!0,r){_(t,e,i,n,s,!0,a,r)},e.fire_push_movement=_},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NPC=e.npc_types=e.npc_movement_types=e.NPC_Sprite=void 0;const s=i(12),n=i(15),a=i(1),r=i(19),_=i(42);class o extends s.SpriteBase{constructor(t,e){super(t,e)}}e.NPC_Sprite=o;e.npc_movement_types={IDLE:"idle",WALK_AROUND:"walk_around"},e.npc_types={NORMAL:"normal",INN:"inn",SHOP:"shop"};class h extends r.ControllableChar{constructor(t,e,i,s,n,a,r,_,o,h,c,l,d,p,u,g,m){super(t,e,i,s,n,a,r,_),this.npc_type=o,this.movement_type=h,this.message=c,this.thought_message=l,this.avatar=d,this.shop_key=p,this.base_collider_layer=u,this.talk_range_factor=void 0===g?3:g,this.events=[],this.set_events(m)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case n.event_types.BATTLE:this.events.push(new _.BattleEvent(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===e.npc_movement_types.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=a.mount_collision_polygon(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collider_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}e.NPC=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsStatusWindow=void 0;const s=i(3),n=i(1),a=i(0),r=i(2),_=i(11),o=i(10),h=a.BLUE_FONT_COLOR,c=a.RED_FONT_COLOR,l=[0,16],d=[1,9],p=[20,36],u=[8,16];e.CharsStatusWindow=class{constructor(t,e,i=!1,r=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=r,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const _=o.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=49*_+4,this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window=new s.Window(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.status_header_width=n.get_text_width(this.game,"HP "),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(l[i],d[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",p[i],this.name_y+u[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={group:null,name:null,hp_bar_graphics:null,hp_bar_damage_graphics:null,hp_header:null,hp:null,pp_bar_graphics:null,pp_bar_damage_graphics:null,pp_header:null,pp:null};const s=t[e],n=49*e+8,r=s.key_name+"_status";i.group=this.status_window.define_internal_group(r),i.name=this.status_window.set_text_in_position(s.name,n,this.name_y,!1,!1,this.status_window.font_color,this.compact,r);let _=this.name_y+a.FONT_SIZE,o=_+a.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(n,o),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,43,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.data.default_y=o,i.group.add(i.hp_bar_damage_graphics),i.hp_header=this.status_window.set_text_in_position("HP",n,_,!1,!1,this.status_window.font_color,!1,r);const c=n+40;i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,_,!0,!1,this.status_window.font_color,!1,r),_=this.name_y+2*a.FONT_SIZE,o=_+a.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(n,o),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,43,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.data.default_y=o,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",n,_,!1,!1,this.status_window.font_color,!1,r),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,_,!0,!1,this.status_window.font_color,!1,r),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=r.Djinn.get_standby_djinni(this.data.info.djinni_list,_.MainChar.get_active_players(this.data.info.party_data,4)),t=o.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=7,this.stars_group.y=this.name_y+a.FONT_SIZE;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+u[+(t>1)])}}else{for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=o.clamp(this.data.info.party_data.members.length,4);this.status_win_width=49*e+4+(t?36:0),this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let n=this.info_sprites[e.key_name];n.group.visible=!0;const a=49*s+8+(t?36:0);this.status_window.update_text(e.name,n.name,a);const r=a+40;this.status_window.update_text(e.current_hp,n.hp,r),this.status_window.update_text(e.current_pp,n.pp,r),this.status_window.update_text_position({x:a},n.hp_header),this.status_window.update_text_position({x:a},n.pp_header),n.hp_bar_graphics.x=a,n.pp_bar_graphics.x=a;const _=43*(1-e.current_hp/e.max_hp)|0,o=a+43-_;n.hp_bar_damage_graphics.clear(),n.hp_bar_damage_graphics.beginFill(c,1),n.hp_bar_damage_graphics.drawRect(o,n.hp_bar_damage_graphics.data.default_y,_,3),n.hp_bar_damage_graphics.endFill();const h=43*(1-e.current_pp/e.max_pp)|0,l=a+43-h;n.pp_bar_damage_graphics.clear(),n.pp_bar_damage_graphics.beginFill(c,1),n.pp_bar_damage_graphics.drawRect(l,n.pp_bar_damage_graphics.data.default_y,h,3),n.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(a-4,3,a-4,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(){this.status_window.close()}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.choose_right_class=e.Classes=void 0;const s=i(1),n=i(10);e.Classes=class{constructor(t,e,i,s,n,a,r,_,o,h,c,l,d,p,u){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=n,this.required_jupiter_level=a,this.hp_boost=r,this.pp_boost=_,this.atk_boost=o,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.ability_level_pairs=d,this.class_type=p,this.vulnerabilities=void 0===u?[]:u}},e.choose_right_class=function(t,e,i,a,r,_,o){let h,c=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:r}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:_}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:o}]:[]];h=c.every(t=>0===t.level)?i:n.maxBy(c,t=>t.level).element;const l=e[i][h];let d=Object.values(t).filter(t=>t.class_type===l);return d=d.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=r&&t.required_mars_level<=_&&t.required_jupiter_level<=o),n.sortBy(d,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";i.r(e),i.d(e,"HorizontalMenu",(function(){return h}));var s=i(1),n=i(0),a=i(3);const r=n.GAME_HEIGHT-24,o=24-n.OUTSIDE_BORDER_WIDTH-n.INSIDE_BORDER_WIDTH;class h{constructor(t,e,i,h,c,l,d,p,u,g=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.buttons_number=i.length,this.enter_propagation_priority=l,this.esc_propagation_priority=p;const m=Object(s.get_text_width)(this.game,_.maxBy(h,t=>t.length));this.title_window_width=void 0!==u?u:m+2*(n.WINDOW_PADDING_H+n.INSIDE_BORDER_WIDTH);const y=24*this.buttons_number+this.title_window_width+2*n.OUTSIDE_BORDER_WIDTH+2;this.dock_right=g,this.x=n.GAME_WIDTH-y,this.dock_right||(this.x=this.x>>1),this.y=r,this.title_window=new a.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,o),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.on_choose=void 0===c?()=>{}:c,this.on_cancel=void 0===d?()=>{}:d,this.right_pressed=!1,this.left_pressed=!1,this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(n.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=n.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=parseInt(24*(t+.5)),this.buttons[t].sprite.centerY=parseInt(12)}set_change_timers(t){this.change_button(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_button.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){this.buttons[this.selected_button_index].sprite.scale.setTo(1.2,1.2),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:1.3,y:1.3},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e,i=!0){let s;this.reset_button(),this.right_pressed=!1,this.left_pressed=!1,this.menu_active=i,this.group.alpha=1,this.selected_button_index=void 0===e?0:e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let n,a=new Promise(t=>{s=t});this.title_window.show(s);let r=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([a,r]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.stop_timers(),this.reset_button(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.right_pressed=!1,this.left_pressed=!1,this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.stop_timers(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy(),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InteractableObjects=e.InteractableObjects_Sprite=e.interactable_object_event_types=e.interactable_object_interaction_types=void 0;const s=i(12),n=i(9),a=i(0),r=i(1),_=i(13),o=i(26);e.interactable_object_interaction_types={ONCE:"once",INFINITE:"infinite"},e.interactable_object_event_types={JUMP:"jump",JUMP_AROUND:"jump_around",CLIMB:"climb"};class h extends s.SpriteBase{constructor(t,e){super(t,e)}}e.InteractableObjects_Sprite=h;e.InteractableObjects=class{constructor(t,e,i,s,n,a,r,_,o,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=n,this.sprite_info=null,this.allowed_tiles=a,this.base_collider_layer=r,this.collider_layer_shift=_,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===o?[]:o,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=n,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.sprite.x/t.sprite.tileWidth|0,y:this.sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collider_layer]),this.sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collider_layer=e,this.sprite.base_collider_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>n.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collider_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes();const r=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;n.setRectangle(r,r,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),n.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),n.damping=a.MAP_DAMPING,n.angularDamping=a.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=n}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.sprite.is_interactable_object=!0,this.sprite.roundPx=!0,this.sprite.base_collider_layer=this.base_collider_layer,this.sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.sprite.centerX=(this.x+1)*t.tileWidth+i;const n=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.sprite.centerY=this.y*t.tileWidth-n+s,this.sprite_info.setAnimation(this.sprite,this.key_name);const a=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.sprite.animations.play(this.key_name+"_"+a)}initialize_related_events(t,i){const s=this.get_current_position(i);let n=s.x,a=s.y;for(let i=0;i<this.data.dbs.interactable_objects_db[this.key_name].events.length;++i){const s=this.data.dbs.interactable_objects_db[this.key_name].events[i];n+=void 0!==s.x_shift?s.x_shift:0,a+=void 0!==s.y_shift?s.y_shift:0;let r=void 0!==s.collider_layer_shift?s.collider_layer_shift:0;r=void 0!==this.collider_layer_shift?this.collider_layer_shift:r,this.collider_layer_shift=r;const _=void 0===s.active||s.active,o=this.base_collider_layer+r;switch(s.type){case e.interactable_object_event_types.JUMP:this.set_jump_type_event(s,n,a,_,o,t);break;case e.interactable_object_event_types.JUMP_AROUND:this.set_jump_around_event(s,n,a,_,o,t);break;case e.interactable_object_event_types.CLIMB:this.set_stair_event(s,n,a,_,o,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,s,a,o){if(this.not_allowed_tile_test(e,i))return;const h=n.TileEvent.get_location_key(e,i);h in o||(o[h]=[]);const c=new _.JumpEvent(this.game,this.data,e,i,[r.directions.up,r.directions.down,r.directions.right,r.directions.left],[a],t.dynamic,s,void 0===t.is_set||t.is_set);o[h].push(c),this.insert_event(c.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{c.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,s,a,o){let h=void 0===t.is_set||t.is_set;r.get_surroundings(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const c=n.TileEvent.get_location_key(e.x,e.y);if(c in o)for(let t=0;t<o[c].length;++t){const e=o[c][t];e.type===n.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(a)&&(h=!1)}else o[c]=[];const l=new _.JumpEvent(this.game,this.data,e.x,e.y,[r.directions.right,r.directions.left,r.directions.down,r.directions.up][i],[this.base_collider_layer],t.dynamic,s,h);o[c].push(l),this.insert_event(l.id),this.collision_change_functions.push(()=>{l.activation_collision_layers=[this.base_collider_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,s,a,_){[{x:e,y:i+1,activation_directions:[r.directions.up],activation_collision_layers:[this.base_collider_layer],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[r.directions.down],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collider_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[r.directions.up],activation_collision_layers:[this.base_collider_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:a,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[r.directions.down],activation_collision_layers:[a],change_to_collision_layer:this.base_collider_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collider_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collider_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=n.TileEvent.get_location_key(e.x,e.y);i in _||(_[i]=[]);const a=new o.ClimbEvent(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,s,e.change_to_collision_layer,t.is_set,this,e.climbing_only);_[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.sprite,!1),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=r.mount_collision_polygon(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.sprite.body.setCollisionGroup(e[this.base_collider_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ClimbEvent=void 0;const s=i(1),n=i(13),a=i(9),r=i(0);class _ extends a.TileEvent{constructor(t,e,i,s,n,r,_,o,h,c,l,d){super(t,e,a.event_types.CLIMB,i,s,n,r,_,o,l),this.change_to_collision_layer=h,this.is_set=void 0===c||c,this.climbing_only=void 0!==d&&d}fire(t){!this.data.hero.stop_by_colliding||!this.check_position()||this.data.hero.in_action(!0)||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event||(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===s.directions.down){this.data.hero.play(s.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(s.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=s.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===s.directions.up){this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===s.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collider_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(s.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-15},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-15;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(250,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===s.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]);const t=Phaser.Timer.QUARTER/3;this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y+15},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.shadow.visible=!0,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));n.JumpEvent.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=r.MAP_DAMPING,n.angularDamping=r.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(n)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.sprite.send_to_back=!1,n.JumpEvent.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}e.ClimbEvent=_},function(t,e,i){"use strict";i.r(e),i.d(e,"CharsMenu",(function(){return l}));var s=i(3),n=i(0),a=i(8),r=i(1);const o=100-2*(n.OUTSIDE_BORDER_WIDTH+n.INSIDE_BORDER_WIDTH),h=parseInt(o/4),c=parseInt(o/4/2);class l{constructor(t,e,i,n,r,_,o){this.game=t,this.data=e,this.enter_propagation_priority=o,this.esc_propagation_priority=_,this.on_choose=void 0===i?()=>{}:i,this.on_change=void 0===n?()=>{}:n,this.on_cancel=void 0===r?()=>{}:r,this.base_window=new s.Window(this.game,0,0,100,36),this.group=t.add.group(),this.group.alpha=0,this.x=0,this.y=0,this.selected_y=0,this.unselected_y=-4,this.set_chars(),this.selected_button_index=0,this.line_index=0,this.menu_open=!1,this.menu_active=!1,this.set_control(),this.cursor_control=new a.CursorControl(this.game,!0,!1,this.get_max_per_line.bind(this),void 0,this.group,this.change_button.bind(this),void 0,this.get_selected_button_index.bind(this),this.set_selected_button_index.bind(this),void 0,void 0,this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}get_cursor_x(){return this.char_buttons[this.data.info.party_data.members[this.selected_button_index].key_name].x}get_cursor_y(){return 22}get_max_per_line(){return this.data.info.party_data.members.slice(4*this.line_index,4*(this.line_index+1)).length}get_selected_button_index(){return this.selected_button_index}set_selected_button_index(t){this.selected_button_index=t}is_open(){return this.menu_open}is_activated(){return this.menu_active}set_chars(){for(let t in this.char_buttons)this.char_buttons[t].destroy();this.char_buttons={};for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name]=this.group.create(0,0,e.sprite_base.getActionKey(r.base_actions.IDLE)),this.data.info.party_data.members[t].sprite_base.setAnimation(this.char_buttons[e.key_name],r.base_actions.IDLE),this.char_buttons[e.key_name].animations.play(e.sprite_base.getAnimationKey(r.base_actions.IDLE,r.reverse_directions[r.directions.down]))}}set_control(){this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y;for(let t=0;t<_.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name].centerX=t*h+c+n.OUTSIDE_BORDER_WIDTH+n.INSIDE_BORDER_WIDTH,this.char_buttons[e.key_name].y=this.unselected_y}}change_button(t,e){this.reset_button(t),this.on_change(e),this.set_button(e)}set_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.selected_y}reset_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.unselected_y}set_char_by_index(t){this.reset_button(this.selected_button_index),this.selected_button_index=t,this.set_button(this.selected_button_index)}open(t,e=!0){Object.keys(this.char_buttons).length!=_.clamp(this.data.info.party_data.members.length,0,4)&&this.set_chars(),this.buttons_number=_.clamp(this.data.info.party_data.members.length,0,4),this.selected_button_index=void 0===t?0:t,this.line_index=0,this.update_position(),this.set_button(this.selected_button_index),this.base_window.show(void 0,!1),this.group.alpha=1,this.menu_active=e,this.cursor_control.activate(),this.menu_open=!0}close(){this.menu_open=!1,this.reset_button(this.selected_button_index),this.group.alpha=0,this.cursor_control.deactivate(),this.base_window.close(void 0,!1)}activate(){this.menu_active=!0,this.cursor_control.activate()}deactivate(){this.menu_active=!1,this.cursor_control.deactivate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BasicInfoWindow=void 0;const s=i(3);e.BasicInfoWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemPsynergyChooseWindow=void 0;const s=i(3),n=i(8),a=i(0),r=a.FONT_SIZE;e.ItemPsynergyChooseWindow=class{constructor(t,e,i,_,o,h,c){this.game=t,this.data=e,this.is_psynergy_window=i,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.on_choose=void 0===o?()=>{}:o,this.on_change=void 0===_?()=>{}:_,this.esc_propagation_priority=h+1,this.enter_propagation_priority=c+1,this.window=new s.Window(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.set_control(),this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const l=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(l.text,l.shadow),this.page_index=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_page_number.bind(this),this.get_elem_per_page.bind(this),this.group,this.page_change.bind(this),this.element_change.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_element_index.bind(this),this.set_element_index.bind(this),this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(a.ICON_WIDTH>>1),0,114,r),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8),this.window.init_page_indicator_bar()}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_activated&&(this.data.esc_input.halt(),this.close())},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_activated&&(this.data.enter_input.halt(),this.is_psynergy_window&&this.element_list[this.elements[this.selected_element_index]].is_field_psynergy&&this.close(),this.is_psynergy_window||this.deactivate(),this.on_choose(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]))},this,this.enter_propagation_priority)}is_open(){return this.window_open}is_activated(){return this.window_activated}get_element_index(){return this.selected_element_index}set_element_index(t){this.selected_element_index=t}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_cursor_x(){return-5}get_cursor_y(){return 12+(a.ICON_HEIGHT>>1|0)+this.selected_element_index*(a.ICON_HEIGHT+1)}get_elem_per_page(){return this.elements.length}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_page_number(){return this.page_number}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.cursor_control.set_cursor_position());for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(a.ICON_HEIGHT+1),n=i+(a.ICON_WIDTH>>1),r=s+(a.ICON_HEIGHT>>1),_=8+a.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,_,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(n,r,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=n,i.y=r,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(a.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween&&(this.selected_element_tween.stop(),this.icon_sprites_in_window[t].scale.setTo(1,1)),this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[this.selected_element_index].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(){this.selected_element_tween.stop(),this.selected_element_tween=null}element_change(t,e){this.set_element_tween(t),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(e)],this.is_psynergy_window?void 0:this.item_objs[e])}page_change(){this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.set_page_indicator_highlight(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=0,this.page_index=0,this.set_elements(),this.window.set_page_indicator(this.page_number,this.page_index),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.window.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.set_page_indicator(this.page_number,this.page_index),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.window.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainBattleMenu=void 0;const s=i(22),n=i(24),a=i(1),r=i(0),_=i(2),o=i(43),h=i(44),c=i(76),l=i(45),d=i(77),p=i(14),u=i(5),g=i(11),m=i(10);e.MainBattleMenu=class{constructor(t,e,i,_,p,u){this.game=t,this.data=e,this.on_abilities_choose=p,this.choose_targets=u,this.chars_status_window=new s.CharsStatusWindow(this.game,this.data,!0,!0),this.start_buttons_keys=["fight","flee","status"],this.shift_propagation_priority=0,this.esc_propagation_priority=_,this.enter_propagation_priority=i,this.start_horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>a.capitalize(t)),this.start_button_press.bind(this),this.enter_propagation_priority,void 0,void 0,76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.description_window=new o.DescriptionWindow(this.game),this.djinn_window=new c.DjinnWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1,this.shift_propagation_priority),this.psynergy_window=new h.PsynergyWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.item_window=new l.ItemWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.summon_window=new d.SummonWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,r.GAME_HEIGHT-r.AVATAR_SIZE),this.avatar_sprite.alpha=0,this.inner_horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>a.capitalize(t)),this.inner_button_press.bind(this),this.enter_propagation_priority,this.inner_menu_cancel.bind(this),this.esc_propagation_priority,60,!0)}start_button_press(t){switch(this.start_buttons_keys[t]){case"fight":this.start_horizontal_menu.close();let t=[];_.Djinn.has_standby_djinn(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,p.MAX_CHARS_IN_BATTLE))||t.push("summon"),this.current_buttons=this.inner_buttons_keys.filter(e=>!t.includes(e)),this.inner_horizontal_menu.mount_buttons(t),this.abilities={},this.data.info.party_data.members.slice(0,p.MAX_CHARS_IN_BATTLE).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=a.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let e=this.data.info.party_data.members[this.current_char_index];for(;e.is_paralyzed()||e.has_permanent_status(u.permanent_status.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,e=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=p.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()}}inner_button_press(t){switch(this.current_buttons[t]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t,type:"attack"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t,type:"defend"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let n;if("djinni"===i&&this.data.info.djinni_list[e].status===_.djinn_status.STANDBY)n=e,e="set_djinn";else if("summon"===i){const t=this.data.dbs.summons_db[e].requirements;this.djinni_already_used=m.mapValues(this.djinni_already_used,(e,i)=>e+t[i])}this.description_window.hide(),this.choose_targets(e,i,s=>{s?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:s,type:i,djinn_key_name:n}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.is_open()&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=p.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if("summon"===t.type){const e=this.data.dbs.summons_db[t.key_name].requirements;this.djinni_already_used=m.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(u.permanent_status.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemCounter=void 0;e.ItemCounter=class{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.index_change_time=Phaser.Timer.QUARTER/2,this.right_pressed=!1,this.left_pressed=!1,this.set_controls(),this.create_grid()}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})}set_change_timers(t){this.advance_step(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(this.index_change_time,this.advance_step.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=0;t<this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=30;t>this.available_items_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e){this.clear(),this.current_quantity=e,this.available_items_count=t,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear()}activate(){this.active=!0}deactivate(){this.active=!1}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{o(s.next(t))}catch(t){a(t)}}function _(t){try{o(s.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,_)}o((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GoldenSun=void 0;const n=i(0),a=i(9),r=i(35),_=i(36),o=i(37),h=i(1),c=i(38),l=i(40),d=i(41),p=i(46),u=i(47);class g{constructor(){this.game=null,this.dbs={},this.info={},this.menu_open=!1,this.shop_open=!1,this.in_battle=!1,this.created=!1,this.force_stop_movement=!1,this.hero=null,this.collision=null,this.cursors=null,this.debug=null,this.main_menu=null,this.shop_menu=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.enter_input=null,this.esc_input=null,this.shift_input=null,this.spacebar_input=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(n.GAME_WIDTH,n.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){_.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){p.load_databases(this.game,this.dbs),this.enter_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER).onDown,this.esc_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ESC).onDown,this.shift_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onDown,this.spacebar_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onDown,this.scale_factor=this.dbs.init_db.initial_scale_factor,this.debug=new r.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),yield u.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index),this.hero=new c.Hero(this.game,this,this.dbs.init_db.hero_key_name,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction]),this.hero.set_sprite(this.npc_group,this.info.main_char_list[this.hero.key_name].sprite_base,this.map.sprite,this.map.collision_layer),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.camera_follow(),this.hero.play(),this.collision=new o.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.initialize_game_main_controls(),this.tile_event_manager=new l.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new d.GameEventManager(this.game,this),this.cursors=this.game.input.keyboard.createCursorKeys(),this.created=!0,this.game.camera.resetFX()}))}initialize_game_main_controls(){this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.game.input.keyboard.addKey(Phaser.Keyboard.ONE).onDown.add(()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.TWO).onDown.add(()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.THREE).onDown.add(()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.Q).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}),this.game.input.keyboard.addKey(Phaser.Keyboard.W).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}),this.game.input.keyboard.addKey(Phaser.Keyboard.E).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)})}hero_movement_allowed(){return!(this.hero.in_action(!0)||this.menu_open||this.shop_open||this.in_battle||this.tile_event_manager.on_event||this.force_stop_movement)}update(){if(this.created)if(this.hero_movement_allowed()){this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=a.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.hero.stop_char(!1),this.menu_open&&this.main_menu.horizontal_menu.menu_active?this.main_menu.update_position():this.shop_open&&this.shop_menu.horizontal_menu.menu_active?this.shop_menu.update_position():this.in_battle&&this.battle_instance.update();else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}}e.GoldenSun=g;var m=new g;window.data=m},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Debug=void 0;const s=i(1);e.Debug=class{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1}initialize_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.D).onDown.add(()=>{this.toggle_debug_physics()}),this.game.input.keyboard.addKey(Phaser.Keyboard.G).onDown.add(()=>{this.toggle_grid()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.K).onDown.add(()=>{this.toggle_keys()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.S).onDown.add(()=>{this.toggle_stats()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.F).onDown.add(()=>{this.toggle_fps()},this)}update_debug_physics(t){this.data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction.toString(),document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding.toString())}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,n=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,n,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_").map(t=>parseInt(t));this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,Object.assign({game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t])},t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`})));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i.toString()),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level.toString(),document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp.toString(),document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp.toString(),document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp.toString(),document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp.toString(),document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp.toString(),document.querySelector("#stats_debug table .atk").innerHTML=t.current_atk.toString(),document.querySelector("#stats_debug table .def").innerHTML=t.current_def.toString(),document.querySelector("#stats_debug table .agi").innerHTML=t.current_agi.toString(),document.querySelector("#stats_debug table .luk").innerHTML=t.current_luk.toString(),document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current.toString(),document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current.toString(),document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current.toString(),document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current.toString(),document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current.toString(),document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current.toString(),document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current.toString(),document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current.toString(),document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current.toString(),document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current.toString(),document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current.toString(),document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current.toString(),document.querySelector("#stats_debug table .turns").innerHTML=t.turns.toString(),document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length.toString()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_all=void 0,e.load_all=function(t){!function(t){t.load.json("init_db","init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json"),t.load.json("shopkeep_dialog_db","assets/dbs/shopkeep_dialog_db.json"),t.load.json("shops_db","assets/dbs/shops_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("item_border","assets/images/misc/item_border.png"),t.load.image("price_tag","assets/images/misc/price_tag.png"),t.load.image("broken","assets/images/misc/broken.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),t.load.script("color_filters","plugins/color_filters.js")}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Collision=void 0;e.Collision=class{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collider_layer=t.map.collision_layer,this.hero.sprite.base_collider_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let s=0;s<i.length;++s){let n=i[s],a=n.properties.over.toString().split(",");if(a.length>e)if(a=a.length>e?0|a[e]:0|a[0],0!==a){t.underlayer_group.remove(n.sprite,!1,!0);let e=0;for(e=0;e<t.overlayer_group.children.length;++e){if(t.overlayer_group.children[e].layer_z>n.z){t.overlayer_group.addAt(n.sprite,e,!0);break}}e===t.overlayer_group.children.length&&t.overlayer_group.add(n.sprite,!0)}else{t.overlayer_group.remove(n.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>n.z){t.underlayer_group.addAt(n.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(n.sprite,!0)}}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hero=void 0;const s=i(19),n=i(0),a=i(9),r=i(1),_=i(20),o=[null,r.directions.right,r.directions.left,null,r.directions.up,r.directions.up_right,r.directions.up_left,null,r.directions.down,r.directions.down_right,r.directions.down_left,null,null,null,null,null],h=[r.directions.right,r.directions.up_right,r.directions.up_right,r.directions.up,r.directions.up_left,r.directions.up_left,r.directions.left,r.directions.down_left,r.directions.down_left,r.directions.down,r.directions.down_right,r.directions.down_right],c={[r.directions.right]:{x:1,y:0},[r.directions.left]:{x:-1,y:0},[r.directions.up]:{x:0,y:-1},[r.directions.up_right]:{x:n.INV_SQRT2,y:-n.INV_SQRT2},[r.directions.up_left]:{x:-n.INV_SQRT2,y:-n.INV_SQRT2},[r.directions.down]:{x:0,y:1},[r.directions.down_right]:{x:n.INV_SQRT2,y:n.INV_SQRT2},[r.directions.down_left]:{x:-n.INV_SQRT2,y:n.INV_SQRT2}};class l extends s.ControllableChar{constructor(t,e,i,s,n,a,r){super(t,e,i,s,n,a,r,!0),this.arrow_inputs=null}update_arrow_inputs(){this.arrow_inputs=1*+this.data.cursors.right.isDown|2*+this.data.cursors.left.isDown|4*+this.data.cursors.up.isDown|8*+this.data.cursors.down.isDown,this.required_direction=o[this.arrow_inputs]}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=o[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=c[e].x,this.y_speed=c[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=r.get_transition_directions(this.desired_direction,e))),this.x_speed=c[e].x,this.y_speed=c[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([r.base_actions.WALK,r.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collider_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[a.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===a.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case r.directions.up:i.y-=1;break;case r.directions.down:i.y+=1;break;case r.directions.left:i.x-=1;break;case r.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,_.normal_push.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[r.base_actions.WALK,r.base_actions.DASH,r.base_actions.CLIMB].includes(this.current_action))if(Math.abs(this.sprite.body.velocity.x)<13&&Math.abs(this.sprite.body.velocity.y)<13){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<.1&&(e[0]=0),Math.abs(e[1])<.1&&(e[1]=0),Math.abs(e[0])>.9&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>.9&&(e[1]=Math.sign(e[1])),t[i]=r.range_360(Math.atan2(e[1],-e[0]))});const i=r.range_360(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-n.degree15&&t<=i+n.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==r.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=h[r.range_360(Math.atan2(e[0][1],-e[0][0])+n.degree15)/n.degree30|0],i=o[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1;else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.update_arrow_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=n.HERO_BODY_RADIUS,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}e.Hero=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Footsteps=void 0;const s=i(1),n=Phaser.Timer.SECOND<<1,a=Phaser.Timer.QUARTER,r=Phaser.Timer.QUARTER,_=s.base_actions.IDLE,o=s.directions.down,h="none",c="right",l="left";e.Footsteps=class{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=_,this.current_direction=o,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collider_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=h,this.can_make_footprint=!0,this.footsteps_time_interval=a,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===c?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot();const i=this.current_action===s.base_actions.IDLE?"double":"single",n=this.footsteps_sprite_base.getAnimationKey("footprints",i);let a;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");a=this.group.create(0,0,t),a.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(a,"footprints")}else a=this.dead_steps[--this.dead_index],a.reset(0,0);const r=a.animations.getAnimation(n);r.stop(!0),this.group.base_collider_layer=this.data.map.collision_layer,a.x=this.data.hero.shadow.x,a.y=this.data.hero.shadow.y,this.position_footsteps(a),r.onComplete.addOnce(()=>{this.kill_step(a)}),this.set_expire_timer(a,n),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===s.base_actions.WALK?a:r,this.current_action===s.base_actions.IDLE?this.foot_forward=h:this.foot_forward=this.foot_forward===l?c:l}clean_all(t=!1){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEventManager=void 0;const s=i(1),n=i(9);class a{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case n.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==n.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}e.TileEventManager=class{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===n.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==n.event_types.CLIMB||this.hero.idle_climbing?[n.event_types.TELEPORT,n.event_types.JUMP].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new a;for(let a=0;a<e.events[t].length;++a){const r=e.events[t][a];if(r.activation_collision_layers.includes(e.collision_layer)&&(r.type===n.event_types.JUMP&&r.jump_near_collision(),r.is_active(this.hero.current_direction)))if(r.type===n.event_types.SPEED)this.hero.extra_speed!==r.speed&&i.add(r,this.hero.current_direction,r.fire.bind(r),!0);else if(r.type!==n.event_types.TELEPORT||r.advance_effect)if([n.event_types.STEP,n.event_types.COLLISION].includes(r.type)&&!this.event_triggered(r))i.add(r,this.hero.current_direction,r.set.bind(r));else{if(r.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[r.id]&&!this.event_timers[r.id].timer.expired)continue;i.add(r,this.hero.current_direction,()=>{this.event_timers[r.id]=this.game.time.events.add(350,this.fire_event.bind(this,r,this.hero.current_direction))})}}else i.add(r,this.hero.current_direction,this.fire_event.bind(this,r,this.hero.current_direction))}i.process_queue()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEventManager=e.interaction_patterns=void 0;const s=i(1),n=i(17),a=i(21);e.interaction_patterns={TIK_TAK_TOE:"tik_tak_toe",CROSS:"cross"};class r{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){this.data.enter_input.add(()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(s.is_close(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.data.force_stop_movement=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){t.npc_type===a.npc_types.NORMAL?t.message?this.manage_npc_dialog(t):this.fire_npc_events(t):t.npc_type===a.npc_types.SHOP&&(this.data.shop_open||this.data.shop_menu.open_menu(t.shop_key,()=>{this.on_event=!1,this.data.force_stop_movement=!1,this.control_enable=!0}))}manage_npc_dialog(t){const e=new n.DialogManager(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction);const i=t.sprite.x,a=t.sprite.y,_=this.data.dbs.npc_db[t.key_name].interaction_pattern,o=r.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,i,a,_,t.body_radius);this.data.hero.set_direction(o.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[o.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[o.target_direction]),this.fire_next_step=e.next.bind(e,e=>{if(e){this.on_event=!1,this.data.force_stop_movement=!1;const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i),this.fire_npc_events(t)}this.control_enable=!0}),this.fire_next_step()}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,i,n,a,r,_){let o,h;if(r===e.interaction_patterns.CROSS){let e=t+(-a-n),r=-t+(-a+n);-i>=e&&-i>=r?o=s.directions.up:-i<=e&&-i>=r?o=s.directions.right:-i<=e&&-i<=r?o=s.directions.down:-i>=e&&-i<=r&&(o=s.directions.left)}return t<=n-_&&i>=a+_?(h=s.directions.up_right,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down_left:o):t<=n-_&&i>=a-_&&i<=a+_?(h=s.directions.right,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.left:o):t<=n-_&&i<=a-_?(h=s.directions.down_right,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up_left:o):t>=n-_&&t<=n+_&&i<=a-_?(h=s.directions.down,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up:o):t>=n+_&&i<=a-_?(h=s.directions.down_left,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up_right:o):t>=n+_&&i>=a-_&&i<=a+_?(h=s.directions.left,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.right:o):t>=n+_&&i>=a+_?(h=s.directions.up_left,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down_right:o):t>=n-_&&t<=n+_&&i>=a+_&&(h=s.directions.up,o=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down:o),{hero_direction:h,target_direction:o}}}e.GameEventManager=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleEvent=void 0;const s=i(14),n=i(15);class a extends n.GameEvent{constructor(t,e,i,s){super(t,e,n.event_types.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new s.Battle(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}e.BattleEvent=a},function(t,e,i){"use strict";i.r(e),i.d(e,"DescriptionWindow",(function(){return n}));var s=i(3);class n{constructor(t){this.game=t,this.base_window=new s.Window(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";i.r(e),i.d(e,"PsynergyWindow",(function(){return c}));var s=i(3),n=i(0),a=i(8),r=i(5);const _=n.YELLOW_FONT_COLOR,o=n.RED_FONT_COLOR,h=90+n.FONT_SIZE;class c{constructor(t,e,i,n){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.base_window=new s.Window(this.game,72,72,164,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(48,136,"buttons","psynergy"),this.group.alpha=0,this.cursor_control=new a.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_ability.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_ability_index.bind(this),this.set_ability_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.signal_bindings=this.set_control(),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}get_cursor_x(){return this.expanded,66}get_cursor_y(){return(this.expanded,83)+16*this.ability_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_ability_index(){return this.ability_index}set_ability_index(t){this.ability_index=t}get_max_elem_on_page(){return this.abilities.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.enter_input.halt(),this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t,e){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_ability(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(n.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(n.ICON_HEIGHT+2),a=i+(n.ICON_WIDTH>>1),r=s+(n.ICON_HEIGHT>>1),h=10+n.ICON_WIDTH+2;let c=n.DEFAULT_FONT_COLOR;this.psy_sealed?c=n.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(c=n.RED_FONT_COLOR);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,h,s+4,!1,!1,c);this.text_sprites_in_window.push(l);const d=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,c);this.text_sprites_in_window.push(d),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,r,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const p=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,c);this.text_sprites_in_window.push(p),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(_,l),this.base_window.update_text_color(_,p),this.base_window.update_text_color(_,d)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(o,l),this.base_window.update_text_color(o,p),this.base_window.update_text_color(o,d)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,h),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(_,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(o,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(_,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(o,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72})),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}open(t,e,i,s=!1,n=null,a=null){this.char=t,this.psy_sealed=this.char.has_temporary_status(r.temporary_status.SEAL),this.djinni=[n],this.next_djinni_status=[a],this.close_callback=e,this.choosen_ability=null,this.expanded=s,this.page_index=0,this.ability_index=0,this.set_description=i,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.cursor_control.activate(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";i.r(e),i.d(e,"ItemWindow",(function(){return o}));var s=i(3),n=i(8),a=i(0),r=i(7);class o{constructor(t,e,i,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.base_window=new s.Window(this.game,120,72,116,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(96,136,"buttons","item"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.item_names=[],this.other_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_item.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_item_index.bind(this),this.set_item_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active)return;this.data.enter_input.halt();const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==r.use_types.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 116}get_cursor_y(){return 84+16*this.item_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_item_index(){return this.item_index}set_item_index(t){this.item_index=t}get_max_elem_on_page(){return this.items.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_item(t,e){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let n=a.DEFAULT_FONT_COLOR;e.use_type!==r.use_types.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(n=a.YELLOW_FONT_COLOR);const _=this.base_window.set_text_in_position(e.name,26,i,!1,!1,n);this.item_names.push(_)}}set_page_number(){const t=this.all_items.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.all_items=this.char.items,this.all_items=_.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===r.use_types.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_databases=void 0;const s=i(10);e.load_databases=function(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.shopkeep_dialog_db=t.cache.getJSON("shopkeep_dialog_db"),e.shops_db=t.cache.getJSON("shops_db"),e.shopkeep_dialog_db=s.mapKeys(e.shopkeep_dialog_db,t=>t.key_name),e.interactable_objects_db=s.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=s.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=s.mapKeys(e.npc_db,t=>t.key_name),e.summons_db=s.mapKeys(e.summons_db,(t,e)=>(t.index=parseInt(e),t.key_name))}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{o(s.next(t))}catch(t){a(t)}}function _(t){try{o(s.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,_)}o((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_game_data=void 0;const n=i(48),a=i(49),r=i(55),_=i(56),o=i(57),h=i(58),c=i(64),l=i(71),d=i(72),p=i(75);e.initialize_game_data=function(t,e){return s(this,void 0,void 0,(function*(){let i;const s=new Promise(t=>{i=t});let u;e.info.maps_list=h.initialize_maps(t,e,e.dbs.maps_db,i),yield s,e.info.classes_list=n.initialize_classes(e.dbs.classes_db);const g=new Promise(t=>{u=t});let m;e.info.enemies_list=o.initialize_enemies(t,e.dbs.enemies_db,u),yield g,e.info.djinni_list=_.initialize_djinni(e.dbs.djinni_db);const y=new Promise(t=>{m=t});let b;e.info.djinni_sprites=_.initialize_djinni_sprites(t,m),yield y;const f=new Promise(t=>{b=t});let w;e.info.abilities_list=a.initialize_abilities(t,e.dbs.abilities_db,b),yield f;const v=new Promise(t=>{w=t});let x;e.info.items_list=r.initialize_items(t,e.dbs.items_db,w),yield v,e.info.party_data={members:[],coins:e.dbs.init_db.coins,game_tickets:{coins_remaining:300,tickets_bought:0}};const k=new Promise(t=>{x=t});let E;e.info.main_char_list=n.initialize_main_chars(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,x),yield k;const j=new Promise(t=>{E=t});e.info.misc_sprite_base_list=l.initialize_misc_data(t,e.dbs.misc_animations_db,E),yield j,e.info.shops_list=p.initialize_shops(t,e.dbs.shops_db),e.info.field_abilities_list=a.initialize_field_abilities(t,e),e.shop_menu=new d.ShopMenu(t,e),e.main_menu=c.initialize_menu(t,e)}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_main_chars=e.initialize_classes=void 0;const s=i(23),n=i(11);e.initialize_classes=function(t){let e={};for(let i=0;i<t.classes.length;++i){const n=t.classes[i];e[n.key_name]=new s.Classes(n.key_name,n.name,n.required_venus_level,n.required_mercury_level,n.required_mars_level,n.required_jupiter_level,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,n.ability_level_pairs,n.class_type,n.vulnerabilities)}return e},e.initialize_main_chars=function(t,e,i,s,a){let r=[],_={};for(let a=0;a<i.length;++a){const o=i[a],h=new n.MainCharBase(o.key_name,o.actions.map(t=>t.key),o.walk_speed,o.dash_speed,o.climb_speed,o.push_speed);_[o.key_name]=new n.MainChar(o.key_name,e,h,o.name,o.hp_curve,o.pp_curve,o.atk_curve,o.def_curve,o.agi_curve,o.luk_curve,o.exp_curve,o.starting_level,s.class_table,o.battle_scale,o.venus_level_base,o.mercury_level_base,o.mars_level_base,o.jupiter_level_base,o.venus_power_base,o.mercury_power_base,o.mars_power_base,o.jupiter_power_base,o.venus_resist_base,o.mercury_resist_base,o.mars_resist_base,o.jupiter_resist_base,o.innate_abilities,o.in_party,o.djinni,o.items,o.battle_animations_variations),o.in_party&&e.party_data.members.push(_[o.key_name]);for(let t=0;t<o.actions.length;++t){const e=o.actions[t];h.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),h.setActionDirections(e.key,e.directions,e.directions_frames_number),h.setActionFrameRate(e.key,e.frame_rate),h.setActionLoop(e.key,e.loop)}let c;h.generateAllFrames();const l=new Promise(t=>{c=t});r.push(l),h.loadSpritesheets(t,!0,c)}return Promise.all(r).then(a),_}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_field_abilities=e.initialize_abilities=void 0;const s=i(6),n=i(50),a=i(53),r=i(54);e.initialize_abilities=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Ability(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),n},e.initialize_field_abilities=function(t,e){return{move:new n.MoveFieldPsynergy(t,e),frost:new a.FrostFieldPsynergy(t,e),growth:new r.GrowthFieldPsynergy(t,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MoveFieldPsynergy=void 0;const s=i(0),n=i(20),a=i(1),r=i(16);class _ extends r.FieldAbilities{constructor(t,e){super(t,e,"move",26,"cast",!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list.move_hand;const i=this.hand_sprite_base.getActionKey("move_hand");this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,"move_hand"),this.emitter=null,this.final_emitter=null,this.set_controls(),this.controls_active=!1}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.right,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.left,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.up,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.down,this.fire_push())}),this.data.esc_input.add(()=>{this.controls_active&&(this.controls_active=!1,this.finish_hand(),this.unset_hero_cast_anim())})}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collider_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case a.directions.up:t.y-=1;break;case a.directions.down:t.y+=1;break;case a.directions.left:t.x-=1;break;case a.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.controls_active=!1,n.target_only_push(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,n=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:n},s.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(s.PUSH_TIME>>1,()=>{let t=!1;if([a.directions.up,a.directions.down].includes(this.cast_direction)&&[a.directions.left,a.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=a.join_directions(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[a.directions.up,a.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[a.directions.left,a.directions.right].includes(this.cast_direction)&&(this.cast_direction=a.join_directions(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=a.reverse_directions[this.cast_direction];this.controllable_char.sprite.animations.play("cast_"+e,0),this.controllable_char.sprite.animations.frameName=`cast/${e}/01`})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.sprite.body.y,2)<=Math.pow(s.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collider_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName("move_hand",a.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case a.directions.up:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y):e-=16;break;case a.directions.down:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y-this.target_object.sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=16;break;case a.directions.right:this.target_found?(t=this.target_object.sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t+=16;break;case a.directions.left:this.target_found?(t=this.target_object.sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t-=16}this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey("move_hand",a.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.controls_active=!0):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();let i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},350,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case a.directions.up:e=-16;break;case a.directions.down:e=16;break;case a.directions.left:t=-16;break;case a.directions.right:t=16}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=52,this.emitter.height=52,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.final_emitter.x=t,this.final_emitter.y=e;let i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}e.MoveFieldPsynergy=_},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{o(s.next(t))}catch(t){a(t)}}function _(t){try{o(s.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,_)}o((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.tint_map_layers=e.init_cast_aura=void 0,e.init_cast_aura=function(t,e,i,n,a,r,_){e.filters=[n];let o=[],h=!1,c=[];for(let s=0;s<2;++s){let n=i.create(0,0,"psynergy_aura"),a=i.create(0,0,"psynergy_aura");n.base_collider_layer=e.base_collider_layer,a.base_collider_layer=e.base_collider_layer,n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e))},n.sort_function(),a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e)+1)},a.sort_function();const r=(e.height+a.height-8)/3|0;a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const _=a.y;a.scale.setTo(0,0),n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const l=n.y;n.scale.setTo(0,0);let d=[{aura:a,initial_y:_,scale_factor:1},{aura:n,initial_y:l,scale_factor:-1}];o.push([]);for(let e=0;e<d.length;++e){let i,n=d[e].aura,a=d[e].initial_y,_=d[e].scale_factor,l=t.add.tween(n).to({y:a-r},250,Phaser.Easing.Linear.None),p=t.add.tween(n).to({y:a-2*r},250,Phaser.Easing.Linear.None),u=t.add.tween(n).to({y:a-3*r},250,Phaser.Easing.Linear.None);c.push(new Promise(t=>{i=t})),u.onComplete.add(()=>{n.y=a,h?i():(l.start(),g.start())});let g=t.add.tween(n.scale).to({x:_,y:_},375,Phaser.Easing.Quadratic.Out),m=t.add.tween(n.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);o[s].push({aura:n,tween_a:l,tween_aa:g,tween_b:p,tween_c:u,tween_cc:m}),l.chain(p),p.chain(u),g.chain(m),s>0&&(g.onComplete.addOnce(()=>{o[0][e].aura.y=a,o[0][e].tween_a.start(),o[0][e].tween_aa.start()}),l.start(),g.start())}}let l=16,d=t.time.create(!1),p=t.time.create(!1);return d.loop(50,()=>{n.tint=l%2==0?[1,1,1]:[-1,-1,-1],--l,0===l&&(n.gray=.4,d.stop(),void 0!==a&&a(),p.start())}),p.loop(100,()=>{n.hue_adjust=2*Math.random()*Math.PI}),d.start(),()=>s(this,void 0,void 0,(function*(){void 0!==_&&_(),h=!0,p.stop(),d.stop(),n.tint=[-1,-1,-1],n.gray=0,n.hue_adjust=0,e.filters=void 0,yield Promise.all(c);for(let t=0;t<o.length;++t)for(let e=0;e<o[t].length;++e)o[t][e].tween_a.stop(),o[t][e].tween_aa.stop(),o[t][e].tween_b.stop(),o[t][e].tween_c.stop(),o[t][e].tween_cc.stop(),i.remove(o[t][e].aura,!0);void 0!==r&&r()}))},e.tint_map_layers=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldPsynergyWindow=void 0;const s=i(3),n=i(1),a=i(0),r=(a.GAME_WIDTH>>1)-5,_=(a.GAME_HEIGHT>>1)+a.HERO_BODY_RADIUS+6;e.FieldPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new s.Window(this.game,r,_,10,20),this.text=this.window.set_single_line_text("",!1,!0)}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){const i=n.capitalize(t);this.window.update_text(i,this.text),this.window.update_size({width:10+this.text.text.width,height:20}),this.window.update_position({x:r-(this.text.text.width>>1)|0,y:_+this.vertical_adjust()|0}),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FrostFieldPsynergy=void 0;const s=i(0),n=i(1),a=i(13),r=i(16),_=i(10),o=7*Math.PI;class h extends r.FieldAbilities{constructor(t,e){super(t,e,"frost",12,"cast",!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close();for(let t=0;t<16;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=_.random(5,8)/10,a=Math.random()*s.degree360;e.scale.setTo(i,i),e.rotation=a;let r=this.controllable_char.sprite.centerX,h=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case n.directions.left:r-=16;break;case n.directions.right:r+=16;break;case n.directions.up:h-=14;break;case n.directions.down:h+=12}let c={rad:o};const l=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),p=this.game.add.tween(c).to({rad:-Math.PI},1650,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));p.onUpdateCallback(()=>{e.centerX=8*l*Math.exp(.15*c.rad)*Math.cos(c.rad)+r,e.centerY=8*d*Math.exp(.15*c.rad)*Math.sin(c.rad)+h}),p.onComplete.addOnce(()=>{e.destroy(),15===t&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,a.JumpEvent.active_jump_surroundings(this.data,n.get_surroundings(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collider_layer))}),this.target_object.sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.sprite.filters=[this.target_object.custom_data.color_filters];let t=16,e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.target_object.sprite.animations.play("frost_pool_pillar"),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.sprite.events.onDestroy.add(()=>{t.destroy()})}}e.FrostFieldPsynergy=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GrowthFieldPsynergy=void 0;const s=i(1),n=i(16),a=i(10);class r extends n.FieldAbilities{constructor(t,e){super(t,e,"growth",12,"cast",!0),this.set_bootstrap_method(this.init_bubbles.bind(this))}set_emitter(){let t=0,e=0,i=0,n=0,a=this.controllable_char.sprite.centerX,r=this.controllable_char.sprite.centerY+5,_=0,o=0;switch(this.increase_duration=0,this.cast_direction){case s.directions.up:e=-60,n=-55,t=i=35,r-=7,_=6,o=18,this.increase_duration=80;break;case s.directions.down:e=60,n=55,t=i=35,r+=12,_=6,o=18,this.increase_duration=80;break;case s.directions.left:t=-60,i=-55,e=n=35,a-=16,_=18,o=12;break;case s.directions.right:t=60,i=55,e=n=35,a+=16,_=18,o=12}this.emitter=this.game.add.emitter(a,r,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,n),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=_,this.emitter.height=o,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close(),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()}),this.target_object.sprite.animations.play("growth_growing",8,!1),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case s.directions.up:e-=16;break;case s.directions.down:e+=16;break;case s.directions.left:t-=16;break;case s.directions.right:t+=16}const i=Phaser.Animation.generateFrameNames("growth/no_target/",0,6,"",2);let n=new Array(5);for(let s=0;s<5;++s){let r,_=this.data.overlayer_group.create(t+a.random(-13,13),e+a.random(-13,13),"growth_growth");_.anchor.setTo(.5,1),_.animations.add("no_target",i,10,!1,!1),n.push(new Promise(t=>{r=t})),this.game.time.events.add(40*s,()=>{_.animations.play("no_target"),_.animations.currentAnim.onComplete.addOnce(()=>{_.destroy(),r()})})}Promise.all(n).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}e.GrowthFieldPsynergy=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_items=void 0;const s=i(7);e.initialize_items=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Item(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.important_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_djinni_sprites=e.initialize_djinni=void 0;const s=i(2),n=i(12),a=i(1);e.initialize_djinni=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Djinn(n.key_name,n.name,n.description,n.element,n.ability_key_name,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,i)}return e},e.initialize_djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},r={set:6,standby:2},_="assets/images/spritesheets/djinn/";let o=[],h={};for(let e in a.elements){const c=a.elements[e];if(c===a.elements.NO_ELEMENT)continue;h[c]=new n.SpriteBase(c+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];h[c].setActionSpritesheet(e,`${_}${c}_djinn.png`,`${_}${c}_djinn.json`),h[c].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),h[c].setActionFrameRate(e,r[e])}let l;h[c].generateAllFrames();const d=new Promise(t=>{l=t});o.push(d),h[c].loadSpritesheets(t,!0,l)}return Promise.all(o).then(e),h}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_enemies=void 0;const s=i(18);e.initialize_enemies=function(t,e,i){let n=[],a={};for(let i=0;i<e.length;++i){let r={data:e[i],sprite_base:null};r.sprite_base=new s.EnemyBase(r.data.key_name);const _=r.data.battle_spritesheet;if(void 0!==_){let e;r.sprite_base.setActionSpritesheet("battle",_.spritesheet_img,_.spritesheet),r.sprite_base.setActionDirections("battle",_.positions,_.frames_number),r.sprite_base.setActionFrameRate("battle",_.frame_rate),r.sprite_base.setActionLoop("battle",_.loop),r.sprite_base.generateAllFrames();const i=new Promise(t=>{e=t});n.push(i),r.sprite_base.loadSpritesheets(t,!0,e)}a[r.data.key_name]=r}return Promise.all(n).then(i),a}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_maps=void 0;const s=i(59);e.initialize_maps=function(t,e,i,n){let a={};for(let n=0;n<i.length;++n){const r=i[n];a[r.key_name]=new s.Map(t,e,r.name,r.key_name,r.tileset_key_name,r.collision_key_names,r.tileset_files.image,r.tileset_files.json,r.collision_files,r.lazy_load)}let r=[];for(let t in a){if(a[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});r.push(i),a[t].load_map_assets(!0,e)}return Promise.all(r).then(n),a}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{o(s.next(t))}catch(t){a(t)}}function _(t){try{o(s.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,_)}o((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;const n=i(1),a=i(21),r=i(25),_=i(9),o=i(0),h=i(13),c=i(60),l=i(26),d=i(61),p=i(62),u=i(63),g=i(15),m=i(10);e.Map=class{constructor(t,e,i,s,n,a,r,_,o,h){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=n,this.physics_names=a,this.tileset_image_url=r,this.tileset_json_url=_,this.physics_jsons_url=o,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h,this.layers=[]}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,n)=>{s.y_sort=parseInt(s.base_collider_layer.toString()+s.y.toString()),s.sort_function?i[n]=s:s.send_to_back?t[n]=s:s.send_to_front&&(e[n]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites()}load_map_assets(t,e){let i,s,n=new Promise(t=>{i=t});this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(i);let a=new Promise(t=>{s=t});this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(s);let r=[];for(let t=0;t<this.physics_names.length;++t){let e,i=new Promise(t=>{e=t});r.push(i),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all([n,a,...r]).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]),this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=o.MAP_DAMPING,this.collision_sprite.body.angularDamping=o.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t)),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return m.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=_.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===_.event_types.CLIMB){const t=new l.ClimbEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===_.event_types.SPEED){const t=new u.SpeedEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===_.event_types.TELEPORT){const t=new c.TeleportEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collider_layer?e.dest_collider_layer:0);this.events[i].push(t)}else if(e.type===_.event_types.JUMP){const t=new h.JumpEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===_.event_types.STEP){const t=new d.StepEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,n.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===_.event_types.COLLISION){const t=new p.CollisionEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collider_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name].initial_action;this.npcs.push(new a.NPC(this.game,this.data,e.key_name,e.initial_x,e.initial_y,i,this.data.dbs.npc_db[e.key_name].actions[i].initial_direction,e.enable_footsteps,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,e.shop_key,void 0===e.base_collider_layer?0:e.base_collider_layer,e.talk_range_factor,void 0===e.events?[]:e.events))}create_interactable_objects(t){const e=JSON.parse(t),i=new r.InteractableObjects(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collider_layer?0:e.base_collider_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys){this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===r.interactable_object_interaction_types.ONCE&&(i.custom_data[t+"_casted"]=!1)}this.data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}config_interactable_object(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t],i=e.key_name;let s=new r.InteractableObjects_Sprite(e.key_name,[i]);e.sprite_info=s,s.setActionSpritesheet(i,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.image,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.json),s.setActionDirections(i,this.data.dbs.interactable_objects_db[e.key_name].actions.animations,this.data.dbs.interactable_objects_db[e.key_name].actions.frames_count),s.setActionFrameRate(i,this.data.dbs.interactable_objects_db[e.key_name].actions.frame_rate),s.setActionLoop(i,this.data.dbs.interactable_objects_db[e.key_name].actions.loop),s.generateAllFrames(),yield new Promise(t=>{s.loadSpritesheets(this.game,!0,()=>{e.initial_config(this.sprite),e.initialize_related_events(this.events,this),t()})})}}))}config_npc(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=[];e.movement_type===a.npc_movement_types.IDLE&&(s=[n.base_actions.IDLE]);const r=new a.NPC_Sprite(e.key_name,s);for(let t=0;t<s.length;++t){const n=s[t];r.setActionSpritesheet(n,`assets/images/spritesheets/npc/${e.key_name}_${n}.png`,`assets/images/spritesheets/npc/${e.key_name}_${n}.json`),r.setActionDirections(n,i.actions[n].directions,i.actions[n].frames_count),r.setActionFrameRate(n,i.actions[n].frame_rate),r.setActionLoop(n,i.actions[n].loop)}r.generateAllFrames(),yield new Promise(t=>{r.loadSpritesheets(this.game,!0,()=>{e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collider_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,r,this.sprite,e.base_collider_layer,i.anchor_x,i.anchor_y),e.set_sprite_as_npc(),e.play(),t()})})}}))}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,this.layers[i].sprite.layer_z=this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let n=this.layers[i].properties.over.toString().split(",");n=n.length>this.collision_layer?0|n[this.collision_layer]:0|n[0],0!==n?t.add(s):e.add(s)}}mount_map(t){return s(this,void 0,void 0,(function*(){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),yield e}this.collision_layer=t,this.events={},_.TileEvent.reset(),g.GameEvent.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.addTilesetImage(this.tileset_name,this.key_name);for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),yield this.config_interactable_object(),yield this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this}))}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{o(s.next(t))}catch(t){a(t)}}function _(t){try{o(s.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,_)}o((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.TeleportEvent=void 0;const n=i(1),a=i(9),r=i(0),_=i(10);class o extends a.TileEvent{constructor(t,e,i,s,n,r,_,o,h,c,l,d,p){super(t,e,a.event_types.TELEPORT,i,s,n,r,_,o,null),this.target=h,this.x_target=c,this.y_target=l,this.advance_effect=d,this.dest_collider_layer=p}fire(){if(!(!this.check_position()||this.data.hero.in_action()||this.data.menu_open||this.data.in_battle||this.data.tile_event_manager.on_event))if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(n.base_actions.WALK,n.reverse_directions[n.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(n.base_actions.IDLE,n.reverse_directions[this.data.hero.current_direction]),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.game.camera.lerp.setTo(1,1),this.change_map()})}change_map(){return s(this,void 0,void 0,(function*(){this.data.map.unset_map();const t=this.target,e=this.dest_collider_layer;this.data.hero.shadow.base_collider_layer=e,this.data.hero.sprite.base_collider_layer=e,this.data.map=yield this.data.info.maps_list[t].mount_map(e),this.game.camera.setBoundsToWorld(),this.game.camera.bounds.width<r.GAME_WIDTH&&(this.game.camera.bounds.width=r.GAME_WIDTH),this.game.camera.bounds.height<r.GAME_HEIGHT&&(this.game.camera.bounds.height=r.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}))}camera_fade_out(){this.data.hero.update_shadow(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(r.CAMERA_LERP,r.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=_.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=_.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let n,a,r,o,h,c,l;for(let e=0;e<s.length;++e)n=s[e],a=1+(0|n.index),r=n.close_door,o=n.base_offset.split(","),h=this.x+(0|o[0]),c=this.y+(0|o[1])-1,l=parseInt(_.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:r}))+1,this.data.map.sprite.replace(a,l,h,c,1,1,t.name)}}e.TeleportEvent=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StepEvent=void 0;const s=i(1),n=i(9);class a extends n.TileEvent{constructor(t,e,i,s,a,r,_,o,h){super(t,e,n.event_types.STEP,i,s,a,r,_,o,null),this.step_direction=h,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===s.directions.up?e=-(this.data.map.sprite.tileHeight/4|0):this.step_direction===s.directions.down&&(e=this.data.map.sprite.tileHeight/4|0),this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.sprite.body.y+=this.shift_y):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.StepEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionEvent=void 0;const s=i(1),n=i(9);class a extends n.TileEvent{constructor(t,e,i,s,a,r,_,o,h){super(t,e,n.event_types.COLLISION,i,s,a,r,_,o,null),this.dest_collider_layer=h,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right?t=this.x+1:this.activation_directions[0]===s.directions.up?e=this.y-1:this.activation_directions[0]===s.directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collider_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.CollisionEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpeedEvent=void 0;const s=i(9);class n extends s.TileEvent{constructor(t,e,i,n,a,r,_,o,h){super(t,e,s.event_types.SPEED,i,n,a,r,_,o,null),this.speed=h}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}e.SpeedEvent=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_menu=e.MainMenu=void 0;const s=i(1),n=i(24),a=i(65),r=i(66),_=i(68),o=i(22);class h{constructor(t,e){this.game=t,this.data=e,this.chars_status_window=new o.CharsStatusWindow(this.game,this.data),this.buttons_keys=["psynergy","djinni","item","status"];let i=0,h=0;this.horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>s.capitalize(t)),this.button_press.bind(this),h,this.close_menu.bind(this),i),++i,++h,this.psynergy_menu=new a.MainPsynergyMenu(this.game,this.data,i,h),this.item_menu=new r.MainItemMenu(this.game,this.data,i,h),this.djinn_menu=new _.MainDjinnMenu(this.game,this.data,i,h,0,0)}button_press(t){switch(this.buttons_keys[t]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu)}}button_press_action(t){this.horizontal_menu.deactivate(),t.open_menu(t=>{this.horizontal_menu.activate(),this.chars_status_window.update_chars_info(),t&&this.close_menu()})}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_menu(){this.horizontal_menu.open(),this.chars_status_window.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.data.menu_open=!1,this.horizontal_menu.close(),this.chars_status_window.close())}}e.MainMenu=h,e.initialize_menu=function(t,e){return e.spacebar_input.add(()=>{e.hero.in_action()||e.in_battle||!e.created||e.game_event_manager.on_event||(e.menu_open?e.main_menu.is_active()&&e.main_menu.close_menu():(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.main_menu.open_menu()))},this),new h(t,e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainPsynergyMenu=void 0;const s=i(27),n=i(28),a=i(29),r=i(3),_=i(0),o=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,h=(132-2*(_.INSIDE_BORDER_WIDTH+1)-8*_.ICON_WIDTH)/7;e.MainPsynergyMenu=class{constructor(t,e,i,_){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=_+1,this.chars_menu=new s.CharsMenu(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.enter_propagation_priority),this.basic_info_window=new n.BasicInfoWindow(this.game),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new r.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_psynergy=!1,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.description_window=new r.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.psynergy_overview_window=new r.Window(this.game,104,24,132,76),this.shortcuts_window=new r.Window(this.game,104,104,132,28),this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3),this.psynergy_choose_window=new a.ItemPsynergyChooseWindow(this.game,this.data,!0,this.psynergy_change.bind(this),this.psynergy_choose.bind(this),this.esc_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}char_change(t){this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_psynergy_icons())}char_choose(t){this.is_open&&(this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.open(t,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list&&(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name))}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=o+1+Math.ceil(t%8*(h+_.ICON_WIDTH)),s=o+5+(t/8|0)*(3+_.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainItemMenu=void 0;const s=i(27),n=i(28),a=i(29),r=i(3),_=i(0),o=i(73),h=i(67),c=i(7),l=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,d=(132-2*(_.INSIDE_BORDER_WIDTH+11)-5*_.ICON_WIDTH)/4;e.MainItemMenu=class{constructor(t,e,i,_){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=_+1,this.chars_menu=new s.CharsMenu(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.char_choose_cancel.bind(this),this.esc_propagation_priority,this.enter_propagation_priority),this.basic_info_window=new n.BasicInfoWindow(this.game),this.item_change_stats_window=new h.StatsCheckWithItemWindow(this.game,this.data),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new r.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new r.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new r.Window(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new r.Window(this.game,104,24,132,76),this.item_choose_window=new a.ItemPsynergyChooseWindow(this.game,this.data,!1,this.item_change.bind(this),this.item_choose.bind(this),this.esc_propagation_priority),this.item_options_window=new o.ItemOptionsWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.choosing_give_destination=!1}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}shift_item_overview(t){t?this.item_overview_window.group.y+=16:this.item_overview_window.group.y-=16}char_change(t){if(this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_item_icons(),this.choosing_give_destination))if(this.item_options_window.item.type===c.item_types.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==c.item_types.GENERAL_ITEM){const e=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[t],this.item_options_window.item,e),this.item_change_stats_window.compare_items()}}char_choose(t){if(this.is_open)if(this.choosing_give_destination){if(this.data.info.party_data.members[t].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate(),this.after_char_choose_on_give(this.data.info.party_data.members[t],()=>{this.choosing_give_destination=!1},()=>{this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16})})}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(t,()=>{this.on_item_choose_close()})}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}char_choose_cancel(){this.choosing_give_destination?(this.chars_menu.deactivate(),this.choosing_give_destination=!1,this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16}),this.after_char_choose_on_give(null),this.char_change(this.item_choose_window.char_index),this.item_options_window.item.type===c.item_types.ABILITY_GRANTOR||this.item_options_window.item.type!==c.item_types.GENERAL_ITEM&&(this.item_change_stats_window.open(this.data.info.party_data.members[this.item_choose_window.char_index],this.item_options_window.item,this.item_options_window.item_obj),this.item_change_stats_window.compare_items()),this.chars_menu.set_char_by_index(this.item_choose_window.char_index),this.item_options_window.stats_window.compare_items(!0)):this.close_menu()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,t=>{this.choosing_give_destination=!0,this.shift_item_overview(!0),this.item_overview_window.update_size({height:this.item_overview_window.height+16}),this.item_choose_window.hide(),this.item_options_window.hide(),this.chars_menu.activate(),this.char_change(this.selected_char_index),this.after_char_choose_on_give=t},e=>{this.item_choose_window.activate(),t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&this.item_change_stats_window.compare_items(),e&&this.item_choose_window.close()},()=>{t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())})}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=l+11+Math.ceil(t%5*(d+_.ICON_WIDTH)),n=l+12+(t/5|0)*(3+_.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,n,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,n+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,n+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";i.r(e),i.d(e,"StatsCheckWithItemWindow",(function(){return r}));var s=i(3),n=i(7),a=i(4);class r{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[a.effect_types.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[a.effect_types.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[a.effect_types.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.current_atk.toString(),this.attack_text),this.base_window.update_text(this.char.current_def.toString(),this.defense_text),this.base_window.update_text(this.char.current_agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let n,r=_.find(this.item.effects,{type:t});if(void 0!==r){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;n=this.char.preview_stats_by_effect(t,r,i)}if(null===this.char.equip_slots[e]){if(void 0===r)return;this.update_preview_text(n,t),this.up_arrows[t].alpha=1}else{if(void 0===_.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===r)return;(void 0===r||s)&&(r={type:t,quantity:0,operator:a.effect_operators.PLUS},n=this.char.preview_stats_by_effect(t,r,this.char.equip_slots[e].key_name));const o=this.char[i];n>o?(this.up_arrows[t].alpha=1,this.update_preview_text(n,t)):n<o&&(this.down_arrows[t].alpha=1,this.update_preview_text(n,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e;switch(this.item.type){case n.item_types.WEAPONS:e="weapon";break;case n.item_types.HEAD_PROTECTOR:e="head";break;case n.item_types.CHEST_PROTECTOR:e="chest";break;case n.item_types.ARMOR:e="body"}this.set_compare_arrows(a.effect_types.ATTACK,e,"current_atk",t),this.set_compare_arrows(a.effect_types.DEFENSE,e,"current_def",t),this.set_compare_arrows(a.effect_types.AGILITY,e,"current_agi",t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainDjinnMenu=void 0;const s=i(69),n=i(74),a=i(70);e.MainDjinnMenu=class{constructor(t,e,i,r,_,o){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=r+1,this.shift_propagation_priority=_+1,this.spacebar_propagation_priority=o+1,this.is_open=!1,this.close_callback=null,this.selected_char_index=0,this.set_control(),this.chars_quick_info_window=new s.CharsQuickInfoDjinnWindow(this.game),this.djinn_action_window=new a.DjinnActionWindow(this.game),this.djinni_list_window=new n.DjinnListWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.shift_propagation_priority,this.spacebar_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";i.r(e),i.d(e,"CharsQuickInfoDjinnWindow",(function(){return r}));var s=i(3),n=i(0);const a=8+n.FONT_SIZE;class r{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.char=null,this.base_window=new s.Window(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,a),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";i.r(e),i.d(e,"DjinnActionWindow",(function(){return a}));var s=i(3),n=i(2);class a{constructor(t){this.game=t,this.window_open=!1,this.base_window=new s.Window(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.star_sprite=null,this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")},this.action_text=this.base_window.set_text_in_position("",31,24)}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case n.djinn_status.SET:this.base_window.update_text(": Standby",this.action_text);break;case n.djinn_status.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_misc_data=void 0;const s=i(12);e.initialize_misc_data=function(t,e,i){let n={},a=[];for(let i=0;i<e.length;++i){const r=e[i],_=new s.SpriteBase(r.key_name,r.actions.map(t=>t.key_name));n[r.key_name]=_;for(let t=0;t<r.actions.length;++t){const e=r.actions[t];_.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),_.setActionDirections(e.key_name,e.animations,e.frames_count),_.setActionFrameRate(e.key_name,e.frame_rate),_.setActionLoop(e.key_name,e.loop)}let o;_.generateAllFrames();const h=new Promise(t=>{o=t});a.push(h),_.loadSpritesheets(t,!0,o)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";i.r(e),i.d(e,"ShopMenu",(function(){return M}));var s=i(17);class n{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.dialog_manager=new s.DialogManager(this.game,this.data),this.messages=null,this.current_message=null,this.is_active=!1}open(t){this.shop_key=t,this.avatar_key=this.parent.shops_db[t].avatar_key,this.dialog_key=this.parent.shops_db[t].dialog_key,this.messages=_.mapKeys(this.data.shop_menu.shopkeep_dialog_db[this.dialog_key].messages,t=>t.key),this.update_dialog("welcome")}update_position(){this.dialog_manager.update_position()}replace_text(t,e,i,s){do{t.includes("${HERO}")&&(t=t.replace("${HERO}",e)),t.includes("${ITEM}")&&(t=t.replace("${ITEM}",i)),t.includes("${PRICE}")&&(t=t.replace("${PRICE}",s))}while(t.includes("${HERO}")||t.includes("${ITEM}")||t.includes("${PRICE}"));return t}get_message(t){return this.messages[t].text}update_dialog(t,e=!1,i=!0,s){this.current_message=i?this.messages[t].text:t,this.is_active=!0,this.dialog_manager.quick_next(this.current_message,s,this.avatar_key,void 0,{x:40,y:0},{x:0,y:0},e)}close_dialog(t,e=!0){this.is_active=!1,this.dialog_manager.kill_dialog(t,e)}close(){this.close_dialog(void 0,!1),this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.messages=null,this.current_message=null}}var a=i(7);class r{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.control_manager=this.parent.control_manager,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.buy_select=this.parent.buy_select,this.eq_compare=this.parent.eq_compare,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_artifacts_menu=null,this.item_list=[],this.selected_item=null,this.buy_select_pos={page:0,index:0},this.old_item=null,this.selected_character=null,this.selected_char_index=0,this.active=!1}update_game_ticket_step(){let t=this.data.info.party_data.game_tickets.tickets_bought;return t>=1&&t<6?300:t>=6&&t<11?500:t>=11&&t<16?1e3:t>=16&&t<21?2e3:t>=21&&t<26?4e3:t>=26?8e3:void 0}check_game_ticket(){let t=!1;this.data.info.party_data.game_tickets.coins_remaining-=this.selected_item.price,this.data.info.party_data.game_tickets.coins_remaining<=0&&(t=!0,this.data.info.party_data.game_tickets.tickets_bought+=1,this.data.info.party_data.game_tickets.coins_remaining+=this.update_game_ticket_step()),t?(this.npc_dialog.update_dialog("game_ticket",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_inventory_view.bind(this,!0),enter:this.open_inventory_view.bind(this,!0)})):this.open_buy_select()}sell_old_equip(t){let e=t.rare_item?"after_sell_artifact":"after_sell_normal";if(this.npc_dialog.update_dialog(e,!0),t.rare_item){let e=this.data.info.shops_list[this.parent.shop_key].item_list,i=!1;for(let s=0;s<e.length;s++)(e[s].key_name=t.key_name)&&(i=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=1);i||this.data.info.shops_list[this.parent.shop_key].item_list.push({key_name:t.key_name,quantity:1})}for(let e=0;e<this.selected_character.items.length;e++)this.selected_character.items[e].key_name===t.key_name&&this.selected_character.items.splice(e,1);let i=this.old_item.broken?.5*this.old_item.price:this.old_item.price*(3/4);this.data.info.party_data.coins+=0|i,this.parent.update_your_coins(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}equip_new_item(){let t=this.data.info.items_list[this.selected_item.key_name].type,e=this.selected_character.equip_slots;switch(this.npc_dialog.update_dialog("equip_compliment",!0),t){case a.item_types.WEAPONS:e.weapon&&(this.old_item=this.data.info.items_list[e.weapon.key_name]);break;case a.item_types.ARMOR:e.body&&(this.old_item=this.data.info.items_list[e.body.key_name]);break;case a.item_types.CHEST_PROTECTOR:e.chest&&(this.old_item=this.data.info.items_list[e.chest.key_name]);break;case a.item_types.HEAD_PROTECTOR:e.head&&(this.old_item=this.data.info.items_list[e.head.key_name]);break;case a.item_types.RING:e.ring&&(this.old_item=this.data.info.items_list[e.ring.key_name]);break;case a.item_types.LEG_PROTECTOR:e.boots&&(this.old_item=this.data.info.items_list[e.boots.key_name]);break;case a.item_types.UNDERWEAR:e.underwear&&(this.old_item=this.data.info.items_list[e.underwear.key_name])}for(let t=0;t<this.selected_character.items.length;t++){if(this.selected_character.items[t].key_name===this.old_item.key_name){this.selected_character.unequip_item(t);break}}for(let t=this.selected_character.items.length-1;t>0;t--){if(this.selected_character.items[t].key_name===this.selected_item.key_name){this.selected_character.equip_item(t);break}}let i=()=>{let t=this.old_item.broken?.5*this.old_item.price:this.old_item.price*(3/4),e=this.npc_dialog.get_message("sell_current");e=this.npc_dialog.replace_text(e,void 0,this.old_item.name,0|t),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.sell_old_equip.bind(this,this.old_item),no:()=>{let t=this.old_item.rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}},{x:56,y:40})};this.control_manager.set_control(!1,!1,!1,!1,{esc:i.bind(this),enter:i.bind(this)})}on_purchase_success(t=!1,e=!1){let i=1,s=e?{key_name:"game_ticket"}:this.selected_item;if(this.quant_win.is_open&&!e&&(i=this.quant_win.chosen_quantity),this.data.info.party_data.coins-this.selected_item.price*i<0&&!e)this.npc_dialog.update_dialog("not_enough_coins",!0),this.parent.cursor_manager.hide(),this.quant_win.is_open&&this.quant_win.close(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this),enter:this.open_buy_select.bind(this)});else{this.npc_dialog.update_dialog("after_buy",!0),this.parent.cursor_manager.hide(),this.quant_win.is_open&&this.quant_win.close(),e||(this.data.info.party_data.coins-=this.selected_item.price*i);let n=!1;for(let t=0;t<this.selected_character.items.length;t++){this.selected_character.items[t].key_name===s.key_name&&this.data.info.items_list[s.key_name].carry_up_to_30&&(n=!0,this.selected_character.items[t].quantity+=i)}let a=this.selected_character.items.length;if(n||(s.equipable?this.selected_character.items.push({key_name:s.key_name,quantity:1,equipped:!1,index:a}):this.selected_character.items.push({key_name:s.key_name,quantity:i,index:a})),e)this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this),enter:this.open_buy_select.bind(this)});else{let e=this.data.info.shops_list[this.parent.shop_key].item_list;for(let t=0;t<e.length;t++)e[t].key_name===this.selected_item.key_name&&-1!==e[t].quantity&&(this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity-=i);if(this.parent.set_item_lists(),this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,this.buy_select.items=this.item_list,t){let t=()=>{let t=this.npc_dialog.get_message("equip_now");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open_menu({yes:this.equip_new_item.bind(this),no:()=>{this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}},{x:56,y:40})};this.control_manager.set_control(!1,!1,!1,!1,{esc:t.bind(this),enter:t.bind(this)})}else this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}}}on_buy_equip_select(){if(this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1)}else if(this.selected_item.equipable_chars.includes(this.selected_character.key_name))this.on_purchase_success(!0);else{let t=this.npc_dialog.get_message("cant_equip");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open_menu({yes:this.on_purchase_success.bind(this),no:this.open_equip_compare.bind(this)},{x:56,y:40})}}on_buy_item_select(t=!1){this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=0;for(let t=0;t<this.selected_character.items.length;t++){let i=this.selected_character.items[t];i.key_name===this.selected_item.key_name&&(e=i.quantity)}if(15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1)}else if(30===e){let t=this.data.info.items_list[this.selected_item.key_name].name,e=this.npc_dialog.get_message("stack_full");e=this.npc_dialog.replace_text(e,this.selected_character.name,t),this.npc_dialog.update_dialog(e,!1,!1)}else if(t)this.on_purchase_success(!1,t);else{this.npc_dialog.update_dialog("buy_quantity");let t=this.data.info.shops_list[this.parent.shop_key].item_list.filter(t=>t.key_name===this.selected_item.key_name)[0],e={key_name:t.key_name,quantity:-1===t.quantity?30:t.quantity},i=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),s=0!==i.length?i[0]:null;this.quant_win.is_open||this.quant_win.open(e,s),this.control_manager.set_control(!0,!1,!0,!1,{right:this.quant_win.increase_amount.bind(this.quant_win),left:this.quant_win.decrease_amount.bind(this.quant_win),esc:this.open_inventory_view.bind(this),enter:this.on_purchase_success.bind(this)})}}on_cancel_char_select(){this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.char_display.is_open&&this.char_display.close(),this.open_buy_select()}on_cancel_game_ticket(){this.npc_dialog.update_dialog("game_ticket_decline",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_cancel_char_select.bind(this),enter:this.on_cancel_char_select.bind(this)})}open_equip_compare(){this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index},this.item_desc_win.open&&this.item_desc_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.npc_dialog.update_dialog("character_select");let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.char_display.is_open||this.char_display.open(this.selected_char_index),this.eq_compare.is_open||this.eq_compare.open(t,this.selected_item.key_name),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:this.on_cancel_char_select.bind(this),enter:this.on_buy_equip_select.bind(this)})}open_inventory_view(t=!1){!t&&this.buy_select.is_open&&(this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index}),this.item_desc_win.open&&this.item_desc_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.quant_win.is_open&&this.quant_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),t?this.npc_dialog.update_dialog("game_ticket_select"):this.npc_dialog.update_dialog("character_select");let e=t?"game_ticket":this.selected_item.key_name;this.char_display.is_open?this.char_display.select_char(this.selected_char_index):this.char_display.open(this.selected_char_index);let i=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.inv_win.is_open&&this.inv_win.close(),this.inv_win.open(i,e,!0),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),enter:this.on_buy_item_select.bind(this,t)})}on_buy_select(){this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.selected_item.equipable?this.open_equip_compare():this.open_inventory_view()}open_buy_select(t="sell_follow_up"){this.npc_dialog.update_dialog(t),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.buy_select.is_open||this.buy_select.open(this.item_list,this.buy_select_pos.index,this.buy_select_pos.page),this.control_manager.reset(),this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index].key_name,this.parent.update_item_info(this.selected_item),this.parent.update_your_coins(),this.item_desc_win.open||this.item_desc_win.show(),this.item_price_win.open||this.item_price_win.show(),this.your_coins_win.open||this.your_coins_win.show(),this.control_manager.set_control(!0,!0,!0,!1,{right:this.buy_select.next_item.bind(this.buy_select),left:this.buy_select.previous_item.bind(this.buy_select),up:this.buy_select.previous_page.bind(this.buy_select),down:this.buy_select.next_page.bind(this.buy_select),esc:this.close_menu.bind(this),enter:this.on_buy_select.bind(this)})}open_menu(t){this.is_artifacts_menu=t,this.active=!0,this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,t?(this.npc_dialog.update_dialog("artifacts_menu",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this,"buy_select"),enter:this.open_buy_select.bind(this,"buy_select")})):this.open_buy_select("buy_select")}close_menu(){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.your_coins_win.open&&this.your_coins_win.close(),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.yesno_action.is_open&&this.yesno_action.close(),this.quant_win.is_open&&this.quant_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.parent.cursor_manager.hide(),this.is_artifacts_menu=null,this.item_list=[],this.selected_item=null,this.old_item=null,this.buy_select_pos={page:0,index:0},this.active=!1,this.control_manager.reset(),this.parent.horizontal_menu.activate(),this.parent.open_horizontal_menu()}}const o=6*Phaser.Timer.SECOND;class h{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.control_manager=this.parent.control_manager,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0,this.activate=!1}on_item_repair(){if(this.npc_dialog.dialog_manager.window.open){this.npc_dialog.dialog_manager.window.close();let t=this.npc_dialog.dialog_manager.dialog_crystal;(t.visible=!0)&&(t.visible=!1)}this.inv_win.kill_item_at(this.inv_win_pos.line,this.inv_win_pos.col),this.control_manager.reset(),this.game.time.events.add(o,()=>{this.selected_item.broken=!1,this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,this.npc_dialog.update_dialog("repair_done",!0),this.parent.update_your_coins(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})},this)}on_repair_item_select(){if(this.inv_win_pos=this.inv_win.cursor_pos,this.item_desc_win.open&&this.item_desc_win.close(),this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.selected_item.broken){let t=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,e=this.npc_dialog.get_message("repair_deal");e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name,t),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:()=>{this.npc_dialog.update_dialog("repair_deal_accept",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_item_repair.bind(this),enter:this.on_item_repair.bind(this)})},no:()=>{this.npc_dialog.update_dialog("repair_deal_decline",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})}},{x:56,y:40})}else{let t="breaks_when_use"===this.data.info.items_list[this.selected_item.key_name].use_type?"cant_repair":"repair_decline",e=this.npc_dialog.get_message(t);e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name),this.npc_dialog.update_dialog(e,!0,!1),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})}}on_sale_success(t=1){let e=this.data.info.items_list[this.selected_item.key_name].rare_item?"after_sell_artifact":"after_sell_normal";this.npc_dialog.update_dialog(e,!0);let i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;this.data.info.party_data.coins+=i*t,this.parent.update_your_coins();for(let e=0;e<this.selected_character.items.length;e++){this.selected_character.items[e].key_name===this.selected_item.key_name&&(this.selected_character.items[e].quantity-=t,0===this.selected_character.items[e].quantity&&this.selected_character.items.splice(e,1))}if(this.data.info.items_list[this.selected_item.key_name].rare_item){let e=!1,i=this.data.info.shops_list[this.parent.shop_key].item_list;for(let s=0;s<i.length;s++)i[s].key_name===this.selected_item.key_name&&(e=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=t);e||i.push({key_name:this.selected_item.key_name,quantity:t})}this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(this.selected_character.key_name,void 0,!1),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}on_sell_item_select(){if(this.inv_win_pos=this.inv_win.cursor_pos,this.item_desc_win.open&&this.item_desc_win.close(),this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.data.info.items_list[this.selected_item.key_name].important_item)this.npc_dialog.update_dialog("cant_sell",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)});else if(1===this.selected_item.quantity){let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"sell_artifact":"sell_normal",e=this.npc_dialog.get_message(t),i="sell_normal"===t?this.data.info.items_list[this.selected_item.key_name].name:void 0,s=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,i,s),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.on_sale_success.bind(this),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sale_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}},{x:56,y:40})}else{this.npc_dialog.update_dialog("sell_quantity_select");let t=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),e=0!==t.length?t[0]:null;this.quant_win.is_open||this.quant_win.open(e),this.control_manager.set_control(!0,!1,!0,!1,{right:this.quant_win.increase_amount.bind(this.quant_win),left:this.quant_win.decrease_amount.bind(this.quant_win),esc:this.on_character_select.bind(this,"sell_follow_up",this.char_index,this.inv_win_pos),enter:()=>{let t=1;t=this.quant_win.chosen_quantity,this.quant_win.close(),this.parent.cursor_manager.hide();let e=this.npc_dialog.get_message("sell_quantity_confirm"),i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,void 0,i*t),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.on_sale_success.bind(this,t),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}},{x:56,y:40})}})}}on_character_select(t="sell_follow_up",e={line:0,col:0}){this.item_desc_win.open||this.item_desc_win.show(),this.item_price_win.open||this.item_price_win.show(),t&&this.npc_dialog.update_dialog(t),this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(this.selected_character.key_name,void 0,!1),this.inv_win.set_cursor(e.line,e.col),this.inv_win.item_grid[e.line][e.col]||this.inv_win.previous_col(),this.control_manager.set_control(!0,!0,!0,!0,{right:this.inv_win.next_col.bind(this.inv_win),left:this.inv_win.previous_col.bind(this.inv_win),up:this.inv_win.previous_line.bind(this.inv_win),down:this.inv_win.next_line.bind(this.inv_win),esc:this.open_inventory_view.bind(this),enter:this.is_repair_menu?this.on_repair_item_select.bind(this):this.on_sell_item_select.bind(this)})}open_inventory_view(t="sell_follow_up"){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.quant_win.is_open&&this.quant_win.close(),this.npc_dialog.update_dialog(t),this.your_coins_win.open||this.your_coins_win.show(),this.parent.update_your_coins(),this.char_display.is_open?this.char_display.select_char(this.selected_char_index):this.char_display.open(this.selected_char_index),this.game.world.bringToTop(this.char_display.char_group);let e=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(e,void 0,!1),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:this.close_menu.bind(this),enter:this.on_character_select.bind(this)})}open_menu(t){this.is_repair_menu=t,this.active=!0,this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,t?(this.npc_dialog.update_dialog("repair_menu",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_inventory_view.bind(this,"repair_select"),enter:this.open_inventory_view.bind(this,"repair_select")})):this.open_inventory_view("sell_select")}close_menu(){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.your_coins_win.open&&this.your_coins_win.close(),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.yesno_action.is_open&&this.yesno_action.close(),this.quant_win.is_open&&this.quant_win.close(),this.parent.cursor_manager.hide(),this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.active=!1,this.control_manager.reset(),this.parent.horizontal_menu.activate(),this.parent.open_horizontal_menu()}}var c=i(1),l=i(3);class d{constructor(t,e,i,s){this.game=t,this.data=e,this.parent=i,this.on_change=s,this.close_callback=null,this.expanded=!1,this.is_open=!1,this.window=new l.Window(this.game,128,96,108,60),this.text=this.window.set_text_in_position("",8,8),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.item_grid=[],this.selected_item=null,this.cursor_pos={line:0,col:0},this.sprite_group=this.window.define_internal_group("sprites",{x:16,y:8}),this.icon_group=this.window.define_internal_group("icons",{x:23,y:16})}check_expand(t){if(t&&this.set_text(),this.expanded===t)return;let e=t?1:-1;this.window.update_size({height:this.window.height+8*e}),this.window.update_position({y:this.window.y-8*e}),this.sprite_group.y=this.sprite_group.y+8*e,this.icon_group.y=this.icon_group.y+8*e,this.window.update(),this.expanded=t}set_text(){let t=null,e=!1,i=!1;for(let s=0;s<3;s++){for(let n=0;n<5;n++){if(!this.item_grid[s][n]){i=!0;break}if(this.item_grid[s][n].key_name===this.selected_item){t=this.item_grid[s][n],e=!0;break}}if(e||i)break}e?this.window.update_text("You have "+t.quantity,this.text):this.window.update_text("None in stock",this.text),this.text.text.alpha=1,this.text.shadow.alpha=1}change_character(t){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.make_item_grid(),Object(c.kill_all_sprites)(this.sprite_group),Object(c.kill_all_sprites)(this.icon_group),this.expanded&&this.set_text(),this.set_sprites()}make_item_grid(){this.item_grid=[];let t=this.char.items.filter(t=>t.key_name in this.data.info.items_list),e=[];for(let i=0;i<1+(t.length/5|0);i++){let s=[];for(let e=0;e<5;e++)t[5*i+e]&&s.push(t[5*i+e]);e.push(s)}this.item_grid=e}kill_item_at(t,e){let i=this.sprite_group.children.filter(i=>!0===i.alive&&"items_icons"===i.key&&i.x===16*e&&i.y===16*t),s=this.sprite_group.children.filter(i=>!0===i.alive&&"item_border"===i.key&&i.x===16*e&&i.y===16*t);if(i[0].kill(),s[0].kill(),this.item_grid[t][e].broken){this.sprite_group.children.filter(i=>!0===i.alive&&"broken"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}if(this.item_grid[t][e].equipped){this.icon_group.children.filter(i=>!0===i.alive&&void 0===i.text&&i.x===16*e&&i.y===16*t)[0].kill()}}next_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col<this.item_grid[this.cursor_pos.line].length-1?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col+1):this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,0):this.set_cursor(this.cursor_pos.line+1,0))}previous_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col>0?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col-1):0===this.cursor_pos.line?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.cursor_pos.line-1,4))}next_line(){1!==this.item_grid.length&&(this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,this.cursor_pos.col):this.cursor_pos.col>this.item_grid[this.cursor_pos.line+1].length-1?this.set_cursor(this.cursor_pos.line+1,this.item_grid[this.cursor_pos.line+1].length-1):this.set_cursor(this.cursor_pos.line+1,this.cursor_pos.col))}previous_line(){1!==this.item_grid.length&&(0===this.cursor_pos.line?this.cursor_pos.col>this.item_grid[this.item_grid.length-1].length-1?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.item_grid.length-1,this.cursor_pos.col):this.set_cursor(this.cursor_pos.line-1,this.cursor_pos.col))}set_cursor(t,e){this.cursor_pos={line:t,col:e},this.parent.cursor_manager.move_to(136+16*e,112+16*t,"point",!0),this.on_change(t,e)}set_sprites(){let t=!1;for(let e=0;e<3;e++){for(let i=0;i<5;i++){if(!this.item_grid[e][i]){t=!0;break}let s=this.data.info.items_list[this.item_grid[e][i].key_name],n=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),a=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);if(n.length>0&&a.length>0?(a[0].reset(16*i,16*e),n[0].reset(16*i,16*e),n[0].frameName=s.key_name):(this.window.create_at_group(16*i,16*e,"item_border",void 0,void 0,"sprites"),this.window.create_at_group(16*i,16*e,"items_icons",void 0,s.key_name,"sprites")),this.item_grid[e][i].broken){let t=this.sprite_group.children.filter(t=>!1===t.alive&&"broken"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"broken",void 0,void 0,"sprites")}if(this.item_grid[e][i].equipped){let t=this.icon_group.children.filter(t=>!1===t.alive&&void 0===t.text);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"equipped",void 0,void 0,"icons")}if(this.item_grid[e][i].quantity>1){let t=this.icon_group.children.filter(t=>!1===t.alive&&void 0!==t.text);if(t.length>0)t[0].text=this.item_grid[e][i].quantity.toString(),t[0].reset(16*i,16*e),t[0].x+=8-t[0].width;else{let t=this.game.add.bitmapText(16*i,16*e,"gs-item-bmp-font",this.item_grid[e][i].quantity.toString());t.x+=8-t.width,this.window.add_to_internal_group("icons",t)}}}if(t)break}this.sprite_group.alpha=1}open(t,e,i=!1,s,n){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.make_item_grid(),this.check_expand(i),this.set_sprites(),this.is_open=!0,this.close_callback=s,this.window.show(n,!1)}close(t=!1){Object(c.kill_all_sprites)(this.sprite_group,t),Object(c.kill_all_sprites)(this.icon_group,t),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.selected_item=null,this.cursor_pos={line:0,col:0},this.item_grid=[],this.check_expand(!1),this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}const p=Phaser.Timer.QUARTER,u=Phaser.Timer.QUARTER>>1;class g{constructor(t,e,i,s){this.game=t,this.data=e,this.parent=i,this.on_change=s,this.close_callback=null,this.window=new l.Window(this.game,0,96,236,28),this.items=[],this.selected_index=0,this.current_page=0,this.pages=[],this.tweens={item:null,bg:null},this.is_open=!1,this.sprite_group=this.game.add.group(),this.sprite_group.x=16,this.sprite_group.y=112,this.tag_group=this.game.add.group(),this.tag_group.x=24,this.tag_group.y=104,this.text_group=this.game.add.group(),this.text_group.x=39,this.text_group.y=131,this.bg_group=this.game.add.group(),this.bg_group.x=36,this.bg_group.y=132,this.arrow_group=this.game.add.group(),this.arrow_group.x=224,this.arrow_group.y=80,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,52,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[]}update_group_pos(){this.sprite_group.x=16+this.game.camera.x,this.sprite_group.y=112+this.game.camera.y,this.tag_group.x=24+this.game.camera.x,this.tag_group.y=104+this.game.camera.y,this.text_group.x=39+this.game.camera.x,this.text_group.y=131+this.game.camera.y,this.bg_group.x=36+this.game.camera.x,this.bg_group.y=132+this.game.camera.y,this.arrow_group.x=224+this.game.camera.x,this.arrow_group.y=80+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=52,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_page<this.pages.length-1&&(e=!0),this.current_page>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},u,Phaser.Easing.Linear.None).to({y:20},u,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:60},u,Phaser.Easing.Linear.None).to({y:52},u,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_text(t,e){let i=this.text_group.children.filter(t=>!1===t.alive&&0!==t.tint),s=this.text_group.children.filter(t=>!1===t.alive&&0===t.tint),n=null,a=null;i.length>0&&s.length>0?(i[0].text=t,i[0].reset(32*e,0),s[0].text=t,s[0].reset(32*e,0),n=i[0],a=s[0]):(a=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),n=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),a.rotation=Math.PI/2,n.rotation=Math.PI/2,a.tint=0,this.text_group.add(a),this.text_group.add(n)),a.y-=n.width-1,n.y-=n.width,a.x-=1;let r=this.bg_group.children.filter(t=>!1===t.alive);if(r.length>0)r[0].clear(),r[0].beginFill(16741120,1),r[0].drawRect(0,0,-(n.height+1),-(n.width+1)),r[0].endFill(),r[0].reset(32*e,0);else{let t=this.game.add.graphics(32*e,0);t.beginFill(16741120,1),t.drawRect(0,0,-(n.height+1),-(n.width+1)),t.endFill(),this.bg_group.add(t)}this.game.world.bringToTop(this.text_group)}make_pages(){let t=Object.keys(this.items).length,e=Array.from(Object.keys(this.items)),i=t%7==0?t/7|0:1+(t/7|0);for(let t=0;t<i;t++){let i=[];for(let s=7*t;s<7*(t+1)&&e[s];s++)i.push(this.items[e[s]]);this.pages[t]=i}}set_sprites(t){for(let e=0;e<this.pages[t].length;e++){let i=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),s=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);i.length>0&&s.length>0?(s[0].reset(32*e,0),s[0].scale.x=1,s[0].scale.y=1,i[0].frameName=this.pages[t][e].key_name,i[0].scale.x=1,i[0].scale.y=1,i[0].reset(32*e,0)):(this.sprite_group.create(32*e,0,"item_border").anchor.setTo(.5,.5),this.sprite_group.create(32*e,0,"items_icons",this.pages[t][e].key_name).anchor.setTo(.5,.5));let n=this.tag_group.children.filter(t=>!1===t.alive);n.length>0?n[0].reset(32*e,0):this.tag_group.create(32*e,0,"price_tag");let a=this.data.info.items_list[this.pages[t][e].key_name].price;this.set_text(a.toString(),e)}this.set_item(this.selected_index%7)}change_page(t,e){if(1===this.pages.length)return;this.clear_arrow_tweens(),Object.keys(this.items).length<7*t||(this.current_page=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.pages[this.current_page].length&&(this.selected_index=this.pages[this.current_page].length-1),Object(c.kill_all_sprites)(this.sprite_group),Object(c.kill_all_sprites)(this.tag_group),Object(c.kill_all_sprites)(this.text_group),Object(c.kill_all_sprites)(this.bg_group),this.unset_item(this.selected_index),this.set_sprites(t),this.check_arrows(),this.change_item(this.selected_index))}next_page(t){if(1===this.pages.length||this.current_page+1===this.pages.length)return;let e=this.current_page+1;this.change_page(e,t)}previous_page(t){if(1===this.pages.length||this.current_page-1<0)return;let e=this.current_page-1;this.change_page(e,t)}change_item(t){this.unset_item(this.selected_index),this.selected_index=t,this.set_item(this.selected_index),this.set_cursor(this.selected_index),this.on_change(this.pages[this.current_page][this.selected_index].key_name)}next_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index+1===this.pages[this.current_page].length?this.current_page+1===this.pages.length?1===this.pages.length?this.change_item(0):this.change_page(0,0):this.next_page(0):this.change_item(this.selected_index+1))}previous_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index-1<0?this.current_page-1<0?1===this.pages.length?this.change_item(this.pages[this.current_page].length-1):this.change_page(this.pages.length-1,this.pages[this.pages.length-1].length-1):this.previous_page(this.pages[this.current_page-1].length-1):this.change_item(this.selected_index-1))}set_item(t){this.game.world.bringToTop(this.sprite_group),this.game.world.bringToTop(this.parent.cursor_manager.group);let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)s[e]=this.game.add.tween(n[e][t].scale).to({x:1.55,y:1.55},p,Phaser.Easing.Linear.None,!0,0,-1,!0);this.tweens={item:s[0],bg:s[1]}}unset_item(t){let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)n[e][t]&&n[e][t].scale.setTo(1,1),s[e]&&(this.game.tweens.remove(s[e]),s[e]=null)}set_cursor(t){this.parent.cursor_manager.move_to(0+32*t,112,"point")}open(t,e=0,i=0,s,n){this.items=t,this.current_page=i,this.selected_index=e,this.is_open=!0,this.make_pages(),this.check_arrows(),this.set_sprites(this.current_page),this.set_cursor(this.selected_index),this.update_group_pos(),this.close_callback=s,this.window.show(n,!1)}close(t=!1){this.unset_item(this.selected_index),Object(c.kill_all_sprites)(this.sprite_group,t),Object(c.kill_all_sprites)(this.tag_group,t),Object(c.kill_all_sprites)(this.text_group,t),Object(c.kill_all_sprites)(this.bg_group,t),this.items=[],this.pages=[],this.selected_index=0,this.current_page=0,this.is_open=!1,this.set_arrows(!1,!1),this.window.close(this.close_callback,!1),this.close_callback=null}}class m{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window=new l.Window(this.game,128,88,108,68),this.text_group=this.window.define_internal_group("texts",{x:8,y:8}),this.arrow_group=this.window.define_internal_group("arrows",{x:65,y:7}),this.cant_equip_text=this.window.set_text_in_position("Can't equip",14,32,!1,!1,this.window.font_color,!1,void 0,!0),this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0,this.atk_label_text=this.init_text_sprite("ATK",0,0,!1),this.def_label_text=this.init_text_sprite("DEF",0,16,!1),this.agi_label_text=this.init_text_sprite("AGL",0,32,!1),this.item_name_text=this.init_text_sprite("",0,48,!1),this.curr_atk_text=this.init_text_sprite("",53,0,!0),this.curr_def_text=this.init_text_sprite("",53,16,!0),this.curr_agi_text=this.init_text_sprite("",53,32,!0),this.new_atk_text=this.init_text_sprite("",93,0,!0),this.new_def_text=this.init_text_sprite("",93,16,!0),this.new_agi_text=this.init_text_sprite("",93,32,!0),this.text_group.alpha=0,this.arrow_group.alpha=0}init_text_sprite(t,e,i,s){let n=this.window.set_text_in_position(t,e,i,s);return this.window.add_to_internal_group("texts",n.shadow),this.window.add_to_internal_group("texts",n.text),n}make_arrow(t,e){if(0===t)return;let i=16*e+(t>0?-1:0),s=t>0?"up_arrow":"down_arrow",n=this.arrow_group.children.filter(t=>!1===t.alive&&t.key===s);n.length>0?n[0].reset(0,i):this.window.create_at_group(0,i,s,void 0,void 0,"arrows")}compare_items(t,e,i){let s=_.mapKeys(this.data.info.items_list[t].effects,t=>t.type),n=_.mapKeys(this.data.info.items_list[e].effects,t=>t.type),a=0,r=0;return s[i]&&(a=s[i].quantity*("minus"===s[i].operator?-1:1)),n[i]&&(r=n[i].quantity*("minus"===n[i].operator?-1:1)),r-a}display_stat(t,e,i){let s=null,n=null,a=0;switch(t){case"attack":s=this.new_atk_text,n=this.curr_atk_text,a=0;break;case"defense":s=this.new_def_text,n=this.curr_def_text,a=1;break;case"agility":s=this.new_agi_text,n=this.curr_agi_text,a=2}s.text.alpha=0===i?0:1,s.shadow.alpha=0===i?0:1,this.window.update_text(String(e),n),0!==i&&(this.window.update_text(String(e+i),s),this.make_arrow(i,a))}change_character(t){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],Object(c.kill_all_sprites)(this.arrow_group),this.show_stat_compare()}show_stat_compare(){if(!this.data.info.items_list[this.selected_item].equipable_chars.includes(this.selected_char.key_name))return void this.show_cant_equip();this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0;let t=this.data.info.items_list[this.selected_item].type,e=null,i=this.selected_char.equip_slots;switch(t){case a.item_types.WEAPONS:i.weapon&&(e=this.data.info.items_list[i.weapon.key_name].key_name);break;case a.item_types.ARMOR:i.body&&(e=this.data.info.items_list[i.body.key_name].key_name);break;case a.item_types.CHEST_PROTECTOR:i.chest&&(e=this.data.info.items_list[i.chest.key_name].key_name);break;case a.item_types.HEAD_PROTECTOR:i.head&&(e=this.data.info.items_list[i.head.key_name].key_name);break;case a.item_types.RING:i.ring&&(e=this.data.info.items_list[i.ring.key_name].key_name);break;case a.item_types.LEG_PROTECTOR:i.boots&&(e=this.data.info.items_list[i.boots.key_name].key_name);break;case a.item_types.UNDERWEAR:i.underwear&&(e=this.data.info.items_list[i.underwear.key_name].key_name)}let s=this.compare_items(e,this.selected_item,"attack"),n=this.compare_items(e,this.selected_item,"defense"),r=this.compare_items(e,this.selected_item,"agility");this.display_stat("attack",this.selected_char.current_atk,s),this.display_stat("defense",this.selected_char.current_def,n),this.display_stat("agility",this.selected_char.current_agi,r),this.window.update_text(this.data.info.items_list[e].name,this.item_name_text);for(let t=0;t<3;t++)this.window.draw_separator(4,19+16*t,108,19+16*t,!1);this.text_group.alpha=1,this.arrow_group.alpha=1}show_cant_equip(){this.text_group.alpha=0,this.arrow_group.alpha=0,this.window.clear_separators(),this.cant_equip_text.text.alpha=1,this.cant_equip_text.shadow.alpha=1}open(t,e,i,s){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.show_stat_compare(),this.is_open=!0,this.close_callback=i,this.window.show(s,!1)}close(t=!1){Object(c.kill_all_sprites)(this.arrow_group,t),t&&Object(c.kill_all_sprites)(this.text_group,t),this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}var y=i(0);const b=y.GAME_HEIGHT-24,f=24-y.OUTSIDE_BORDER_WIDTH-y.INSIDE_BORDER_WIDTH;class w{constructor(t,e,i,s,n,a,r,o=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=s,this.on_cancel=n.on_cancel,this.on_press=n.on_press,this.control_manager=a,this.buttons_number=i.length,this.custom_scale=null;const h=Object(c.get_text_width)(this.game,_.maxBy(s,t=>t.length));this.title_window_width=void 0!==r?r:h+2*(y.WINDOW_PADDING_H+y.INSIDE_BORDER_WIDTH);const d=24*this.buttons_number+this.title_window_width+2*y.OUTSIDE_BORDER_WIDTH+2;this.dock_right=o,this.x=y.GAME_WIDTH-d,this.dock_right||(this.x=this.x>>1),this.y=b,this.title_window=new l.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,f),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null}set_control(){this.control_manager.initialized&&this.control_manager.reset(),this.control_manager.set_control(!0,!1,!0,!1,{right:this.next_button.bind(this),left:this.previous_button.bind(this),esc:this.on_cancel.bind(this),enter:this.on_press.bind(this)})}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(y.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=y.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=parseInt(24*(t+.5)),this.buttons[t].sprite.centerY=parseInt(12)}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}next_button(){this.change_button(1)}previous_button(){this.change_button(-1)}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){let t=1.2,e=1.3;this.custom_scale&&(t=this.custom_scale.active_default,e=this.custom_scale.max_scale),this.buttons[this.selected_button_index].sprite.scale.setTo(t,t),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:e,y:e},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e=0,i=!0,s){let n;this.reset_button(),this.set_control(),this.game.world.bringToTop(this.group),s&&(this.custom_scale=s),this.menu_active=i,this.group.alpha=1,this.selected_button_index=e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,r=new Promise(t=>{n=t});this.title_window.show(n);let _=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([r,_]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.reset_button(),this.control_manager.reset(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.menu_active=!0,this.set_control(),this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.control_manager.reset(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy()}}class v{constructor(t,e,i){this.game=t,this.data=e,this.control_manager=i,this.yes_callback=null,this.no_callback=null,this.buttons_keys=["yes","no"],this.is_open=!1,this.menu=new w(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>Object(c.capitalize)(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},this.control_manager),this.menu.title_window.update_size({width:36})}update_position(t,e){if(void 0!==t){let e=this.menu.title_window.x-this.menu.x;this.menu.x=t,this.menu.title_window.x=t+e}void 0!==e&&(this.menu.y=e,this.menu.title_window.y=e),this.menu.update_position(),this.menu.title_window.send_to_front()}button_press(){switch(this.buttons_keys[this.menu.selected_button_index]){case"yes":this.close_menu(this.yes_callback);break;case"no":this.close_menu(this.no_callback)}}is_active(){return this.menu.menu_active}open_menu(t,e){this.yes_callback=t.yes,this.no_callback=t.no,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.is_open=!0,this.menu.open(void 0,0,!0,{active_default:1.1,max_scale:1.2}),e&&this.update_position(e.x,e.y)}close_menu(t){void 0===t&&(t=this.no_callback),this.is_active()&&(this.menu.close(),this.is_open=!1,t())}}class x{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.already_owned=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.already_owned_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.internal_group.add(this.already_owned_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.create_grid()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=this.already_owned;t<this.already_owned+this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=0;t<this.already_owned;++t){this.already_owned_bar_graphics.lineStyle(1,16711680);const e=2*t+1;this.already_owned_bar_graphics.moveTo(e,0),this.already_owned_bar_graphics.lineTo(e,6)}for(let t=30;t>this.available_items_count+this.already_owned;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e,i){this.clear(),this.current_quantity=e,this.available_items_count=t,this.already_owned=i,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear(),this.already_owned_bar_graphics.clear(),this.current_quantity=1,this.available_items_count=0,this.already_owned=0}activate(){this.active=!0}deactivate(){this.active=!1}}class k{constructor(t,e,i){this.game=t,this.data=e,this.cursor_manager=i,this.close_callback=null,this.window=new l.Window(this.game,56,32,180,20),this.item_counter=new x(this.game,this.window.group,8,8,this.on_change.bind(this)),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.quantity_text=this.window.set_text_in_position(String(this.chosen_quantity),93,8,!0),this.coins_val_text=this.window.set_text_in_position("",141,8,!0),this.coins_label_text=this.window.set_text_in_position("Coins",144,8)}on_change(t){this.chosen_quantity=t,this.window.update_text(String(this.chosen_quantity),this.quantity_text),this.window.update_text(String(this.base_price*this.chosen_quantity),this.coins_val_text)}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}open(t,e,i,s){this.cursor_manager.move_to(132,46,"wiggle"),this.base_price=this.data.info.items_list[t.key_name].price,this.window.update_text(String(this.base_price),this.coins_val_text);let n=e?e.quantity:0,a=-1===t.quantity?30:t.quantity;a+n>30&&(a=30-n),this.item_counter.config(a,this.chosen_quantity,n),this.is_open=!0,this.close_callback=i,this.window.show(s,!1)}close(){this.item_counter.deactivate(),this.item_counter.clear(),this.cursor_manager.clear_tweens(),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}const E=Phaser.Timer.QUARTER>>1;class j{constructor(t,e,i,s){this.game=t,this.data=e,this.parent=i,this.on_change=s,this.close_callback=null,this.window=new l.Window(this.game,0,112,100,20),this.char_group=this.game.add.group(),this.char_group.x=0,this.char_group.y=96,this.char_group.alpha=1,this.arrow_group=this.game.add.group(),this.arrow_group.x=96,this.arrow_group.y=100,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,24,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[],this.lines=[],this.current_line=0,this.selected_index=0,this.is_active=!1,this.is_open=!1}update_group_pos(){this.char_group.x=0+this.game.camera.x,this.char_group.y=96+this.game.camera.y,this.arrow_group.x=96+this.game.camera.x,this.arrow_group.y=100+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=24,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_line<this.lines.length-1&&(e=!0),this.current_line>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},E,Phaser.Easing.Linear.None).to({y:20},E,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:32},E,Phaser.Easing.Linear.None).to({y:24},E,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_chars(){for(let t=0;t<this.lines[this.current_line].length;++t){let e=this.lines[this.current_line][t],i=null,s=this.char_group.children.filter(t=>!1===t.alive&&t.key===e.sprite_base.getActionKey(c.base_actions.IDLE));i=s.length>0?s[0].reset(24*t,0):this.char_group.create(24*t,0,e.sprite_base.getActionKey(c.base_actions.IDLE)),e.sprite_base.setAnimation(i,c.base_actions.IDLE),i.animations.play(e.sprite_base.getAnimationKey(c.base_actions.IDLE,c.reverse_directions[c.directions.down]))}}make_lines(){let t=this.data.info.party_data.members.length,e=t%4==0?t/4|0:1+(t/4|0);for(let t=0;t<e;t++){let e=[];for(let i=4*t;i<4*(t+1)&&this.data.info.party_data.members[i];i++)e.push(this.data.info.party_data.members[i]);this.lines[t]=e}}change_line(t,e){this.clear_arrow_tweens(),this.data.info.party_data.members.length<4*t||(this.current_line=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.lines[this.current_line].length&&(this.selected_index=this.lines[this.current_line].length-1),c.kill_all_sprites(this.char_group),this.set_chars(),this.check_arrows(),this.select_char(this.selected_index))}next_line(t){if(1===this.lines.length||this.current_line+1===this.lines.length)return;let e=this.current_line+1;this.change_line(e,t)}previous_line(t){if(1===this.lines.length||this.current_line-1<0)return;let e=this.current_line-1;this.change_line(e,t)}select_char(t){this.selected_index=t,this.parent.cursor_manager.move_to(0+24*t,118,"wiggle");let e=this.data.info.party_data.members[4*this.current_line+this.selected_index];this.on_change(e.key_name)}next_char(){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index+1===this.lines[this.current_line].length?this.current_line+1===this.lines.length?1===this.lines.length?this.select_char(0):this.change_line(0,0):this.next_line(0):this.select_char(this.selected_index+1))}previous_char(){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index-1<0?this.current_line-1<0?1===this.lines.length?this.select_char(this.lines[this.current_line].length-1):this.change_line(this.lines.length-1,this.lines[this.lines.length-1].length-1):this.previous_line(this.lines[this.current_line-1].length-1):this.select_char(this.selected_index-1))}activate(){this.parent.cursor_manager.move_to(0+24*this.selected_index,118,"wiggle"),this.is_active=!0}deactivate(){this.parent.cursor_manager.clear_tweens(),this.is_active=!1}open(t=0,e,i){this.selected_index=t,this.current_line=0,this.make_lines(),this.update_group_pos(),this.check_arrows(),this.set_chars(),this.char_group.alpha=1,this.is_open=!0,this.close_callback=e,this.activate(),this.window.show(i,!1)}close(t=!1){this.is_open=!1,this.deactivate(),c.kill_all_sprites(this.char_group,t),this.lines=[],this.line_index=0,this.selected_index=0,this.is_active=!1,this.is_open=!1,this.char_group.alpha=0,this.set_arrows(!1,!1),this.window.close(this.close_callback,!1),this.close_callback=null}}const T=Phaser.Timer.QUARTER>>1,A=Phaser.Timer.QUARTER>>1;class S{constructor(t){this.game=t,this.group=this.game.add.group(),this.group.alpha=1,this.group.x=0,this.group.y=0,this.cursor=this.group.create(0,0,"cursor"),this.active_tween=null,this.current_tween=null,this.cursor.default_pos={x:0,y:0}}clear_tweens(){this.active_tween&&this.game.tweens.remove(this.active_tween),this.active_tween=null,this.cursor.x=this.cursor.default_pos.x,this.cursor.y=this.cursor.default_pos.y}init_tween(t){switch(this.clear_tweens(),t){case"wiggle":this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+-4,y:this.cursor.y+4},T,Phaser.Easing.Linear.None).to({x:this.cursor.x+-8,y:this.cursor.y+0},T,Phaser.Easing.Linear.None).to({x:this.cursor.x+-4,y:this.cursor.y+4},T,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},T,Phaser.Easing.Linear.None).loop();break;case"point":this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+-6,y:this.cursor.y+6},T,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},T,Phaser.Easing.Linear.None).loop()}this.current_tween=t,this.active_tween&&this.active_tween.start()}move_to(t,e,i,s=!0){if(this.group.visible||this.show(),this.cursor.default_pos={x:t+this.game.camera.x,y:e+this.game.camera.y},this.game.world.bringToTop(this.cursor.parent),s){let s=this.game.add.tween(this.cursor).to({x:t+this.game.camera.x,y:e+this.game.camera.y},A,Phaser.Easing.Linear.None,!0);void 0!==i&&s.onComplete.addOnce(this.init_tween.bind(this,i),this)}else this.cursor.x=t+this.game.camera.x,this.cursor.y=e+this.game.camera.y,void 0!==i&&this.init_tween(i)}hide(){this.group.visible=!1}show(){this.group.visible=!0}destroy(){this.group.remove(this.cursor,!0),this.group=null,this.cursor=null,this.active_tween=null}}const O=Phaser.Timer.QUARTER>>1,I=["left","right","up","down"],P=["spacebar","esc","enter","shift"];class R{constructor(t){this.game=t,this.disabled=!1,this.initialized=!1,this.directions=[{key:"left",pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.LEFT},{key:"right",pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.RIGHT},{key:"up",pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.UP},{key:"down",pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.DOWN}],this.actions=[{key:"spacebar",callback:null,phaser_key:Phaser.Keyboard.SPACEBAR},{key:"esc",callback:null,phaser_key:Phaser.Keyboard.ESC},{key:"enter",callback:null,phaser_key:Phaser.Keyboard.ENTER},{key:"shift",callback:null,phaser_key:Phaser.Keyboard.SHIFT}],this.directions=_.mapKeys(this.directions,t=>t.key),this.actions=_.mapKeys(this.actions,t=>t.key),this.signal_bindings=[],this.loop_start_timer=this.game.time.create(!1),this.loop_repeat_timer=this.game.time.create(!1)}get_opposite_dir(t){switch(t){case"right":return"left";case"left":return"right";case"up":return"down";case"down":return"up"}}set_control(t,e,i=!0,s=!1,n){this.initialized&&this.reset(),t&&(i||(this.directions.left.loop=!1,this.directions.right.loop=!1),this.directions.left.callback=n.left,this.directions.right.callback=n.right),e&&(s||(this.directions.up.loop=!1,this.directions.down.loop=!1),this.directions.up.callback=n.up,this.directions.down.callback=n.down),n.enter&&(this.actions.enter.callback=n.enter),n.esc&&(this.actions.esc.callback=n.esc),n.shift&&(this.actions.shift.callback=n.shift),n.spacebar&&(this.actions.spacebar.callback=n.spacebar),this.set_directions(),this.set_actions()}set_directions(){let t=Object.keys(this.directions).length;for(let e=0;e<t;e++)if(this.directions[I[e]].callback)if(this.directions[I[e]].loop){let t=this.game.input.keyboard.addKey(this.directions[I[e]].phaser_key).onDown.add(()=>{this.disabled||(this.directions[this.get_opposite_dir(I[e])].pressed&&(this.directions[this.get_opposite_dir(I[e])].pressed=!1,this.stop_timers()),this.directions[I[e]].pressed=!0,this.set_loop_timers(I[e]))}),i=this.game.input.keyboard.addKey(this.directions[I[e]].phaser_key).onUp.add(()=>{this.disabled||(this.directions[I[e]].pressed=!1,this.stop_timers())});this.signal_bindings.push(t),this.signal_bindings.push(i)}else{let t=this.game.input.keyboard.addKey(this.directions[I[e]].phaser_key).onDown.add(()=>{this.disabled||this.directions[I[e]].callback()});this.signal_bindings.push(t)}this.initialized||(this.initialized=!0)}set_actions(){let t=Object.keys(this.actions).length;for(let e=0;e<t;e++)if(this.actions[P[e]].callback){let t=this.game.input.keyboard.addKey(this.actions[P[e]].phaser_key).onDown.add(()=>{this.disabled||this.actions[P[e]].callback()});this.signal_bindings.push(t)}this.initialized||(this.initialized=!0)}set_loop_timers(t){this.change_index(t),this.loop_start_timer.add(Phaser.Timer.QUARTER,()=>{this.loop_repeat_timer.loop(O,this.change_index.bind(this,t)),this.loop_repeat_timer.start()}),this.loop_start_timer.start()}change_index(t){this.directions[t].callback()}stop_timers(){this.loop_start_timer.stop(),this.loop_repeat_timer.stop()}disable(){this.disabled=!0,this.stop_timers()}enable(){this.disabled=!1}reset(){let t=Object.keys(this.directions).length,e=Object.keys(this.actions).length;for(let e=0;e<t;e++)this.directions[I[e]].pressed=!1,this.directions[I[e]].loop=!0,this.directions[I[e]].callback=null;for(let t=0;t<e;t++)this.actions[P[t]].callback=null;this.signal_bindings.forEach(t=>{t.detach()}),this.signal_bindings=[],this.initialized&&(this.initialized=!1)}destroy(){this.loop_start_timer.destroy(),this.loop_repeat_timer.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}class M{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.close_callback=null,this.items_db=this.data.info.items_list,this.shops_db=_.mapKeys(this.data.dbs.shops_db,t=>t.key_name),this.shopkeep_dialog_db=this.data.dbs.shopkeep_dialog_db,this.normal_item_list=[],this.artifact_list=[],this.buttons_keys=["buy","sell","artifacts","repair"],this.windows_mode="buy",this.current_index=0,this.cursor_manager=new S(this.game),this.control_manager=new R(this.game),this.horizontal_menu=new w(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>Object(c.capitalize)(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},this.control_manager),this.npc_dialog=new n(this.game,this.data,this),this.yesno_action=new v(this.game,this.data,this.control_manager),this.inv_win=new d(this.game,this.data,this,this.on_inv_win_change.bind(this)),this.buy_select=new g(this.game,this.data,this,this.on_buy_select_change.bind(this)),this.eq_compare=new m(this.game,this.data),this.quant_win=new k(this.game,this.data,this.cursor_manager),this.char_display=new j(this.game,this.data,this,this.on_char_display_change.bind(this)),this.item_price_win=new l.Window(this.game,0,64,116,28),this.your_coins_win=new l.Window(this.game,144,56,92,28),this.item_desc_win=new l.Window(this.game,0,136,236,20),this.buy_menu=new r(this.game,this.data,this),this.sell_menu=new h(this.game,this.data,this),this.your_coins_label=this.your_coins_win.set_text_in_position("Your Coins: ",8,8),this.your_coins_text=this.your_coins_win.set_text_in_position("",85,16,!0),this.item_name_text=this.item_price_win.set_text_in_position("",8,8),this.item_price_label=this.item_price_win.set_text_in_position("Price",8,16),this.item_price_val_text=this.item_price_win.set_text_in_position("",77,16,!0),this.item_price_coins_label=this.item_price_win.set_text_in_position("Coins",80,16),this.item_desc_text=this.item_desc_win.set_text_in_position("",8,8)}on_char_display_change(t){this.eq_compare.is_open&&this.eq_compare.change_character(t),this.inv_win.is_open&&this.inv_win.change_character(t)}on_inv_win_change(t,e){if(this.item_price_win.open&&this.sell_menu.active){let i=this.sell_menu.is_repair_menu,s=this.inv_win.item_grid[t][e];if(s){let t=this.data.info.items_list[s.key_name].price,e=this.data.info.items_list[s.key_name].important_item,n=t;n=i?t*(1/4)|0:t*(s.broken?.5:3/4)|0,this.update_item_info(s.key_name,n,i?!s.broken:e,!i||s.broken,e)}}}on_buy_select_change(t){this.update_item_info(t)}set_item_lists(){this.normal_item_list=[],this.artifact_list=[];let t=this.shops_db[this.shop_key].item_list;for(let e=0;e<t.length;e++){let i=this.items_db[t[e].key_name];0!==t[e].quantity&&(!0===i.rare_item?this.artifact_list.push(i):this.normal_item_list.push(i))}this.normal_item_list=_.mapKeys(this.normal_item_list,t=>t.key_name),this.artifact_list=_.mapKeys(this.artifact_list,t=>t.key_name)}update_your_coins(){this.your_coins_win.update_text(String(this.data.info.party_data.coins),this.your_coins_text)}update_item_info(t,e,i=!1,s=!1,n=!1){let a=this.data.info.items_list[t];this.item_desc_win.update_text(a.description,this.item_desc_text),this.item_price_win.update_text(a.name,this.item_name_text);let r=i?"":"Coins";this.item_price_win.update_text(r,this.item_price_coins_label);let _="Price";i&&!s?_="It's not broken.":i&&n&&(_="We can't buy that."),this.item_price_win.update_text(_,this.item_price_label);let o=e||a.price,h=i?"":o;this.item_price_win.update_text(h,this.item_price_val_text)}alternate_window_pos(t){this.windows_mode!==t&&("buy"===t?(this.item_price_win.update_position({x:0,y:64}),this.item_desc_win.update_position({x:0,y:136}),this.your_coins_win.update_position({x:144,y:56}),this.windows_mode="buy"):(this.item_price_win.update_position({x:120,y:64}),this.item_desc_win.update_position({x:0,y:40}),this.your_coins_win.update_position({x:0,y:72}),this.windows_mode="sell"))}button_press(){switch(this.horizontal_menu.deactivate(!0),this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"buy":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!1);break;case"sell":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!1);break;case"artifacts":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!0);break;case"repair":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!0)}this.npc_dialog.is_active||this.npc_dialog.close_dialog()}update_position(){this.npc_dialog.update_position(),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_horizontal_menu(t="cancel_option"){this.npc_dialog.is_active?this.npc_dialog.update_dialog(t):this.npc_dialog.open(this.shop_key),this.horizontal_menu.open(void 0,this.current_index)}open_menu(t,e){this.shop_key=t,this.close_callback=e,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.set_item_lists(),this.data.shop_open=!0,this.open_horizontal_menu()}end_dialog(){this.shop_key=null,this.npc_dialog.close(),this.data.shop_open=!1,this.control_manager.reset(),this.close_callback(),this.close_callback=null}close_menu(){this.is_active()&&(this.horizontal_menu.close(),this.npc_dialog.update_dialog("goodbye"),this.normal_item_list=[],this.artifact_list=[],this.current_index=0,this.control_manager.reset(),this.control_manager.actions.enter.callback=this.end_dialog.bind(this),this.control_manager.set_actions())}}},function(t,e,i){"use strict";i.r(e),i.d(e,"ItemOptionsWindow",(function(){return g}));var s=i(3),n=i(0),a=i(8);class r{constructor(t,e,i,n){this.game=t,this.data=e,this.base_window=new s.Window(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.answer_index=0,this.dropped=!1,this.cursor_control=new a.CursorControl(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,this.dropped)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.on_choose())},this,this.enter_propagation_priority)}get_cursor_x(){return 16}get_cursor_y(){return 5+(this.answer_index?62:46)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_choose(){0===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close(this.close_callback.bind(this,this.dropped))}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.quantity_to_remove=s,this.answer_index=0,this.cursor_control.activate(),this.set_info(),this.update_position(),this.dropped=!1,this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)}close(t){this.cursor_control.deactivate(),this.unset_info(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}}var _=i(31);const o=16+n.FONT_SIZE,h=o+n.FONT_SIZE;class c{constructor(t,e,i,n){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.choosen_quantity=1,this.item_counter=new _.ItemCounter(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,h,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,h,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_quantity=0,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback))},this,this.enter_propagation_priority)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,o),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,o)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,n,a){if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=n,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)}close(t){this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}const l=8+n.FONT_SIZE,d=l+n.FONT_SIZE;class p{constructor(t,e,i,n){this.game=t,this.data=e,this.esc_propagation_priority=i,this.enter_propagation_priority=n,this.base_window=new s.Window(this.game,104,0,132,36),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.group=this.game.add.group(),this.answer_index=0,this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.cursor_control=new a.CursorControl(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,!1,!1)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback.bind(this,!0,0===this.answer_index)))},this,this.enter_propagation_priority)}get_cursor_x(){return 96}get_cursor_y(){return 5+(this.answer_index?24:8)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,l),this.choosing_char?this.action_text=this.base_window.set_text_in_position("Give it to whom?",27,d):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.action_text=this.base_window.set_text_in_position("Equip this item?",8,d)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.base_window.remove_text(this.action_text),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}open(t,e,i,s,n,a,r){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=s,this.asking_for_equip=n,this.answer_index=0,this.asking_for_equip&&this.cursor_control.activate(),this.set_header(),this.update_position(),this.close_callback=a,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==r&&r()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}active(){this.window_active=!0,this.cursor_control.activate()}deactive(){this.window_active=!1,this.cursor_control.deactivate()}}const u=8+n.FONT_SIZE;class g{constructor(t,e,i,_){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+n.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+n.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+n.FONT_SIZE)},this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.horizontal_index=0,this.vertical_index=0,this.esc_propagation_priority=i+1,this.enter_propagation_priority=_+1,this.cursor_control=new a.CursorControl(this.game,!0,!0,()=>3,()=>2,this.group,this.on_change.bind(this),this.on_change.bind(this),this.get_horizontal_index.bind(this),this.set_horizontal_index.bind(this),this.get_vertical_index.bind(this),this.set_vertical_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.give_item_options_window=new p(this.game,this.data,this.esc_propagation_priority+2,this.enter_propagation_priority+2),this.item_quantity_manager_window=new c(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.drop_item_window=new r(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.action_message_window=new s.Window(this.game,122,66,67,20),this.set_control()}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}is_open(){return this.window_open}is_active(){return this.window_active}get_cursor_x(){return 8+40*this.horizontal_index-15}get_cursor_y(){return 32+n.FONT_SIZE*this.vertical_index+4}get_vertical_index(){return this.vertical_index}set_vertical_index(t){this.vertical_index=t}get_horizontal_index(){return this.horizontal_index}set_horizontal_index(t){this.horizontal_index=t}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.action_message_window.open?this.action_message_window.close():this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.action_message_window.open?this.action_message_window.close():this.on_choose())},this,this.enter_propagation_priority)}set_available_options(){!this.item.use_ability||this.item.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.important_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,u),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.cursor_control.deactivate(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()})}on_choose(){if(0===this.horizontal_index)1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,!0,!1),this.give_item_options_window.deactive(),this.on_give_callback((t,e,i)=>{if(null===t)this.give_item_options_window.close(),this.activate();else if(t.key_name!==this.char.key_name){this.give_item_options_window.close();let s={key_name:this.item_obj.key_name,equipped:!1,quantity:this.item_obj.quantity};this.item.equipable_chars.includes(t.key_name)?this.give_item_options_window.open(s,this.item,t,!1,!0,(e,n)=>{e?(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,n),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())}):this.item_obj.quantity>1?this.item_quantity_manager_window.open(s,this.item,this.char,e=>{e>0?(this.activate(),s.quantity=e,this.char.remove_item(this.item_obj,e),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())},t):(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})),e()}}));else if(1===this.horizontal_index)0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}));else if(2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop){this.deactivate();let t=(t=1)=>{this.drop_item_window.open(this.item_obj,this.item,this.char,t,t=>{this.activate(),t&&this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})})};this.item_obj.quantity>1?this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,e=>{e>0?t(e):this.activate()}):t()}}on_change(){this.stats_window.hide_arrows(),this.stats_window.show(),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open(t,e,i,s,n,a,r,_){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.cursor_control.activate(),this.on_give_callback=n,this.close_callback=a,this.stats_update_callback=r,this.update_position(),this.set_header(),this.set_available_options(),this.on_change(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==_&&_()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.cursor_control.activate(),this.window_active=!0}deactivate(){this.unset_header(),this.cursor_control.deactivate(),this.window_active=!1}}},function(t,e,i){"use strict";i.r(e),i.d(e,"DjinnListWindow",(function(){return E}));var s=i(3),n=i(2),a=i(8),r=i(0),_=i(1);const o=[32,99],h=[21,37],c=[16,117],l=[34,34];class d{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=Object(_.capitalize)(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(n.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(n.djinn_font_colors[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(n.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(n.djinn_font_colors[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+r.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+r.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,n;["Trade","Give"].includes(this.action_text)?(s=o[t],n=h[t]):(s=32,n=31);const a=e.sprite_base.getActionKey(_.base_actions.IDLE),r=this.base_window.create_at_group(c[t],l[t],a);r.anchor.setTo(.5,1);const d=e.sprite_base.getAnimationKey(_.base_actions.IDLE,_.reverse_directions[_.directions.down]);if(r.animations.add(d,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),r.animations.play(d,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(r),"Give"===this.action_text&&1===t)break;const p=this.group.create(s,n,i.element+"_djinn_"+i.status);if(p.anchor.setTo(.5,1),p.scale.x=-.8,p.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(p,i.status),p.animations.play(i.status+"_down"),this.djinn_sprites.push(p),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,a=33*e,r=5*-e,_=this.game.add.tween(p).to({y:[n,n+r,n+r,n],x:[s,s+i,s+i+a,s+i+a+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);_.repeatDelay(300),this.tweens.push(_)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,n){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const p=["HP","PP","Attack","Defense","Agility","Luck"],u=["max_hp","max_pp","atk","def","agi","luk"],g=_.ordered_elements.slice().reverse();class m{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.base_window=new s.Window(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),this.djinn_number_texts={},g.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),this.stats_current_texts={},this.stats_next_texts={},p.forEach((t,e)=>{const i=64+e*r.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),g.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(u,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),p.forEach((t,i)=>{const s=this.char[u[i]],n=e[u[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(n.toString(),this.stats_next_texts[t]);const a=64+i*r.FONT_SIZE-3;let _=0;if(["HP","PP"].includes(t)&&(_=-8),s!==n){const t=this.base_window.create_at_group(78+_,a,"stat_"+(n>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,n){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}const y=r.YELLOW_FONT_COLOR,b=r.RED_FONT_COLOR,f=97+r.FONT_SIZE;class w{constructor(t,e,i,n,a){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.spacebar_propagation_priority=a+1,this.base_window=new s.Window(this.game,120,40,116,116),this.base_window.init_page_indicator_bar(),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,f),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.execute_operation=!1,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.execute_operation=!0,this.close(this.close_callback))},this,this.enter_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.window_open&&this.change_page(1)}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.window_open&&this.change_page(-1)}),this.data.spacebar_input.add(()=>{this.window_open&&(this.data.spacebar_input.halt(),void 0!==this.spacebar_callback&&this.spacebar_callback())},this,this.spacebar_propagation_priority)}set_page_number(){const t=this.all_abilities.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(r.ICON_HEIGHT+2),n=i+(r.ICON_WIDTH>>1),a=s+(r.ICON_HEIGHT>>1),_=8+r.ICON_WIDTH+2,o=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,_,s+4);this.text_sprites_in_window.push(o),this.icon_sprites_in_window.push(this.base_window.create_at_group(n,a,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const h=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(h),this.gained_abilities.includes(e)?(this.base_window.update_text_color(y,o),this.base_window.update_text_color(y,h)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(b,o),this.base_window.update_text_color(b,h))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(r.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(y,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(b,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(y,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(b,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.unset_page_indicator(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,n=!1,a,r,_){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.spacebar_callback=a,this.action=r,n?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==_&&_()},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}const v=0,x=1,k=2;class E{constructor(t,e,i,n,r,_){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.shift_propagation_priority=r+1,this.spacebar_propagation_priority=_+1,this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.close_callback=null,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.cursor_control=new a.CursorControl(this.game,!0,!0,this.get_max_chars.bind(this),this.get_max_djinn.bind(this),this.group,this.on_char_change.bind(this),this.on_djinn_change.bind(this),this.get_char_index.bind(this),this.set_char_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_x_cursor.bind(this),this.get_y_cursor.bind(this)),this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new d(this.game,this.data),this.djinn_char_stats_window_left=new m(this.game),this.djinn_char_stats_window_right=new m(this.game,120),this.djinn_psynergy_window=new w(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.spacebar_propagation_priority),this.init_djinn_sprites(),this.init_djinni_status_texts(),this.set_control()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&this.setting_djinn_status&&(this.data.esc_input.halt(),this.cancel_djinn_status_set(!0))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.setting_djinn_status?this.set_djinn_operation():this.on_choose())},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.setting_djinn_status&&(this.data.shift_input.halt(),this.change_djinn_status(this.selected_char_index,this.selected_djinn_index))},this,this.shift_propagation_priority)}get_x_cursor(){return 16+56*this.selected_char_index-14}get_y_cursor(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?24-r.FONT_SIZE:24+this.selected_djinn_index*r.FONT_SIZE+3}is_open(){return this.window_open}is_active(){return this.window_active}get_char_index(){return this.selected_char_index}set_char_index(t){this.selected_char_index=t}get_djinn_index(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.setting_djinn_status_djinn_index:this.selected_djinn_index}set_djinn_index(t){this.selected_djinn_index=t}get_max_chars(){return this.sizes.length}get_max_djinn(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?1:this.sizes[this.selected_char_index]}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in _.elements){const i=_.elements[e];if(i===_.elements.NO_ELEMENT)continue;const s=50+56*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+56*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,r;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case n.djinn_status.RECOVERY:r="left";case n.djinn_status.STANDBY:r="down",a="standby";break;case n.djinn_status.SET:r="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+r)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(_.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],_.base_actions.IDLE)}const n=i.sprite_base.getAnimationKey(_.base_actions.IDLE,_.reverse_directions[_.directions.down]);this.chars_sprites[s].animations.play(n);const a=32+56*t;this.chars_sprites[s].x=a,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let a=0;a<e.length;++a){const _=this.data.info.djinni_list[e[a]],o=17+56*t,h=25+a*r.FONT_SIZE;s.push(this.base_window.create_at_group(o,h,_.element+"_star"));const c=24+56*t,l=24+a*r.FONT_SIZE;let d;switch(_.status){case n.djinn_status.SET:d=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:d=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:d=n.djinn_font_colors[n.djinn_status.RECOVERY]}const p=this.base_window.set_text_in_position(_.name,c,l,!1,!1,d);i.push(p)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+56*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*r.FONT_SIZE),this.setting_djinn_status&&this.selected_char_index!==this.setting_djinn_status_char_index?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+56*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*r.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(t,e){this.selected_char_index=e,this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.cursor_control.set_cursor_position()),this.set_highlight_bar();const i=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(i),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(t,e){this.selected_djinn_index=e,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==n.djinn_status.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=r.FONT_SIZE;for(let t=0;t<4;++t)for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=r.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case n.djinn_status.SET:s=Object(_.capitalize)(n.djinn_status.STANDBY);break;case n.djinn_status.STANDBY:s=Object(_.capitalize)(n.djinn_status.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;e.djinni.length<t.djinni.length?(s="Give",++this.sizes[i]):s="Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.cursor_control.set_cursor_position()}}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?Object(_.change_brightness)(n.djinn_font_colors[s.status],.7):n.djinn_font_colors[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=r.FONT_SIZE;for(let t=0;t<4;++t){for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=r.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.set_cursor_position()}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,r,_,o,h;this.selected_djinn_index===i.djinni.length?(s=[e.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?"irrelevant":e.status],r=[e],_=[e],o="Give"):(h=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[h.status===n.djinn_status.STANDBY?"irrelevant":h.status,e.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?"irrelevant":e.status,h.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],r=[h,e],_=[e,h],o="Trade"),this.djinn_char_stats_window_left.open(t,r,s,o),this.djinn_char_stats_window_right.open(i,_,a,o),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],_,s,o),this.deactivate(),this.view_state=v,this.djinn_psynergy_window.open(t,r,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s&&("Trade"===o?(t.replace_djinn(e.key_name,h.key_name),i.replace_djinn(h.key_name,e.key_name)):"Give"===o&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>k&&(this.view_state=v),this.view_state){case v:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case x:this.djinn_psynergy_window.update_info(t,r,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case k:this.djinn_psynergy_window.update_info(i,_,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},o)}else{let i;switch(e.status){case n.djinn_status.SET:i=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:i=n.djinn_status.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t&&(this.change_djinn_status(this.setting_djinn_status_char_index,this.setting_djinn_status_djinn_index),this.cancel_djinn_status_set()),this.activate()})}}change_djinn_status(t,e){const i=this.data.info.party_data.members[t],s=this.data.info.djinni_list[i.djinni[e]];s.status===n.djinn_status.SET?(s.set_status(n.djinn_status.STANDBY,i),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.STANDBY],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):s.status===n.djinn_status.STANDBY&&(s.set_status(n.djinn_status.SET,i),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.SET],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.activate(),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.base_window.show(void 0,!1),s&&s()}close(t){this.window_open=!1,this.window_active=!1,this.cursor_control.deactivate(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),t&&t()}activate(){this.window_active=!0,this.cursor_control.activate()}deactivate(){this.window_active=!1,this.cursor_control.deactivate()}}},function(t,e,i){"use strict";i.r(e),i.d(e,"initialize_shops",(function(){return n}));class s{constructor(t,e,i,s){this.key_name=t,this.dialog_key=e,this.avatar_key=i,this.item_list=s}}function n(t,e){let i={};for(let t=0;t<e.length;++t){const n=e[t];i[n.key_name]=new s(n.key_name,n.dialog_key,n.avatar_key,n.item_list)}return t.load.start(),i}},function(t,e,i){"use strict";i.r(e),i.d(e,"DjinnWindow",(function(){return h}));var s=i(3),n=i(8),a=i(2),r=i(0);const _=["max_hp","max_pp","atk","def","agi","luk"];class o{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<_.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*r.FONT_SIZE),this.before_stats[_[t]]=this.base_window.set_text_in_position("",78,16+t*r.FONT_SIZE,!0),this.after_stats[_[t]]=this.base_window.set_text_in_position("",126,16+t*r.FONT_SIZE,!0),this.up_arrows[_[t]]=this.base_window.create_at_group(80,15+t*r.FONT_SIZE,"stat_up"),this.down_arrows[_[t]]=this.base_window.create_at_group(80,15+t*r.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-r.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<_.length;++t)this.down_arrows[_[t]].alpha=0,this.up_arrows[_[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(_,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<_.length;++e){const i=_[e],s=this.char[i],n=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(n.toString(),this.after_stats[i]),s>n?this.down_arrows[i].alpha=1:s<n&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}class h{constructor(t,e,i,a,r){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.shift_propagation_priority=r+1,this.base_window=new s.Window(this.game,160,72,76,84),this.base_window.init_page_indicator_bar(),this.stats_window=new o(this.game,this.data),this.group=this.game.add.group(),this.button=this.group.create(140,136,"buttons","djinni"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.djinn_names=[],this.stars_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_djinn.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active||this.psynergy_window_open)return;this.data.enter_input.halt();const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==a.djinn_status.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.shift_input.halt(),this.cursor_control.deactivate(),this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0)},this,this.shift_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onUp.add(()=>{this.window_open&&this.window_active&&this.psynergy_window_open&&(this.cursor_control.activate(),this.psynergy_window.close(),this.psynergy_window_open=!1)})]}get_cursor_x(){return 154}get_cursor_y(){return 84+16*this.djinn_index}is_open(){return this.window_open}is_active(){return this.window_active&&!this.psynergy_window_open}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_djinn_index(){return this.djinn_index}set_djinn_index(t){this.djinn_index=t}get_max_elem_on_page(){return this.djinni.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case a.djinn_status.SET:this.set_description(t.description);break;case a.djinn_status.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case a.djinn_status.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(t,e){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.cursor_control.set_cursor_position()),this.call_set_description(),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.update_stats()}change_djinn(t,e){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let n;switch(this.stars_sprites.push(s),e.status){case a.djinn_status.SET:n=a.djinn_font_colors[a.djinn_status.SET];break;case a.djinn_status.STANDBY:n=a.djinn_font_colors[a.djinn_status.STANDBY];break;case a.djinn_status.RECOVERY:n=a.djinn_font_colors[a.djinn_status.RECOVERY]}const r=this.base_window.set_text_in_position(e.name,17,i,!1,!1,n);if(this.djinn_names.push(r),e.status===a.djinn_status.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,a.djinn_font_colors[a.djinn_status.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=parseInt((t-1)/5)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case a.djinn_status.SET:t=a.djinn_status.STANDBY;break;case a.djinn_status.STANDBY:t=a.djinn_status.SET;break;case a.djinn_status.RECOVERY:t=a.djinn_status.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.call_set_description(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.stats_window.open(this.char),this.update_stats(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";i.r(e),i.d(e,"SummonWindow",(function(){return d}));var s=i(3),n=i(8),a=i(0),r=i(2),o=i(1);class h{constructor(t){this.game=t,this.base_window=new s.Window(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<o.ordered_elements.length;++t){const e=o.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<o.ordered_elements.length;++t){const e=o.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}var c=i(14),l=i(11);class d{constructor(t,e,i,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.base_window=new s.Window(this.game,104,88,132,68),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(80,136,"buttons","summon"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.summon_names=[],this.other_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_summon.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_summon_index.bind(this),this.set_summon_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.djinn_numbers_window=new h(t)}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 98}get_cursor_y(){return 100+16*this.summon_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_summon_index(){return this.summon_index}set_summon_index(t){this.summon_index=t}get_max_elem_on_page(){return this.summons.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let n=a.DEFAULT_FONT_COLOR;this.summons[t].available||(n=a.RED_FONT_COLOR);const r=this.base_window.set_text_in_position(e.name,28,i,!1,!1,n);this.summon_names.push(r)}}set_page_number(){const t=this.all_summons.length;this.page_number=parseInt((t-1)/4)+1,this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.standby_djinni=r.Djinn.get_standby_djinni(this.data.info.djinni_list,l.MainChar.get_active_players(this.data.info.party_data,c.MAX_CHARS_IN_BATTLE));for(let t in this.standby_djinni)this.standby_djinni[t]-=this.djinni_already_used[t];this.all_summons=_.map(this.data.dbs.summons_db,t=>{const e=_.every(t.requirements,(t,e)=>t<=this.standby_djinni[e]);return Object.assign({},t,{available:e,index:e?-t.index:t.index})}),this.all_summons=_.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.group.alpha=1,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.djinn_numbers_window.open(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy(),this.djinn_numbers_window.destroy()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,